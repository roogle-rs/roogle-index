{"root":"0:0:2434","crate_version":"1.8.0","includes_private":false,"index":{"0:267:2231":{"id":"0:267:2231","crate_id":0,"name":"get_version","span":{"filename":"src/lib.rs","begin":[566,4],"end":[580,5]},"visibility":"public","docs":"Returns the version of the UUID.\n\nThis represents the algorithm used to generate the value.\nIf the version field doesn't contain a recognized version then `None`\nis returned. If you're trying to read the version for a future extension\nyou can also use [`Uuid::get_version_num`] to unconditionally return a\nnumber. Future extensions may start to return `Some` once they're\nstandardized and supported.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Version};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Some(Version::Md5), my_uuid.get_version());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version_num`":"0:266:2222"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:3102":{"id":"0:192:3102","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[649,4],"end":[651,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_upper(&mut buf),\n        \"936DA01F9ABD4D9D80C702AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F9ABD4D9D80C702AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,22],"end":[437,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:139:2393":{"id":"0:139:2393","crate_id":0,"name":"simple","span":{"filename":"src/fmt.rs","begin":[106,4],"end":[108,5]},"visibility":"public","docs":"Get a [`Simple`] formatter.","links":{"`Simple`":"0:391:3023"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:503":{"id":"0:503","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:504:3014"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2883:2566":{"id":"1:2883:2566","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2857:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:617":{"id":"0:617","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:37:2795":{"id":"0:37:2795","crate_id":0,"name":"from_md5_bytes","span":{"filename":"src/builder.rs","begin":[558,4],"end":[562,5]},"visibility":"public","docs":"Creates a `Builder` for a version 3 UUID using the supplied MD5 hashed bytes.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["md5_bytes",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459":{"id":"0:459","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:10256:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:460:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3138:3701-0:435:3028":{"id":"a:1:3138:3701-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2895-0:435:3028":{"id":"b:1:2895-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:586:2126":{"id":"b:5:725-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5615:35279":{"id":"5:5615:35279","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:3494","`String`":"5:7617:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3494","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:679":{"id":"0:410:679","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:508:811":{"id":"0:508:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13171:3749":{"id":"1:13171:3749","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41506:190","prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:435:3028":{"id":"b:5:725-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2898:136":{"id":"1:2898:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31911:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:566:2116":{"id":"0:566:2116","crate_id":0,"name":"SortMac","span":{"filename":"src/lib.rs","begin":[315,4],"end":[315,15]},"visibility":"default","docs":"Version 6: Sortable Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"1:2607:3014":{"id":"1:2607:3014","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:811":{"id":"0:516:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:506:811":{"id":"0:506:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541":{"id":"0:541","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:542:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2894:1758":{"id":"1:2894:1758","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13153:27261":{"id":"1:13153:27261","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13154:27266"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43640:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2610:26915":{"id":"1:2610:26915","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41598:3674-0:435:3028":{"id":"a:1:41598:3674-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3138:3701-0:297:2095":{"id":"a:1:3138:3701-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:468:781":{"id":"0:468:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418":{"id":"0:418","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,16],"end":[80,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5848-0:413:2356":{"id":"b:5:5848-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:435:3028":{"id":"0:435:3028","crate_id":0,"name":"Braced","span":{"filename":"src/fmt.rs","begin":[88,0],"end":[88,24]},"visibility":"public","docs":"Format a [`Uuid`] as a braced hyphenated string, like\n`{67e55044-10b1-426f-9247-bb680e5fe0c8}`.","links":{"`Uuid`":"0:604:2179"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:178","a:1:3103:246-0:435:3028","a:1:31983:236-0:435:3028","a:1:3138:3701-0:435:3028","a:1:32040:3513-0:435:3028","a:1:41599:3673-0:435:3028","a:1:41598:3674-0:435:3028","b:1:2605-0:435:3028","b:1:2895-0:435:3028","b:1:2608-0:435:3028","b:1:2890-0:435:3028","b:1:3713-0:435:3028","b:1:2884-0:435:3028","b:1:2880-0:435:3028","b:5:725-0:435:3028","b:5:5848-0:435:3028","0:445","0:453","0:517","0:513","0:441","0:450","0:519","0:483","0:452","0:515","0:440","0:443","0:481","0:486","0:438","0:455","0:447"]}}},"a:1:41599:3673-0:537:2077":{"id":"a:1:41599:3673-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:615":{"id":"0:615","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2691:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:616:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:189:3064":{"id":"0:189:3064","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[549,4],"end":[551,5]},"visibility":"public","docs":"Creates a [`Simple`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Simple`]: struct.Simple.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2608-0:302:136":{"id":"b:1:2608-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2890-0:297:2095":{"id":"b:1:2890-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2890-0:302:136":{"id":"b:1:2890-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3103:246-0:369:3020":{"id":"a:1:3103:246-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3713-0:369:3020":{"id":"b:1:3713-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:400:60":{"id":"0:400:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:404:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2880-0:435:3028":{"id":"b:1:2880-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:444:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2691:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:451:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535:851":{"id":"0:535:851","crate_id":0,"name":"hash","span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31983:236-0:413:2356":{"id":"a:1:31983:236-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:258:2099":{"id":"0:258:2099","crate_id":0,"name":"Bytes","span":{"filename":"src/lib.rs","begin":[291,0],"end":[291,26]},"visibility":"public","docs":"A 128-bit (16 byte) buffer containing the UUID.\n\n# ABI\n\nThe `Bytes` type is always guaranteed to be have the same ABI as [`Uuid`].","links":{"`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"array":{"type":{"primitive":"u8"},"len":"16"}},"generics":{"params":[],"where_predicates":[]}}}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:619:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[36,0],"end":[40,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::std::string::String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:129:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:316:679":{"id":"0:316:679","crate_id":0,"name":"eq","span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13124:3750":{"id":"1:13124:3750","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13252:32969":{"id":"1:13252:32969","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:979:9500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:428":{"id":"0:428","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2691:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:429:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5850:1731":{"id":"5:5850:1731","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:496:3014"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41598:3674-0:391:3023":{"id":"a:1:41598:3674-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2895-0:586:2126":{"id":"b:1:2895-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:2543":{"id":"0:24:2543","crate_id":0,"name":"from_u64_pair","span":{"filename":"src/builder.rs","begin":[288,4],"end":[307,5]},"visibility":"public","docs":"Creates a UUID from two 64bit values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet hi = 0xa1a2a3a4b1b2c1c2u64;\nlet lo = 0xd1d2d3d4d5d6d7d8u64;\n\nlet uuid = Uuid::from_u64_pair(hi, lo);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["high_bits",{"primitive":"u64"}],["low_bits",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:306:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:280:2232":{"id":"0:280:2232","crate_id":0,"name":"is_nil","span":{"filename":"src/lib.rs","begin":[841,4],"end":[843,5]},"visibility":"public","docs":"Tests if the UUID is nil (all zeros).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2510":{"id":"0:47:2510","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[744,4],"end":[746,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32040:3513-0:391:3023":{"id":"a:1:32040:3513-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2884-0:369:3020":{"id":"b:1:2884-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:404:851":{"id":"0:404:851","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[74,42],"end":[74,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3103:246-0:604:2179":{"id":"a:1:3103:246-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:289:335":{"id":"0:289:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[937,4],"end":[939,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[22,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:12773:2906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:135","0:83:2907"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:452":{"id":"0:452","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41599:3673-0:302:136":{"id":"a:1:41599:3673-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:520:3014":{"id":"0:520:3014","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:2095":{"id":"0:297:2095","crate_id":0,"name":"Builder","span":{"filename":"src/builder.rs","begin":[47,0],"end":[47,25]},"visibility":"public","docs":"A builder for creating a UUID.\n\nThis type is useful if you need to mutate individual fields of a [`Uuid`]\nwhile constructing it. Since the [`Uuid`] type is `Copy`, it doesn't offer\nany methods to mutate in place. They live on the `Builder` instead.\n\nThe `Builder` type also always exposes APIs to construct [`Uuid`]s for any\nversion without needing crate features or additional dependencies. It's a\nlower-level API than the methods on [`Uuid`].\n\n# Examples\n\nCreating a version 4 UUID from externally generated random bytes:\n\n```\n# use uuid::{Builder, Version, Variant};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\n\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{"`Uuid`":"0:604:2179"},"attrs":["#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:32","a:1:3103:246-0:297:2095","a:1:31983:236-0:297:2095","a:1:3138:3701-0:297:2095","a:1:32040:3513-0:297:2095","a:1:41599:3673-0:297:2095","a:1:41598:3674-0:297:2095","b:1:2605-0:297:2095","b:1:2895-0:297:2095","b:1:2608-0:297:2095","b:1:2890-0:297:2095","b:1:3713-0:297:2095","b:1:2884-0:297:2095","b:1:2880-0:297:2095","0:300"]}}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:442:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2890-0:521:2079":{"id":"b:1:2890-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3713-0:547:2102":{"id":"b:1:3713-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31983:236-0:604:2179":{"id":"a:1:31983:236-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:82:135":{"id":"0:82:135","crate_id":0,"name":"Err","span":{"filename":"src/parser.rs","begin":[23,4],"end":[23,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13199:31824":{"id":"1:13199:31824","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:388:679":{"id":"0:388:679","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:335":{"id":"0:502:335","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:851":{"id":"0:382:851","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412:1253":{"id":"0:412:1253","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31983:236-0:369:3020":{"id":"a:1:31983:236-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:268:2261":{"id":"0:268:2261","crate_id":0,"name":"as_fields","span":{"filename":"src/lib.rs","begin":[625,4],"end":[639,5]},"visibility":"public","docs":"Returns the four field values of the UUID.\n\nThese values can be passed to the [`Uuid::from_fields`] method to get\nthe original `Uuid` back.\n\n* The first field value represents the first group of (eight) hex\n  digits, taken as a big-endian `u32` value.  For V1 UUIDs, this field\n  represents the low 32 bits of the timestamp.\n* The second field value represents the second group of (four) hex\n  digits, taken as a big-endian `u16` value.  For V1 UUIDs, this field\n  represents the middle 16 bits of the timestamp.\n* The third field value represents the third group of (four) hex digits,\n  taken as a big-endian `u16` value.  The 4 most significant bits give\n  the UUID version, and for V1 UUIDs, the last 12 bits represent the\n  high 12 bits of the timestamp.\n* The last field value represents the last two groups of four and twelve\n  hex digits, taken in order.  The first 1-3 bits of this indicate the\n  UUID variant, and for V1 UUIDs, the next 13-15 bits indicate the clock\n  sequence and the last 48 bits indicate the node ID.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::nil();\n\nassert_eq!(uuid.as_fields(), (0, 0, 0, &[0u8; 8]));\n\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_fields(),\n    (\n        0xa1a2a3a4,\n        0xb1b2,\n        0xc1c2,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{"`Uuid::from_fields`":"0:18:2510"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:2344":{"id":"0:281:2344","crate_id":0,"name":"is_max","span":{"filename":"src/lib.rs","begin":[846,4],"end":[848,5]},"visibility":"public","docs":"Tests if the UUID is max (all ones).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:537:2077":{"id":"b:5:725-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41598:3674-0:297:2095":{"id":"a:1:41598:3674-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:447":{"id":"0:447","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:448:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:391:3023":{"id":"b:1:2605-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:31983:236-0:435:3028":{"id":"a:1:31983:236-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:245-0:230:2078":{"id":"0:245-0:230:2078","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,40],"end":[238,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::ClockSequence","name":"ClockSequence","id":"0:230:2078","glob":false}}},"0:261:2181":{"id":"0:261:2181","crate_id":0,"name":"NAMESPACE_DNS","span":{"filename":"src/lib.rs","begin":[455,4],"end":[458,7]},"visibility":"public","docs":"UUID namespace for Domain Name System (DNS).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"1:13225:34574":{"id":"1:13225:34574","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13256:34580":{"id":"1:13256:34580","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4894:34580"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43683:3953","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:811":{"id":"0:492:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13161:2490":{"id":"1:13161:2490","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2853":{"id":"0:194:2853","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[663,4],"end":[665,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(*simple.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:492:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:177:2457":{"id":"0:177:2457","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[389,4],"end":[391,5]},"visibility":"public","docs":"Consumes the [`Hyphenated`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(hyphenated.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:604:2179","`Hyphenated`":"0:369:3020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13234:34575":{"id":"1:13234:34575","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41598:3674-0:537:2077":{"id":"a:1:41598:3674-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:487:781":{"id":"0:487:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:171:3064":{"id":"0:171:3064","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[259,4],"end":[261,5]},"visibility":"public","docs":"Creates a [`Hyphenated`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Hyphenated`]: struct.Hyphenated.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:2356":{"id":"0:413:2356","crate_id":0,"name":"Urn","span":{"filename":"src/fmt.rs","begin":[82,0],"end":[82,21]},"visibility":"public","docs":"Format a [`Uuid`] as a URN string, like\n`urn:uuid:67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:604:2179"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:196","a:1:3103:246-0:413:2356","a:1:31983:236-0:413:2356","a:1:3138:3701-0:413:2356","a:1:32040:3513-0:413:2356","a:1:41599:3673-0:413:2356","a:1:41598:3674-0:413:2356","b:1:2605-0:413:2356","b:1:2895-0:413:2356","b:1:2608-0:413:2356","b:1:2890-0:413:2356","b:1:3713-0:413:2356","b:1:2884-0:413:2356","b:1:2880-0:413:2356","b:5:725-0:413:2356","b:5:5848-0:413:2356","0:418","0:478","0:428","0:431","0:423","0:505","0:511","0:473","0:507","0:419","0:430","0:425","0:421","0:475","0:416","0:433","0:509"]}}},"0:83:2907":{"id":"0:83:2907","crate_id":0,"name":"from_str","span":{"filename":"src/parser.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:12773:2906","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:851":{"id":"0:312:851","crate_id":0,"name":"hash","span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:582:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:431":{"id":"0:431","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:432:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13211:34567":{"id":"1:13211:34567","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12813:3501","`DoubleEndedIterator`":"1:8197:129","prim@char":"4:12295:458","str::match_indices":"1:13208:34566"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43534:3957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276:2302":{"id":"0:276:2302","crate_id":0,"name":"as_u64_pair","span":{"filename":"src/lib.rs","begin":[752,4],"end":[755,5]},"visibility":"public","docs":"Returns two 64bit values containing the value.\n\nThe bytes in the UUID will be split into two `u64`.\nThe first u64 represents the 64 most significant bits,\nthe second one represents the 64 least significant.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\nassert_eq!(\n    uuid.as_u64_pair(),\n    (0xa1a2a3a4b1b2c1c2, 0xd1d2d3d4d5d6d7d8),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[49,0],"end":[492,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:14:2383","0:16:2459","0:18:2510","0:20:2516","0:22:2534","0:23:2537","0:24:2543","0:25:2384","0:27:2776","0:29:2406","0:30:2575","0:31:2783"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2884-0:391:3023":{"id":"b:1:2884-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[30,0],"end":[36,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:85:136","0:86:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13251:32968":{"id":"1:13251:32968","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:979:9500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426:851":{"id":"0:426:851","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:398:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13137:9383":{"id":"1:13137:9383","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13134:3055":{"id":"1:13134:3055","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:584":{"id":"0:584","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:585:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:144:3039":{"id":"0:144:3039","crate_id":0,"name":"as_braced","span":{"filename":"src/fmt.rs","begin":[138,4],"end":[141,5]},"visibility":"public","docs":"Get a borrowed [`Braced`] formatter.","links":{"`Braced`":"0:435:3028"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[942,0],"end":[947,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2848:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:291:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:514:811":{"id":"0:514:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:483":{"id":"0:483","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:10256:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:484:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:729:26921":{"id":"5:729:26921","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[249,0],"end":[392,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:170:2357","0:171:3064","0:172:3094","0:174:3102","0:176:2853","0:177:2457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:422:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13143:34560":{"id":"1:13143:34560","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12301:1673","str::slice_mut_unchecked":"1:13144:34561","crate::ops::Index":"1:39113:4167"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:466:781":{"id":"0:466:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256-0:297:2095":{"id":"0:256-0:297:2095","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,16],"end":[284,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::builder::Builder","name":"Builder","id":"0:297:2095","glob":false}}},"b:1:2890-0:586:2126":{"id":"b:1:2890-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[171,4],"end":[171,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","source","description","cause","type_id"],"trait":{"name":"Error","id":"1:2943:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3103:246-0:537:2077":{"id":"a:1:3103:246-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:131:781":{"id":"0:131:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[43,4],"end":[50,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5606:35277":{"id":"5:5606:35277","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:512:3014"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2697:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:390:1253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:585:679":{"id":"0:585:679","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:598":{"id":"0:598","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,16],"end":[329,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[950,0],"end":[954,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::vec::Vec","id":"5:7038:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"items":["0:293:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13156:34562":{"id":"1:13156:34562","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43630:3955","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:521:2079":{"id":"b:1:2880-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13196:31823":{"id":"1:13196:31823","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2828":{"id":"0:44:2828","crate_id":0,"name":"from_custom_bytes","span":{"filename":"src/builder.rs","begin":[650,4],"end":[654,5]},"visibility":"public","docs":"Creates a `Builder` for a version 8 UUID using the supplied user-defined bytes.\n\nThis method won't interpret the given bytes in any way, except to set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["custom_bytes",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41598:3674-0:413:2356":{"id":"a:1:41598:3674-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31983:236-0:521:2079":{"id":"a:1:31983:236-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3713-0:413:2356":{"id":"b:1:3713-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:602":{"id":"0:602","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:603:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:540:781":{"id":"0:540:781","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619:679":{"id":"0:619:679","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[437,37],"end":[437,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:781":{"id":"0:69:781","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[132,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:422:60":{"id":"0:422:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[80,29],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13184:34563":{"id":"1:13184:34563","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12813:3501","str::split":"1:13175:31220","prim@char":"4:12295:458","`DoubleEndedIterator`":"1:8197:129","str::rsplit_terminator":"1:13187:34564"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43416:3965","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:417:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:207:2075":{"id":"0:207:2075","crate_id":0,"name":"timestamp","span":{"filename":"src/timestamp.rs","begin":[1,0],"end":[468,1]},"visibility":"public","docs":"Generating UUIDs from timestamps.\n\nTimestamps are used in a few UUID versions as a source of decentralized\nuniqueness (as in versions 1 and 6), and as a way to enable sorting (as\nin versions 6 and 7). Timestamps aren't encoded the same way by all UUID\nversions so this module provides a single [`Timestamp`] type that can\nconvert between them.\n\n# Timestamp representations in UUIDs\n\nVersions 1 and 6 UUIDs use a bespoke timestamp that consists of the\nnumber of 100ns ticks since `1582-10-15 00:00:00`, along with\na counter value to avoid duplicates.\n\nVersion 7 UUIDs use a more standard timestamp that consists of the\nnumber of millisecond ticks since the Unix epoch (`1970-01-01 00:00:00`).\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)","links":{"`Timestamp`":"0:521:2079"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238:2076","0:209:3203","0:521:2079","0:230:2078"],"is_stripped":false}}},"0:607":{"id":"0:607","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:608:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:528":{"id":"0:528","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,23],"end":[40,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:376:781":{"id":"0:376:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:335":{"id":"0:518:335","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,64],"end":[74,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2697:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:1253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:209:3203":{"id":"0:209:3203","crate_id":0,"name":"UUID_TICKS_BETWEEN_EPOCHS","span":{"filename":"src/timestamp.rs","begin":[27,0],"end":[27,65]},"visibility":"public","docs":"The number of 100 nanosecond ticks between the RFC4122 epoch\n(`1582-10-15 00:00:00`) and the Unix epoch (`1970-01-01 00:00:00`).","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"primitive":"u64"},"expr":"0x01B2_1DD2_1381_4000","value":"122_192_928_000_000_000u64","is_literal":true}}},"0:18:2510":{"id":"0:18:2510","crate_id":0,"name":"from_fields","span":{"filename":"src/builder.rs","begin":[122,4],"end":[141,5]},"visibility":"public","docs":"Creates a UUID from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:3094":{"id":"0:199:3094","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[746,4],"end":[748,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    uuid.urn().encode_lower(&mut buf);\n    assert_eq!(\n        uuid.urn().encode_lower(&mut buf),\n        \"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n     \n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:2436":{"id":"0:137:2436","crate_id":0,"name":"hyphenated","span":{"filename":"src/fmt.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Get a [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:369:3020"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2456":{"id":"0:57:2456","crate_id":0,"name":"with_version","span":{"filename":"src/builder.rs","begin":[860,4],"end":[864,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13150:2404":{"id":"1:13150:2404","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43336:3496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:60":{"id":"0:287:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[930,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13164:31825":{"id":"1:13164:31825","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3103:246-0:586:2126":{"id":"a:1:3103:246-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,42],"end":[68,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:1756":{"id":"0:86:1756","crate_id":0,"name":"try_from","span":{"filename":"src/parser.rs","begin":[33,4],"end":[35,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid_str",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2864:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609":{"id":"0:609","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,16],"end":[437,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[682,0],"end":[830,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:197:2357","0:198:3064","0:199:3094","0:201:3102","0:203:2853","0:204:2457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:413:2356":{"id":"b:1:2605-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13220:34571":{"id":"1:13220:34571","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13146:31810":{"id":"1:13146:31810","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13145:31809","str::split_at_mut_checked":"1:13148:31814"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[53,0],"end":[57,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:10256:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:133:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13152:2262":{"id":"1:13152:2262","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43352:2099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2434":{"id":"0:0:2434","crate_id":0,"name":"uuid","span":{"filename":"src/lib.rs","begin":[12,0],"end":[1852,1]},"visibility":"public","docs":"Generate and parse universally unique identifiers (UUIDs).\n\nHere's an example of a UUID:\n\n```text\n67e55044-10b1-426f-9247-bb680e5fe0c8\n```\n\nA UUID is a unique 128-bit value, stored as 16 octets, and regularly\nformatted as a hex string in five groups. UUIDs are used to assign unique\nidentifiers to entities without requiring a central allocating authority.\n\nThey are particularly useful in distributed systems, though can be used in\ndisparate areas, such as databases and network protocols.  Typically a UUID\nis displayed in a readable string form as a sequence of hexadecimal digits,\nseparated into groups by hyphens.\n\nThe uniqueness property is not strictly guaranteed, however for all\npractical purposes, it can be assumed that an unintentional collision would\nbe extremely unlikely.\n\nUUIDs have a number of standardized encodings that are specified in [RFC4122](http://tools.ietf.org/html/rfc4122),\nwith recent additions [in draft](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04).\n\n# Getting started\n\nAdd the following to your `Cargo.toml`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.8.0\"\nfeatures = [\n    \"v4\",                # Lets you generate random UUIDs\n    \"fast-rng\",          # Use a faster (but still sufficiently random) RNG\n    \"macro-diagnostics\", # Enable better diagnostics for compile-time UUIDs\n]\n```\n\nWhen you want a UUID, you can generate one:\n\n```\n# fn main() {\n# #[cfg(feature = \"v4\")]\n# {\nuse uuid::Uuid;\n\nlet id = Uuid::new_v4();\n# }\n# }\n```\n\nIf you have a UUID value, you can use its string literal form inline:\n\n```\nuse uuid::{uuid, Uuid};\n\nconst ID: Uuid = uuid!(\"67e55044-10b1-426f-9247-bb680e5fe0c8\");\n```\n\n# Working with different UUID versions\n\nThis library supports all standardized methods for generating UUIDs through individual Cargo features.\n\nBy default, this crate depends on nothing but the Rust standard library and can parse and format\nUUIDs, but cannot generate them. Depending on the kind of UUID you'd like to work with, there\nare Cargo features that enable generating them:\n\n* `v1` - Version 1 UUIDs using a timestamp and monotonic counter.\n* `v3` - Version 3 UUIDs based on the MD5 hash of some data.\n* `v4` - Version 4 UUIDs with random data.\n* `v5` - Version 5 UUIDs based on the SHA1 hash of some data.\n* `v6` - Version 6 UUIDs using a timestamp and monotonic counter.\n* `v7` - Version 7 UUIDs using a Unix timestamp.\n* `v8` - Version 8 UUIDs using user-defined data.\n\nVersions that are in draft are also supported. See the _unstable features_ section for details.\n\nThis library also includes a [`Builder`] type that can be used to help construct UUIDs of any\nversion without any additional dependencies or features. It's a lower-level API than [`Uuid`]\nthat can be used when you need control over implicit requirements on things like a source\nof randomness.\n\n## Which UUID version should I use?\n\nIf you just want to generate unique identifiers then consider version 4 (`v4`) UUIDs. If you want\nto use UUIDs as database keys or need to sort them then consider version 7 (`v7`) UUIDs.\nOther versions should generally be avoided unless there's an existing need for them.\n\nSome UUID versions supersede others. Prefer version 6 over version 1 and version 5 over version 3.\n\n# Other features\n\nOther crate features can also be useful beyond the version support:\n\n* `macro-diagnostics` - enhances the diagnostics of `uuid!` macro.\n* `serde` - adds the ability to serialize and deserialize a UUID using\n  `serde`.\n* `borsh` - adds the ability to serialize and deserialize a UUID using\n  `borsh`.\n* `arbitrary` - adds an `Arbitrary` trait implementation to `Uuid` for\n  fuzzing.\n* `fast-rng` - uses a faster algorithm for generating random UUIDs.\n  This feature requires more dependencies to compile, but is just as suitable for\n  UUIDs as the default algorithm.\n* `bytemuck` - adds a `Pod` trait implementation to `Uuid` for byte manipulation\n\n# Unstable features\n\nSome features are unstable. They may be incomplete or depend on other\nunstable libraries. These include:\n\n* `zerocopy` - adds support for zero-copy deserialization using the\n  `zerocopy` library.\n\nUnstable features may break between minor releases.\n\nTo allow unstable features, you'll need to enable the Cargo feature as\nnormal, but also pass an additional flag through your environment to opt-in\nto unstable `uuid` features:\n\n```text\nRUSTFLAGS=\"--cfg uuid_unstable\"\n```\n\n# Building for other targets\n\n## WebAssembly\n\nFor WebAssembly, enable the `js` feature:\n\n```toml\n[dependencies.uuid]\nversion = \"1.8.0\"\nfeatures = [\n    \"v4\",\n    \"v7\",\n    \"js\",\n]\n```\n\n## Embedded\n\nFor embedded targets without the standard library, you'll need to\ndisable default features when building `uuid`:\n\n```toml\n[dependencies.uuid]\nversion = \"1.8.0\"\ndefault-features = false\n```\n\nSome additional features are supported in no-std environments:\n\n* `v1`, `v3`, `v5`, `v6`, and `v8`.\n* `serde`.\n\nIf you need to use `v4` or `v7` in a no-std environment, you'll need to\nfollow [`getrandom`'s docs] on configuring a source of randomness\non currently unsupported targets. Alternatively, you can produce\nrandom bytes yourself and then pass them to [`Builder::from_random_bytes`]\nwithout enabling the `v4` or `v7` features.\n\n# Examples\n\nParse a UUID given in the simple format and print it as a URN:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nGenerate a random UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature to be enabled.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# References\n\n* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)\n* [RFC4122: A Universally Unique Identifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)\n* [Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04)\n\n[`wasm-bindgen`]: https://crates.io/crates/wasm-bindgen\n[`cargo-web`]: https://crates.io/crates/cargo-web\n[`getrandom`'s docs]: https://docs.rs/getrandom","links":{"`Uuid`":"0:604:2179","`Builder::from_random_bytes`":"0:38:2802","`Builder`":"0:297:2095"},"attrs":["#![no_std]","#![deny(missing_debug_implementations, missing_docs)]","#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://docs.rs/uuid/1.8.0\")]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:781","0:207:2075","0:244-0:537:2077","0:245-0:230:2078","0:246-0:521:2079","0:256-0:297:2095","0:257-0:302:136","0:258:2099","0:547:2102","0:586:2126","0:604:2179","0:546:2434"],"is_stripped":false}}},"0:14:2383":{"id":"0:14:2383","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"The 'nil UUID' (all zeros).\n\nThe nil UUID is a special form of UUID that is specified to have all\n128 bits set to zero.\n\n# References\n\n* [Nil UUID in RFC4122](https://tools.ietf.org/html/rfc4122.html#section-4.1.7)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:2277":{"id":"0:271:2277","crate_id":0,"name":"to_fields_le","span":{"filename":"src/lib.rs","begin":[668,4],"end":[680,5]},"visibility":"public","docs":"Returns the four field values of the UUID in little-endian order.\n\nThe bytes in the returned integer fields will be converted from\nbig-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_fields_le(),\n    (\n        0xa4a3a2a1,\n        0xb2b1,\n        0xc2c1,\n        &[0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8],\n    )\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u32"},{"primitive":"u16"},{"primitive":"u16"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3103:246-0:435:3028":{"id":"a:1:3103:246-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:266:2222":{"id":"0:266:2222","crate_id":0,"name":"get_version_num","span":{"filename":"src/lib.rs","begin":[536,4],"end":[538,5]},"visibility":"public","docs":"Returns the version number of the UUID.\n\nThis represents the algorithm used to generate the value.\nThis method is the future-proof alternative to [`Uuid::get_version`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(3, my_uuid.get_version_num());\n# Ok(())\n# }\n```\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{"`Uuid::get_version`":"0:267:2231"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:728:26920":{"id":"5:728:26920","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,53],"end":[74,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:369:3020":{"id":"0:369:3020","crate_id":0,"name":"Hyphenated","span":{"filename":"src/fmt.rs","begin":[70,0],"end":[70,28]},"visibility":"public","docs":"Format a [`Uuid`] as a hyphenated string, like\n`67e55044-10b1-426f-9247-bb680e5fe0c8`.","links":{"`Uuid`":"0:604:2179"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:169","a:1:3103:246-0:369:3020","a:1:31983:236-0:369:3020","a:1:3138:3701-0:369:3020","a:1:32040:3513-0:369:3020","a:1:41599:3673-0:369:3020","a:1:41598:3674-0:369:3020","b:1:2605-0:369:3020","b:1:2895-0:369:3020","b:1:2608-0:369:3020","b:1:2890-0:369:3020","b:1:3713-0:369:3020","b:1:2884-0:369:3020","b:1:2880-0:369:3020","b:5:725-0:369:3020","b:5:5848-0:369:3020","0:489","0:381","0:459","0:457","0:493","0:374","0:384","0:379","0:491","0:372","0:375","0:386","0:377","0:462","0:387","0:389","0:495"]}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,27],"end":[4,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:312:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:525:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170:2357":{"id":"0:170:2357","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[253,4],"end":[253,33]},"visibility":"public","docs":"The length of a hyphenated [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"36"}}},"0:112:781":{"id":"0:112:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[12,0],"end":[1040,1]},"visibility":"public","docs":"Adapters for alternative string formats.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:369:3020","0:391:3023","0:413:2356","0:435:3028"],"is_stripped":false}}},"1:13157:27258":{"id":"1:13157:27258","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43658:3942","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[29,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:127:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:612":{"id":"0:612","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:613:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:545:60":{"id":"0:545:60","crate_id":0,"name":"default","span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314":{"id":"0:314","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3713-0:302:136":{"id":"b:1:3713-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[42,0],"end":[51,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:597:464":{"id":"0:597:464","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:504:3014":{"id":"0:504:3014","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:521:2079":{"id":"b:1:2605-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[48,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:211:3213","0:212:2375","0:213:3222","0:214:3228","0:216:3235"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23:2537":{"id":"0:23:2537","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[249,4],"end":[268,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\nThe entire value will be flipped to convert into big-endian order.\nThis is based on the endianness of the UUID, rather than the target\nenvironment so bytes will be flipped on both big and little endian\nmachines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128_le(v);\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:604:2179":{"id":"b:5:725-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13122":{"id":"1:13122","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13123:975","1:13124:3750","1:13125:34556","1:13126:34557","1:13128:34558","1:13131:2215","1:13132:34559","1:13133:334","1:13134:3055","1:13135:9382","1:13137:9383","1:13139:9384","1:13141:9385","1:13143:34560","1:13144:34561","1:13145:31809","1:13146:31810","1:13147:31813","1:13148:31814","1:13150:2404","1:13151:2890","1:13152:2262","1:13153:27261","1:13154:27266","1:13155:31221","1:13156:34562","1:13157:27258","1:13158:2582","1:13161:2490","1:13164:31825","1:13167:3789","1:13171:3749","1:13175:31220","1:13178:27259","1:13181:31817","1:13184:34563","1:13187:34564","1:13190:31819","1:13193:31821","1:13196:31823","1:13199:31824","1:13202:2891","1:13205:34565","1:13208:34566","1:13211:34567","1:13214:34568","1:13216:34569","1:13218:34570","1:13220:34571","1:13221:34572","1:13222:34573","1:13225:34574","1:13228:31052","1:13231:31826","1:13234:34575","1:13237:34576","1:13240:34577","1:13243:34578","1:13245:9483","1:13246:9484","1:13247:9488","1:13248:9489","1:13249:9490","1:13250:32967","1:13251:32968","1:13252:32969","1:13253:34579","1:13255:9954","1:13256:34580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:474:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:454:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2895-0:604:2179":{"id":"b:1:2895-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2890-0:369:3020":{"id":"b:1:2890-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5848-0:435:3028":{"id":"b:5:5848-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2895-0:369:3020":{"id":"b:1:2895-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:548:2104":{"id":"0:548:2104","crate_id":0,"name":"Nil","span":{"filename":"src/lib.rs","begin":[303,4],"end":[303,13]},"visibility":"default","docs":"The \"nil\" (all zeros) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"b:1:3713-0:435:3028":{"id":"b:1:3713-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32040:3513-0:297:2095":{"id":"a:1:32040:3513-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:527:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2608-0:521:2079":{"id":"b:1:2608-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42:2824":{"id":"0:42:2824","crate_id":0,"name":"from_unix_timestamp_millis","span":{"filename":"src/builder.rs","begin":[639,4],"end":[644,5]},"visibility":"public","docs":"Creates a `Builder` for a version 7 UUID using the supplied Unix timestamp and random bytes.\n\nThis method assumes the bytes are already sufficiently random.\n\n# Examples\n\nCreating a UUID using the current system timestamp:\n\n```\n# use std::convert::TryInto;\nuse std::time::{Duration, SystemTime};\n# fn main() -> Result<(), Box<dyn std::error::Error>> {\n# use uuid::{Builder, Uuid, Variant, Version, Timestamp, NoContext};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13\n# ];\nlet ts = SystemTime::now().duration_since(SystemTime::UNIX_EPOCH)?;\n\nlet random_bytes = rng();\n\nlet uuid = Builder::from_unix_timestamp_millis(ts.as_millis().try_into()?, &random_bytes).into_uuid();\n\nassert_eq!(Some(Version::SortRand), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"u64"}],["random_bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"10"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,22],"end":[68,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31983:236-0:537:2077":{"id":"a:1:31983:236-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:190:3094":{"id":"0:190:3094","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[601,4],"end":[603,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case simple string to `buffer`,\nand returns the subslice of the buffer that contains the encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 36];\n    assert_eq!(\n        uuid.simple().encode_lower(&mut buf),\n        \"936da01f9abd4d9d80c702af85c822a8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f9abd4d9d80c702af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3713-0:391:3023":{"id":"b:1:3713-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:543":{"id":"0:543","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,27],"end":[361,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2697:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:456:1253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:20:2516":{"id":"0:20:2516","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[168,4],"end":[187,5]},"visibility":"public","docs":"Creates a UUID from four field values in little-endian order.\n\nThe bytes in the `d1`, `d2` and `d3` fields will be flipped to convert\ninto big-endian order. This is based on the endianness of the UUID,\nrather than the target environment so bytes will be flipped on both\nbig and little endian machines.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Uuid::from_fields_le(d1, d2, d3, &d4);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13133:334":{"id":"1:13133:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13134:3055","`u8`":"4:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:587:2128":{"id":"0:587:2128","crate_id":0,"name":"NCS","span":{"filename":"src/lib.rs","begin":[334,4],"end":[334,13]},"visibility":"default","docs":"Reserved by the NCS for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0u8","value":"0"}}}},"0:448:851":{"id":"0:448:851","crate_id":0,"name":"hash","span":{"filename":"src/fmt.rs","begin":[86,42],"end":[86,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2884-0:302:136":{"id":"b:1:2884-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:188:2357":{"id":"0:188:2357","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[543,4],"end":[543,33]},"visibility":"public","docs":"The length of a simple [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"32"}}},"0:420:781":{"id":"0:420:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:297:2095":{"id":"b:1:2605-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3103:246-0:391:3023":{"id":"a:1:3103:246-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13175:31220":{"id":"1:13175:31220","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12813:3501","`DoubleEndedIterator`":"1:8197:129","prim@char":"4:12295:458","str::split_whitespace":"1:13153:27261","str::rsplit":"1:13181:31817"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43366:3961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,33],"end":[361,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:545:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13253:34579":{"id":"1:13253:34579","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4896:34579"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43665:3951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:35276":{"id":"5:5603:35276","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:2457":{"id":"0:195:2457","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[677,4],"end":[679,5]},"visibility":"public","docs":"Consumes the [`Simple`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet simple = Uuid::nil().simple();\nassert_eq!(simple.into_uuid(), Uuid::nil());\n```","links":{"`Simple`":"0:391:3023","`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31983:236-0:547:2102":{"id":"a:1:31983:236-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3715:1771":{"id":"1:3715:1771","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39282:7461","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[494,0],"end":[903,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:33:2406","0:34:2575","0:35:2791","0:37:2795","0:38:2802","0:39:2807","0:40:2811","0:42:2824","0:44:2828","0:45:2384","0:46:2776","0:47:2510","0:49:2516","0:51:2534","0:52:2537","0:53:2383","0:54:2841","0:55:2797","0:56:2847","0:57:2456","0:58:2853","0:59:2457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:2841":{"id":"0:54:2841","crate_id":0,"name":"set_variant","span":{"filename":"src/builder.rs","begin":[834,4],"end":[837,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2886:811":{"id":"1:2886:811","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:60":{"id":"0:378:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3138:3701-0:391:3023":{"id":"a:1:3138:3701-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[394,0],"end":[537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:179:2357","0:180:3064","0:181:3094","0:183:3102","0:185:2853","0:186:2457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2890-0:435:3028":{"id":"b:1:2890-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:444:60":{"id":"0:444:60","crate_id":0,"name":"default","span":{"filename":"src/fmt.rs","begin":[86,29],"end":[86,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2895-0:391:3023":{"id":"b:1:2895-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[361,13],"end":[361,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:540:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241:198":{"id":"0:241:198","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[365,8],"end":[365,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"u16"}}}},"a:1:41598:3674-0:547:2102":{"id":"a:1:41598:3674-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32040:3513-0:547:2102":{"id":"a:1:32040:3513-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:500:811":{"id":"0:500:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:3102":{"id":"0:183:3102","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[506,4],"end":[508,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936DA01F-9ABD-4D9D-80C7-02AF85C822A8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:458:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:417:464":{"id":"0:417:464","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31983:236-0:302:136":{"id":"a:1:31983:236-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:600:781":{"id":"0:600:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2776":{"id":"0:27:2776","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[379,4],"end":[387,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice_le(&bytes)?;\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32040:3513-0:537:2077":{"id":"a:1:32040:3513-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:242:3214":{"id":"0:242:3214","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[367,8],"end":[369,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_seconds",{"primitive":"u64"}],["_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:230:2078","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2884-0:521:2079":{"id":"b:1:2884-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:546:2434":{"id":"0:546:2434","crate_id":0,"name":"uuid","span":{"filename":"src/macros.rs","begin":[27,0],"end":[92,1]},"visibility":"public","docs":"Parse [`Uuid`][uuid::Uuid]s from string literals at compile time.\n\n## Usage\n\nThis macro transforms the string literal representation of a\n[`Uuid`][uuid::Uuid] into the bytes representation, raising a compilation\nerror if it cannot properly be parsed.\n\n## Examples\n\nSetting a global constant:\n\n```\n# use uuid::{uuid, Uuid};\npub const SCHEMA_ATTR_CLASS: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000000\");\npub const SCHEMA_ATTR_UUID: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000001\");\npub const SCHEMA_ATTR_NAME: Uuid = uuid!(\"00000000-0000-0000-0000-ffff00000002\");\n```\n\nDefining a local variable:\n\n```\n# use uuid::uuid;\nlet uuid = uuid!(\"urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4\");\n```\n\n## Compilation Failures\n\nInvalid UUIDs are rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n```\n\nEnable the feature `macro-diagnostics` to see the error messages below.\n\nProvides the following compilation error:\n\n```txt\nerror: invalid character: expected an optional prefix of `urn:uuid:` followed by [0-9a-fA-F-], found Z at 9\n    |\n    |     let id = uuid!(\"F9168C5E-ZEB2-4FAA-B6BF-329BF39FA1E4\");\n    |                              ^\n```\n\nTokens that aren't string literals are also rejected:\n\n```compile_fail\n# use uuid::uuid;\nlet uuid_str: &str = \"550e8400e29b41d4a716446655440000\";\nlet uuid = uuid!(uuid_str);\n```\n\nProvides the following compilation error:\n\n```txt\nerror: expected string literal\n  |\n  |     let uuid = uuid!(uuid_str);\n  |                      ^^^^^^^^\n```\n\n[uuid::Uuid]: https://docs.rs/uuid/*/uuid/struct.Uuid.html","links":{},"attrs":["#[cfg(not(feature = \"macro-diagnostics\"))]","#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! uuid {\n    ($uuid:literal) => { ... };\n}"}},"1:13147:31813":{"id":"1:13147:31813","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13148:31814"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:391:3023":{"id":"b:5:725-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2890-0:537:2077":{"id":"b:1:2890-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:279:2334":{"id":"0:279:2334","crate_id":0,"name":"to_bytes_le","span":{"filename":"src/lib.rs","begin":[832,4],"end":[838,5]},"visibility":"public","docs":"Returns the bytes of the UUID in little-endian order.\n\nThe bytes will be flipped to convert into little-endian order. This is\nbased on the endianness of the UUID, rather than the target environment\nso bytes will be flipped on both big and little endian machines.\n\n# Examples\n\n```\nuse uuid::Uuid;\n\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_bytes_le(),\n    ([\n        0xa4, 0xa3, 0xa2, 0xa1, 0xb2, 0xb1, 0xc2, 0xc1, 0xd1, 0xd2,\n        0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8\n    ])\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:781":{"id":"0:125:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:621:1253":{"id":"0:621:1253","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509":{"id":"0:509","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:510:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13151:2890":{"id":"1:13151:2890","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43342:3949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13216:34569":{"id":"1:13216:34569","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:31983:236-0:586:2126":{"id":"a:1:31983:236-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[131,0],"end":[164,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:231:198":{"id":"0:231:198","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[335,4],"end":[335,16]},"visibility":"default","docs":"The type of sequence returned by this counter.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:306:464":{"id":"0:306:464","crate_id":0,"name":"clone","span":{"filename":"src/error.rs","begin":[4,9],"end":[4,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:3036":{"id":"0:142:3036","crate_id":0,"name":"as_urn","span":{"filename":"src/fmt.rs","begin":[125,4],"end":[128,5]},"visibility":"public","docs":"Get a borrowed [`Urn`] formatter.","links":{"`Urn`":"0:413:2356"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2608-0:297:2095":{"id":"b:1:2608-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:211:3213":{"id":"0:211:3213","crate_id":0,"name":"now","span":{"filename":"src/timestamp.rs","begin":[57,4],"end":[71,5]},"visibility":"public","docs":"Get a timestamp representing the current system time.\n\nThis method defers to the standard library's `SystemTime` type.\n\n# Panics\n\nThis method will panic if calculating the elapsed time since the Unix epoch fails.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2884-0:547:2102":{"id":"b:1:2884-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[935,0],"end":[940,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:521:2079":{"id":"0:521:2079","crate_id":0,"name":"Timestamp","span":{"filename":"src/timestamp.rs","begin":[41,0],"end":[46,1]},"visibility":"public","docs":"A timestamp that can be encoded into a UUID.\n\nThis type abstracts the specific encoding, so versions 1, 6, and 7\nUUIDs can both be supported through the same type, even\nthough they have a different representation of a timestamp.\n\n# References\n\n* [Timestamp in RFC4122](https://www.rfc-editor.org/rfc/rfc4122#section-4.1.4)\n* [Timestamp in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-6.1)\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:210","a:1:3103:246-0:521:2079","a:1:31983:236-0:521:2079","a:1:3138:3701-0:521:2079","a:1:32040:3513-0:521:2079","a:1:41599:3673-0:521:2079","a:1:41598:3674-0:521:2079","b:1:2605-0:521:2079","b:1:2895-0:521:2079","b:1:2608-0:521:2079","b:1:2890-0:521:2079","b:1:3713-0:521:2079","b:1:2884-0:521:2079","b:1:2880-0:521:2079","b:5:725-0:521:2079","0:532","0:529","0:526","0:524","0:534","0:528","0:530"]}}},"0:390:1253":{"id":"0:390:1253","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[68,64],"end":[68,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:3214":{"id":"0:237:3214","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:230:2078","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:781":{"id":"0:463:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499":{"id":"0:499","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:500:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:257-0:302:136":{"id":"0:257-0:302:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[284,34],"end":[284,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::error::Error","name":"Error","id":"0:302:136","glob":false}}},"a:1:3138:3701-0:604:2179":{"id":"a:1:3138:3701-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:90:2929":{"id":"0:90:2929","crate_id":0,"name":"try_parse_ascii","span":{"filename":"src/parser.rs","begin":[125,4],"end":[132,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThe input is expected to be a string of ASCII characters. This method\ncan be more convenient than [`try_parse`] if the UUID is being\nparsed from a byte stream instead of from a UTF8 string.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse_ascii(b\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454:679":{"id":"0:454:679","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[86,53],"end":[86,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:590:2130":{"id":"0:590:2130","crate_id":0,"name":"RFC4122","span":{"filename":"src/lib.rs","begin":[336,4],"end":[336,11]},"visibility":"default","docs":"As described in the RFC4122 Specification (default).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:395:464":{"id":"0:395:464","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:3033":{"id":"0:140:3033","crate_id":0,"name":"as_simple","span":{"filename":"src/fmt.rs","begin":[112,4],"end":[115,5]},"visibility":"public","docs":"Get a borrowed [`Simple`] formatter.","links":{"`Simple`":"0:391:3023"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,42],"end":[80,46]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:426:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:497":{"id":"0:497","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:498:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:496:3014":{"id":"0:496:3014","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13181:31817":{"id":"1:13181:31817","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12813:3501","`DoubleEndedIterator`":"1:8197:129","prim@char":"4:12295:458","str::split":"1:13175:31220"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43384:3960","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41599:3673-0:297:2095":{"id":"a:1:41599:3673-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,16],"end":[68,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2884-0:435:3028":{"id":"b:1:2884-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:583":{"id":"0:583","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,29],"end":[298,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13148:31814":{"id":"1:13148:31814","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13147:31813"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2884-0:413:2356":{"id":"b:1:2884-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:451:471":{"id":"0:451:471","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[86,48],"end":[86,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,38],"end":[68,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:16:2459":{"id":"0:16:2459","crate_id":0,"name":"max","span":{"filename":"src/builder.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"The 'max UUID' (all ones).\n\nThe max UUID is a special form of UUID that is specified to have all\n128 bits set to one.\n\n# References\n\n* [Max UUID in Draft RFC: New UUID Formats, Version 4](https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format-04#section-5.4)\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::max();\n\nassert_eq!(\n    \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:297:2095":{"id":"b:1:2880-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2605-0:547:2102":{"id":"b:1:2605-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:547:2102":{"id":"0:547:2102","crate_id":0,"name":"Version","span":{"filename":"src/lib.rs","begin":[301,0],"end":[322,1]},"visibility":"public","docs":"The version of the UUID, denoting the generating algorithm.\n\n# References\n\n* [Version in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.3)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:548:2104","0:551:2106","0:554:2108","0:557:2110","0:560:2112","0:563:2114","0:566:2116","0:569:2118","0:572:2120","0:575:2122"],"impls":["a:1:3103:246-0:547:2102","a:1:31983:236-0:547:2102","a:1:3138:3701-0:547:2102","a:1:32040:3513-0:547:2102","a:1:41599:3673-0:547:2102","a:1:41598:3674-0:547:2102","b:1:2605-0:547:2102","b:1:2895-0:547:2102","b:1:2608-0:547:2102","b:1:2890-0:547:2102","b:1:3713-0:547:2102","b:1:2884-0:547:2102","b:1:2880-0:547:2102","b:5:725-0:547:2102","0:580","0:581","0:584","0:578","0:583"]}}},"0:557:2110":{"id":"0:557:2110","crate_id":0,"name":"Md5","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,11]},"visibility":"default","docs":"Version 3: MD5 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"b:1:2608-0:547:2102":{"id":"b:1:2608-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49:2516":{"id":"0:49:2516","crate_id":0,"name":"from_fields_le","span":{"filename":"src/builder.rs","begin":[768,4],"end":[770,5]},"visibility":"public","docs":"Creates a `Builder` from four field values.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet d1 = 0xa1a2a3a4;\nlet d2 = 0xb1b2;\nlet d3 = 0xc1c2;\nlet d4 = [0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8];\n\nlet uuid = Builder::from_fields_le(d1, d2, d3, &d4).into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["d1",{"primitive":"u32"}],["d2",{"primitive":"u16"}],["d3",{"primitive":"u16"}],["d4",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"8"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:490:811":{"id":"0:490:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:2384":{"id":"0:25:2384","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[338,4],"end":[346,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_slice(&bytes)?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2853":{"id":"0:176:2853","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[375,4],"end":[377,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet hyphenated = Uuid::nil().hyphenated();\nassert_eq!(*hyphenated.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:471:781":{"id":"0:471:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41598:3674-0:604:2179":{"id":"a:1:41598:3674-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:2776":{"id":"0:46:2776","crate_id":0,"name":"from_slice_le","span":{"filename":"src/builder.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice_le(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:604:2179":{"id":"b:1:2605-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2880-0:413:2356":{"id":"b:1:2880-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:514:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:608:464":{"id":"0:608:464","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[437,9],"end":[437,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13158:2582":{"id":"1:13158:2582","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:435:3028":{"id":"b:1:2605-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,23],"end":[4,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:603:679":{"id":"0:603:679","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13145:31809":{"id":"1:13145:31809","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13147:31813","str::split_at_mut":"1:13146:31810"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3103:246-0:547:2102":{"id":"a:1:3103:246-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:204:2457":{"id":"0:204:2457","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[827,4],"end":[829,5]},"visibility":"public","docs":"Consumes the [`Urn`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(urn.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:604:2179","`Urn`":"0:413:2356"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[59,0],"end":[64,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:10258:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:135:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:179:2357":{"id":"0:179:2357","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[398,4],"end":[398,33]},"visibility":"public","docs":"The length of a braced [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"38"}}},"0:476:781":{"id":"0:476:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432:679":{"id":"0:432:679","crate_id":0,"name":"eq","span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13208:34566":{"id":"1:13208:34566","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12813:3501","`DoubleEndedIterator`":"1:8197:129","prim@char":"4:12295:458","str::rmatch_indices":"1:13211:34567"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43516:3956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13202:2891":{"id":"1:13202:2891","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12813:3501","`DoubleEndedIterator`":"1:8197:129","prim@char":"4:12295:458","str::rmatches":"1:13205:34565"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43570:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575:2122":{"id":"0:575:2122","crate_id":0,"name":"Max","span":{"filename":"src/lib.rs","begin":[321,4],"end":[321,14]},"visibility":"default","docs":"The \"max\" (all ones) UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0xff","value":"255"}}}},"0:434:1253":{"id":"0:434:1253","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:136":{"id":"0:302:136","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[5,0],"end":[5,39]},"visibility":"public","docs":"A general error that can occur when working with UUIDs.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3103:246-0:302:136","a:1:31983:236-0:302:136","a:1:3138:3701-0:302:136","a:1:32040:3513-0:302:136","a:1:41599:3673-0:302:136","a:1:41598:3674-0:302:136","b:1:2605-0:302:136","b:1:2895-0:302:136","b:1:2608-0:302:136","b:1:2890-0:302:136","b:1:3713-0:302:136","b:1:2884-0:302:136","b:1:2880-0:302:136","b:5:725-0:302:136","b:5:5848-0:302:136","0:68","0:309","0:314","0:307","0:311","0:315","0:305","0:73"]}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:10256:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:468:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32040:3513-0:302:136":{"id":"a:1:32040:3513-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41599:3673-0:413:2356":{"id":"a:1:41599:3673-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:474:781":{"id":"0:474:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:781":{"id":"0:127:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[30,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:616:471":{"id":"0:616:471","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[437,32],"end":[437,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:391:3023":{"id":"0:391:3023","crate_id":0,"name":"Simple","span":{"filename":"src/fmt.rs","begin":[76,0],"end":[76,24]},"visibility":"public","docs":"Format a [`Uuid`] as a simple string, like\n`67e5504410b1426f9247bb680e5fe0c8`.","links":{"`Uuid`":"0:604:2179"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:187","a:1:3103:246-0:391:3023","a:1:31983:236-0:391:3023","a:1:3138:3701-0:391:3023","a:1:32040:3513-0:391:3023","a:1:41599:3673-0:391:3023","a:1:41598:3674-0:391:3023","b:1:2605-0:391:3023","b:1:2895-0:391:3023","b:1:2608-0:391:3023","b:1:2890-0:391:3023","b:1:3713-0:391:3023","b:1:2884-0:391:3023","b:1:2880-0:391:3023","b:5:725-0:391:3023","b:5:5848-0:391:3023","0:408","0:399","0:394","0:467","0:470","0:406","0:503","0:397","0:401","0:403","0:497","0:409","0:465","0:501","0:396","0:411","0:499"]}}},"a:1:3103:246-0:521:2079":{"id":"a:1:3103:246-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2880-0:604:2179":{"id":"b:1:2880-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:462":{"id":"0:462","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:10258:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:463:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13245:9483":{"id":"1:13245:9483","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,38],"end":[80,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41598:3674-0:586:2126":{"id":"a:1:41598:3674-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5600:4039":{"id":"5:5600:4039","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:442:781":{"id":"0:442:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[86,22],"end":[86,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551:2106":{"id":"0:551:2106","crate_id":0,"name":"Mac","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,11]},"visibility":"default","docs":"Version 1: Timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"b:5:725-0:547:2102":{"id":"b:5:725-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:143:2391":{"id":"0:143:2391","crate_id":0,"name":"braced","span":{"filename":"src/fmt.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Get a [`Braced`] formatter.","links":{"`Braced`":"0:435:3028"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2895-0:297:2095":{"id":"b:1:2895-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32040:3513-0:521:2079":{"id":"a:1:32040:3513-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:291:335":{"id":"0:291:335","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[944,4],"end":[946,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2457":{"id":"0:59:2457","crate_id":0,"name":"into_uuid","span":{"filename":"src/builder.rs","begin":[900,4],"end":[902,5]},"visibility":"public","docs":"Convert the builder into a [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n```","links":{"`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2853":{"id":"0:203:2853","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[813,4],"end":[815,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet urn = Uuid::nil().urn();\nassert_eq!(*urn.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13123:975":{"id":"1:13123:975","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12295:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2895-0:302:136":{"id":"b:1:2895-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3713-0:537:2077":{"id":"b:1:3713-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2880-0:391:3023":{"id":"b:1:2880-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2880-0:537:2077":{"id":"b:1:2880-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3138:3701-0:537:2077":{"id":"a:1:3138:3701-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:295:136":{"id":"0:295:136","crate_id":0,"name":"Error","span":{"filename":"src/lib.rs","begin":[958,4],"end":[958,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:3713-0:586:2126":{"id":"b:1:3713-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3713-0:521:2079":{"id":"b:1:3713-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13255:9954":{"id":"1:13255:9954","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4897:9954"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43674:3952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599:35275":{"id":"5:5599:35275","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3494","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:3494","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41598:3674-0:302:136":{"id":"a:1:41598:3674-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:31983:236-0:391:3023":{"id":"a:1:31983:236-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32040:3513-0:435:3028":{"id":"a:1:32040:3513-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:439:464":{"id":"0:439:464","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:136":{"id":"0:85:136","crate_id":0,"name":"Error","span":{"filename":"src/parser.rs","begin":[31,4],"end":[31,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2895-0:413:2356":{"id":"b:1:2895-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2608-0:413:2356":{"id":"b:1:2608-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:438":{"id":"0:438","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,9],"end":[86,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:439:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2605-0:537:2077":{"id":"b:1:2605-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41599:3673-0:586:2126":{"id":"a:1:41599:3673-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2605-0:302:136":{"id":"b:1:2605-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:262:2199":{"id":"0:262:2199","crate_id":0,"name":"NAMESPACE_OID","span":{"filename":"src/lib.rs","begin":[461,4],"end":[464,7]},"visibility":"public","docs":"UUID namespace for ISO Object Identifiers (OIDs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:201:3102":{"id":"0:201:3102","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[799,4],"end":[801,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case URN string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.urn().encode_upper(&mut Uuid::encode_buffer()),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 49];\n    assert_eq!(\n        uuid.urn().encode_upper(&mut buf),\n        \"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n    assert_eq!(\n        &buf as &[_],\n        b\"urn:uuid:936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2783":{"id":"0:31:2783","crate_id":0,"name":"from_bytes_ref","span":{"filename":"src/builder.rs","begin":[484,4],"end":[487,5]},"visibility":"public","docs":"Creates a reference to a UUID from a reference to the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_ref(&bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n\nassert!(std::ptr::eq(\n    uuid as *const Uuid as *const u8,\n    &bytes as *const [u8; 16] as *const u8,\n));\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:594:149":{"id":"0:594:149","crate_id":0,"name":"Future","span":{"filename":"src/lib.rs","begin":[340,4],"end":[340,10]},"visibility":"default","docs":"Reserved for future expansion.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"1:2893:136":{"id":"1:2893:136","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:186:2457":{"id":"0:186:2457","crate_id":0,"name":"into_uuid","span":{"filename":"src/fmt.rs","begin":[534,4],"end":[536,5]},"visibility":"public","docs":"Consumes the [`Braced`], returning the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(braced.into_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:604:2179","`Braced`":"0:435:3028"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:216:3235":{"id":"0:216:3235","crate_id":0,"name":"to_unix_nanos","span":{"filename":"src/timestamp.rs","begin":[166,4],"end":[168,5]},"visibility":"public","docs":"Get the number of fractional nanoseconds in the Unix timestamp.\n\nThis method is deprecated and probably doesn't do what you're expecting it to.\nIt doesn't return the timestamp as nanoseconds since the Unix epoch, it returns\nthe fractional seconds of the timestamp.","links":{},"attrs":["#[deprecated(note =\n\"use `to_unix` instead; this method will be removed in a future release\")]"],"deprecation":{"since":null,"note":"use `to_unix` instead; this method will be removed in a future release"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:9485":{"id":"5:5617:9485","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13248:9489"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2383":{"id":"0:53:2383","crate_id":0,"name":"nil","span":{"filename":"src/builder.rs","begin":[829,4],"end":[831,5]},"visibility":"public","docs":"Creates a `Builder` with an initial [`Uuid::nil`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet uuid = Builder::nil().into_uuid();\n\nassert_eq!(\n    \"00000000-0000-0000-0000-000000000000\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{"`Uuid::nil`":"0:14:2383"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32040:3513-0:369:3020":{"id":"a:1:32040:3513-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:10258:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:471:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:31983:236-0:297:2095":{"id":"a:1:31983:236-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:214:3228":{"id":"0:214:3228","crate_id":0,"name":"to_unix","span":{"filename":"src/timestamp.rs","begin":[142,4],"end":[144,5]},"visibility":"public","docs":"Get the value of the timestamp as a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"u64"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:198":{"id":"0:236:198","crate_id":0,"name":"Output","span":{"filename":"src/timestamp.rs","begin":[344,4],"end":[344,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:275:2294":{"id":"0:275:2294","crate_id":0,"name":"to_u128_le","span":{"filename":"src/lib.rs","begin":[729,4],"end":[731,5]},"visibility":"public","docs":"Returns a 128bit little-endian value containing the value.\n\nThe bytes in the `u128` will be flipped to convert into big-endian\norder. This is based on the endianness of the UUID, rather than the\ntarget environment so bytes will be flipped on both big and little\nendian machines.\n\nNote that this will produce a different result than\n[`Uuid::to_fields_le`], because the entire UUID is reversed, rather\nthan reversing the individual fields in-place.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.to_u128_le(),\n    0xd8d7d6d5d4d3d2d1c2c1b2b1a4a3a2a1,\n);\n# Ok(())\n# }\n```","links":{"`Uuid::to_fields_le`":"0:271:2277"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:125:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13240:34577":{"id":"1:13240:34577","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578":{"id":"0:578","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:579:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[453,0],"end":[926,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:2181","0:262:2199","0:263:2202","0:264:2204","0:265:2214","0:266:2222","0:267:2231","0:268:2261","0:271:2277","0:274:2282","0:275:2294","0:276:2302","0:277:2215","0:278:2324","0:279:2334","0:280:2232","0:281:2344","0:282:2355","0:285:2371"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"LowerHex","id":"1:10256:3015","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:476:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2890-0:547:2102":{"id":"b:1:2890-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:296:1756":{"id":"0:296:1756","crate_id":0,"name":"try_from","span":{"filename":"src/lib.rs","begin":[960,4],"end":[962,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"std::vec::Vec","id":"5:7038:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:2864:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:9486":{"id":"5:5618:9486","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13249:9490"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:373:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:293:811":{"id":"0:293:811","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[951,4],"end":[953,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13139:9384":{"id":"1:13139:9384","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2537":{"id":"0:52:2537","crate_id":0,"name":"from_u128_le","span":{"filename":"src/builder.rs","begin":[810,4],"end":[812,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value in little-endian order.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128_le(v).into_uuid();\n\nassert_eq!(\n    \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:781":{"id":"0:479:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:464":{"id":"0:373:464","crate_id":0,"name":"clone","span":{"filename":"src/fmt.rs","begin":[68,9],"end":[68,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,29],"end":[68,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:378:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13144:34561":{"id":"1:13144:34561","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12301:1673","crate::ops::IndexMut":"1:3374:4168","str::slice_unchecked":"1:13143:34560"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13193:31821":{"id":"1:13193:31821","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12295:458","str::splitn":"1:13190:31819","self::pattern":"1:12813:3501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43488:3962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2853":{"id":"0:185:2853","crate_id":0,"name":"as_uuid","span":{"filename":"src/fmt.rs","begin":[520,4],"end":[522,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nlet braced = Uuid::nil().braced();\nassert_eq!(*braced.as_uuid(), Uuid::nil());\n```","links":{"`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2791":{"id":"0:35:2791","crate_id":0,"name":"from_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[553,4],"end":[555,5]},"visibility":"public","docs":"Creates a `Builder` for a version 1 UUID using the supplied timestamp and node ID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:388:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3138:3701-0:369:3020":{"id":"a:1:3138:3701-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:41599:3673-0:435:3028":{"id":"a:1:41599:3673-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:277:2215":{"id":"0:277:2215","crate_id":0,"name":"as_bytes","span":{"filename":"src/lib.rs","begin":[784,4],"end":[786,5]},"visibility":"public","docs":"Returns a slice of 16 octets containing the value.\n\nThis method borrows the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes1 = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid1 = Uuid::from_bytes_ref(&bytes1);\n\nlet bytes2 = uuid1.as_bytes();\nlet uuid2 = Uuid::from_bytes_ref(bytes2);\n\nassert_eq!(uuid1, uuid2);\n\nassert!(std::ptr::eq(\n    uuid2 as *const Uuid as *const u8,\n    &bytes1 as *const [u8; 16] as *const u8,\n));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537:2077":{"id":"0:537:2077","crate_id":0,"name":"NoContext","span":{"filename":"src/timestamp.rs","begin":[362,4],"end":[362,25]},"visibility":"public","docs":"An empty counter that will always return the value `0`.\n\nThis type should be used when constructing timestamps for version 7 UUIDs,\nsince they don't need a counter for uniqueness.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:3103:246-0:537:2077","a:1:31983:236-0:537:2077","a:1:3138:3701-0:537:2077","a:1:32040:3513-0:537:2077","a:1:41599:3673-0:537:2077","a:1:41598:3674-0:537:2077","b:1:2605-0:537:2077","b:1:2895-0:537:2077","b:1:2608-0:537:2077","b:1:2890-0:537:2077","b:1:3713-0:537:2077","b:1:2884-0:537:2077","b:1:2880-0:537:2077","b:5:725-0:537:2077","0:539","0:240","0:543","0:541","0:544"]}}},"b:5:725-0:302:136":{"id":"b:5:725-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:2811":{"id":"0:40:2811","crate_id":0,"name":"from_sorted_rfc4122_timestamp","span":{"filename":"src/builder.rs","begin":[602,4],"end":[610,5]},"visibility":"public","docs":"Creates a `Builder` for a version 6 UUID using the supplied timestamp and node ID.\n\nThis method will encode the ticks, counter, and node ID in a sortable UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}],["node_id",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"array":{"type":{"primitive":"u8"},"len":"6"}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2890-0:391:3023":{"id":"b:1:2890-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:579:464":{"id":"0:579:464","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13221:34572":{"id":"1:13221:34572","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:501":{"id":"0:501","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:502:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:308:781":{"id":"0:308:781","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:510:335":{"id":"0:510:335","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2534":{"id":"0:51:2534","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[789,4],"end":[791,5]},"visibility":"public","docs":"Creates a `Builder` from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Builder::from_u128(v).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13178:27259":{"id":"1:13178:27259","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12629:3944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:521:2079":{"id":"b:5:725-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129:811":{"id":"0:129:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[37,4],"end":[39,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,16],"end":[4,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:308:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:604:2179":{"id":"0:604:2179","crate_id":0,"name":"Uuid","span":{"filename":"src/lib.rs","begin":[451,0],"end":[451,23]},"visibility":"public","docs":"A Universally Unique Identifier (UUID).\n\n# Examples\n\nParse a UUID given in the simple format and print it as a urn:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nprintln!(\"{}\", my_uuid.urn());\n# Ok(())\n# }\n```\n\nCreate a new random (V4) UUID and print it out in hexadecimal form:\n\n```\n// Note that this requires the `v4` feature enabled in the uuid crate.\n# use uuid::Uuid;\n# fn main() {\n# #[cfg(feature = \"v4\")] {\nlet my_uuid = Uuid::new_v4();\n\nprintln!(\"{}\", my_uuid);\n# }\n# }\n```\n\n# Formatting\n\nA UUID can be formatted in one of a few ways:\n\n* [`simple`](#method.simple): `a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8`.\n* [`hyphenated`](#method.hyphenated):\n  `a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8`.\n* [`urn`](#method.urn): `urn:uuid:A1A2A3A4-B1B2-C1C2-D1D2-D3D4D5D6D7D8`.\n* [`braced`](#method.braced): `{a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8}`.\n\nThe default representation when formatting a UUID with `Display` is\nhyphenated:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.to_string(),\n);\n# Ok(())\n# }\n```\n\nOther formats can be specified using adapter methods on the UUID:\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"a1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    \"urn:uuid:a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    my_uuid.urn().to_string(),\n);\n# Ok(())\n# }\n```\n\n# Endianness\n\nThe specification for UUIDs encodes the integer fields that make up the\nvalue in big-endian order. This crate assumes integer inputs are already in\nthe correct order by default, regardless of the endianness of the\nenvironment. Most methods that accept integers have a `_le` variant (such as\n`from_fields_le`) that assumes any integer values will need to have their\nbytes flipped, regardless of the endianness of the environment.\n\nMost users won't need to worry about endianness unless they need to operate\non individual fields (such as when converting between Microsoft GUIDs). The\nimportant things to remember are:\n\n- The endianness is in terms of the fields of the UUID, not the environment.\n- The endianness is assumed to be big-endian when there's no `_le` suffix\n  somewhere.\n- Byte-flipping in `_le` methods applies to each integer.\n- Endianness roundtrips, so if you create a UUID with `from_fields_le`\n  you'll get the same values back out with `to_fields_le`.\n\n# ABI\n\nThe `Uuid` type is always guaranteed to be have the same ABI as [`Bytes`].","links":{"`Bytes`":"0:258:2099"},"attrs":["#[repr(transparent)]"],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:13","0:87","0:136","0:260","a:1:3103:246-0:604:2179","a:1:31983:236-0:604:2179","a:1:3138:3701-0:604:2179","a:1:32040:3513-0:604:2179","a:1:41599:3673-0:604:2179","a:1:41598:3674-0:604:2179","b:1:2605-0:604:2179","b:1:2895-0:604:2179","b:1:2608-0:604:2179","b:1:2890-0:604:2179","b:1:3713-0:604:2179","b:1:2884-0:604:2179","b:1:2880-0:604:2179","b:5:725-0:604:2179","b:5:5848-0:604:2179","0:617","0:126","0:124","0:489","0:286","0:517","0:493","0:288","0:620","0:505","0:513","0:84","0:81","0:134","0:511","0:519","0:503","0:292","0:491","0:290","0:609","0:618","0:515","0:610","0:507","0:497","0:607","0:128","0:294","0:615","0:132","0:501","0:509","0:495","0:612","0:499"]}}},"0:38:2802":{"id":"0:38:2802","crate_id":0,"name":"from_random_bytes","span":{"filename":"src/builder.rs","begin":[583,4],"end":[587,5]},"visibility":"public","docs":"Creates a `Builder` for a version 4 UUID using the supplied random bytes.\n\nThis method assumes the bytes are already sufficiently random, it will only\nset the appropriate bits for the UUID version and variant.\n\n# Examples\n\n```\n# use uuid::{Builder, Variant, Version};\n# let rng = || [\n#     70, 235, 208, 238, 14, 109, 67, 201, 185, 13, 204, 195, 90,\n# 145, 63, 62,\n# ];\nlet random_bytes = rng();\nlet uuid = Builder::from_random_bytes(random_bytes).into_uuid();\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["random_bytes",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41599:3673-0:604:2179":{"id":"a:1:41599:3673-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:244-0:537:2077":{"id":"0:244-0:537:2077","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,20],"end":[238,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::context::NoContext","name":"NoContext","id":"0:537:2077","glob":false}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:301:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:369:3020":{"id":"b:5:725-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:407:471":{"id":"0:407:471","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:527:464":{"id":"0:527:464","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[40,16],"end":[40,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2608-0:369:3020":{"id":"b:1:2608-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[364,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:241:198","0:242:3214"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:246-0:521:2079":{"id":"0:246-0:521:2079","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,55],"end":[238,64]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"timestamp::Timestamp","name":"Timestamp","id":"0:521:2079","glob":false}}},"b:1:2608-0:537:2077":{"id":"b:1:2608-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5848-0:604:2179":{"id":"b:5:5848-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2884-0:604:2179":{"id":"b:1:2884-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5598":{"id":"5:5598","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5599:35275","5:5600:4039","5:5603:35276","5:5606:35277","5:5614:35278","5:5615:35279","5:5616:10012","5:5617:9485","5:5618:9486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5848-0:586:2126":{"id":"b:5:5848-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[4,33],"end":[4,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:316:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:456:1253":{"id":"0:456:1253","crate_id":0,"name":"partial_cmp","span":{"filename":"src/fmt.rs","begin":[86,64],"end":[86,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:2357":{"id":"0:197:2357","crate_id":0,"name":"LENGTH","span":{"filename":"src/fmt.rs","begin":[686,4],"end":[686,33]},"visibility":"public","docs":"The length of a URN [`Uuid`] string.\n\n[`Uuid`]: ../struct.Uuid.html","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"usize"},"default":"45"}}},"0:141:2394":{"id":"0:141:2394","crate_id":0,"name":"urn","span":{"filename":"src/fmt.rs","begin":[119,4],"end":[121,5]},"visibility":"public","docs":"Get a [`Urn`] formatter.","links":{"`Urn`":"0:413:2356"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2608-0:435:3028":{"id":"b:1:2608-0:435:3028","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3103:246-0:302:136":{"id":"a:1:3103:246-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:512:3014":{"id":"0:512:3014","crate_id":0,"name":"borrow","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,38],"end":[74,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2890-0:413:2356":{"id":"b:1:2890-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:572:2120":{"id":"0:572:2120","crate_id":0,"name":"Custom","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,14]},"visibility":"default","docs":"Version 8: Custom.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"8","value":"8"}}}},"1:13243:34578":{"id":"1:13243:34578","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12774:135","`FromStr`":"1:12773:2906"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12773:2906","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12773:2906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:3094":{"id":"0:181:3094","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[455,4],"end":[457,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string surrounded by\nbraces to `buffer`, and returns the subslice of the buffer that contains\nthe encoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.braced()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"{936da01f-9abd-4d9d-80c7-02af85c822a8}\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.braced().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"{936da01f-9abd-4d9d-80c7-02af85c822a8}!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3713-0:297:2095":{"id":"b:1:3713-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:2847":{"id":"0:56:2847","crate_id":0,"name":"set_version","span":{"filename":"src/builder.rs","begin":[854,4],"end":[857,5]},"visibility":"public","docs":"Specifies the version number of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["v",{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32040:3513-0:413:2356":{"id":"a:1:32040:3513-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:458:781":{"id":"0:458:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,48],"end":[74,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2691:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:407:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:413:2356":{"id":"b:5:725-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:3482","5:728:26920","5:729:26921"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41598:3674-0:521:2079":{"id":"a:1:41598:3674-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13135:9382":{"id":"1:13135:9382","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13246:9484":{"id":"1:13246:9484","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39468:3708","Self::is_ascii":"1:13245:9483"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39468:3708","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2605-0:369:3020":{"id":"b:1:2605-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:41599:3673-0:391:3023":{"id":"a:1:41599:3673-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13205:34565":{"id":"1:13205:34565","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12813:3501","`DoubleEndedIterator`":"1:8197:129","prim@char":"4:12295:458","str::matches":"1:13202:2891"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43588:3959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,44],"end":[40,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:535:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:213:3222":{"id":"0:213:3222","crate_id":0,"name":"from_unix","span":{"filename":"src/timestamp.rs","begin":[102,4],"end":[119,5]},"visibility":"public","docs":"Construct a `Timestamp` from a Unix timestamp, as used in version 7 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["context",{"impl_trait":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}]}],["seconds",{"primitive":"u64"}],["nanos",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl ClockSequence<Output = u16>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u16"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3713-0:604:2179":{"id":"b:1:3713-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:554:2108":{"id":"0:554:2108","crate_id":0,"name":"Dce","span":{"filename":"src/lib.rs","begin":[307,4],"end":[307,11]},"visibility":"default","docs":"Version 2: DCE Security.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"1:13222:34573":{"id":"1:13222:34573","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12839:3936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2853":{"id":"0:58:2853","crate_id":0,"name":"as_uuid","span":{"filename":"src/builder.rs","begin":[881,4],"end":[883,5]},"visibility":"public","docs":"Get a reference to the underlying [`Uuid`].\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet builder = Builder::nil();\n\nlet uuid1 = builder.as_uuid();\nlet uuid2 = builder.as_uuid();\n\nassert_eq!(uuid1, uuid2);\n```","links":{"`Uuid`":"0:604:2179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3138:3701-0:586:2126":{"id":"a:1:3138:3701-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13126:34557":{"id":"1:13126:34557","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41599:3673-0:521:2079":{"id":"a:1:41599:3673-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:29:2406":{"id":"0:29:2406","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes(bytes);\n\nassert_eq!(\n    uuid.hyphenated().to_string(),\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n);\n# Ok(())\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["bytes",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3138:3701-0:302:136":{"id":"a:1:3138:3701-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2895-0:521:2079":{"id":"b:1:2895-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2608-0:604:2179":{"id":"b:1:2608-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2880-0:547:2102":{"id":"b:1:2880-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5848-0:302:136":{"id":"b:5:5848-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13214:34568":{"id":"1:13214:34568","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13155:31221":{"id":"1:13155:31221","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43620:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:3064":{"id":"0:198:3064","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[692,4],"end":[694,5]},"visibility":"public","docs":"Creates a [`Urn`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Urn`]: struct.Urn.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2575":{"id":"0:34:2575","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[548,4],"end":[550,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::{Builder, Uuid};\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes_le(bytes).into_uuid();\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:471":{"id":"0:385:471","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,38],"end":[86,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2884-0:537:2077":{"id":"b:1:2884-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[343,0],"end":[348,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ClockSequence","id":"0:230:2078","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"items":["0:236:198","0:237:3214"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:301:781":{"id":"0:301:781","crate_id":0,"name":"fmt","span":{"filename":"src/builder.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2608-0:586:2126":{"id":"b:1:2608-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3138:3701-0:521:2079":{"id":"a:1:3138:3701-0:521:2079","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3138:3701-0:547:2102":{"id":"a:1:3138:3701-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32040:3513-0:586:2126":{"id":"a:1:32040:3513-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:285:2371":{"id":"0:285:2371","crate_id":0,"name":"get_timestamp","span":{"filename":"src/lib.rs","begin":[898,4],"end":[925,5]},"visibility":"public","docs":"If the UUID is the correct version (v1, v6, or v7) this will return\nthe timestamp and counter portion parsed from a V1 UUID.\n\nReturns `None` if the supplied UUID is not V1.\n\nThe V1 timestamp format defined in RFC4122 specifies a 60-bit\ninteger representing the number of 100-nanosecond intervals\nsince 00:00:00.00, 15 Oct 1582.\n\n[`Timestamp`] offers several options for converting the raw RFC4122\nvalue into more commonly-used formats, such as a unix timestamp.\n\n# Roundtripping\n\nThis method is unlikely to roundtrip a timestamp in a UUID due to the way\nUUIDs encode timestamps. The timestamp returned from this method will be truncated to\n100ns precision for version 1 and 6 UUIDs, and to millisecond precision for version 7 UUIDs.\n\n[`Timestamp`]: v1/struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5848-0:391:3023":{"id":"b:5:5848-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[437,48],"end":[437,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2697:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:621:1253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:180:3064":{"id":"0:180:3064","crate_id":0,"name":"from_uuid","span":{"filename":"src/fmt.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":"Creates a [`Braced`] from a [`Uuid`].\n\n[`Uuid`]: ../struct.Uuid.html\n[`Braced`]: struct.Braced.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["uuid",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:520:3014"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:30:2575":{"id":"0:30:2575","crate_id":0,"name":"from_bytes_le","span":{"filename":"src/builder.rs","begin":[446,4],"end":[451,5]},"visibility":"public","docs":"Creates a UUID using the supplied bytes in little endian order.\n\nThe individual fields encoded in the buffer will be flipped.\n\n# Examples\n\nBasic usage:\n\n```\n# fn main() -> Result<(), uuid::Error> {\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Uuid::from_bytes_le(bytes);\n\nassert_eq!(\n    \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:586:2126":{"id":"b:1:2880-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:282:2355":{"id":"0:282:2355","crate_id":0,"name":"encode_buffer","span":{"filename":"src/lib.rs","begin":[875,4],"end":[877,5]},"visibility":"public","docs":"A buffer that can be used for `encode_...` calls, that is\nguaranteed to be long enough for any of the format adapters.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet uuid = Uuid::nil();\n\nassert_eq!(\n    uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000000000000000000000000000\"\n);\n\nassert_eq!(\n    uuid.hyphenated()\n        .encode_lower(&mut Uuid::encode_buffer()),\n    \"00000000-0000-0000-0000-000000000000\"\n);\n\nassert_eq!(\n    uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n    \"urn:uuid:00000000-0000-0000-0000-000000000000\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"array":{"type":{"primitive":"u8"},"len":"45"}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493":{"id":"0:493","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:494:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13125:34556":{"id":"1:13125:34556","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:34559":{"id":"1:13132:34559","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:781":{"id":"0:133:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[54,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:10012":{"id":"5:5616:10012","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:531:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2884-0:297:2095":{"id":"b:1:2884-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13231:31826":{"id":"1:13231:31826","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:781":{"id":"0:460:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,64],"end":[80,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","lt","le","ge"],"trait":{"name":"PartialOrd","id":"1:2697:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:434:1253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[90,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:2436","0:138:3016","0:139:2393","0:140:3033","0:141:2394","0:142:3036","0:143:2391","0:144:3039"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:486":{"id":"0:486","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:10258:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:487:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:135:781":{"id":"0:135:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[61,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:2214":{"id":"0:265:2214","crate_id":0,"name":"get_variant","span":{"filename":"src/lib.rs","begin":[501,4],"end":[512,5]},"visibility":"public","docs":"Returns the variant of the UUID structure.\n\nThis determines the interpretation of the structure of the UUID.\nThis method simply reads the value of the variant byte. It doesn't\nvalidate the rest of the UUID as conforming to that variant.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::{Uuid, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n\nassert_eq!(Variant::RFC4122, my_uuid.get_variant());\n# Ok(())\n# }\n```\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:41598:3674-0:369:3020":{"id":"a:1:41598:3674-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:41598:3674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13218:34570":{"id":"1:13218:34570","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:586:2126":{"id":"0:586:2126","crate_id":0,"name":"Variant","span":{"filename":"src/lib.rs","begin":[332,0],"end":[341,1]},"visibility":"public","docs":"The reserved variants of UUIDs.\n\n# References\n\n* [Variant in RFC4122](http://tools.ietf.org/html/rfc4122#section-4.1.1)","links":{},"attrs":["#[non_exhaustive]","#[repr(u8)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:587:2128","0:590:2130","0:592:2132","0:594:149"],"impls":["a:1:3103:246-0:586:2126","a:1:31983:236-0:586:2126","a:1:3138:3701-0:586:2126","a:1:32040:3513-0:586:2126","a:1:41599:3673-0:586:2126","a:1:41598:3674-0:586:2126","b:1:2605-0:586:2126","b:1:2895-0:586:2126","b:1:2608-0:586:2126","b:1:2890-0:586:2126","b:1:3713-0:586:2126","b:1:2884-0:586:2126","b:1:2880-0:586:2126","b:5:725-0:586:2126","b:5:5848-0:586:2126","0:599","0:598","0:602","0:130","0:601","0:596"]}}},"0:138:3016":{"id":"0:138:3016","crate_id":0,"name":"as_hyphenated","span":{"filename":"src/fmt.rs","begin":[99,4],"end":[102,5]},"visibility":"public","docs":"Get a borrowed [`Hyphenated`] formatter.","links":{"`Hyphenated`":"0:369:3020"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:481":{"id":"0:481","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:482:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:2406":{"id":"0:33:2406","crate_id":0,"name":"from_bytes","span":{"filename":"src/builder.rs","begin":[517,4],"end":[519,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_bytes(bytes).into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:335":{"id":"0:494:335","crate_id":0,"name":"as_ref","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:466:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[86,16],"end":[86,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41599:3673-0:547:2102":{"id":"a:1:41599:3673-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:2470":{"id":"0:88:2470","crate_id":0,"name":"parse_str","span":{"filename":"src/parser.rs","begin":[64,4],"end":[68,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nAny of the formats generated by this module (simple, hyphenated, urn,\nMicrosoft GUID) are supported by this parsing function.\n\nPrefer [`try_parse`] unless you need detailed user-facing diagnostics.\nThis method will be eventually deprecated in favor of `try_parse`.\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`try_parse`]: #method.try_parse","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:2282":{"id":"0:274:2282","crate_id":0,"name":"as_u128","span":{"filename":"src/lib.rs","begin":[700,4],"end":[702,5]},"visibility":"public","docs":"Returns a 128bit value containing the value.\n\nThe bytes in the UUID will be packed directly into a `u128`.\n\n# Examples\n\n```\n# use uuid::Uuid;\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n\nassert_eq!(\n    uuid.as_u128(),\n    0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8,\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:35278":{"id":"5:5614:35278","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:369:3020":{"id":"b:1:2880-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:398:781":{"id":"0:398:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[74,22],"end":[74,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2384":{"id":"0:45:2384","crate_id":0,"name":"from_slice","span":{"filename":"src/builder.rs","begin":[685,4],"end":[687,5]},"visibility":"public","docs":"Creates a `Builder` using the supplied bytes.\n\n# Errors\n\nThis function will return an error if `b` has any length other than 16.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Builder;\n# fn main() -> Result<(), uuid::Error> {\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\n\nlet uuid = Builder::from_slice(&bytes)?.into_uuid();\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n# Ok(())\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,40],"end":[40,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13141:9385":{"id":"1:13141:9385","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:613:851":{"id":"0:613:851","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[437,26],"end":[437,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13250:32967":{"id":"1:13250:32967","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:979:9500"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2797":{"id":"0:55:2797","crate_id":0,"name":"with_variant","span":{"filename":"src/builder.rs","begin":[840,4],"end":[851,5]},"visibility":"public","docs":"Specifies the variant of the UUID.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["v",{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:2375":{"id":"0:212:2375","crate_id":0,"name":"from_rfc4122","span":{"filename":"src/timestamp.rs","begin":[80,4],"end":[94,5]},"visibility":"public","docs":"Construct a `Timestamp` from an RFC4122 timestamp and counter, as used\nin versions 1 and 6 UUIDs.\n\n# Overflow\n\nIf conversion from RFC4122 ticks to the internal timestamp format would overflow\nit will wrap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ticks",{"primitive":"u64"}],["counter",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:580":{"id":"0:580","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,16],"end":[298,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,53],"end":[80,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:232:3214":{"id":"0:232:3214","crate_id":0,"name":"generate_sequence","span":{"filename":"src/timestamp.rs","begin":[340,4],"end":[340,81]},"visibility":"default","docs":"Get the next value in the sequence to feed into a timestamp.\n\nThis method will be called each time a [`Timestamp`] is constructed.","links":{"`Timestamp`":"0:521:2079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["seconds",{"primitive":"u64"}],["subsec_nanos",{"primitive":"u32"}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:230:2078","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,53],"end":[68,62]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:525:781":{"id":"0:525:781","crate_id":0,"name":"fmt","span":{"filename":"src/timestamp.rs","begin":[40,9],"end":[40,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:2202":{"id":"0:263:2202","crate_id":0,"name":"NAMESPACE_URL","span":{"filename":"src/lib.rs","begin":[467,4],"end":[470,7]},"visibility":"public","docs":"UUID namespace for Uniform Resource Locators (URLs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:394":{"id":"0:394","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,9],"end":[74,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:395:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:498:811":{"id":"0:498:811","crate_id":0,"name":"from","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2884-0:586:2126":{"id":"b:1:2884-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpperHex","id":"1:10258:3017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:479:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13167:3789":{"id":"1:13167:3789","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41506:190","prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2324":{"id":"0:278:2324","crate_id":0,"name":"into_bytes","span":{"filename":"src/lib.rs","begin":[804,4],"end":[806,5]},"visibility":"public","docs":"Consumes self and returns the underlying byte value of the UUID.\n\n# Examples\n\n```\n# use uuid::Uuid;\nlet bytes = [\n    0xa1, 0xa2, 0xa3, 0xa4,\n    0xb1, 0xb2,\n    0xc1, 0xc2,\n    0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n];\nlet uuid = Uuid::from_bytes(bytes);\nassert_eq!(bytes, uuid.into_bytes());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:560:2112":{"id":"0:560:2112","crate_id":0,"name":"Random","span":{"filename":"src/lib.rs","begin":[311,4],"end":[311,14]},"visibility":"default","docs":"Version 4: Random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"0:582:781":{"id":"0:582:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[298,22],"end":[298,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5848-0:369:3020":{"id":"b:5:5848-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:2807":{"id":"0:39:2807","crate_id":0,"name":"from_sha1_bytes","span":{"filename":"src/builder.rs","begin":[593,4],"end":[597,5]},"visibility":"public","docs":"Creates a `Builder` for a version 5 UUID using the supplied SHA-1 hashed bytes.\n\nThis method assumes the bytes are already a SHA-1 hash, it will only set the appropriate\nbits for the UUID version and variant.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["sha1_bytes",{"resolved_path":{"name":"Bytes","id":"0:258:2099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2880-0:302:136":{"id":"b:1:2880-0:302:136","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2883:2566"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:727:3482":{"id":"5:727:3482","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:174:3102":{"id":"0:174:3102","crate_id":0,"name":"encode_upper","span":{"filename":"src/fmt.rs","begin":[361,4],"end":[363,5]},"visibility":"public","docs":"Writes the [`Uuid`] as an upper-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936da01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_upper(&mut Uuid::encode_buffer()),\n        \"936DA01F-9ABD-4D9D-80C7-02AF85C822A8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_upper(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936DA01F-9ABD-4D9D-80C7-02AF85C822A8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187":{"id":"0:187","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[539,0],"end":[680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:188:2357","0:189:3064","0:190:3094","0:192:3102","0:194:2853","0:195:2457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,29],"end":[74,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:400:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:429:471":{"id":"0:429:471","crate_id":0,"name":"cmp","span":{"filename":"src/fmt.rs","begin":[80,48],"end":[80,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"1:30823:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:542:464":{"id":"0:542:464","crate_id":0,"name":"clone","span":{"filename":"src/timestamp.rs","begin":[361,20],"end":[361,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13190:31819":{"id":"1:13190:31819","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501","str::rsplitn":"1:13193:31821"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43470:3963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:9489":{"id":"1:13248:9489","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2534":{"id":"0:22:2534","crate_id":0,"name":"from_u128","span":{"filename":"src/builder.rs","begin":[206,4],"end":[225,5]},"visibility":"public","docs":"Creates a UUID from a 128bit value.\n\n# Examples\n\nBasic usage:\n\n```\n# use uuid::Uuid;\nlet v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n\nlet uuid = Uuid::from_u128(v);\n\nassert_eq!(\n    \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n    uuid.hyphenated().to_string(),\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["v",{"primitive":"u128"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:489":{"id":"0:489","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:490:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13228:31052":{"id":"1:13228:31052","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[74,16],"end":[74,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3103:246-0:413:2356":{"id":"a:1:3103:246-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:531:679":{"id":"0:531:679","crate_id":0,"name":"eq","span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563:2114":{"id":"0:563:2114","crate_id":0,"name":"Sha1","span":{"filename":"src/lib.rs","begin":[313,4],"end":[313,12]},"visibility":"default","docs":"Version 5: SHA-1 hash.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/parser.rs","begin":[38,0],"end":[133,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2470","0:89:2919","0:90:2929"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2899:1756":{"id":"1:2899:1756","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:172:3094":{"id":"0:172:3094","crate_id":0,"name":"encode_lower","span":{"filename":"src/fmt.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Writes the [`Uuid`] as a lower-case hyphenated string to\n`buffer`, and returns the subslice of the buffer that contains the\nencoded UUID.\n\nThis is slightly more efficient than using the formatting\ninfrastructure as it avoids virtual calls, and may avoid\ndouble buffering.\n\n[`Uuid`]: ../struct.Uuid.html\n\n# Panics\n\nPanics if the buffer is not large enough: it must have length at least\n[`LENGTH`]. [`Uuid::encode_buffer`] can be used to get a\nsufficiently-large temporary buffer.\n\n[`LENGTH`]: #associatedconstant.LENGTH\n[`Uuid::encode_buffer`]: ../struct.Uuid.html#method.encode_buffer\n\n# Examples\n\n```rust\nuse uuid::Uuid;\n\nfn main() -> Result<(), uuid::Error> {\n    let uuid = Uuid::parse_str(\"936DA01f9abd4d9d80c702af85c822a8\")?;\n\n    // the encoded portion is returned\n    assert_eq!(\n        uuid.hyphenated()\n            .encode_lower(&mut Uuid::encode_buffer()),\n        \"936da01f-9abd-4d9d-80c7-02af85c822a8\"\n    );\n\n    // the buffer is mutated directly, and trailing contents remains\n    let mut buf = [b'!'; 40];\n    uuid.hyphenated().encode_lower(&mut buf);\n    assert_eq!(\n        &buf as &[_],\n        b\"936da01f-9abd-4d9d-80c7-02af85c822a8!!!!\" as &[_]\n    );\n\n    Ok(())\n}\n```\n*/","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"borrowed_ref":{"lifetime":"'buf","mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'buf","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[68,48],"end":[68,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"1:2691:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:385:471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:508:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:230:2078":{"id":"0:230:2078","crate_id":0,"name":"ClockSequence","span":{"filename":"src/timestamp.rs","begin":[333,0],"end":[341,1]},"visibility":"public","docs":"A counter that can be used by version 1 and version 6 UUIDs to support\nthe uniqueness of timestamps.\n\n# References\n\n* [Clock Sequence in RFC4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.5)","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:231:198","0:232:3214"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:240","0:233"]}}},"b:1:2605-0:586:2126":{"id":"b:1:2605-0:586:2126","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2607:3014"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2895-0:537:2077":{"id":"b:1:2895-0:537:2077","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NoContext","id":"0:537:2077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:599":{"id":"0:599","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,22],"end":[329,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:600:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13131:2215":{"id":"1:13131:2215","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12361:2880"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:517":{"id":"0:517","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2848:77","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:518:335"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2608-0:391:3023":{"id":"b:1:2608-0:391:3023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:31984:3277","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Simple","id":"0:391:3023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2610:26915"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13247:9488":{"id":"1:13247:9488","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:596":{"id":"0:596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,9],"end":[329,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:597:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13237:34576":{"id":"1:13237:34576","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12295:458","self::pattern":"1:12813:3501"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[957,0],"end":[963,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7038:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:295:136","0:296:1756"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3138:3701-0:413:2356":{"id":"a:1:3138:3701-0:413:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3138:3701","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13128:34558":{"id":"1:13128:34558","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13126:34557"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13154:27266":{"id":"1:13154:27266","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13153:27261"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43649:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[928,0],"end":[933,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:287:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13249:9490":{"id":"1:13249:9490","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:781":{"id":"0:484:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13187:34564":{"id":"1:13187:34564","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12813:3501","str::split":"1:13175:31220","prim@char":"4:12295:458","str::split_terminator":"1:13184:34563"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43434:3964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12819:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12834:3937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2890-0:604:2179":{"id":"b:1:2890-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:136","1:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[80,22],"end":[80,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:420:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:41599:3673-0:369:3020":{"id":"a:1:41599:3673-0:369:3020","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:41599:3673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Hyphenated","id":"0:369:3020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Braced","id":"0:435:3028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:516:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2895-0:547:2102":{"id":"b:1:2895-0:547:2102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Version","id":"0:547:2102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2898:136","1:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:482:781":{"id":"0:482:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529":{"id":"0:529","crate_id":0,"name":null,"span":{"filename":"src/timestamp.rs","begin":[40,29],"end":[40,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:521:2079","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32040:3513-0:604:2179":{"id":"a:1:32040:3513-0:604:2179","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32040:3513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3103:246-0:297:2095":{"id":"a:1:3103:246-0:297:2095","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:297:2095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"src/fmt.rs","begin":[918,0],"end":[923,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Urn","id":"0:413:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:506:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:264:2204":{"id":"0:264:2204","crate_id":0,"name":"NAMESPACE_X500","span":{"filename":"src/lib.rs","begin":[473,4],"end":[476,7]},"visibility":"public","docs":"UUID namespace for X.500 Distinguished Names (DNs).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:601":{"id":"0:601","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,29],"end":[329,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Variant","id":"0:586:2126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:569:2118":{"id":"0:569:2118","crate_id":0,"name":"SortRand","span":{"filename":"src/lib.rs","begin":[317,4],"end":[317,16]},"visibility":"default","docs":"Version 7: Timestamp and random.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"7","value":"7"}}}},"0:592:2132":{"id":"0:592:2132","crate_id":0,"name":"Microsoft","span":{"filename":"src/lib.rs","begin":[338,4],"end":[338,13]},"visibility":"default","docs":"Reserved by Microsoft for backward compatibility.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:89:2919":{"id":"0:89:2919","crate_id":0,"name":"try_parse","span":{"filename":"src/parser.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Parses a `Uuid` from a string of hexadecimal digits with optional\nhyphens.\n\nThis function is similar to [`parse_str`], in fact `parse_str` shares\nthe same underlying parser. The difference is that if `try_parse`\nfails, it won't generate very useful error messages. The `parse_str`\nfunction will eventually be deprecated in favor of `try_parse`.\n\nTo parse a UUID from a byte stream instead of a UTF8 string, see\n[`try_parse_ascii`].\n\n# Examples\n\nParse a hyphenated UUID:\n\n```\n# use uuid::{Uuid, Version, Variant};\n# fn main() -> Result<(), uuid::Error> {\nlet uuid = Uuid::try_parse(\"550e8400-e29b-41d4-a716-446655440000\")?;\n\nassert_eq!(Some(Version::Random), uuid.get_version());\nassert_eq!(Variant::RFC4122, uuid.get_variant());\n# Ok(())\n# }\n```\n\n[`parse_str`]: #method.parse_str\n[`try_parse_ascii`]: #method.try_parse_ascii","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Uuid","id":"0:604:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Error","id":"0:302:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:2076":{"id":"0:238:2076","crate_id":0,"name":"context","span":{"filename":"src/timestamp.rs","begin":[351,0],"end":[351,15]},"visibility":"public","docs":"Default implementations for the [`ClockSequence`] trait.","links":{"`ClockSequence`":"0:230:2078"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:537:2077"],"is_stripped":false}}}},"paths":{"1:11046:3503":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:43384:3960":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:5712:4177":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12572:4440":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11214:8056":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:10999:7248":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:7330:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:22278:15252":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:2902:21789":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:3380:8289":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:8036:15478":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:8499:2099":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:8492:7631":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"6:5382:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:5898:8309":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:46417:7856":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:15734:5248":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15426:5150":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:538:4260":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13046:4575":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:22955:7381":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:14298:4831":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13116:4585":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:2827:3478":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:42500:3729":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7437:7148":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:4279:15570":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:40344:4273":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:698:4280":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2878:5424":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:46510:7863":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:6837:7323":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:5522:8299":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:5381:202":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:41548:3505":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:13832:4745":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"9:482:21640":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:3396:4172":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:43570:3958":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11702:4457":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:5385:4402":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15931:4598":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:10982:22732":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:4073:3486":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5296:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:9435:4131":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:22700:7353":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"9:357:21656":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:4830:5472":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:6590:35381":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10954:22731":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13855:4748":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:2423:3505":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:10915:35977":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14449:4862":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:3138:3701":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:15151:5078":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:16235:5374":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:10439:4412":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:5269:203":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:9755:22696":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:22646:7344":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3954:3505":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:43325:3950":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:31953:5740":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:10759:4440":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:43366:3961":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6588:5588":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:4042:15543":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"4:11187:7272":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:4837:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:32070:3704":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:4614:5466":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:4268:7258":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12824:22723":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:622:4015":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:10509:3815":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:42698:3817":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:517:6092":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5020:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:1887:3505":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:4940:5476":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:31967:3732":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:2338:5393":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6562:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:1692:6261":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5037:5479":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:39945:7596":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15616:5218":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:8030:15445":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:7537:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:43890:7716":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14560:4876":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14066:4780":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:9658:137":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:39033:3507":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:8029:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:45805:7790":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11853:8091":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:32041:3705":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:5347:5483":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6976:5660":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:43798:7713":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12929:4568":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:8196:7168":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:46464:7859":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:765:26907":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10185:4404":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:8615:148":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:1107:8217":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"0:207:2075":{"crate_id":0,"path":["uuid","timestamp"],"kind":"module"},"16:7769:5755":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:6749:5624":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6447:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:45496:7766":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"0:209:3203":{"crate_id":0,"path":["uuid","timestamp","UUID_TICKS_BETWEEN_EPOCHS"],"kind":"constant"},"6:5181:6446":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7306:35969":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:868:15458":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:9671:22699":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:7831:4399":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12422:4529":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:37710:9927":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:44116:7272":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:296:3494":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:14575:4531":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:41588:3671":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:42706:7683":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:8351:7119":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10284:4407":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:6947:4179":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"4:4241:33579":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:39468:3708":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"0:0:2434":{"crate_id":0,"path":["uuid"],"kind":"module"},"17:11557:8071":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:4092:15545":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:15836:5273":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:10642:8288":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"4:4859:15558":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:8201:7171":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:14131:4786":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:2432:15491":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:42714:3816":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:23021:7387":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:6025:7314":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4739:3733":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:40309:7623":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:39956:3953":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5489:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"0:548:2104":{"crate_id":0,"path":["uuid","Version","Nil"],"kind":"variant"},"1:44134:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:12314:1788":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:7132:5685":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:1575:3503":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:1628:6225":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"0:587:2128":{"crate_id":0,"path":["uuid","Variant","NCS"],"kind":"variant"},"4:11168:7247":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"9:178:8850":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:7554:7149":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9737:22698":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:724:153":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5283:6502":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:42938:7689":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6664:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:21460:29823":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:8145:7165":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:465:2866":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:1586:4172":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:41682:195":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7857:5765":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:33184:9922":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:13503:8405":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13844:4747":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:754:4294":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5472:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:8259:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8618:3506":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:9129:3503":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:33243:9921":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:532:6101":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:787:5966":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:7512:3495":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5643:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:42723:156":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:3029:4297":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:22383:4032":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"18:491:4251":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:5556:8302":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"18:613:35984":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6342:35971":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:3549:8290":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4963:9974":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:1593:6196":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8282:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:4467:7258":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4606:8388":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:824:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:4352:5459":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:8259:5740":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:21477:29828":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"10:44:5982":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:3345:141":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15701:5241":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:8174:138":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:14372:4842":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:40053:10005":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11250:3960":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5536:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:1153:35477":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2515:4032":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:12813:3501":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:6609:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:42491:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13753:4732":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:13959:4765":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"0:547:2102":{"crate_id":0,"path":["uuid","Version"],"kind":"enum"},"1:31911:3477":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:45283:7747":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"13:226:5953":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:11574:7282":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:41282:7648":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:10252:3721":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:12949:4513":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"18:507:4252":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"9:502:6041":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:45575:7778":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5686:5426":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:1309:5686":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:578:6126":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"4:6394:7156":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:10877:7165":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"14:220:5906":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5466:6590":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6317:8151":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6231:5559":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:8093:5807":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:16069:5335":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:42463:27194":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12485:22846":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:23010:7386":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"16:4882:5474":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1062:35381":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:8012:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:11788:8082":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5671:6673":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:16198:5365":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"4:4743:15547":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:952:8213":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:8778:15606":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:8202:5446":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:45820:7791":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:44404:7743":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:2987:8283":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:700:3505":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:13645:7337":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:44392:5979":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:8073:5806":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7387:8252":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11537:8070":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5306:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:41244:169":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:7640:3488":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:3242:31604":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7109:35411":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14752:4908":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7480:3761":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:4391:9956":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:40174:7606":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:15608:5215":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:15390:5141":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:15116:5068":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:860:3505":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:0:3415":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:43293:8423":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:5891:8305":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5212:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6466:5579":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3552:9937":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:3196:5392":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:2700:8278":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:2548:5974":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:39964:3952":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:22733:7356":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11354:8063":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:718:4285":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:12575:7701":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15769:5261":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:6505:185":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:2203:8031":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11933:3946":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5277:6499":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:1886:8271":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:6335:8159":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:22933:7379":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"4:4755:6980":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:11647:4453":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12724:22722":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11063:8050":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5846:5498":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:11026:22733":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:589:4263":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:22988:7384":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:46536:7865":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:9359:186":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6880:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:9121:7248":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:5483:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:3149:3479":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:11205:3266":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:11371:8400":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:3245:34028":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:3337:8287":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7656:22660":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:4468:5461":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:5587:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:4:1232":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:5136:423":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:14503:4868":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"0:537:2077":{"crate_id":0,"path":["uuid","timestamp","context","NoContext"],"kind":"struct"},"4:11580:8376":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:42217:3017":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3711:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:11166:4426":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:261:8025":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:8218:8335":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:1073:8219":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:40275:7620":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:8265:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:4489:7306":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6813:5638":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:7900:33509":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:43312:3497":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:437:4352":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9781:22714":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:2621:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:14847:4991":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:5192:8298":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11242:8058":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:8253:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:40257:7618":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:41326:7655":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:44277:149":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:11155:7246":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7580:5748":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:7650:28995":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11051:8049":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:10157:7659":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:8828:3503":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:39998:7598":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14091:4782":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:4062:5458":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12345:8403":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:13387:4643":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:3842:5455":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6409:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:46438:7857":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:7407:35839":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3468:210":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:473:6064":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:30480:27208":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:45525:7768":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:828:8228":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5665:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:22749:27185":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:8763:7234":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"0:554:2108":{"crate_id":0,"path":["uuid","Version","Dce"],"kind":"variant"},"17:14386:4844":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:7944:15506":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:12515:7697":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12329:10066":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:41466:7663":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"14:40:4613":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:481:4250":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:16138:5349":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"18:680:4276":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11075:4424":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:1087:35932":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:46651:7876":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:16212:5369":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:497:6075":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:44280:163":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:9108:7247":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13568:4687":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:12834:3937":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:13627:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:5062:7258":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:3647:3503":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:3820:3486":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"5:1169:35354":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2612:5412":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12707:8119":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1325:8215":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:2369:8225":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:42436:7671":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6650:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:12316:1776":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"11:844:15457":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:12311:863":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:22977:7383":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:41823:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:4743:5469":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:42475:5784":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:706:3938":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:6651:7159":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:10890:7267":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:21580:7340":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:3586:9942":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:12312:1800":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"18:659:8019":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5174:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7633:35961":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:4308:3503":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11138:3944":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6634:5433":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:45865:7808":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:7584:7072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:40741:7639":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:15582:5207":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:5970:8310":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6597:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:1825:8268":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"6:5361:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13064:4578":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:1621:6221":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:43273:8422":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:14012:4772":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:1810:676":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:40717:4124":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:22818:7371":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11324:8059":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6714:6858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:11493:8066":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:22:796":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:1724:35381":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:2374:5401":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:5506:1673":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"1:7702:10009":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"7:31:21627":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14051:4777":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:44169:10122":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:41444:7217":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:45788:7789":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5515:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:3208:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7799:5432":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:6157:7258":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5415:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:22811:7368":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:7968:7162":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12516:8110":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:5336:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:13538:4675":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:39275:8410":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14994:5044":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12454:4534":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11128:4392":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5031:6418":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:2352:8215":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:7648:8194":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13308:4631":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:3264:8035":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:41979:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15822:5270":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5219:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"15:327:8836":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:5212:7144":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1496:6139":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:4821:8038":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:22944:7380":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:15445:5155":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:1544:8205":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:1883:3503":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:22414:15506":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"11:364:35938":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:42059:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:6780:8319":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:5352:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:4641:5467":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:669:8227":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:40145:7333":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:9095:7246":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:8565:7217":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13292:4627":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10256:3015":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5914:5508":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:10245:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:5407:1219":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12993:22724":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:43534:3957":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:43941:10112":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:44104:7734":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:39972:3951":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:281:35381":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"0:566:2116":{"crate_id":0,"path":["uuid","Version","SortMac"],"kind":"variant"},"4:9137:8348":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:8620:6967":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11419:4440":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10573:35978":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8662:27521":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:41745:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:736:189":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:4238:7258":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:941:3503":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"0:435:3028":{"crate_id":0,"path":["uuid","fmt","Braced"],"kind":"struct"},"1:21421:3693":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:39113:4167":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:2602:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:21562:15164":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4458:8387":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6689:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:11674:4455":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:43488:3962":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8159:164":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1510:6144":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14111:4785":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:2998:5447":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5700:5429":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:4730:9964":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:43588:3959":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:7585:10022":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:42538:3730":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11089:8052":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:39205:213":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:7331:30902":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13187:4598":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:44112:7736":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6353:5566":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10092:22721":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11877:4467":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6543:5587":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:1923:5970":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14402:4848":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:15058:5054":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:9289:3672":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:3283:35838":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:12629:3944":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7594:7154":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3558:9939":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10671:35980":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:39282:7461":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:11635:8327":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:30416:4165":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:8317:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:5916:3486":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:46589:7868":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1516:5965":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:5927:5509":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:8271:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:4630:15574":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:1686:6260":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:33066:3480":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13581:4691":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:7397:7147":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:6611:4124":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"5:7348:4170":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:9195:15627":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:10219:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:7457:3505":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:10920:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:3427:15532":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5236:6476":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:39145:209":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:5677:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:3475:5451":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:44356:8426":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:11070:3504":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7365:7146":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:5452:3941":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2443:3486":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15748:5255":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7421:3505":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:9665:8332":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:5025:15592":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:21443:29818":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:45268:7744":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5160:6443":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4979:6391":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6843:7322":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:44092:7731":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:46484:7861":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:4608:15573":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:16187:5364":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:45298:7748":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:12309:876":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:14977:5042":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:22369:15254":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:10713:27126":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11856:8401":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:40234:7614":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2517:4033":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:11367:4424":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14933:5037":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:46455:7858":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13606:4695":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12342:4520":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:13047:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:13702:151":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5244:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11755:4465":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13509:4664":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:40732:7638":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:7288:9331":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13594:4692":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:6915:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:46219:7850":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:43342:3949":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:5846:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:8597:7219":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:15760:5257":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:2943:136":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:22593:7343":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4824:6306":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:15383:5140":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"19:0:1249":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"18:608:8018":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10681:27085":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:10264:3724":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:868:5965":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14516:4869":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:7682:33561":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:41598:3674":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:39907:27201":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:881:5966":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13774:4736":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:41862:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11329:3963":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13797:4741":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6948:5435":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:22863:15506":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:12808:4561":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:44365:179":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:3184:9934":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:8250:3511":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:40037:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:46559:7866":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8118:10020":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:32040:3513":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:6433:5573":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4971:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:13478:204":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:9376:233":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"0:369:3020":{"crate_id":0,"path":["uuid","fmt","Hyphenated"],"kind":"struct"},"6:5457:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:2756:7136":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:12300:1639":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:2430:4021":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:8122:10019":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:2307:7132":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:10264:8270":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:1354:8219":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:8152:7166":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12851:4563":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:22196:15250":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:5195:8392":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:9916:22717":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7111:5683":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:8118:5810":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:44096:7732":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12494:4537":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:832:8220":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:521:26908":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:482:33502":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:21431:29818":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:13252:4616":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:6723:8317":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:11541:8374":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"5:924:15459":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:40710:7636":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:2508:5407":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6900:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:14436:4861":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13674:4699":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:2469:4172":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:41609:4020":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:40243:7615":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11634:4452":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11715:4458":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5191:6453":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:430:35944":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:41557:3670":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:42196:3722":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:10577:33507":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:43748:10111":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6441:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:1160:8219":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:4685:3732":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:9938:22718":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:6116:7156":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:43658:3942":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:7429:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:43975:3966":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2864:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"16:5802:22649":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:545:6108":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:4856:5473":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:22725:7355":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:2234:8034":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:6811:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:14855:4994":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"0:521:2079":{"crate_id":0,"path":["uuid","timestamp","Timestamp"],"kind":"struct"},"17:12150:4506":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13015:4531":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:15720:5246":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:45347:7753":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:5536:8301":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:564:6118":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:16269:4648":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:5448:3940":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:43962:7722":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:16249:5375":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:12659:8115":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:41298:10028":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:2572:5410":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:2660:133":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:4924:6367":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:42210:3015":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10461:152":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:15410:5147":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10905:8046":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"11:396:35933":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13437:4650":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:1828:4172":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:45977:7812":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:7888:5769":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:1597:5968":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:8006:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:3329:5450":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1426:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:22677:7349":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:8216:5819":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11102:8053":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:12298:1270":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"16:7539:5439":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:43238:7333":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"11:102:5954":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:21687:7340":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:14868:5001":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:12262:8859":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:42203:3721":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2932:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"16:5897:5503":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:581:3693":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6398:5425":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:4437:35388":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:13757:4169":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:45689:7784":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11095:3961":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:14599:4886":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:43649:3943":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:10534:8347":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3740:35381":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:8591:8342":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:7389:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:4271:15569":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11743:4462":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:7061:5675":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5225:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13424:4649":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:5948:7258":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6758:5625":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:542:5382":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:42517:136":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:22900:7376":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"4:10285:8360":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:8306:177":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:2562:5976":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"11:2304:5686":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:11313:4437":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:1494:3505":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5200:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:11056:33506":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:15039:5053":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:415:184":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11467:4447":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6532:5586":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5046:6425":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:11717:9243":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:44335:8424":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:923:8207":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"0:575:2122":{"crate_id":0,"path":["uuid","Version","Max"],"kind":"variant"},"1:44084:7729":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14147:4791":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:9262:31047":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:2678:27113":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:11270:7275":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:43416:3965":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:3778:5453":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:9255:8351":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:46027:7814":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:4986:8039":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:10048:3741":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:7516:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:8740:7684":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:5817:5493":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13146:4589":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:7473:5533":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5781:5430":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:4863:15561":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"9:392:21642":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1653:6244":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:15957:5291":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5756:8123":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:33785:9926":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3374:4168":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:10848:8368":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:32832:9920":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:40703:7635":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:21560:15506":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5006:5478":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"4:8524:8344":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4786:3734":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4349:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:14986:5043":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12225:8104":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:5048:15594":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"0:594:149":{"crate_id":0,"path":["uuid","Variant","Future"],"kind":"variant"},"4:11222:7274":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:4992:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:41940:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:8583:8345":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1680:6257":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"9:0:3409":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:8616:8346":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:45467:7764":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:7934:7160":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6782:22656":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:643:4252":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:46574:7867":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:1534:8220":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11256:4430":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:13665:7339":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:4897:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:2728:5417":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:2287:35876":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:9417:3266":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:8512:3954":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:12302:1761":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:1945:7300":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:8162:7167":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:21987:7341":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12030:8093":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:12313:1782":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:12089:4503":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13877:4755":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2854:162":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:25873:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:41657:3503":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:3780:15541":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:4811:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:6560:5428":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:12819:3492":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12597:4542":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:10254:3722":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:42957:7691":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2655:200":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14414:4850":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:6937:4178":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:43863:7715":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:16105:5342":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:1098:8028":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5581:6630":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:15324:5122":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:15222:5096":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12647:8114":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:4718:5468":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:30448:4048":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7006:8163":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10251:4406":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:904:4172":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14260:4827":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5107:5481":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:12306:734":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:42446:3729":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"9:424:21643":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:538:6104":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:2984:4018":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:10872:7261":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:46367:7854":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:12828:3938":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11524:8069":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:15376:5139":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3293:9940":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:2039:197":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:45554:7777":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:14189:4813":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:3616:15524":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"16:7604:5442":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:40328:7625":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:43181:8419":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:1051:8215":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5722:5431":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:45415:7761":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:733:9850":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:7314:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:5400:4403":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:11315:8373":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13526:4672":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:850:3504":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6574:5445":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12863:4564":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:45721:7786":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10997:4421":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:3531:7215":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:7602:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6491:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:3571:29089":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7014:22657":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:6848:7321":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6927:5656":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13999:4770":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13089:4579":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:2037:8030":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:12318:1860":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:15418:5148":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:45894:7809":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:12591:7702":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15678:5240":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:33302:9923":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13375:4642":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:3248:34030":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:2101:8234":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5653:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:10828:35972":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7618:5749":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:8438:7211":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:16176:5363":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:9858:22715":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:46338:7853":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10622:35973":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:21568:15167":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6665:22655":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:651:4252":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:12305:718":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"18:670:8023":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:1579:3505":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:31949:8408":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"15:394:21753":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:2283:4040":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:45767:7788":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:5223:8298":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:856:8210":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:3022:136":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:7755:5434":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:8304:2769":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:5960:5516":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:42753:7688":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7727:5443":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:42098:8395":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6768:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:7874:4290":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:7379:35968":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:8818:7239":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:46142:7849":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6478:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2418:5403":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6442:5574":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:2326:8214":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:6132:219":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:8692:7231":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:4891:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:45330:7752":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:2501:653":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:45383:7759":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:8675:3665":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:5641:8304":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"0:230:2078":{"crate_id":0,"path":["uuid","timestamp","ClockSequence"],"kind":"trait"},"17:14212:4822":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:39880:3952":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:9670:33471":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:8294:8336":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:22111:15166":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:9903:27518":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1463:3503":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:10351:9020":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:40726:7637":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:8306:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10769:35979":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6738:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:12189:8101":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:22456:15247":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:6648:7317":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:8341:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12076:8096":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:12278:31046":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6849:5651":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:43674:3952":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:6794:8323":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:1585:6191":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:15289:5111":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:41432:7662":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"0:238:2076":{"crate_id":0,"path":["uuid","timestamp","context"],"kind":"module"},"1:39167:211":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"14:0:3413":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:39896:7591":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:45482:7765":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13363:4639":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:43336:3496":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:357:8256":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:42953:7690":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:40196:7608":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:7339:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:8155:5816":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:6139:7316":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:5367:22648":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"9:330:6019":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:11688:4456":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16079:5336":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"4:9364:8313":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:9886:22716":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:2458:15501":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:1041:5686":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11661:4454":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15814:5267":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1559:6175":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:43352:2099":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:31974:7454":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"5:6392:15631":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:1064:8215":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13785:4739":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:219:8226":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:14545:4872":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4916:6365":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:3606:15504":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:16050:4626":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:7359:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5546:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"0:258:2099":{"crate_id":0,"path":["uuid","Bytes"],"kind":"type_alias"},"5:7084:35391":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6385:5569":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:12296:1821":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:16121:5347":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:8577:15572":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"14:165:21726":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:553:6113":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:15400:5144":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:45915:7810":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14325:4835":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:3145:3703":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:4757:6982":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:8294:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6480:5427":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:11563:34188":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:41620:192":{"crate_id":1,"path":["core","result","Result","Ok"],"kind":"variant"},"5:3806:8234":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4800:6288":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:4913:5475":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:45706:7785":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3164:5700":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:11045:33504":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6821:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:4140:15548":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:7561:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:39886:7590":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13455:4658":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13922:4761":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:9391:8326":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:6000:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:37820:9929":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:31984:3277":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:12443:4533":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4502:5462":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3541:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6678:6841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:22328:29154":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:40368:7628":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:4344:8294":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:7945:7161":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:5290:6504":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:40005:9981":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"11:2231:5971":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:860:8122":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:4870:6340":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14177:4810":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:80:26895":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:9303:7254":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:3249:35837":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7528:5743":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:479:6067":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:123:5955":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12530:8112":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:5404:35381":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:4708:15591":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:8197:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7570:5440":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12408:4528":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:41623:135":{"crate_id":1,"path":["core","result","Result","Err"],"kind":"variant"},"6:4952:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:1940:4013":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:43112:8418":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10250:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:15313:5118":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:1025:8214":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:9210:15629":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15655:5227":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:0:1665":{"crate_id":4,"path":["std"],"kind":"module"},"1:21507:15506":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:11595:4448":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:7546:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:3845:8292":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11799:8083":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:800:3486":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"14:31:8200":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:8168:3512":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11405:8065":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:4819:15595":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:7617:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6379:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10877:8045":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:3020:225":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:43163:7330":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:3871:4172":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5588:6632":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7412:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4771:5470":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:22316:15253":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:12543:8113":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:15281:5110":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12238:8105":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:8188:8199":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:1859:7258":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:15266:5108":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13473:4659":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:15010:5045":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:7452:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"13:0:3407":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:39922:7594":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:2596:8277":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:2151:8215":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2691:194":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:10615:10080":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13814:4744":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4942:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11567:8072":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:45429:7762":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:929:15457":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:0:980":{"crate_id":6,"path":["libc"],"kind":"module"},"1:39935:7595":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:39069:9941":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:21999:29825":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11730:4461":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:5320:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:7586:10023":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:16223:5371":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:12308:870":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"5:7538:4122":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:673:3503":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2458:5405":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:33125:4133":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:41523:172":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:44343:7739":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5636:6660":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:7461:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:523:6095":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12043:8094":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4864:6339":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2808:5421":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:22461:15245":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:0:3417":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:8482:7606":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:11646:7288":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6278:8132":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:13451:29434":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11497:8067":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5344:6521":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:1603:5969":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13899:4756":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7144:22658":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2438:5404":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:2660:5414":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7446:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5831:5496":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10661:8042":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:40266:7619":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:22966:7382":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:2684:5415":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:4917:8297":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:15301:5117":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:113:26897":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:919:8206":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:1447:155":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:5075:5480":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:14723:4888":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:1207:8029":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:2280:8276":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"16:5307:5482":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:43993:3493":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:15799:5266":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:8845:7243":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:3597:8037":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:3014:21791":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6542:6771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15023:5050":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6802:5637":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14356:4841":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:9336:7257":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:2042:196":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"15:0:3414":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6160:21761":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:12267:15446":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:12361:2880":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:5925:3666":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:7437:33569":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:7823:22661":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3546:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:40024:7602":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11605:2102":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:7841:8379":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:3669:4302":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4802:5471":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:40287:7621":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11293:22751":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:7465:3505":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12328:4515":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2528:5408":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:22769:27205":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:6307:33494":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:5415:5484":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:3036:35356":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:43470:3963":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6895:5653":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:9244:8349":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6435:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11343:3962":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:150:5380":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:5784:7157":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:33612:9925":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11269:22750":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:11865:8092":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:10982:31056":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:9716:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:9399:161":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"5:7630:3487":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:40138:8412":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:2278:137":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:22831:7372":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:4923:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:3278:5967":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"9:53:8839":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:689:4279":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"8:0:3408":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:4325:8385":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12621:4543":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:6532:6764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:14489:4865":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:12839:3936":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6471:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:3614:5452":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:504:15427":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:43172:7331":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:646:15441":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:3237:3503":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:10867:7259":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:46612:7869":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11153:8044":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:15102:5067":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"11:1903:5967":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:15342:5126":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5502:6604":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:10218:4405":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:10425:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:6053:15679":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:1896:4172":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5557:6623":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:328:5959":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:43201:8420":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:598:35986":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10260:205":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:1580:6189":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10524:8040":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4787:6279":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2592:5411":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15176:5086":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5134:6441":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:8299:2120":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:15463:5158":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:22109:15506":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:8642:7220":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5052:6427":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:8140:8332":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13972:4474":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:44284:218":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"0:391:3023":{"crate_id":0,"path":["uuid","fmt","Simple"],"kind":"struct"},"4:915:8205":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:2205:7123":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:6615:8316":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:9231:7253":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:43212:7692":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12552:7700":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:4103:35381":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:2112:8235":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"0:551:2106":{"crate_id":0,"path":["uuid","Version","Mac"],"kind":"variant"},"1:21958:15506":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:41673:3505":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:12478:4536":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:8226:7121":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:41617:225":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"11:2383:3503":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:12887:10105":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:623:35983":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:9290:8356":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12213:8103":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:12307:888":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"14:214:5904":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:43640:3945":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:2197:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"4:641:8263":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:43516:3956":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:13946:4762":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:4162:15552":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1555:8206":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:687:3504":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:11780:8292":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14463:4863":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13553:4681":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:15:2403":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:15168:5083":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:9497:8271":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:44302:206":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:1535:6158":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:513:8027":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7429:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10534:35976":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:14529:4870":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:5598:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7366:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:8300:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:0:3411":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6263:5564":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:1603:8222":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:41484:7664":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:46264:7851":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11189:4428":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:6849:232":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:6872:5652":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5477:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:42735:7684":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:2478:5406":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3660:3504":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:1707:6268":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:586:6130":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11583:8077":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5064:6436":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:4150:15549":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:41504:193":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:13325:4633":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"4:12295:458":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:559:6116":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:41600:10036":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12056:4500":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:40503:7632":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14912:5032":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:2504:3350":{"crate_id":4,"path":["std","io"],"kind":"module"},"2:234:225":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12557:4424":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"4:3470:7638":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"10:36:5981":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:9151:7249":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:43927:7717":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14788:4939":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:7523:15456":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:40517:7633":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:46396:7855":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12508:4540":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:6729:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:45400:7760":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6519:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:22302:15506":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:11240:161":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:41784:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11341:8062":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10137:22697":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:41532:3503":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:7881:33500":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:10930:7212":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:3176:9932":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:2748:5418":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:40165:8413":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:7348:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1723:6273":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:10939:31053":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10399:2099":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:3025:3482":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:1930:2073":{"crate_id":4,"path":["std","error"],"kind":"module"},"0:572:2120":{"crate_id":0,"path":["uuid","Version","Custom"],"kind":"variant"},"16:2394:5402":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:40751:7640":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:7259:33514":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:7497:5742":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11898:4469":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12792:4366":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:8834:7242":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:40:4171":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5769:5491":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:40759:7642":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7695:5753":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:2234:7126":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:875:8212":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7038:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:15473:5163":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6524:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12371:4568":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:638:8261":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:15333:5125":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:8450:7212":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:5528:6606":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:2697:201":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2816:2094":{"crate_id":1,"path":["core","convert"],"kind":"module"},"17:12201:8102":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6066:5529":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:39979:9980":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:3096:3698":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:10901:238":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1566:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10891:15506":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13235:4613":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:39245:9935":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:40215:7611":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:2536:5972":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6874:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:1066:21719":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:10948:31041":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14025:4773":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:3500:7258":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:2826:15506":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:12246:8382":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:299:5956":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:573:4252":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:0:3416":{"crate_id":17,"path":["object"],"kind":"module"},"17:13211:4612":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4932:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:597:4399":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:11621:7286":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1485:6134":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:11652:7289":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:30850:3693":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14587:4879":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:45450:7763":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:4531:5463":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14079:4781":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13344:4638":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6427:8162":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:11889:8402":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:46521:7864":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6504:5583":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:21963:15170":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:5034:15593":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:31985:243":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:774:5965":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:434:35945":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:2448:15496":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:1639:6233":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13766:4734":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:2140:8214":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7098:5680":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:32072:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:11607:7285":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11115:8054":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:2708:5416":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10068:22703":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:8136:5813":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:10283:8361":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:14876:5002":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:38454:9931":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:7988:4126":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:2857:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:7582:7152":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:2664:8279":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:33439:9924":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6788:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:894:3486":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:1575:8233":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:15944:4612":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15434:5151":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:39295:7462":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:43683:3953":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5039:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11764:4466":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6629:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:3791:7121":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:5376:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:43251:8421":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:1566:21720":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5102:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7741:5444":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:2446:15495":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:6670:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7168:7254":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5995:5519":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:45607:7780":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6494:5582":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:15356:5133":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:4976:5477":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:534:15431":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:11357:8399":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"15:288:21743":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6098:22651":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12671:8116":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:45592:7779":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:2195:15427":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3324:3508":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10504:3814":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:8288:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:40108:7308":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"11:1891:3486":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:35834:5706":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:3925:5457":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:3287:8285":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:7377:3486":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:12319:1372":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"16:7085:5676":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:1827:8269":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"18:635:4275":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:9145:3505":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:15092:5066":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40118:8411":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"11:1142:8218":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2548:5409":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:7357:3505":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"0:592:2132":{"crate_id":0,"path":["uuid","Variant","Microsoft"],"kind":"variant"},"0:569:2118":{"crate_id":0,"path":["uuid","Version","SortRand"],"kind":"variant"},"6:6763:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:2303:21762":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:45315:7751":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:42020:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:8301:5826":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:6726:15623":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:22999:7385":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:39991:7597":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:9295:8357":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:11062:33511":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13738:4727":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4909:6361":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1503:6142":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:7567:10005":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:403:8026":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:10959:8331":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"4:12081:33126":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13986:4769":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:10684:4126":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"4:8572:7218":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:14475:4864":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:40042:7603":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:21685:15165":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:8328:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:10698:27113":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:9381:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:40493:7631":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:14341:4837":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13497:4663":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:12299:333":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:1938:652":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:43815:7714":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15138:5072":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5400:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2067:4049":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6047:8125":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:7963:2095":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:15992:5321":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:6456:22654":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:11801:8293":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:0:545":{"crate_id":1,"path":["core"],"kind":"module"},"6:5112:6439":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11510:8068":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10818:8044":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:10258:3017":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2768:5419":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10200:225":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:2044:4050":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:44294:226":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2636:5413":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:5237:955":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:6775:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"18:531:4257":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5250:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:11869:34071":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12683:8117":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:6412:22653":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"11:1917:5969":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:2323:21788":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:43769:7705":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:3304:5970":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10317:4408":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:2355:5395":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:515:4255":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11841:8090":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:22922:7378":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:10018:22700":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:11179:31057":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12584:8044":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:39185:214":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:46006:7813":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:1526:6152":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7559:5747":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:23473:235":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:7485:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5565:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:22911:7377":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"0:413:2356":{"crate_id":0,"path":["uuid","fmt","Urn"],"kind":"struct"},"11:1676:35940":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12289:4508":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:2124:5686":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:12320:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"6:5314:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:30823:195":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:45738:7787":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:11876:7293":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7509:8186":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:21509:15168":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:8210:8334":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:3899:5456":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10044:22720":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:43952:7718":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:30469:3729":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:2936:21790":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:41665:3504":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:7606:8253":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:8505:3961":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:12317:944":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:14284:4830":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:8051:8331":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:837:3503":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:2542:5973":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:45362:7754":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15596:5213":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:12294:1150":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:21676:15506":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4602:220":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:14246:4825":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"3:0:3406":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15273:5109":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:9078:8347":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:44080:7728":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:12251:8106":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:6914:4177":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:1975:1313":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:10911:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:39225:215":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:837:8207":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:8016:15444":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:6940:5658":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:41410:27280":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6648:5600":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:1582:8221":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15635:5224":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8624:10018":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:3947:8293":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7428:22659":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13024:22725":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:40296:7622":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12175:8097":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:447:21641":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12300:22844":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5863:22650":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:43283:7335":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:8197:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:41266:7646":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:6411:15632":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:4759:3707":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:43191:7332":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"13:109:35950":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:1910:5968":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:22330:4032":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"4:2287:15488":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:4292:15571":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:2860:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:5157:27146":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:3588:2433":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:4532:3731":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:5624:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:4078:15544":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:5617:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:22428:15246":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"0:112:781":{"crate_id":0,"path":["uuid","fmt"],"kind":"module"},"1:2851:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:12278:8108":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:5572:8303":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5390:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:46065:7816":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:10636:8284":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:12293:405":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"6:6636:6823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:15126:5069":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11812:8086":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4560:5464":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:9249:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:6120:22652":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7910:22662":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13272:4626":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:5266:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:14311:4832":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:735:26906":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6026:5525":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:43784:7711":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:9908:8861":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:8462:15505":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:15521:5200":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3311:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6706:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:44108:7735":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:31960:8409":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"11:1007:5686":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10201:2433":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:40080:2099":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"4:363:8258":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:15078:5062":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:39117:7458":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15456:5156":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:42745:7687":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"14:7:8200":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:3597:34220":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11215:8397":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:3842:8291":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6721:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:10710:8043":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:710:8205":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11825:8088":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:1671:6251":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:21475:29814":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15249:5100":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:2554:35943":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"14:202:3485":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11227:8057":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:8247:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:16032:4616":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:3032:35355":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"0:546:2434":{"crate_id":0,"path":["uuid","uuid"],"kind":"macro"},"4:2739:8282":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:14038:4775":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12107:4440":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12388:4526":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5370:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:742:8206":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:31983:236":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:4876:6342":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:6753:35381":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6698:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:4885:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1565:6177":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:2175:22778":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:40090:9991":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6505:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:22661:7345":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:4499:8296":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:1699:6264":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:12773:2906":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15206:5092":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9807:22704":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:4100:15546":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:6746:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:940:8210":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12969:4570":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:3270:5969":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:1055:8214":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"0:590:2130":{"crate_id":0,"path":["uuid","Variant","RFC4122"],"kind":"variant"},"1:9721:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1490:6136":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:16259:4643":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:40205:7609":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3335:3510":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:491:6072":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:7590:5441":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:7467:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:7715:4173":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:7984:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:3810:5454":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:1340:8214":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:6032:7144":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:45657:7782":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5014:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:5709:6888":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:12399:4527":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"0:557:2110":{"crate_id":0,"path":["uuid","Version","Md5"],"kind":"variant"},"17:12695:8118":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:10887:35975":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:351:35935":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:7052:8164":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6079:5385":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:1888:8272":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"16:4587:5465":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13412:4648":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:5712:15611":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:15214:5094":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:96:26896":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:46475:7860":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:1969:4014":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:1517:6147":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:5104:3661":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:11547:4344":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:4940:15557":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5146:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:563:4262":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:3285:8284":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:589:15439":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:14968:5038":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15197:5091":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12900:4567":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:30454:7389":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:9372:7258":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:40319:7624":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13485:4662":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7397:35970":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:15368:5136":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:21489:29821":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"4:9386:8325":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"11:883:8213":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:8429:4290":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:41540:3504":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:12301:1673":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:3634:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5436:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4248:7258":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:16093:5340":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:4985:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15624:5219":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:2498:21715":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:4965:6383":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:485:6070":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5329:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:12362:4525":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:1663:6250":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:8135:4345":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:43434:3964":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:45932:7811":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:4834:781":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:9984:22719":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:6417:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:41706:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:0:3412":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:256:8024":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4337:8386":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:1608:5970":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:1478:3504":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:37875:9930":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"14:187:21731":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:570:6121":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:1582:3486":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8155:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:872:8025":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:3234:5701":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:21458:29829":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:3473:8036":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:46044:7815":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:6215:33512":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11773:4547":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6300:8147":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:39130:212":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:40187:7294":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:11857:7292":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:10469:156":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:1525:5966":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1547:6167":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3026:35353":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"14:160:8200":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:726:4288":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14271:4828":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:4753:6978":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:11915:22820":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:46495:7862":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2254:4052":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:32646:5696":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44381:7742":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:33958:5705":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10720:35974":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:10442:33469":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:8190:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:43630:3955":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:3378:8288":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6621:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10612:8041":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:11142:4440":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:811:4172":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:30197:9813":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:11443:4445":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:10967:8304":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"4:910:8220":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:22842:9863":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10419:4411":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11042:8048":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:6291:7337":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:4611:8389":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11621:4450":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6606:5596":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12264:8107":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2058:7301":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:22240:15251":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:45511:7767":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3342:140":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:43264:7334":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:7699:4172":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:15190:5089":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:14235:4823":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:32460:5699":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"0:604:2179":{"crate_id":0,"path":["uuid","Uuid"],"kind":"struct"},"6:4959:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3098:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:41901:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3108:3699":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"7:0:1850":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:5770:219":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7686:8195":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:5852:7258":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:22711:27277":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5122:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:946:8212":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7549:5746":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:15778:5263":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3103:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:4048:15542":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:22540:7342":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:9168:7250":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6962:5436":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:6339:8311":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:6671:3505":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:45674:7783":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:1591:5967":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3531:9936":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:44100:7733":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6657:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:4154:15550":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5423:6559":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:46309:7852":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4675:7307":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:558:8260":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12127:4505":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:5777:7156":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:10639:8286":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:2599:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:2838:5422":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12887:4565":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:9316:31048":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:22784:27204":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:40358:7627":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:11884:7293":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:9084:198":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:43665:3951":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:1863:8270":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:2848:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:5002:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:8226:22663":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:41599:3673":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:16151:5355":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:4501:35388":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"10:0:3410":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13173:4597":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12318:4513":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:37765:9928":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3623:9943":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5630:6657":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:16165:5358":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:1189:35478":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:7077:15630":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:11740:8291":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"7:78:21634":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:10901:7166":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:7306:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10155:4402":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:4861:15560":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"15:306:21744":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11288:8398":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12464:22845":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:8175:8196":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:43620:3954":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"11:2403:3504":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:5083:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:12315:1794":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:10262:3723":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6756:6871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"11:2569:3495":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11177:8396":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:4106:15547":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:730:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"0:586:2126":{"crate_id":0,"path":["uuid","Variant"],"kind":"enum"},"4:4822:15573":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15646:5225":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2133:188":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:11467:33495":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:44088:7730":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:7321:3670":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:44158:4136":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3339:139":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:9180:15628":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10350:4409":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7813:5757":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:40068:7604":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:45636:7781":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:8518:8342":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12433:4531":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:9283:8355":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5445:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12353:4524":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:4425:8295":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:7575:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7355:5723":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3154:4132":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6991:35962":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"0:560:2112":{"crate_id":0,"path":["uuid","Version","Random"],"kind":"variant"},"16:5742:5486":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:5449:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:40225:7612":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11392:8064":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:867:8024":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:5260:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:4424:5460":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12768:22701":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6460:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"0:563:2114":{"crate_id":0,"path":["uuid","Version","Sha1"],"kind":"variant"},"4:8529:15540":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:3179:9933":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:2525:7133":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:6442:219":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13399:4646":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:15569:5201":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:9399:3492":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:1976:764":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"16:6620:5598":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:2854:5423":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10170:4403":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4372:9955":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:3028:7129":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:11377:6038":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:6544:3486":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:4263:15568":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:3244:5968":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11574:5971":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13723:4723":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"9:238:7684":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:3335:8286":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:12310:882":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:11016:8047":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:2087:7121":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:4148:3504":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2788:5420":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}