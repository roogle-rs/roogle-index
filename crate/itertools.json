{"root":"0:0:1564","crate_version":"0.10.3","includes_private":false,"index":{"0:2406:1695":{"id":"0:2406:1695","crate_id":0,"name":"WithPosition","span":{"filename":"src/with_position.rs","begin":[9,0],"end":[14,1]},"visibility":"public","docs":"An iterator adaptor that wraps each element in an [`Position`].\n\nIterator element type is `Position<I::Item>`.\n\nSee [`.with_position()`](crate::Itertools::with_position) for more information.","links":{"`Position`":"0:4573:1719","crate::Itertools::with_position":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"src/adaptors/mod.rs","begin":[13,0],"end":[13,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::map::MapResults","name":"MapResults","id":"0:467:1624","glob":false}},"0:1858:1664":{"id":"0:1858:1664","crate_id":0,"name":"PeekingTakeWhile","span":{"filename":"src/peeking_take_while.rs","begin":[79,0],"end":[84,1]},"visibility":"public","docs":"An iterator adaptor that takes items while a closure returns `true`.\n\nSee [`.peeking_take_while()`](crate::Itertools::peeking_take_while)\nfor more information.","links":{"crate::Itertools::peeking_take_while":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3351:1623":{"id":"0:3351:1623","crate_id":0,"name":"Update","span":{"filename":"src/adaptors/mod.rs","begin":[1077,0],"end":[1080,1]},"visibility":"public","docs":"An iterator adapter to apply a mutating function to each element before yielding it.\n\nSee [`.update()`](crate::Itertools::update) for more information.","links":{"crate::Itertools::update":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:4337:4225":{"id":"0:4337:4225","crate_id":0,"name":"JustValue","span":{"filename":"src/duplicates_impl.rs","begin":[174,4],"end":[174,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:5657:6506":{"id":"1:5657:6506","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:7927","1:5659:23371"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3174:135":{"id":"2:3174:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:486:1614":{"id":"0:486:1614","crate_id":0,"name":"MapInto","span":{"filename":"src/adaptors/map.rs","begin":[106,0],"end":[106,68]},"visibility":"public","docs":"An iterator adapter to apply `Into` conversion to each element.\n\nSee [`.map_into()`](crate::Itertools::map_into) for more information.","links":{"crate::Itertools::map_into":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"MapSpecialCase","id":"0:2851:3312","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"MapSpecialCaseFnInto","id":"0:2872:3323","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:3388:4641":{"id":"2:3388:4641","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3395:4638":{"id":"2:3395:4638","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1640:1710":{"id":"0:1640:1710","crate_id":0,"name":"kmerge_by","span":{"filename":"src/kmerge_impl.rs","begin":[174,0],"end":[186,1]},"visibility":"public","docs":"Create an iterator that merges elements of the contained iterators.\n\nEquivalent to `iterable.into_iter().kmerge_by(less_than)`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["less_than",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"KMergeBy","id":"0:1632:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"KMergePredicate","id":"0:1620:3861","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[174,29],"end":[174,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::kmerge_impl::kmerge_by","name":"kmerge_by","id":"0:1640:1710","glob":false}},"2:13439:58655":{"id":"2:13439:58655","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16011:4340"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:992:1777":{"id":"0:992:1777","crate_id":0,"name":"zip","span":{"filename":"src/free.rs","begin":[120,0],"end":[125,1]},"visibility":"public","docs":"Iterate `i` and `j` in lock step.\n\n[`IntoIterator`] enabled version of [`Iterator::zip`].\n\n```\nuse itertools::zip;\n\nlet data = [1, 2, 3, 4, 5];\nfor (a, b) in zip(&data, &data[1..]) {\n    /* loop body */\n}\n```","links":{"`IntoIterator`":"2:8403:151","`Iterator::zip`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["i",{"kind":"generic","inner":"I"}],["j",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"Zip","id":"2:46799:1701","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:3207-0:5056:2627":{"id":"b:2:3207-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3177:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3210:127","2:3211:1415"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:397:3296":{"id":"0:397:3296","crate_id":0,"name":"dedup_pair","span":{"filename":"src/adaptors/coalesce.rs","begin":[128,4],"end":[128,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2506:1861":{"id":"0:2506:1861","crate_id":0,"name":"zip_eq","span":{"filename":"src/lib.rs","begin":[549,4],"end":[554,5]},"visibility":"default","docs":"Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.\n\n**Panics** if the iterators reach an end and they are not of equal\nlengths.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"ZipEq","id":"0:4601:1697","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8882:4544":{"id":"2:8882:4544","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1100:1633":{"id":"0:1100:1633","crate_id":0,"name":"exactly_one_err","span":{"filename":"src/exactly_one_err.rs","begin":[1,0],"end":[108,83]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3712:1634"],"is_stripped":true}},"0:1618:1653":{"id":"0:1618:1653","crate_id":0,"name":"KMerge","span":{"filename":"src/kmerge_impl.rs","begin":[108,0],"end":[108,45]},"visibility":"public","docs":"An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.\n\nIterator element type is `I::Item`.\n\nSee [`.kmerge()`](crate::Itertools::kmerge) for more information.","links":{"crate::Itertools::kmerge":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"KMergeBy","id":"0:1632:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"KMergeByLt","id":"0:3838:3860","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:2663:2625":{"id":"0:2663:2625","crate_id":0,"name":"fold_while","span":{"filename":"src/lib.rs","begin":[2400,4],"end":[2420,5]},"visibility":"default","docs":"An iterator method that applies a function, producing a single, final value.\n\n`fold_while()` is basically equivalent to [`Iterator::fold`] but with additional support for\nearly exit via short-circuiting.\n\n```\nuse itertools::Itertools;\nuse itertools::FoldWhile::{Continue, Done};\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nlet mut result = 0;\n\n// for loop:\nfor i in &numbers {\n    if *i > 5 {\n        break;\n    }\n    result = result + i;\n}\n\n// fold:\nlet result2 = numbers.iter().fold(0, |acc, x| {\n    if *x > 5 { acc } else { acc + x }\n});\n\n// fold_while:\nlet result3 = numbers.iter().fold_while(0, |acc, x| {\n    if *x > 5 { Done(acc) } else { Continue(acc + x) }\n}).into_inner();\n\n// they're the same\nassert_eq!(result, result2);\nassert_eq!(result2, result3);\n```\n\nThe big difference between the computations of `result2` and `result3` is that while\n`fold()` called the provided closure for every item of the callee iterator,\n`fold_while()` actually stopped iterating as soon as it encountered `Fold::Done(_)`.","links":{"`Iterator::fold`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2232:1688":{"id":"0:2232:1688","crate_id":0,"name":"duplicates_impl","span":{"filename":"src/duplicates_impl.rs","begin":[1,0],"end":[216,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2313:1690","0:2321:1689"],"is_stripped":true}},"2:13481:58667":{"id":"2:13481:58667","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:16011:4340","self::pattern":"2:13053:4461","prim@char":"1:16005:4335"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49563:5301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2588:1669":{"id":"0:2588:1669","crate_id":0,"name":"powerset","span":{"filename":"src/lib.rs","begin":[1590,4],"end":[1595,5]},"visibility":"default","docs":"Return an iterator that iterates through the powerset of the elements from an\niterator.\n\nIterator element type is `Vec<Self::Item>`. The iterator produces a new `Vec`\nper iteration, and clones the iterator elements.\n\nThe powerset of a set contains all subsets including the empty set and the full\ninput set. A powerset has length _2^n_ where _n_ is the length of the input\nset.\n\nEach `Vec` produced by this iterator represents a subset of the elements\nproduced by the source iterator.\n\n```\nuse itertools::Itertools;\n\nlet sets = (1..4).powerset().collect::<Vec<_>>();\nitertools::assert_equal(sets, vec![\n    vec![],\n    vec![1],\n    vec![2],\n    vec![3],\n    vec![1, 2],\n    vec![1, 3],\n    vec![2, 3],\n    vec![1, 2, 3],\n]);\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Powerset","id":"0:1956:1670","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,4],"end":[141,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::powerset::Powerset","name":"Powerset","id":"0:1956:1670","glob":false}},"0:1833:1663":{"id":"0:1833:1663","crate_id":0,"name":"peeking_take_while","span":{"filename":"src/peeking_take_while.rs","begin":[1,0],"end":[154,46]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1843:1713","0:1858:1664"],"is_stripped":true}},"2:3518:130":{"id":"2:3518:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3410:4642":{"id":"2:3410:4642","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:181","2:3413:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2558:1748":{"id":"0:2558:1748","crate_id":0,"name":"cartesian_product","span":{"filename":"src/lib.rs","begin":[1076,4],"end":[1083,5]},"visibility":"default","docs":"Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.\n\nIterator element type is `(Self::Item, J::Item)`.\n\n```\nuse itertools::Itertools;\n\nlet it = (0..2).cartesian_product(\"αβ\".chars());\nitertools::assert_equal(it, vec![(0, 'α'), (0, 'β'), (1, 'α'), (1, 'β')]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"Product","id":"0:2946:1611","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13078:5313":{"id":"2:13078:5313","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13080:3003","2:13081:23360","2:13082:23361"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13072:5314","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3400:4639":{"id":"2:3400:4639","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3402:181","2:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:877:1724":{"id":"0:877:1724","crate_id":0,"name":"either_or_both","span":{"filename":"src/either_or_both.rs","begin":[1,0],"end":[205,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3361:1725"],"is_stripped":true}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,4],"end":[145,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::rciter_impl::RcIter","name":"RcIter","id":"0:4014:1674","glob":false}},"0:5056:2627":{"id":"0:5056:2627","crate_id":0,"name":"FoldWhile","span":{"filename":"src/lib.rs","begin":[3586,0],"end":[3591,1]},"visibility":"public","docs":"An enum used for controlling the execution of `fold_while`.\n\nSee [`.fold_while()`](Itertools::fold_while) for more information.","links":{"Itertools::fold_while":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:5058:105","0:5061:2630"],"impls":["0:2821","a:2:3268:211-0:5056:2627","a:2:3280:220-0:5056:2627","a:2:3309:4597-0:5056:2627","a:2:9258:4692-0:5056:2627","a:2:9259:4691-0:5056:2627","b:2:3197-0:5056:2627","b:2:2868-0:5056:2627","b:2:3201-0:5056:2627","b:2:4001-0:5056:2627","b:2:3207-0:5056:2627","b:2:2871-0:5056:2627","b:2:3212-0:5056:2627","b:5:787-0:5056:2627","0:5064","0:5066","0:5069","0:5072","0:5074","0:5077","0:5079"]}},"0:2696:2727":{"id":"0:2696:2727","crate_id":0,"name":"partition_map","span":{"filename":"src/lib.rs","begin":[2766,4],"end":[2781,5]},"visibility":"default","docs":"Collect all iterator elements into one of two\npartitions. Unlike [`Iterator::partition`], each partition may\nhave a distinct type.\n\n```\nuse itertools::{Itertools, Either};\n\nlet successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];\n\nlet (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures\n    .into_iter()\n    .partition_map(|r| {\n        match r {\n            Ok(v) => Either::Left(v),\n            Err(v) => Either::Right(v),\n        }\n    });\n\nassert_eq!(successes, [1, 2]);\nassert_eq!(failures, [false, true]);\n```","links":{"`Iterator::partition`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"F"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"A"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"L","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"Either","id":"20:181:1591","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"2:8412:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"L"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"2:8412:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2971:1625":{"id":"0:2971:1625","crate_id":0,"name":"Step","span":{"filename":"src/adaptors/mod.rs","begin":[424,0],"end":[427,1]},"visibility":"public","docs":"An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.\n\nThe iterator steps by yielding the next element from the base iterator,\nthen skipping forward *n-1* elements.\n\nSee [`.step()`](crate::Itertools::step) for more information.","links":{"crate::Itertools::step":"0:2496:1747"},"attrs":["#[deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")]","#[allow(deprecated)]","#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":{"since":"0.8.0","note":"Use std .step_by() instead"},"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:264":{"id":"0:264","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[156,4],"end":[156,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::with_position::WithPosition","name":"WithPosition","id":"0:2406:1695","glob":false}},"0:5071:660":{"id":"0:5071:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[3585,22],"end":[3585,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10251:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,34],"end":[124,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::grouping_map::GroupingMap","name":"GroupingMap","id":"0:3791:1640","glob":false}},"0:1433:1646":{"id":"0:1433:1646","crate_id":0,"name":"GroupBy","span":{"filename":"src/groupbylazy.rs","begin":[289,0],"end":[296,1]},"visibility":"public","docs":"`GroupBy` is the storage for the lazy grouping operation.\n\nIf the groups are consumed in their original order, or if each\ngroup is dropped without keeping it around, then `GroupBy` uses\nno allocations. It needs allocations only if several group iterators\nare alive at the same time.\n\nThis type implements [`IntoIterator`] (it is **not** an iterator\nitself), because the group iterators need to borrow from this\nvalue. It should be stored in a local variable or temporary and\niterated.\n\nSee [`.group_by()`](crate::Itertools::group_by) for more information.","links":{"`IntoIterator`":"2:8403:151","crate::Itertools::group_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2749:2849":{"id":"0:2749:2849","crate_id":0,"name":"position_min_by_key","span":{"filename":"src/lib.rs","begin":[3111,4],"end":[3117,5]},"visibility":"default","docs":"Return the position of the minimum element in the iterator, as\ndetermined by the specified function.\n\nIf several elements are equally minimum, the position of the\nfirst of them is returned.\n\n# Examples\n\n```\nuse itertools::Itertools;\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_min_by_key(|x| x.abs()), None);\n\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(1));\n\nlet a = [1_i32, 1, -1, -1];\nassert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(0));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["key",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3703:1630":{"id":"0:3703:1630","crate_id":0,"name":"CombinationsWithReplacement","span":{"filename":"src/combinations_with_replacement.rs","begin":[12,0],"end":[20,1]},"visibility":"public","docs":"An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.\n\nSee [`.combinations_with_replacement()`](crate::Itertools::combinations_with_replacement)\nfor more information.","links":{"crate::Itertools::combinations_with_replacement":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2108:1717":{"id":"0:2108:1717","crate_id":0,"name":"unfold","span":{"filename":"src/sources.rs","begin":[100,0],"end":[107,1]},"visibility":"public","docs":"Creates a new unfold source with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure\n\n`unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.\n\nThis more or less equivalent to a regular struct with an [`Iterator`]\nimplementation, and is useful for one-off iterators.\n\n```\n// an iterator that yields sequential Fibonacci numbers,\n// and stops at the maximum representable value.\n\nuse itertools::unfold;\n\nlet mut fibonacci = unfold((1u32, 1u32), |(x1, x2)| {\n    // Attempt to get the next Fibonacci number\n    let next = x1.saturating_add(*x2);\n\n    // Shift left: ret <- x1 <- x2 <- next\n    let ret = *x1;\n    *x1 = *x2;\n    *x2 = next;\n\n    // If addition has saturated at the maximum, we are finished\n    if ret == *x1 && ret > 1 {\n        None\n    } else {\n        Some(ret)\n    }\n});\n\nitertools::assert_equal(fibonacci.by_ref().take(8),\n                        vec![1, 1, 2, 3, 5, 8, 13, 21]);\nassert_eq!(fibonacci.last(), Some(2_971_215_073))\n```","links":{"`Iterator`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["initial_state",{"kind":"generic","inner":"St"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Unfold","id":"0:4039:1679","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"St"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"St","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"St"}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:2689:2691":{"id":"0:2689:2691","crate_id":0,"name":"sorted_by_key","span":{"filename":"src/lib.rs","begin":[2661,4],"end":[2669,5]},"visibility":"default","docs":"Sort all iterator elements into a new iterator in ascending order.\n\n**Note:** This consumes the entire iterator, uses the\n[`slice::sort_by_key`] method and returns the result as a new\niterator that owns its elements.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n```\nuse itertools::Itertools;\n\n// sort people in descending order by age\nlet people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];\n\nlet oldest_people_first = people\n    .into_iter()\n    .sorted_by_key(|x| -x.1)\n    .map(|(person, _age)| person);\n\nitertools::assert_equal(oldest_people_first,\n                        vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);\n```","links":{"`slice::sort_by_key`":"1:16010:4339"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,59],"end":[151,79]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::tuple_impl::CircularTupleWindows","name":"CircularTupleWindows","id":"0:4111:1686","glob":false}},"2:3439:4648":{"id":"2:3439:4648","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2517:1954":{"id":"0:2517:1954","crate_id":0,"name":"circular_tuple_windows","span":{"filename":"src/lib.rs","begin":[732,4],"end":[738,5]},"visibility":"default","docs":"Return an iterator over all windows, wrapping back to the first\nelements when the window would otherwise exceed the length of the\niterator, producing tuples of a specific size (up to 12).\n\n`circular_tuple_windows` clones the iterator elements so that they can be\npart of successive windows, this makes it most suited for iterators\nof references and other values that are cheap to copy.\n\n```\nuse itertools::Itertools;\nlet mut v = Vec::new();\nfor (a, b) in (1..5).circular_tuple_windows() {\n    v.push((a, b));\n}\nassert_eq!(v, vec![(1, 2), (2, 3), (3, 4), (4, 1)]);\n\nlet mut it = (1..5).circular_tuple_windows();\nassert_eq!(Some((1, 2, 3)), it.next());\nassert_eq!(Some((2, 3, 4)), it.next());\nassert_eq!(Some((3, 4, 1)), it.next());\nassert_eq!(Some((4, 1, 2)), it.next());\nassert_eq!(None, it.next());\n\n// this requires a type hint\nlet it = (1..5).circular_tuple_windows::<(_, _, _)>();\nitertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4), (3, 4, 1), (4, 1, 2)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"CircularTupleWindows","id":"0:4111:1686","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ExactSizeIterator","id":"2:8472:1955","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"tuple_impl::TupleCollect","id":"0:2220:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2754:2853":{"id":"0:2754:2853","crate_id":0,"name":"position_min_by","span":{"filename":"src/lib.rs","begin":[3139,4],"end":[3145,5]},"visibility":"default","docs":"Return the position of the minimum element in the iterator, as\ndetermined by the specified comparison function.\n\nIf several elements are equally minimum, the position of the\nfirst of them is returned.\n\n# Examples\n\n```\nuse itertools::Itertools;\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), None);\n\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(4));\n\nlet a = [1_i32, 1, -1, -1];\nassert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(2));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3434:4647":{"id":"2:3434:4647","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1585:1652":{"id":"0:1585:1652","crate_id":0,"name":"kmerge_impl","span":{"filename":"src/kmerge_impl.rs","begin":[1,0],"end":[227,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1618:1653","0:1620:3861","0:3838:3860","0:1630:2077","0:1632:1654","0:1640:1710"],"is_stripped":true}},"0:3370:1540":{"id":"0:3370:1540","crate_id":0,"name":"0","span":{"filename":"src/either_or_both.rs","begin":[11,9],"end":[11,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"A"}},"2:13539:15421":{"id":"2:13539:15421","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1457:1648":{"id":"0:1457:1648","crate_id":0,"name":"Groups","span":{"filename":"src/groupbylazy.rs","begin":[359,0],"end":[364,1]},"visibility":"public","docs":"An iterator that yields the Group iterators.\n\nIterator element type is `(K, Group)`:\nthe group's key `K` and the group's iterator.\n\nSee [`.group_by()`](crate::Itertools::group_by) for more information.","links":{"crate::Itertools::group_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:62910","5:6085:3839","5:6088:62911","5:6091:62912","5:6103:62913","5:6104:62914","5:6105:4537","5:6106:15417","5:6107:15418"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:661:3209":{"id":"0:661:3209","crate_id":0,"name":"MergePredicate","span":{"filename":"src/adaptors/mod.rs","begin":[476,0],"end":[478,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:663:3210"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[118,4],"end":[118,78]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::combinations_with_replacement::CombinationsWithReplacement","name":"CombinationsWithReplacement","id":"0:3703:1630","glob":false}},"0:2719:2773":{"id":"0:2719:2773","crate_id":0,"name":"into_grouping_map_by","span":{"filename":"src/lib.rs","begin":[2897,4],"end":[2903,5]},"visibility":"default","docs":"Constructs a `GroupingMap` to be used later with one of the efficient \ngroup-and-fold operations it allows to perform.\n \nThe values from this iterator will be used as values for the folding operation\nwhile the keys will be obtained from the values by calling `key_mapper`.\n \nSee [`GroupingMap`] for more informations\non what operations are available.","links":{"`GroupingMap`":"0:3791:1640"},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["key_mapper",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"GroupingMapBy","id":"0:1292:1641","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"V"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3309:4597":{"id":"2:3309:4597","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13493:4413":{"id":"2:13493:4413","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13053:4461","`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:4335","str::matches":"1:16011:4340"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49663:5331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126":{"id":"0:126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[114,4],"end":[114,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::MultiProduct","name":"MultiProduct","id":"0:2882:1626","glob":false}},"0:3806:3826":{"id":"0:3806:3826","crate_id":0,"name":"IntersperseElementSimple","span":{"filename":"src/intersperse.rs","begin":[9,0],"end":[9,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:5074":{"id":"0:5074","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3585,29],"end":[3585,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2387:1720":{"id":"0:2387:1720","crate_id":0,"name":"unziptuple","span":{"filename":"src/unziptuple.rs","begin":[1,0],"end":[80,161]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2388:1721","0:2391:1722"],"is_stripped":true}},"a:2:3280:220-0:5056:2627":{"id":"a:2:3280:220-0:5056:2627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3280:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1768:1661":{"id":"0:1768:1661","crate_id":0,"name":"pad_tail","span":{"filename":"src/pad_tail.rs","begin":[1,0],"end":[96,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3895:1662"],"is_stripped":true}},"0:1193:1638":{"id":"0:1193:1638","crate_id":0,"name":"FlattenOk","span":{"filename":"src/flatten_ok.rs","begin":[24,0],"end":[32,1]},"visibility":"public","docs":"An iterator adaptor that flattens `Result::Ok` values and\nallows `Result::Err` values through unchanged.\n\nSee [`.flatten_ok()`](crate::Itertools::flatten_ok) for more information.","links":{"crate::Itertools::flatten_ok":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[132,4],"end":[132,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::multipeek_impl::MultiPeek","name":"MultiPeek","id":"0:3884:1658","glob":false}},"0:2639:2507":{"id":"0:2639:2507","crate_id":0,"name":"fold_ok","span":{"filename":"src/lib.rs","begin":[2189,4],"end":[2200,5]},"visibility":"default","docs":"Fold `Result` values from an iterator.\n\nOnly `Ok` values are folded. If no error is encountered, the folded\nvalue is returned inside `Ok`. Otherwise, the operation terminates\nand returns the first `Err` value it encounters. No iterator elements are\nconsumed after the first error.\n\nThe first accumulator value is the `start` parameter.\nEach iteration passes the accumulator value and the next value inside `Ok`\nto the fold function `f` and its return value becomes the new accumulator value.\n\nFor example the sequence *Ok(1), Ok(2), Ok(3)* will result in a\ncomputation like this:\n\n```ignore\nlet mut accum = start;\naccum = f(accum, 1);\naccum = f(accum, 2);\naccum = f(accum, 3);\n```\n\nWith a `start` value of 0 and an addition as folding function,\nthis effectively results in *((0 + 1) + 2) + 3*\n\n```\nuse std::ops::Add;\nuse itertools::Itertools;\n\nlet values = [1, 2, -2, -1, 2, 1];\nassert_eq!(\n    values.iter()\n          .map(Ok::<_, ()>)\n          .fold_ok(0, Add::add),\n    Ok(3)\n);\nassert!(\n    values.iter()\n          .map(|&x| if x >= 0 { Ok(x) } else { Err(\"Negative number\") })\n          .fold_ok(0, Add::add)\n          .is_err()\n);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["start",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"A"}],"output":{"kind":"generic","inner":"B"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2631:671":{"id":"0:2631:671","crate_id":0,"name":"format","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2097,5]},"visibility":"default","docs":"Format all iterator elements, separated by `sep`.\n\nAll elements are formatted (any formatting trait)\nwith `sep` inserted between each element.\n\n**Panics** if the formatter helper is formatted more than once.\n\n```\nuse itertools::Itertools;\n\nlet data = [1.1, 2.71828, -3.];\nassert_eq!(\n    format!(\"{:.2}\", data.iter().format(\", \")),\n           \"1.10, 2.72, -3.00\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["sep",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Format","id":"0:3732:1635","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2586:1629":{"id":"0:2586:1629","crate_id":0,"name":"combinations_with_replacement","span":{"filename":"src/lib.rs","begin":[1508,4],"end":[1514,5]},"visibility":"default","docs":"Return an iterator that iterates over the `k`-length combinations of\nthe elements from an iterator, with replacement.\n\nIterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,\nand clones the iterator elements.\n\n```\nuse itertools::Itertools;\n\nlet it = (1..4).combinations_with_replacement(2);\nitertools::assert_equal(it, vec![\n    vec![1, 1],\n    vec![1, 2],\n    vec![1, 3],\n    vec![2, 2],\n    vec![2, 3],\n    vec![3, 3],\n]);\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["k",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"CombinationsWithReplacement","id":"0:3703:1630","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10539:146":{"id":"2:10539:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10540:652","2:10541:2474","2:10542:22137","2:10543:22138","2:10544:22139","2:10545:22140","2:10546:22141","2:10547:22142","2:10548:22143","2:10549:22144","2:10550:22145","2:10551:22146","2:10552:22147","2:10553:22148","2:10554:22149","2:10555:1531"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2573:2181":{"id":"0:2573:2181","crate_id":0,"name":"unique","span":{"filename":"src/lib.rs","begin":[1312,4],"end":[1317,5]},"visibility":"default","docs":"Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.\n\nClones of visited elements are stored in a hash set in the\niterator.\n\nThe iterator is stable, returning the non-duplicate items in the order\nin which they occur in the adapted iterator. In a set of duplicate\nitems, the first item encountered is the item retained.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![10, 20, 30, 20, 40, 10, 50];\nitertools::assert_equal(data.into_iter().unique(),\n                        vec![10, 20, 30, 40, 50]);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Unique","id":"0:4357:1692","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,8],"end":[108,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Positions","name":"Positions","id":"0:3340:1622","glob":false}},"2:3733:137":{"id":"2:3733:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2816:2999":{"id":"0:2816:2999","crate_id":0,"name":"partition","span":{"filename":"src/lib.rs","begin":[3558,0],"end":[3580,1]},"visibility":"public","docs":"Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.\n\nThe order within the partitions is arbitrary.\n\nReturn the index of the split point.\n\n```\nuse itertools::partition;\n\n# // use repeated numbers to not promise any ordering\nlet mut data = [7, 1, 1, 7, 1, 1, 7];\nlet split_index = partition(&mut data, |elt| *elt >= 3);\n\nassert_eq!(data, [7, 7, 7, 1, 1, 1, 1]);\nassert_eq!(split_index, 3);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}],["pred",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"A"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8447:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13528:62283":{"id":"2:13528:62283","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9347:6484":{"id":"1:9347:6484","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9348:16089","1:9349:16090","1:9350:16091","1:9351:16092","1:9352:16093","1:9353:16094","1:9354:16095"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13496:62272":{"id":"2:13496:62272","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:16011:4340","`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49681:5332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:663:3210":{"id":"0:663:3210","crate_id":0,"name":"merge_pred","span":{"filename":"src/adaptors/mod.rs","begin":[477,4],"end":[477,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3038:3246":{"id":"0:3038:3246","crate_id":0,"name":"Tuple2Combination","span":{"filename":"src/adaptors/mod.rs","begin":[830,0],"end":[830,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:3389"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:4048:1680":{"id":"0:4048:1680","crate_id":0,"name":"Iterate","span":{"filename":"src/sources.rs","begin":[141,0],"end":[144,1]},"visibility":"public","docs":"An iterator that infinitely applies function to value and yields results.\n\nThis `struct` is created by the [`iterate()`](crate::iterate) function.\nSee its documentation for more.","links":{"crate::iterate":"0:2130:1718"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"St","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:2862:97":{"id":"2:2862:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:1592"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,0],"end":[176,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::peeking_take_while::PeekingNext","name":"PeekingNext","id":"0:1843:1713","glob":false}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,33],"end":[155,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::unique_impl::Unique","name":"Unique","id":"0:4357:1692","glob":false}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[172,0],"end":[172,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::diff::Diff","name":"Diff","id":"0:1153:1709","glob":false}},"0:4580:1540":{"id":"0:4580:1540","crate_id":0,"name":"0","span":{"filename":"src/with_position.rs","begin":[42,11],"end":[42,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:10302:3605":{"id":"2:10302:3605","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2485:1700":{"id":"0:2485:1700","crate_id":0,"name":"ziptuple","span":{"filename":"src/ziptuple.rs","begin":[1,0],"end":[137,51]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4627:1701","0:2489:1723"],"is_stripped":true}},"0:200":{"id":"0:200","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,4],"end":[135,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::pad_tail::PadUsing","name":"PadUsing","id":"0:3895:1662","glob":false}},"0:5058:105":{"id":"0:5058:105","crate_id":0,"name":"Continue","span":{"filename":"src/lib.rs","begin":[3588,4],"end":[3588,15]},"visibility":"default","docs":"Continue folding with this value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"}]}},"2:13446:7482":{"id":"2:13446:7482","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49713:5327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2712:2762":{"id":"0:2712:2762","crate_id":0,"name":"into_group_map_by","span":{"filename":"src/lib.rs","begin":[2862,4],"end":[2869,5]},"visibility":"default","docs":"Return an `Iterator` on a `HashMap`. Keys mapped to `Vec`s of values. The key is specified\nin the closure.\n\nEssentially a shorthand for `.into_grouping_map_by(f).collect::<Vec<_>>()`.\n\n```\nuse itertools::Itertools;\nuse std::collections::HashMap;\n\nlet data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];\nlet lookup: HashMap<u32,Vec<(u32, u32)>> =\n    data.clone().into_iter().into_group_map_by(|a| a.0);\n\nassert_eq!(lookup[&0], vec![(0,10),(0,20)]);\nassert_eq!(lookup.get(&1), None);\nassert_eq!(lookup[&2], vec![(2,12), (2,42)]);\nassert_eq!(lookup[&3], vec![(3,13), (3,33)]);\n\nassert_eq!(\n    data.into_iter()\n        .into_group_map_by(|x| x.0)\n        .into_iter()\n        .map(|(key, values)| (key, values.into_iter().fold(0,|acc, (_,v)| acc + v )))\n        .collect::<HashMap<u32,u32>>()[&0],\n    30,\n);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:1306:143","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"V"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3518:130","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3351:4630":{"id":"2:3351:4630","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:181","2:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2730:2810":{"id":"0:2730:2810","crate_id":0,"name":"minmax_by","span":{"filename":"src/lib.rs","begin":[2971,4],"end":[2979,5]},"visibility":"default","docs":"Return the minimum and maximum element of an iterator, as determined by\nthe specified comparison function.\n\nThe return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).\n\nFor the minimum, the first minimal element is returned.  For the maximum,\nthe last maximal element wins.  This matches the behavior of the standard\n[`Iterator::min`] and [`Iterator::max`] methods.","links":{"`Iterator::min`":"2:8601:157","`Iterator::max`":"2:8601:157","`MinMaxResult`":"0:3859:1712","Itertools::minmax":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MinMaxResult","id":"0:3859:1712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2519:1969":{"id":"0:2519:1969","crate_id":0,"name":"tuples","span":{"filename":"src/lib.rs","begin":[770,4],"end":[775,5]},"visibility":"default","docs":"Return an iterator that groups the items in tuples of a specific size\n(up to 12).\n\nSee also the method [`.next_tuple()`](Itertools::next_tuple).\n\n```\nuse itertools::Itertools;\nlet mut v = Vec::new();\nfor (a, b) in (1..5).tuples() {\n    v.push((a, b));\n}\nassert_eq!(v, vec![(1, 2), (3, 4)]);\n\nlet mut it = (1..7).tuples();\nassert_eq!(Some((1, 2, 3)), it.next());\nassert_eq!(Some((4, 5, 6)), it.next());\nassert_eq!(None, it.next());\n\n// this requires a type hint\nlet it = (1..7).tuples::<(_, _, _)>();\nitertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);\n\n// you can also specify the complete type\nuse itertools::Tuples;\nuse std::ops::Range;\n\nlet it: Tuples<Range<u32>, (u32, u32, u32)> = (1..7).tuples();\nitertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);\n```\n\nSee also [`Tuples::into_buffer`].","links":{"Itertools::next_tuple":"0:2496:1747","`Tuples::into_buffer`":"0:4085:1687"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Tuples","id":"0:4085:1687","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"traits::HomogeneousTuple","id":"0:2171:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:577:1824":{"id":"0:577:1824","crate_id":0,"name":"interleave","span":{"filename":"src/adaptors/mod.rs","begin":[41,0],"end":[50,1]},"visibility":"public","docs":"Create an iterator that interleaves elements in `i` and `j`.\n\n[`IntoIterator`] enabled version of `i.interleave(j)`.\n\nSee [`.interleave()`](crate::Itertools::interleave) for more information.","links":{"crate::Itertools::interleave":"0:2496:1747","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["i",{"kind":"generic","inner":"I"}],["j",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"Interleave","id":"0:2908:1607","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1544:3824":{"id":"0:1544:3824","crate_id":0,"name":"IntersperseElement","span":{"filename":"src/intersperse.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1546:3825"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1006:276":{"id":"0:1006:276","crate_id":0,"name":"all","span":{"filename":"src/free.rs","begin":[186,0],"end":[191,1]},"visibility":"public","docs":"Test whether the predicate holds for all elements in the iterable.\n\n[`IntoIterator`] enabled version of [`Iterator::all`].\n\n```\nuse itertools::all;\n\nassert!(all(&[1, 2, 3], |elt| *elt > 0));\n```","links":{"`Iterator::all`":"2:8601:157","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5745:6415":{"id":"1:5745:6415","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5746:9827","1:5747:23388","1:5748:8388","1:5749:23389","1:5750:6740","1:5751:6741","1:5752:23390","1:5753:1302","1:5754:23391","1:5755:23392","1:5756:23393","1:5757:23394","1:5758:23395","1:5759:23396","1:5760:23397","1:5761:23398"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2827:3293":{"id":"0:2827:3293","crate_id":0,"name":"DedupPred2CoalescePred","span":{"filename":"src/adaptors/coalesce.rs","begin":[120,0],"end":[120,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"DP","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,32],"end":[151,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::tuple_impl::TupleBuffer","name":"TupleBuffer","id":"0:4075:1684","glob":false}},"2:13442:6867":{"id":"2:13442:6867","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16005:4335"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49435:3968","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3171:149":{"id":"2:3171:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:3244"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4586:1540":{"id":"0:4586:1540","crate_id":0,"name":"0","span":{"filename":"src/with_position.rs","begin":[46,9],"end":[46,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:276:1703":{"id":"0:276:1703","crate_id":0,"name":"traits","span":{"filename":"src/lib.rs","begin":[163,0],"end":[163,14]},"visibility":"public","docs":"Traits helpful for using certain `Itertools` methods in generic contexts.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:277"],"is_stripped":false}},"2:10312:3600":{"id":"2:10312:3600","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:5060:1540":{"id":"0:5060:1540","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[3588,13],"end":[3588,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:2726:2806":{"id":"0:2726:2806","crate_id":0,"name":"minmax_by_key","span":{"filename":"src/lib.rs","begin":[2957,4],"end":[2961,5]},"visibility":"default","docs":"Return the minimum and maximum element of an iterator, as determined by\nthe specified function.\n\nThe return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).\n\nFor the minimum, the first minimal element is returned.  For the maximum,\nthe last maximal element wins.  This matches the behavior of the standard\n[`Iterator::min`] and [`Iterator::max`] methods.\n\nThe keys can be floats but no particular result is guaranteed\nif a key is NaN.","links":{"`MinMaxResult`":"0:3859:1712","`Iterator::max`":"2:8601:157","`Iterator::min`":"2:8601:157","Itertools::minmax":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["key",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MinMaxResult","id":"0:3859:1712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1933:1669":{"id":"0:1933:1669","crate_id":0,"name":"powerset","span":{"filename":"src/powerset.rs","begin":[1,0],"end":[90,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1956:1670"],"is_stripped":true}},"2:8366:1611":{"id":"2:8366:1611","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:2653"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[98,8],"end":[98,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::PutBack","name":"PutBack","id":"0:2936:1612","glob":false}},"0:1879:1665":{"id":"0:1879:1665","crate_id":0,"name":"permutations","span":{"filename":"src/permutations.rs","begin":[1,0],"end":[280,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1892:1666"],"is_stripped":true}},"2:13419:24317":{"id":"2:13419:24317","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2746:2843":{"id":"0:2746:2843","crate_id":0,"name":"position_min","span":{"filename":"src/lib.rs","begin":[3083,4],"end":[3089,5]},"visibility":"default","docs":"Return the position of the minimum element in the iterator.\n\nIf several elements are equally minimum, the position of the\nfirst of them is returned.\n\n# Examples\n\n```\nuse itertools::Itertools;\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_min(), None);\n\nlet a = [-3, 0, 1, 5, -10];\nassert_eq!(a.iter().position_min(), Some(4));\n\nlet a = [1, 1, -1, -1];\nassert_eq!(a.iter().position_min(), Some(2));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1844:3923":{"id":"0:1844:3923","crate_id":0,"name":"peeking_next","span":{"filename":"src/peeking_take_while.rs","begin":[18,4],"end":[19,45]},"visibility":"default","docs":"Pass a reference to the next iterator element to the closure `accept`;\nif `accept` returns true, return it as the next element,\nelse None.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["accept",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:4043:1324":{"id":"0:4043:1324","crate_id":0,"name":"state","span":{"filename":"src/sources.rs","begin":[121,4],"end":[121,17]},"visibility":"public","docs":"Internal state that will be passed to the closure on the next iteration","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"St"}},"0:2577:1663":{"id":"0:2577:1663","crate_id":0,"name":"peeking_take_while","span":{"filename":"src/lib.rs","begin":[1358,4],"end":[1363,5]},"visibility":"default","docs":"Return an iterator adaptor that borrows from this iterator and\ntakes items while the closure `accept` returns `true`.\n\nThis adaptor can only be used on iterators that implement `PeekingNext`\nlike `.peekable()`, `put_back` and a few other collection iterators.\n\nThe last and rejected element (first `false`) is still available when\n`peeking_take_while` is done.\n\n\nSee also [`.take_while_ref()`](Itertools::take_while_ref)\nwhich is a similar adaptor.","links":{"Itertools::take_while_ref":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["accept",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"PeekingTakeWhile","id":"0:1858:1664","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PeekingNext","id":"0:1843:1713","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:62911":{"id":"5:6088:62911","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2049:1675":{"id":"0:2049:1675","crate_id":0,"name":"repeatn","span":{"filename":"src/repeatn.rs","begin":[1,0],"end":[59,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4021:1676","0:2053:1715"],"is_stripped":true}},"0:3866:2879":{"id":"0:3866:2879","crate_id":0,"name":"MinMax","span":{"filename":"src/minmax.rs","begin":[15,4],"end":[15,16]},"visibility":"default","docs":"More than one element in the iterator, the first element is not larger\nthan the second","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"T"}]}},"2:13487:62270":{"id":"2:13487:62270","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2742:2836":{"id":"0:2742:2836","crate_id":0,"name":"position_max_by","span":{"filename":"src/lib.rs","begin":[3056,4],"end":[3062,5]},"visibility":"default","docs":"Return the position of the maximum element in the iterator, as\ndetermined by the specified comparison function.\n\nIf several elements are equally maximum, the position of the\nlast of them is returned.\n\n# Examples\n\n```\nuse itertools::Itertools;\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), None);\n\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(3));\n\nlet a = [1_i32, 1, -1, -1];\nassert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(1));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1169:1708":{"id":"0:1169:1708","crate_id":0,"name":"diff_with","span":{"filename":"src/diff.rs","begin":[40,0],"end":[61,1]},"visibility":"public","docs":"Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a [`Diff`] which describes how `j` differs from `i`.\n\nIf the number of elements yielded by `j` is less than the number of elements yielded by `i`,\nthe number of `j` elements yielded will be returned along with `i`'s remaining elements as\n`Diff::Shorter`.\n\nIf the two elements of a step differ, the index of those elements along with the remaining\nelements of both `i` and `j` are returned as `Diff::FirstMismatch`.\n\nIf `i` becomes exhausted before `j` becomes exhausted, the number of elements in `i` along with\nthe remaining `j` elements will be returned as `Diff::Longer`.","links":{"`Diff`":"0:1153:1709"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["i",{"kind":"generic","inner":"I"}],["j",{"kind":"generic","inner":"J"}],["is_equal",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Diff","id":"0:1153:1709","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3518:130","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:539":{"id":"0:539","crate_id":0,"name":null,"span":{"filename":"src/adaptors/mod.rs","begin":[11,20],"end":[11,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::map::map_into","name":"map_into","id":"0:494:1992","glob":false}},"0:2388:1721":{"id":"0:2388:1721","crate_id":0,"name":"multiunzip","span":{"filename":"src/unziptuple.rs","begin":[21,0],"end":[27,1]},"visibility":"public","docs":"Converts an iterator of tuples into a tuple of containers.\n\n`unzip()` consumes an entire iterator of n-ary tuples, producing `n` collections, one for each\ncolumn.\n\nThis function is, in some sense, the opposite of [`multizip`].\n\n```\nuse itertools::multiunzip;\n\nlet inputs = vec![(1, 2, 3), (4, 5, 6), (7, 8, 9)];\n\nlet (a, b, c): (Vec<_>, Vec<_>, Vec<_>) = multiunzip(inputs);\n\nassert_eq!(a, vec![1, 4, 7]);\nassert_eq!(b, vec![2, 5, 8]);\nassert_eq!(c, vec![3, 6, 9]);\n```\n\n[`multizip`]: crate::multizip","links":{"crate::multizip":"0:2489:1723"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"FromI"},"c_variadic":false},"generics":{"params":[{"name":"FromI","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"MultiUnzip","id":"0:2391:1722","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"FromI"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1167:1540":{"id":"0:1167:1540","crate_id":0,"name":"0","span":{"filename":"src/diff.rs","begin":[25,11],"end":[25,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:2823:3012":{"id":"0:2823:3012","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[3595,4],"end":[3599,5]},"visibility":"public","docs":"Return the value in the continue or done.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1956:1670":{"id":"0:1956:1670","crate_id":0,"name":"Powerset","span":{"filename":"src/powerset.rs","begin":[14,0],"end":[18,1]},"visibility":"public","docs":"An iterator to iterate through the powerset of the elements from an iterator.\n\nSee [`.powerset()`](crate::Itertools::powerset) for more\ninformation.","links":{"crate::Itertools::powerset":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13540:62285":{"id":"2:13540:62285","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16005:4335"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49758:5324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2494:1769":{"id":"0:2494:1769","crate_id":0,"name":"izip","span":{"filename":"src/lib.rs","begin":[317,0],"end":[351,1]},"visibility":"public","docs":"Create an iterator running multiple iterators in lockstep.\n\nThe `izip!` iterator yields elements until any subiterator\nreturns `None`.\n\nThis is a version of the standard ``.zip()`` that's supporting more than\ntwo iterators. The iterator element type is a tuple with one element\nfrom each of the input iterators. Just like ``.zip()``, the iteration stops\nwhen the shortest of the inputs reaches its end.\n\n**Note:** The result of this macro is in the general case an iterator\ncomposed of repeated `.zip()` and a `.map()`; it has an anonymous type.\nThe special cases of one and two arguments produce the equivalent of\n`$a.into_iter()` and `$a.into_iter().zip($b)` respectively.\n\nPrefer this macro `izip!()` over [`multizip`] for the performance benefits\nof using the standard library `.zip()`.\n\n```\n# use itertools::izip;\n#\n# fn main() {\n\n// iterate over three sequences side-by-side\nlet mut results = [0, 0, 0, 0];\nlet inputs = [3, 7, 9, 6];\n\nfor (r, index, input) in izip!(&mut results, 0..10, &inputs) {\n    *r = index * 10 + input;\n}\n\nassert_eq!(results, [0 + 3, 10 + 7, 29, 36]);\n# }\n```","links":{"`multizip`":"0:2489:1723"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! izip {\n    ( @closure $p:pat => $tup:expr ) => { ... };\n    ( @closure $p:pat => ( $($tup:tt)* ) , $_iter:expr $( , $tail:expr )* ) => { ... };\n    ($first:expr $(,)*) => { ... };\n    ($first:expr, $second:expr $(,)*) => { ... };\n    ( $first:expr $( , $rest:expr )* $(,)* ) => { ... };\n}"},"0:1814:1659":{"id":"0:1814:1659","crate_id":0,"name":"peek_nth","span":{"filename":"src/peek_nth.rs","begin":[23,0],"end":[31,1]},"visibility":"public","docs":"A drop-in replacement for [`std::iter::Peekable`] which adds a `peek_nth`\nmethod allowing the user to `peek` at a value several iterations forward\nwithout advancing the base iterator.\n\nThis differs from `multipeek` in that subsequent calls to `peek` or\n`peek_nth` will always return the same value until `next` is called\n(making `reset_peek` unnecessary).","links":{"`std::iter::Peekable`":"2:46717:3128"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"PeekNth","id":"0:3907:1660","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:2692:2697":{"id":"0:2692:2697","crate_id":0,"name":"sorted_by_cached_key","span":{"filename":"src/lib.rs","begin":[2697,4],"end":[2706,5]},"visibility":"default","docs":"Sort all iterator elements into a new iterator in ascending order. The key function is\ncalled exactly once per key.\n\n**Note:** This consumes the entire iterator, uses the\n[`slice::sort_by_cached_key`] method and returns the result as a new\niterator that owns its elements.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n```\nuse itertools::Itertools;\n\n// sort people in descending order by age\nlet people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];\n\nlet oldest_people_first = people\n    .into_iter()\n    .sorted_by_cached_key(|x| -x.1)\n    .map(|(person, _age)| person);\n\nitertools::assert_equal(oldest_people_first,\n                        vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);\n```\n```","links":{"`slice::sort_by_cached_key`":"1:16010:4339"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10291:109":{"id":"2:10291:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4614:1699":{"id":"0:4614:1699","crate_id":0,"name":"ZipLongest","span":{"filename":"src/zip_longest.rs","begin":[17,0],"end":[20,1]},"visibility":"public","docs":"An iterator which iterates two other iterators simultaneously\n\nThis iterator is *fused*.\n\nSee [`.zip_longest()`](crate::Itertools::zip_longest) for more information.","links":{"crate::Itertools::zip_longest":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:1049:1628":{"id":"0:1049:1628","crate_id":0,"name":"Combinations","span":{"filename":"src/combinations.rs","begin":[11,0],"end":[15,1]},"visibility":"public","docs":"An iterator to iterate through all the `k`-length combinations in an iterator.\n\nSee [`.combinations()`](crate::Itertools::combinations) for more information.","links":{"crate::Itertools::combinations":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2841:3307":{"id":"0:2841:3307","crate_id":0,"name":"DedupPredWithCount2CoalescePred","span":{"filename":"src/adaptors/coalesce.rs","begin":[194,0],"end":[194,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"DP","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:1701:1656":{"id":"0:1701:1656","crate_id":0,"name":"MergeJoinBy","span":{"filename":"src/merge_join.rs","begin":[28,0],"end":[32,1]},"visibility":"public","docs":"An iterator adaptor that merge-joins items from the two base iterators in ascending order.\n\nSee [`.merge_join_by()`](crate::Itertools::merge_join_by) for more information.","links":{"crate::Itertools::merge_join_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:1620:3861":{"id":"0:1620:3861","crate_id":0,"name":"KMergePredicate","span":{"filename":"src/kmerge_impl.rs","begin":[110,0],"end":[112,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1622:3862"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[138,4],"end":[138,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::permutations::Permutations","name":"Permutations","id":"0:1892:1666","glob":false}},"2:13490:62271":{"id":"2:13490:62271","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1164:1541":{"id":"0:1164:1541","crate_id":0,"name":"1","span":{"filename":"src/diff.rs","begin":[23,19],"end":[23,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}}},"2:13502:62274":{"id":"2:13502:62274","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8447:120","str::match_indices":"1:16011:4340","self::pattern":"2:13053:4461","prim@char":"1:16005:4335"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49627:5330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3379:4634":{"id":"2:3379:4634","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1735:1657":{"id":"0:1735:1657","crate_id":0,"name":"multipeek_impl","span":{"filename":"src/multipeek_impl.rs","begin":[1,0],"end":[97,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3884:1658","0:1748:2923"],"is_stripped":true}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[89,8],"end":[89,13]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Dedup","name":"Dedup","id":"0:412:1603","glob":false}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[177,0],"end":[177,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::process_results_impl::process_results","name":"process_results","id":"0:1988:1714","glob":false}},"0:2680:2664":{"id":"0:2680:2664","crate_id":0,"name":"sorted_unstable","span":{"filename":"src/lib.rs","begin":[2497,4],"end":[2506,5]},"visibility":"default","docs":"Sort all iterator elements into a new iterator in ascending order.\n\n**Note:** This consumes the entire iterator, uses the\n[`slice::sort_unstable`] method and returns the result as a new\niterator that owns its elements.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n```\nuse itertools::Itertools;\n\n// sort the letters of the text in ascending order\nlet text = \"bdacfe\";\nitertools::assert_equal(text.chars().sorted_unstable(),\n                        \"abcdef\".chars());\n```","links":{"`slice::sort_unstable`":"1:16010:4339"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3246:115":{"id":"2:3246:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2625:2463":{"id":"0:2625:2463","crate_id":0,"name":"set_from","span":{"filename":"src/lib.rs","begin":[2033,4],"end":[2046,5]},"visibility":"default","docs":"Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.\n\nThe `from` iterator is queried for its next element before the `self`\niterator, and if either is exhausted the method is done.\n\nReturn the number of elements written.\n\n```\nuse itertools::Itertools;\n\nlet mut xs = [0; 4];\nxs.iter_mut().set_from(1..);\nassert_eq!(xs, [1, 2, 3, 4]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"J"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"A"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2313:1690":{"id":"0:2313:1690","crate_id":0,"name":"DuplicatesBy","span":{"filename":"src/duplicates_impl.rs","begin":[192,0],"end":[192,79]},"visibility":"public","docs":"An iterator adapter to filter for duplicate elements.\n\nSee [`.duplicates_by()`](crate::Itertools::duplicates_by) for more information.","links":{"crate::Itertools::duplicates_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"private::DuplicatesBy","id":"0:4300:1690","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"private::ByFn","id":"0:2284:4227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:2598:2342":{"id":"0:2598:2342","crate_id":0,"name":"collect_tuple","span":{"filename":"src/lib.rs","begin":[1722,4],"end":[1733,5]},"visibility":"default","docs":"Collects all items from the iterator into a tuple of a specific size\n(up to 12).\n\nIf the number of elements inside the iterator is **exactly** equal to\nthe tuple size, then the tuple is returned inside `Some`, otherwise\n`None` is returned.\n\n```\nuse itertools::Itertools;\n\nlet iter = 1..3;\n\nif let Some((x, y)) = iter.collect_tuple() {\n    assert_eq!((x, y), (1, 2))\n} else {\n    panic!(\"Expected two elements\")\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"traits::HomogeneousTuple","id":"0:2171:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13522:58673":{"id":"2:13522:58673","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1168:1541":{"id":"0:1168:1541","crate_id":0,"name":"1","span":{"filename":"src/diff.rs","begin":[25,18],"end":[25,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"J"}}],"bindings":[]}},"param_names":[]}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[92,8],"end":[92,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::DedupByWithCount","name":"DedupByWithCount","id":"0:416:1606","glob":false}},"0:209":{"id":"0:209","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[139,4],"end":[139,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::process_results_impl::ProcessResults","name":"ProcessResults","id":"0:3993:1668","glob":false}},"2:3375:4635":{"id":"2:3375:4635","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13431:3780":{"id":"2:13431:3780","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,81],"end":[151,87]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::tuple_impl::Tuples","name":"Tuples","id":"0:4085:1687","glob":false}},"0:5079":{"id":"0:5079","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3585,33],"end":[3585,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::cmp::PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:5081:604","0:5082:907"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4782:6824":{"id":"2:4782:6824","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4783:1825","2:4784:21738","2:4785:1730"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2771:2890":{"id":"0:2771:2890","crate_id":0,"name":"position_minmax_by_key","span":{"filename":"src/lib.rs","begin":[3234,4],"end":[3243,5]},"visibility":"default","docs":"Return the postions of the minimum and maximum elements of an\niterator, as determined by the specified function.\n\nThe return value is a variant of [`MinMaxResult`] like for\n[`position_minmax`].\n\nFor the minimum, if several elements are equally minimum, the\nposition of the first of them is returned. For the maximum, if\nseveral elements are equally maximum, the position of the last\nof them is returned.\n\nThe keys can be floats but no particular result is guaranteed\nif a key is NaN.\n\n# Examples\n\n```\nuse itertools::Itertools;\nuse itertools::MinMaxResult::{NoElements, OneElement, MinMax};\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), NoElements);\n\nlet a = [10_i32];\nassert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), OneElement(0));\n\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(1, 4));\n\nlet a = [1_i32, 1, -1, -1];\nassert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(0, 3));\n```\n\n[`position_minmax`]: Self::position_minmax","links":{"`MinMaxResult`":"0:3859:1712","Self::position_minmax":"0:2758:2876"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["key",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MinMaxResult","id":"0:3859:1712","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2956:177":{"id":"2:2956:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:415","2:2958:3470","2:2959:2297","2:2960:5016"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3368:159":{"id":"0:3368:159","crate_id":0,"name":"Left","span":{"filename":"src/either_or_both.rs","begin":[11,4],"end":[11,11]},"visibility":"default","docs":"Only the left value of type `A` is present.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"A"}]}},"0:1518:1644":{"id":"0:1518:1644","crate_id":0,"name":"Chunk","span":{"filename":"src/groupbylazy.rs","begin":[541,0],"end":[548,1]},"visibility":"public","docs":"An iterator for the elements in a single chunk.\n\nIterator element type is `I::Item`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"2:9259:4691":{"id":"2:9259:4691","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3150:3250":{"id":"0:3150:3250","crate_id":0,"name":"Tuple6Combination","span":{"filename":"src/adaptors/mod.rs","begin":[834,0],"end":[834,71]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13440:58656":{"id":"2:13440:58656","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16011:4340"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3732:1635":{"id":"0:3732:1635","crate_id":0,"name":"Format","span":{"filename":"src/format.rs","begin":[25,0],"end":[29,1]},"visibility":"public","docs":"Format all iterator elements lazily, separated by `sep`.\n\nThe format value can only be formatted once, after that the iterator is\nexhausted.\n\nSee [`.format()`](crate::Itertools::format)\nfor more information.","links":{"crate::Itertools::format":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:5061:2630":{"id":"0:5061:2630","crate_id":0,"name":"Done","span":{"filename":"src/lib.rs","begin":[3590,4],"end":[3590,11]},"visibility":"default","docs":"Fold is complete and will return this value","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"}]}},"0:2535:2012":{"id":"0:2535:2012","crate_id":0,"name":"filter_ok","span":{"filename":"src/lib.rs","begin":[878,4],"end":[883,5]},"visibility":"default","docs":"Return an iterator adaptor that filters every `Result::Ok`\nvalue with the provided closure. `Result::Err` values are\nunchanged.\n\n```\nuse itertools::Itertools;\n\nlet input = vec![Ok(22), Err(false), Ok(11)];\nlet it = input.into_iter().filter_ok(|&i| i > 20);\nitertools::assert_equal(it, vec![Ok(22), Err(false)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FilterOk","id":"0:3329:1610","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2922:1608":{"id":"0:2922:1608","crate_id":0,"name":"InterleaveShortest","span":{"filename":"src/adaptors/mod.rs","begin":[92,0],"end":[99,1]},"visibility":"public","docs":"An iterator adaptor that alternates elements from the two iterators until\none of them runs out.\n\nThis iterator is *fused*.\n\nSee [`.interleave_shortest()`](crate::Itertools::interleave_shortest)\nfor more information.","links":{"crate::Itertools::interleave_shortest":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:4581:4277":{"id":"0:4581:4277","crate_id":0,"name":"Last","span":{"filename":"src/with_position.rs","begin":[44,4],"end":[44,11]},"visibility":"default","docs":"This is the last element.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"}]}},"2:3491:116":{"id":"2:3491:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:221","2:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,4],"end":[143,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::put_back_n_impl::PutBackN","name":"PutBackN","id":"0:4004:1672","glob":false}},"0:2629:2469":{"id":"0:2629:2469","crate_id":0,"name":"join","span":{"filename":"src/lib.rs","begin":[2059,4],"end":[2076,5]},"visibility":"default","docs":"Combine all iterator elements into one String, separated by `sep`.\n\nUse the `Display` implementation of each element.\n\n```\nuse itertools::Itertools;\n\nassert_eq!([\"a\", \"b\", \"c\"].iter().join(\", \"), \"a, b, c\");\nassert_eq!([1, 2, 3].iter().join(\", \"), \"1, 2, 3\");\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::fmt::Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1156:3552":{"id":"0:1156:3552","crate_id":0,"name":"FirstMismatch","span":{"filename":"src/diff.rs","begin":[21,4],"end":[21,48]},"visibility":"default","docs":"The index of the first non-matching element along with both iterator's remaining elements\nstarting with the first mis-match.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"J"}}],"bindings":[]}},"param_names":[]}}]}},"0:3692:1632":{"id":"0:3692:1632","crate_id":0,"name":"ConsTuples","span":{"filename":"src/cons_tuples_impl.rs","begin":[46,0],"end":[50,1]},"visibility":"public","docs":"An iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.\n\nUsed by the `iproduct!()` macro.","links":{},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"J"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:412:1603":{"id":"0:412:1603","crate_id":0,"name":"Dedup","span":{"filename":"src/adaptors/coalesce.rs","begin":[174,0],"end":[174,40]},"visibility":"public","docs":"An iterator adaptor that removes repeated duplicates.\n\nSee [`.dedup()`](crate::Itertools::dedup) for more information.","links":{"crate::Itertools::dedup":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"DedupBy","id":"0:390:1604","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"DedupEq","id":"0:2835:3297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:4068:1682":{"id":"0:4068:1682","crate_id":0,"name":"Tee","span":{"filename":"src/tee.rs","begin":[21,0],"end":[26,1]},"visibility":"public","docs":"One half of an iterator pair where both return the same elements.\n\nSee [`.tee()`](crate::Itertools::tee) for more information.","links":{"crate::Itertools::tee":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2801:2933":{"id":"0:2801:2933","crate_id":0,"name":"counts","span":{"filename":"src/lib.rs","begin":[3395,4],"end":[3403,5]},"visibility":"default","docs":"Collect the items in this iterator and return a `HashMap` which\ncontains each item that appears in the iterator and the number\nof times it appears.\n\n# Examples\n```\n# use itertools::Itertools;\nlet counts = [1, 1, 1, 3, 3, 5].into_iter().counts();\nassert_eq!(counts[&1], 3);\nassert_eq!(counts[&3], 2);\nassert_eq!(counts[&5], 1);\nassert_eq!(counts.get(&0), None);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:1306:143","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10304:3603":{"id":"2:10304:3603","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3884:1658":{"id":"0:3884:1658","crate_id":0,"name":"MultiPeek","span":{"filename":"src/multipeek_impl.rs","begin":[8,0],"end":[14,1]},"visibility":"public","docs":"See [`multipeek()`] for more information.","links":{"`multipeek()`":"0:1748:2923"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13466:15690":{"id":"2:13466:15690","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:16005:4335","str::split_whitespace":"1:16011:4340","str::rsplit":"1:16011:4340","`DoubleEndedIterator`":"2:8447:120","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49459:5290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2887:104":{"id":"2:2887:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2888:408","2:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3430:4646":{"id":"2:3430:4646","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1550:1650":{"id":"0:1550:1650","crate_id":0,"name":"Intersperse","span":{"filename":"src/intersperse.rs","begin":[25,0],"end":[25,94]},"visibility":"public","docs":"An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.\n\nIterator element type is `I::Item`\n\nThis iterator is *fused*.\n\nSee [`.intersperse()`](crate::Itertools::intersperse) for more information.","links":{"crate::Itertools::intersperse":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"IntersperseWith","id":"0:3816:1651","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"IntersperseElementSimple","id":"0:3806:3826","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:13422:62264":{"id":"2:13422:62264","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16011:4340"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22837:6991":{"id":"2:22837:6991","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22838:16130","2:22839:1225","2:22840:1226","2:22841:16150","2:22842:16151","2:22843:16152","2:22844:16153","2:22845:16159","2:22846:16160","2:22847:16161"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:7927:1625":{"id":"2:7927:1625","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7928:5878","2:7929:5879","2:7930:5880","2:7931:5881","2:7932:5882","2:7933:5883","2:7934:5884"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8886:4545":{"id":"2:8886:4545","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7927:1625","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13513:62280":{"id":"2:13513:62280","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13053:4461","prim@char":"1:16005:4335"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13083:5312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2564:2141":{"id":"0:2564:2141","crate_id":0,"name":"dedup_by","span":{"filename":"src/lib.rs","begin":[1192,4],"end":[1197,5]},"visibility":"default","docs":"Remove duplicates from sections of consecutive identical elements,\ndetermining equality using a comparison function.\nIf the iterator is sorted, all elements will be unique.\n\nIterator element type is `Self::Item`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![(0, 1.), (1, 1.), (0, 2.), (0, 3.), (1, 3.), (1, 2.), (2, 2.)];\nitertools::assert_equal(data.into_iter().dedup_by(|x, y| x.1 == y.1),\n                        vec![(0, 1.), (0, 2.), (0, 3.), (1, 2.)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"Cmp"}]],"output":{"kind":"resolved_path","inner":{"name":"DedupBy","id":"0:390:1604","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"Cmp"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"Cmp","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Cmp"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10298:119":{"id":"2:10298:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13475:62268":{"id":"2:13475:62268","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13053:4461","str::split":"1:16011:4340","str::rsplit_terminator":"1:16011:4340","prim@char":"1:16005:4335","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49509:5334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2602:2355":{"id":"0:2602:2355","crate_id":0,"name":"find_or_last","span":{"filename":"src/lib.rs","begin":[1770,4],"end":[1777,5]},"visibility":"default","docs":"Find the value of the first element satisfying a predicate or return the last element, if any.\n\nThe iterator is not advanced past the first element found.\n\n```\nuse itertools::Itertools;\n\nlet numbers = [1, 2, 3, 4];\nassert_eq!(numbers.iter().find_or_last(|&&x| x > 5), Some(&4));\nassert_eq!(numbers.iter().find_or_last(|&&x| x > 2), Some(&3));\nassert_eq!(std::iter::empty::<i32>().find_or_last(|&x| x > 5), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2569:2163":{"id":"0:2569:2163","crate_id":0,"name":"duplicates","span":{"filename":"src/lib.rs","begin":[1260,4],"end":[1265,5]},"visibility":"default","docs":"Return an iterator adaptor that produces elements that appear more than once during the\niteration. Duplicates are detected using hash and equality.\n\nThe iterator is stable, returning the duplicate items in the order in which they occur in\nthe adapted iterator. Each duplicate item is returned exactly once. If an item appears more\nthan twice, the second item is the item retained and the rest are discarded.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![10, 20, 30, 20, 40, 10, 50];\nitertools::assert_equal(data.into_iter().duplicates(),\n                        vec![20, 10]);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duplicates","id":"0:2321:1689","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1165:3556":{"id":"0:1165:3556","crate_id":0,"name":"Longer","span":{"filename":"src/diff.rs","begin":[25,4],"end":[25,29]},"visibility":"default","docs":"The total number of elements that were in `I` along with the remaining elements of `J`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"J"}}],"bindings":[]}},"param_names":[]}}]}},"0:2709:2746":{"id":"0:2709:2746","crate_id":0,"name":"into_group_map","span":{"filename":"src/lib.rs","begin":[2827,4],"end":[2832,5]},"visibility":"default","docs":"Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\nare taken from `(Key, Value)` tuple pairs yielded by the input iterator.\n\nEssentially a shorthand for `.into_grouping_map().collect::<Vec<_>>()`.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];\nlet lookup = data.into_iter().into_group_map();\n\nassert_eq!(lookup[&0], vec![10, 20]);\nassert_eq!(lookup.get(&1), None);\nassert_eq!(lookup[&2], vec![12, 42]);\nassert_eq!(lookup[&3], vec![13, 33]);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:1306:143","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1028:1631":{"id":"0:1028:1631","crate_id":0,"name":"cons_tuples_impl","span":{"filename":"src/cons_tuples_impl.rs","begin":[2,0],"end":[64,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3692:1632","0:1033:1706"],"is_stripped":true}},"0:4601:1697":{"id":"0:4601:1697","crate_id":0,"name":"ZipEq","span":{"filename":"src/zip_eq_impl.rs","begin":[8,0],"end":[11,1]},"visibility":"public","docs":"An iterator which iterates two other iterators simultaneously\n\nSee [`.zip_eq()`](crate::Itertools::zip_eq) for more information.","links":{"crate::Itertools::zip_eq":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2133:1681":{"id":"0:2133:1681","crate_id":0,"name":"tee","span":{"filename":"src/tee.rs","begin":[1,0],"end":[78,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4068:1682"],"is_stripped":true}},"2:4003:1427":{"id":"2:4003:1427","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46028:4608","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1025:432":{"id":"0:1025:432","crate_id":0,"name":"concat","span":{"filename":"src/concat_impl.rs","begin":[17,0],"end":[22,1]},"visibility":"public","docs":"Combine all an iterator's elements into one element by using [`Extend`].\n\n[`IntoIterator`]-enabled version of [`Itertools::concat`].\n\nThis combinator will extend the first item with each of the rest of the\nitems of the iterator. If the iterator is empty, the default value of\n`I::Item` is returned.\n\n```rust\nuse itertools::concat;\n \nlet input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];\nassert_eq!(concat(input), vec![1, 2, 3, 4, 5, 6]);\n```","links":{"`Extend`":"2:8412:2439","`IntoIterator`":"2:8403:151","`Itertools::concat`":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"2:8412:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:4573:1719":{"id":"0:4573:1719","crate_id":0,"name":"Position","span":{"filename":"src/with_position.rs","begin":[38,0],"end":[47,1]},"visibility":"public","docs":"A value yielded by `WithPosition`.\nIndicates the position of this element in the iterator results.\n\nSee [`.with_position()`](crate::Itertools::with_position) for more information.","links":{"crate::Itertools::with_position":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:4575:4273","0:4578:4275","0:4581:4277","0:4584:4279"],"impls":[]}},"2:3200:3244":{"id":"2:3200:3244","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2617:2430":{"id":"0:2617:2430","crate_id":0,"name":"foreach","span":{"filename":"src/lib.rs","begin":[1952,4],"end":[1957,5]},"visibility":"default","docs":"Run the closure `f` eagerly on each element of the iterator.\n\nConsumes the iterator until its end.\n\n```\nuse std::sync::mpsc::channel;\nuse itertools::Itertools;\n\nlet (tx, rx) = channel();\n\n// use .foreach() to apply a function to each value -- sending it\n(0..5).map(|x| x * 2 + 1).foreach(|x| { tx.send(x).unwrap(); } );\n\ndrop(tx);\n\nitertools::assert_equal(rx.iter(), vec![1, 3, 5, 7, 9]);\n```","links":{},"attrs":["#[deprecated(note = \"Use .for_each() instead\", since = \"0.8.0\")]"],"deprecation":{"since":"0.8.0","note":"Use .for_each() instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:62910":{"id":"5:6084:62910","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:4453","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4488","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:4453","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4488","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13499:62273":{"id":"2:13499:62273","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:16005:4335","str::rmatch_indices":"1:16011:4340","self::pattern":"2:13053:4461","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49609:5329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23134:6891":{"id":"2:23134:6891","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23771:6886","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23125:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3336:3606":{"id":"2:3336:3606","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2155:1683":{"id":"0:2155:1683","crate_id":0,"name":"tuple_impl","span":{"filename":"src/tuple_impl.rs","begin":[1,0],"end":[331,64]},"visibility":"crate","docs":"Some iterator that produces tuples","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2171:1704","0:4075:1684","0:4085:1687","0:4098:1685","0:4111:1686","0:2220:1956"],"is_stripped":true}},"0:974":{"id":"0:974","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[33,0],"end":[33,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::zip_eq_impl::zip_eq","name":"zip_eq","id":"0:2430:1861","glob":false}},"0:2683:2679":{"id":"0:2683:2679","crate_id":0,"name":"sorted_unstable_by_key","span":{"filename":"src/lib.rs","begin":[2565,4],"end":[2573,5]},"visibility":"default","docs":"Sort all iterator elements into a new iterator in ascending order.\n\n**Note:** This consumes the entire iterator, uses the\n[`slice::sort_unstable_by_key`] method and returns the result as a new\niterator that owns its elements.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n```\nuse itertools::Itertools;\n\n// sort people in descending order by age\nlet people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];\n\nlet oldest_people_first = people\n    .into_iter()\n    .sorted_unstable_by_key(|x| -x.1)\n    .map(|(person, _age)| person);\n\nitertools::assert_equal(oldest_people_first,\n                        vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);\n```","links":{"`slice::sort_unstable_by_key`":"1:16010:4339"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12500:7231":{"id":"2:12500:7231","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12501:1825","2:12502:23138"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10241:1595":{"id":"2:10241:1595","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10242:1531","2:10243:5430","2:10245:4852"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2620:2442":{"id":"0:2620:2442","crate_id":0,"name":"collect_vec","span":{"filename":"src/lib.rs","begin":[1982,4],"end":[1986,5]},"visibility":"default","docs":"`.collect_vec()` is simply a type specialization of [`Iterator::collect`],\nfor convenience.","links":{"`Iterator::collect`":"2:8601:157"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2990:1619":{"id":"0:2990:1619","crate_id":0,"name":"WhileSome","span":{"filename":"src/adaptors/mod.rs","begin":[668,0],"end":[670,1]},"visibility":"public","docs":"An iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.\n\nSee [`.while_some()`](crate::Itertools::while_some) for more information.","links":{"crate::Itertools::while_some":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3863:2878":{"id":"0:3863:2878","crate_id":0,"name":"OneElement","span":{"filename":"src/minmax.rs","begin":[11,4],"end":[11,17]},"visibility":"default","docs":"Iterator with one element, so the minimum and maximum are the same","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"}]}},"2:3521:131":{"id":"2:3521:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2632:2502":{"id":"0:2632:2502","crate_id":0,"name":"format_with","span":{"filename":"src/lib.rs","begin":[2131,4],"end":[2136,5]},"visibility":"default","docs":"Format all iterator elements, separated by `sep`.\n\nThis is a customizable version of [`.format()`](Itertools::format).\n\nThe supplied closure `format` is called once per iterator element,\nwith two arguments: the element and a callback that takes a\n`&Display` value, i.e. any reference to type that implements `Display`.\n\nUsing `&format_args!(...)` is the most versatile way to apply custom\nelement formatting. The callback can be called multiple times if needed.\n\n**Panics** if the formatter helper is formatted more than once.\n\n```\nuse itertools::Itertools;\n\nlet data = [1.1, 2.71828, -3.];\nlet data_formatter = data.iter().format_with(\", \", |elt, f| f(&format_args!(\"{:.2}\", elt)));\nassert_eq!(format!(\"{}\", data_formatter),\n           \"1.10, 2.72, -3.00\");\n\n// .format_with() is recursively composable\nlet matrix = [[1., 2., 3.],\n              [4., 5., 6.]];\nlet matrix_formatter = matrix.iter().format_with(\"\\n\", |row, f| {\n                                f(&row.iter().format_with(\", \", |elt, g| g(&elt)))\n                             });\nassert_eq!(format!(\"{}\", matrix_formatter),\n           \"1, 2, 3\\n4, 5, 6\");\n\n\n```","links":{"Itertools::format":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["sep",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["format",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FormatWith","id":"0:3721:1636","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"fmt::Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10240:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,46],"end":[127,61]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::intersperse::IntersperseWith","name":"IntersperseWith","id":"0:3816:1651","glob":false}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[32,0],"end":[32,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::kmerge_impl::kmerge","name":"kmerge","id":"0:1630:2077","glob":false}},"0:2589:2296":{"id":"0:2589:2296","crate_id":0,"name":"pad_using","span":{"filename":"src/lib.rs","begin":[1614,4],"end":[1619,5]},"visibility":"default","docs":"Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::Itertools;\n\nlet it = (0..5).pad_using(10, |i| 2*i);\nitertools::assert_equal(it, vec![0, 1, 2, 3, 4, 10, 12, 14, 16, 18]);\n\nlet it = (0..10).pad_using(5, |i| 2*i);\nitertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\nlet it = (0..5).pad_using(10, |i| 2*i).rev();\nitertools::assert_equal(it, vec![18, 16, 14, 12, 10, 4, 3, 2, 1, 0]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"primitive","inner":"usize"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"PadUsing","id":"0:3895:1662","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"usize"}],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2393:1721":{"id":"0:2393:1721","crate_id":0,"name":"multiunzip","span":{"filename":"src/unziptuple.rs","begin":[34,4],"end":[34,33]},"visibility":"default","docs":"Unzip this iterator into multiple collections.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"FromI"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3777:2775":{"id":"0:3777:2775","crate_id":0,"name":"MapForGrouping","span":{"filename":"src/grouping_map.rs","begin":[12,0],"end":[12,38]},"visibility":"public","docs":"A wrapper to allow for an easy [`into_grouping_map_by`](crate::Itertools::into_grouping_map_by)","links":{"crate::Itertools::into_grouping_map_by":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2495:1807":{"id":"0:2495:1807","crate_id":0,"name":"chain","span":{"filename":"src/lib.rs","begin":[398,0],"end":[414,1]},"visibility":"public","docs":"[Chain][`chain`] zero or more iterators together into one sequence.\n\nThe comma-separated arguments must implement [`IntoIterator`].\nThe final argument may be followed by a trailing comma.\n\n[`chain`]: Iterator::chain\n\n# Examples\n\nEmpty invocations of `chain!` expand to an invocation of [`std::iter::empty`]:\n```\nuse std::iter;\nuse itertools::chain;\n\nlet _: iter::Empty<()> = chain!();\nlet _: iter::Empty<i8> = chain!();\n```\n\nInvocations of `chain!` with one argument expand to [`arg.into_iter()`](IntoIterator):\n```\nuse std::{ops::Range, slice};\nuse itertools::chain;\nlet _: <Range<_> as IntoIterator>::IntoIter = chain!((2..6),); // trailing comma optional!\nlet _:     <&[_] as IntoIterator>::IntoIter = chain!(&[2, 3, 4]);\n```\n\nInvocations of `chain!` with multiple arguments [`.into_iter()`](IntoIterator) each\nargument, and then [`chain`] them together:\n```\nuse std::{iter::*, ops::Range, slice};\nuse itertools::{assert_equal, chain};\n\n// e.g., this:\nlet with_macro:  Chain<Chain<Once<_>, Take<Repeat<_>>>, slice::Iter<_>> =\n    chain![once(&0), repeat(&1).take(2), &[2, 3, 5],];\n\n// ...is equivalant to this:\nlet with_method: Chain<Chain<Once<_>, Take<Repeat<_>>>, slice::Iter<_>> =\n    once(&0)\n        .chain(repeat(&1).take(2))\n        .chain(&[2, 3, 5]);\n\nassert_equal(with_macro, with_method);\n```","links":{"`IntoIterator`":"2:8403:151","`std::iter::empty`":"2:8100:1808","Iterator::chain":"2:8601:157","IntoIterator":"2:8403:151"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! chain {\n    () => { ... };\n    ($first:expr $(, $rest:expr )* $(,)?) => { ... };\n}"},"2:13478:62269":{"id":"2:13478:62269","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:16011:4340","self::pattern":"2:13053:4461","prim@char":"1:16005:4335","str::split":"1:16011:4340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49527:5333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5068:408":{"id":"0:5068:408","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[3585,15],"end":[3585,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:962":{"id":"0:962","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[26,0],"end":[26,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::put_back_n_impl::put_back_n","name":"put_back_n","id":"0:2002:3418","glob":false}},"2:13416":{"id":"2:13416","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12513:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13417:793","2:13418:3359","2:13419:24317","2:13420:62263","2:13422:62264","2:13425:23371","2:13426:62265","2:13427:304","2:13428:58638","2:13429:3782","2:13431:3780","2:13433:21660","2:13435:21661","2:13437:6533","2:13438:62266","2:13439:58655","2:13440:58656","2:13441:5337","2:13442:6867","2:13443:4458","2:13444:24479","2:13445:24477","2:13446:7482","2:13447:62267","2:13448:24279","2:13449:2381","2:13452:58671","2:13455:58672","2:13458:2364","2:13462:5021","2:13466:15690","2:13469:24478","2:13472:58665","2:13475:62268","2:13478:62269","2:13481:58667","2:13484:58669","2:13487:62270","2:13490:62271","2:13493:4413","2:13496:62272","2:13499:62273","2:13502:62274","2:13505:62275","2:13507:62276","2:13509:62277","2:13511:62278","2:13512:62279","2:13513:62280","2:13516:62281","2:13519:24014","2:13522:58673","2:13525:62282","2:13528:62283","2:13531:62284","2:13534:7037","2:13536:7235","2:13537:15419","2:13538:15420","2:13539:15421","2:13540:62285","2:13542:6512","2:13543:62286"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13542:6512":{"id":"2:13542:6512","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16005:4335"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49767:5325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[157,4],"end":[157,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::zip_eq_impl::ZipEq","name":"ZipEq","id":"0:4601:1697","glob":false}},"0:277":{"id":"0:277","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[164,4],"end":[164,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::tuple_impl::HomogeneousTuple","name":"HomogeneousTuple","id":"0:2171:1704","glob":false}},"2:8399:136":{"id":"2:8399:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1988:1714":{"id":"0:1988:1714","crate_id":0,"name":"process_results","span":{"filename":"src/process_results_impl.rs","begin":[87,0],"end":[97,1]},"visibility":"public","docs":"“Lift” a function of the values of an iterator so that it can process\nan iterator of `Result` values instead.\n\n`iterable` is an iterator or iterable with `Result<T, E>` elements, where\n`T` is the value type and `E` the error type.\n\n`processor` is a closure that receives an adapted version of the iterable\nas the only argument — the adapted iterator produces elements of type `T`,\nas long as the original iterator produces `Ok` values.\n\nIf the original iterable produces an error at any point, the adapted\niterator ends and the `process_results` function will return the\nerror iself.\n\nOtherwise, the return value from the closure is returned wrapped\ninside `Ok`.\n\n# Example\n\n```\nuse itertools::process_results;\n\ntype R = Result<i32, &'static str>;\n\nlet first_values: Vec<R> = vec![Ok(1), Ok(0), Ok(3)];\nlet second_values: Vec<R> = vec![Ok(2), Ok(1), Err(\"overflow\")];\n\n// “Lift” the iterator .max() method to work on the values in Results using process_results\n\nlet first_max = process_results(first_values, |iter| iter.max().unwrap_or(0));\nlet second_max = process_results(second_values, |iter| iter.max().unwrap_or(0));\n\nassert_eq!(first_max, Ok(3));\nassert!(second_max.is_err());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["processor",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"parenthesized":{"inputs":[{"kind":"resolved_path","inner":{"name":"ProcessResults","id":"0:3993:1668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}],"output":{"kind":"generic","inner":"R"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6791:6514":{"id":"1:6791:6514","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6792:23471","1:6793:23472"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13507:62276":{"id":"2:13507:62276","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:58638":{"id":"2:13428:58638","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16022:4349"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13452:58671":{"id":"2:13452:58671","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13427:304":{"id":"2:13427:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16011:4340","`u8`":"1:16022:4349"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2651:2588":{"id":"0:2651:2588","crate_id":0,"name":"tree_fold1","span":{"filename":"src/lib.rs","begin":[2302,4],"end":[2359,5]},"visibility":"default","docs":"Accumulate the elements in the iterator in a tree-like manner.\n\nYou can think of it as, while there's more than one item, repeatedly\ncombining adjacent items.  It does so in bottom-up-merge-sort order,\nhowever, so that it needs only logarithmic stack space.\n\nThis produces a call tree like the following (where the calls under\nan item are done after reading that item):\n\n```text\n1 2 3 4 5 6 7\n│ │ │ │ │ │ │\n└─f └─f └─f │\n  │   │   │ │\n  └───f   └─f\n      │     │\n      └─────f\n```\n\nWhich, for non-associative functions, will typically produce a different\nresult than the linear call tree used by `fold1`:\n\n```text\n1 2 3 4 5 6 7\n│ │ │ │ │ │ │\n└─f─f─f─f─f─f\n```\n\nIf `f` is associative, prefer the normal `fold1` instead.\n\n```\nuse itertools::Itertools;\n\n// The same tree as above\nlet num_strings = (1..8).map(|x| x.to_string());\nassert_eq!(num_strings.tree_fold1(|x, y| format!(\"f({}, {})\", x, y)),\n    Some(String::from(\"f(f(f(1, 2), f(3, 4)), f(f(5, 6), 7))\")));\n\n// Like fold1, an empty iterator produces None\nassert_eq!((0..0).tree_fold1(|x, y| x * y), None);\n\n// tree_fold1 matches fold1 for associative operations...\nassert_eq!((0..10).tree_fold1(|x, y| x + y),\n    (0..10).fold1(|x, y| x + y));\n// ...but not for non-associative ones\nassert_ne!((0..10).tree_fold1(|x, y| x - y),\n    (0..10).fold1(|x, y| x - y));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3816:1651":{"id":"0:3816:1651","crate_id":0,"name":"IntersperseWith","span":{"filename":"src/intersperse.rs","begin":[50,0],"end":[56,1]},"visibility":"public","docs":"An iterator adaptor to insert a particular value created by a function\nbetween each element of the adapted iterator.\n\nIterator element type is `I::Item`\n\nThis iterator is *fused*.\n\nSee [`.intersperse_with()`](crate::Itertools::intersperse_with) for more information.","links":{"crate::Itertools::intersperse_with":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"ElemF","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,8],"end":[105,17]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::WhileSome","name":"WhileSome","id":"0:2990:1619","glob":false}},"2:2865:4522":{"id":"2:2865:4522","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2867:3591"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:5:787-0:5056:2627":{"id":"b:5:787-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["5:789:5048","5:790:5049","5:791:5050"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5082:907":{"id":"0:5082:907","crate_id":0,"name":"ne","span":{"filename":"src/lib.rs","begin":[3585,33],"end":[3585,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2284:4227":{"id":"0:2284:4227","crate_id":0,"name":"ByFn","span":{"filename":"src/duplicates_impl.rs","begin":[136,4],"end":[136,37]},"visibility":"public","docs":"Apply a user-supplied function to elements before checking them for equality.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2908:1607":{"id":"0:2908:1607","crate_id":0,"name":"Interleave","span":{"filename":"src/adaptors/mod.rs","begin":[30,0],"end":[34,1]},"visibility":"public","docs":"An iterator adaptor that alternates elements from two iterators until both\nrun out.\n\nThis iterator is *fused*.\n\nSee [`.interleave()`](crate::Itertools::interleave) for more information.","links":{"crate::Itertools::interleave":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"b:2:2871-0:5056:2627":{"id":"b:2:2871-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2865:4522","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2873:3591"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6794:6429":{"id":"1:6794:6429","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6795:10883"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:123":{"id":"0:123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Step","name":"Step","id":"0:2971:1625","glob":false}},"0:395:3295":{"id":"0:395:3295","crate_id":0,"name":"DedupPredicate","span":{"filename":"src/adaptors/coalesce.rs","begin":[126,0],"end":[129,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:397:3296"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13537:15419":{"id":"2:13537:15419","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2539:2018":{"id":"0:2539:2018","crate_id":0,"name":"filter_map_ok","span":{"filename":"src/lib.rs","begin":[896,4],"end":[901,5]},"visibility":"default","docs":"Return an iterator adaptor that filters and transforms every\n`Result::Ok` value with the provided closure. `Result::Err`\nvalues are unchanged.\n\n```\nuse itertools::Itertools;\n\nlet input = vec![Ok(22), Err(false), Ok(11)];\nlet it = input.into_iter().filter_map_ok(|i| if i > 20 { Some(i * 2) } else { None });\nitertools::assert_equal(it, vec![Ok(44), Err(false)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FilterMapOk","id":"0:790:1609","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:497:3126":{"id":"0:497:3126","crate_id":0,"name":"multi_product","span":{"filename":"src/adaptors/multi_product.rs","begin":[1,0],"end":[230,1]},"visibility":{"restricted":{"parent":"0:332:1602","path":"::adaptors"}},"docs":null,"links":{},"attrs":["#![cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2882:1626"],"is_stripped":true}},"1:5731:6413":{"id":"1:5731:6413","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5732:8388","1:5733:23383","1:5734:23384"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,60],"end":[126,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::groupbylazy::GroupBy","name":"GroupBy","id":"0:1433:1646","glob":false}},"0:738:3237":{"id":"0:738:3237","crate_id":0,"name":"Combination","span":{"filename":"src/adaptors/mod.rs","begin":[710,4],"end":[710,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[60,0],"end":[60,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"either::Either","name":"Either","id":"20:181:1591","glob":false}},"2:3203:681":{"id":"2:3203:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,49],"end":[148,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sources::Iterate","name":"Iterate","id":"0:4048:1680","glob":false}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,4],"end":[146,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::repeatn::RepeatN","name":"RepeatN","id":"0:4021:1676","glob":false}},"0:2426:1696":{"id":"0:2426:1696","crate_id":0,"name":"zip_eq_impl","span":{"filename":"src/zip_eq_impl.rs","begin":[1,0],"end":[60,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4601:1697","0:2430:1861"],"is_stripped":true}},"2:13516:62281":{"id":"2:13516:62281","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:4461","prim@char":"1:16005:4335"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2600:2348":{"id":"0:2600:2348","crate_id":0,"name":"find_position","span":{"filename":"src/lib.rs","begin":[1746,4],"end":[1757,5]},"visibility":"default","docs":"Find the position and value of the first element satisfying a predicate.\n\nThe iterator is not advanced past the first element found.\n\n```\nuse itertools::Itertools;\n\nlet text = \"Hα\";\nassert_eq!(text.chars().find_position(|ch| ch.is_lowercase()), Some((1, 'α')));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pred",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22801:6984":{"id":"2:22801:6984","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22802:6890","2:22803:16130","2:22804:1225","2:22805:1226","2:22806:16134","2:22807:16155","2:22808:16156","2:22809:16157","2:22810:16158","2:22811:16145","2:22812:16150","2:22813:16151","2:22814:16152","2:22815:16153","2:22816:16159","2:22817:16160","2:22818:16161"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:251":{"id":"0:251","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,37],"end":[153,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::duplicates_impl::Duplicates","name":"Duplicates","id":"0:2321:1689","glob":false}},"2:3405:4640":{"id":"2:3405:4640","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3407:181","2:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1163:1540":{"id":"0:1163:1540","crate_id":0,"name":"0","span":{"filename":"src/diff.rs","begin":[23,12],"end":[23,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:467:1624":{"id":"0:467:1624","crate_id":0,"name":"MapResults","span":{"filename":"src/adaptors/map.rs","begin":[72,0],"end":[72,40]},"visibility":"public","docs":"See [`MapOk`].","links":{"`MapOk`":"0:464:1615"},"attrs":["#[deprecated(note = \"Use MapOk instead\", since = \"0.10.0\")]"],"deprecation":{"since":"0.10.0","note":"Use MapOk instead"},"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"MapOk","id":"0:464:1615","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:3280:220":{"id":"2:3280:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1533:1649":{"id":"0:1533:1649","crate_id":0,"name":"intersperse","span":{"filename":"src/intersperse.rs","begin":[1,0],"end":[119,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1544:3824","0:3806:3826","0:1550:1650","0:3816:1651"],"is_stripped":true}},"5:5837:5274":{"id":"5:5837:5274","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:2469"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13472:58665":{"id":"2:13472:58665","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:16011:4340","self::pattern":"2:13053:4461","prim@char":"1:16005:4335","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49477:5297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:968":{"id":"0:968","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[30,0],"end":[30,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::peek_nth::peek_nth","name":"peek_nth","id":"0:1814:1659","glob":false}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,69],"end":[126,74]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::groupbylazy::Group","name":"Group","id":"0:1471:1647","glob":false}},"0:2806:1721":{"id":"0:2806:1721","crate_id":0,"name":"multiunzip","span":{"filename":"src/lib.rs","begin":[3467,4],"end":[3472,5]},"visibility":"default","docs":"Converts an iterator of tuples into a tuple of containers.\n\n`unzip()` consumes an entire iterator of n-ary tuples, producing `n` collections, one for each\ncolumn.\n\nThis function is, in some sense, the opposite of [`multizip`].\n \n```\nuse itertools::Itertools;\n\nlet inputs = vec![(1, 2, 3), (4, 5, 6), (7, 8, 9)];\n\nlet (a, b, c): (Vec<_>, Vec<_>, Vec<_>) = inputs\n    .into_iter()\n    .multiunzip();\n\nassert_eq!(a, vec![1, 4, 7]);\nassert_eq!(b, vec![2, 5, 8]);\nassert_eq!(c, vec![3, 6, 9]);\n```","links":{"`multizip`":"0:2489:1723"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"FromI"},"c_variadic":false},"generics":{"params":[{"name":"FromI","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"MultiUnzip","id":"0:2391:1722","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"FromI"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13531:62284":{"id":"2:13531:62284","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3066:3247":{"id":"0:3066:3247","crate_id":0,"name":"Tuple3Combination","span":{"filename":"src/adaptors/mod.rs","begin":[831,0],"end":[831,65]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3869:1541":{"id":"0:3869:1541","crate_id":0,"name":"1","span":{"filename":"src/minmax.rs","begin":[15,14],"end":[15,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:13425:23371":{"id":"2:13425:23371","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12524:5319"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2321:1689":{"id":"0:2321:1689","crate_id":0,"name":"Duplicates","span":{"filename":"src/duplicates_impl.rs","begin":[207,0],"end":[207,88]},"visibility":"public","docs":"An iterator adapter to filter out duplicate elements.\n\nSee [`.duplicates()`](crate::Itertools::duplicates) for more information.","links":{"crate::Itertools::duplicates":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"private::DuplicatesBy","id":"0:4300:1690","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"private::ById","id":"0:4322:4224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:2574:2188":{"id":"0:2574:2188","crate_id":0,"name":"unique_by","span":{"filename":"src/lib.rs","begin":[1338,4],"end":[1344,5]},"visibility":"default","docs":"Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.\n\nDuplicates are detected by comparing the key they map to\nwith the keying function `f` by hash and equality.\nThe keys are stored in a hash set in the iterator.\n\nThe iterator is stable, returning the non-duplicate items in the order\nin which they occur in the adapted iterator. In a set of duplicate\nitems, the first item encountered is the item retained.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];\nitertools::assert_equal(data.into_iter().unique_by(|s| s.len()),\n                        vec![\"a\", \"bb\", \"ccc\"]);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"UniqueBy","id":"0:4344:1693","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"V"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[102,8],"end":[102,13]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Merge","name":"Merge","id":"0:667:1616","glob":false}},"0:343:3275":{"id":"0:343:3275","crate_id":0,"name":"CoalesceBy","span":{"filename":"src/adaptors/coalesce.rs","begin":[6,0],"end":[13,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[129,33],"end":[129,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::kmerge_impl::KMerge","name":"KMerge","id":"0:1618:1653","glob":false}},"5:5833:5273":{"id":"5:5833:5273","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:2799:2915":{"id":"0:2799:2915","crate_id":0,"name":"at_most_one","span":{"filename":"src/lib.rs","begin":[3340,4],"end":[3357,5]},"visibility":"default","docs":"If the iterator yields no elements, Ok(None) will be returned. If the iterator yields\nexactly one element, that element will be returned, otherwise an error will be returned\ncontaining an iterator that has the same output as the input iterator.\n\nThis provides an additional layer of validation over just calling `Iterator::next()`.\nIf your assumption that there should be at most one element yielded is false this provides\nthe opportunity to detect and handle that, preventing errors at a distance.\n\n# Examples\n```\nuse itertools::Itertools;\n\nassert_eq!((0..10).filter(|&x| x == 2).at_most_one().unwrap(), Some(2));\nassert!((0..10).filter(|&x| x > 1 && x < 4).at_most_one().unwrap_err().eq(2..4));\nassert!((0..10).filter(|&x| x > 1 && x < 5).at_most_one().unwrap_err().eq(2..5));\nassert_eq!((0..10).filter(|&_| false).at_most_one().unwrap(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"ExactlyOneError","id":"0:3712:1634","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4627:1701":{"id":"0:4627:1701","crate_id":0,"name":"Zip","span":{"filename":"src/ziptuple.rs","begin":[6,0],"end":[8,1]},"visibility":"public","docs":"See [`multizip`] for more information.","links":{"`multizip`":"0:2489:1723"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:8472:1955":{"id":"2:8472:1955","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8473:793","2:8474:3359"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2870:1592":{"id":"2:2870:1592","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1601":{"id":"0:54:1601","crate_id":0,"name":"structs","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,15]},"visibility":"public","docs":"The concrete iterator types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:56","0:59","0:62","0:65","0:68","0:71","0:74","0:77","0:80","0:83","0:86","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113","0:116","0:120","0:123","0:126","0:129","0:132","0:135","0:138","0:142","0:145","0:148","0:152","0:155","0:159","0:162","0:165","0:168","0:171","0:174","0:178","0:181","0:185","0:188","0:191","0:194","0:197","0:200","0:203","0:206","0:209","0:212","0:215","0:218","0:221","0:225","0:228","0:231","0:234","0:238","0:241","0:244","0:247","0:251","0:254","0:258","0:261","0:264","0:267","0:270","0:273"],"is_stripped":false}},"0:1292:1641":{"id":"0:1292:1641","crate_id":0,"name":"GroupingMapBy","span":{"filename":"src/grouping_map.rs","begin":[43,0],"end":[43,65]},"visibility":"public","docs":"`GroupingMapBy` is an intermediate struct for efficient group-and-fold operations.\n \nSee [`GroupingMap`] for more informations.","links":{"`GroupingMap`":"0:3791:1640"},"attrs":["#[must_use = \"GroupingMapBy is lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"GroupingMap","id":"0:3791:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"MapForGrouping","id":"0:3777:2775","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:959":{"id":"0:959","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[23,4],"end":[23,12]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::put_back","name":"put_back","id":"0:602:3170","glob":false}},"0:3861:2877":{"id":"0:3861:2877","crate_id":0,"name":"NoElements","span":{"filename":"src/minmax.rs","begin":[8,4],"end":[8,14]},"visibility":"default","docs":"Empty iterator","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13435:21661":{"id":"2:13435:21661","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:2027:3419":{"id":"0:2027:3419","crate_id":0,"name":"rciter","span":{"filename":"src/rciter_impl.rs","begin":[47,0],"end":[51,1]},"visibility":"public","docs":"Return an iterator inside a `Rc<RefCell<_>>` wrapper.\n\nThe returned `RcIter` can be cloned, and each clone will refer back to the\nsame original iterator.\n\n`RcIter` allows doing interesting things like using `.zip()` on an iterator with\nitself, at the cost of runtime borrow checking which may have a performance\npenalty.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::rciter;\nuse itertools::zip;\n\n// In this example a range iterator is created and we iterate it using\n// three separate handles (two of them given to zip).\n// We also use the IntoIterator implementation for `&RcIter`.\n\nlet mut iter = rciter(0..9);\nlet mut z = zip(&iter, &iter);\n\nassert_eq!(z.next(), Some((0, 1)));\nassert_eq!(z.next(), Some((2, 3)));\nassert_eq!(z.next(), Some((4, 5)));\nassert_eq!(iter.next(), Some(6));\nassert_eq!(z.next(), Some((7, 8)));\nassert_eq!(z.next(), None);\n```\n\n**Panics** in iterator methods if a borrow error is encountered in the\niterator methods. It can only happen if the `RcIter` is reentered in\n`.next()`, i.e. if it somehow participates in an “iterator knot”\nwhere it is an adaptor of itself.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"RcIter","id":"0:4014:1674","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3103:6810":{"id":"2:3103:6810","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3102:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:554":{"id":"0:554","crate_id":0,"name":null,"span":{"filename":"src/adaptors/mod.rs","begin":[15,0],"end":[15,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::multi_product","name":"multi_product","id":"0:497:3126","glob":true}},"0:2758:2876":{"id":"0:2758:2876","crate_id":0,"name":"position_minmax","span":{"filename":"src/lib.rs","begin":[3189,4],"end":[3198,5]},"visibility":"default","docs":"Return the positions of the minimum and maximum elements in\nthe iterator.\n\nThe return type [`MinMaxResult`] is an enum of three variants:\n\n- `NoElements` if the iterator is empty.\n- `OneElement(xpos)` if the iterator has exactly one element.\n- `MinMax(xpos, ypos)` is returned otherwise, where the\n   element at `xpos` ≤ the element at `ypos`. While the\n   referenced elements themselves may be equal, `xpos` cannot\n   be equal to `ypos`.\n\nOn an iterator of length `n`, `position_minmax` does `1.5 * n`\ncomparisons, and so is faster than calling `positon_min` and\n`position_max` separately which does `2 * n` comparisons.\n\nFor the minimum, if several elements are equally minimum, the\nposition of the first of them is returned. For the maximum, if\nseveral elements are equally maximum, the position of the last\nof them is returned.\n\nThe elements can be floats but no particular result is\nguaranteed if an element is NaN.\n\n# Examples\n\n```\nuse itertools::Itertools;\nuse itertools::MinMaxResult::{NoElements, OneElement, MinMax};\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_minmax(), NoElements);\n\nlet a = [10];\nassert_eq!(a.iter().position_minmax(), OneElement(0));\n\nlet a = [-3, 0, 1, 5, -10];\nassert_eq!(a.iter().position_minmax(), MinMax(4, 3));\n\nlet a = [1, 1, -1, -1];\nassert_eq!(a.iter().position_minmax(), MinMax(2, 1));\n```","links":{"`MinMaxResult`":"0:3859:1712"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"MinMaxResult","id":"0:3859:1712","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:24477":{"id":"2:13445:24477","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16011:4340"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49742:5317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361:3277":{"id":"0:361:3277","crate_id":0,"name":"coalesce_pair","span":{"filename":"src/adaptors/coalesce.rs","begin":[31,4],"end":[31,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["t",{"kind":"generic","inner":"T"}],["item",{"kind":"generic","inner":"Item"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"T"},{"kind":"generic","inner":"T"}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3361:1725":{"id":"0:3361:1725","crate_id":0,"name":"EitherOrBoth","span":{"filename":"src/either_or_both.rs","begin":[7,0],"end":[14,1]},"visibility":"public","docs":"Value that either holds a single A or B, or both.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:3364:3368","0:3368:159","0:3371:207"],"impls":[]}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[159,4],"end":[159,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ziptuple::Zip","name":"Zip","id":"0:4627:1701","glob":false}},"0:2585:1627":{"id":"0:2585:1627","crate_id":0,"name":"combinations","span":{"filename":"src/lib.rs","begin":[1481,4],"end":[1486,5]},"visibility":"default","docs":"Return an iterator adaptor that iterates over the `k`-length combinations of\nthe elements from an iterator.\n\nIterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,\nand clones the iterator elements.\n\n```\nuse itertools::Itertools;\n\nlet it = (1..5).combinations(3);\nitertools::assert_equal(it, vec![\n    vec![1, 2, 3],\n    vec![1, 2, 4],\n    vec![1, 3, 4],\n    vec![2, 3, 4],\n]);\n```\n\nNote: Combinations does not take into account the equality of the iterated values.\n```\nuse itertools::Itertools;\n\nlet it = vec![1, 2, 2].into_iter().combinations(2);\nitertools::assert_equal(it, vec![\n    vec![1, 2], // Note: these are the same\n    vec![1, 2], // Note: these are the same\n    vec![2, 2],\n]);\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["k",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Combinations","id":"0:1049:1628","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2587:1665":{"id":"0:2587:1665","crate_id":0,"name":"permutations","span":{"filename":"src/lib.rs","begin":[1554,4],"end":[1559,5]},"visibility":"default","docs":"Return an iterator adaptor that iterates over all k-permutations of the\nelements from an iterator.\n\nIterator element type is `Vec<Self::Item>` with length `k`. The iterator\nproduces a new Vec per iteration, and clones the iterator elements.\n\nIf `k` is greater than the length of the input iterator, the resultant\niterator adaptor will be empty.\n\n```\nuse itertools::Itertools;\n\nlet perms = (5..8).permutations(2);\nitertools::assert_equal(perms, vec![\n    vec![5, 6],\n    vec![5, 7],\n    vec![6, 5],\n    vec![6, 7],\n    vec![7, 5],\n    vec![7, 6],\n]);\n```\n\nNote: Permutations does not take into account the equality of the iterated values.\n\n```\nuse itertools::Itertools;\n\nlet it = vec![2, 2].into_iter().permutations(2);\nitertools::assert_equal(it, vec![\n    vec![2, 2], // Note: these are the same\n    vec![2, 2], // Note: these are the same\n]);\n```\n\nNote: The source iterator is collected lazily, and will not be\nre-iterated if the permutations adaptor is completed and re-iterated.","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["k",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Permutations","id":"0:1892:1666","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4016:3419":{"id":"0:4016:3419","crate_id":0,"name":"rciter","span":{"filename":"src/rciter_impl.rs","begin":[10,4],"end":[10,30]},"visibility":"public","docs":"The boxed iterator.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Rc","id":"5:5315:200","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RefCell","id":"2:5029:3582","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}},"2:13443:4458":{"id":"2:13443:4458","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49445:3969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[93,8],"end":[93,18]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Interleave","name":"Interleave","id":"0:2908:1607","glob":false}},"5:6085:3839":{"id":"5:6085:3839","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13429:3782":{"id":"2:13429:3782","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1546:3825":{"id":"0:1546:3825","crate_id":0,"name":"generate","span":{"filename":"src/intersperse.rs","begin":[5,4],"end":[5,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Item"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3371:4637":{"id":"2:3371:4637","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:5081:604":{"id":"0:5081:604","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[3585,33],"end":[3585,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[96,8],"end":[96,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::FilterOk","name":"FilterOk","id":"0:3329:1610","glob":false}},"b:2:2868-0:5056:2627":{"id":"b:2:2868-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2870:1592"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:7799:6585":{"id":"1:7799:6585","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7800:15917"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3211:1415":{"id":"2:3211:1415","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2591:1694":{"id":"0:2591:1694","crate_id":0,"name":"with_position","span":{"filename":"src/lib.rs","begin":[1640,4],"end":[1644,5]},"visibility":"default","docs":"Return an iterator adaptor that wraps each element in a `Position` to\nease special-case handling of the first or last elements.\n\nIterator element type is\n[`Position<Self::Item>`](Position)\n\n```\nuse itertools::{Itertools, Position};\n\nlet it = (0..4).with_position();\nitertools::assert_equal(it,\n                        vec![Position::First(0),\n                             Position::Middle(1),\n                             Position::Middle(2),\n                             Position::Last(3)]);\n\nlet it = (0..1).with_position();\nitertools::assert_equal(it, vec![Position::Only(0)]);\n```","links":{"Position":"0:4573:1719"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"WithPosition","id":"0:2406:1695","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2501:1649":{"id":"0:2501:1649","crate_id":0,"name":"intersperse","span":{"filename":"src/lib.rs","begin":[481,4],"end":[486,5]},"visibility":"default","docs":"An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.\n\nIterator element type is `Self::Item`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\nitertools::assert_equal((0..3).intersperse(8), vec![0, 8, 1, 8, 2]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["element",{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersperse","id":"0:1550:1650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3811:4656":{"id":"2:3811:4656","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2703:2735":{"id":"0:2703:2735","crate_id":0,"name":"partition_result","span":{"filename":"src/lib.rs","begin":[2798,4],"end":[2808,5]},"visibility":"default","docs":"Partition a sequence of `Result`s into one list of all the `Ok` elements\nand another list of all the `Err` elements.\n\n```\nuse itertools::Itertools;\n\nlet successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];\n\nlet (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures\n    .into_iter()\n    .partition_result();\n\nassert_eq!(successes, [1, 2]);\nassert_eq!(failures, [false, true]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"A"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"2:8412:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"2:8412:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13781:150":{"id":"2:13781:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13782:181","2:13783:150","2:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[21,4],"end":[21,14]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::interleave","name":"interleave","id":"0:577:1824","glob":false}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,52],"end":[126,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::groupbylazy::Chunks","name":"Chunks","id":"0:1508:1645","glob":false}},"0:2525:1997":{"id":"0:2525:1997","crate_id":0,"name":"map_results","span":{"filename":"src/lib.rs","begin":[842,4],"end":[847,5]},"visibility":"default","docs":"See [`.map_ok()`](Itertools::map_ok).","links":{"Itertools::map_ok":"0:2496:1747"},"attrs":["#[deprecated(note = \"Use .map_ok() instead\", since = \"0.10.0\")]"],"deprecation":{"since":"0.10.0","note":"Use .map_ok() instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapOk","id":"0:464:1615","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":{"kind":"generic","inner":"U"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[116,4],"end":[116,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::combinations::Combinations","name":"Combinations","id":"0:1049:1628","glob":false}},"2:23467:12743":{"id":"2:23467:12743","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23468:16148","2:23469:16147","2:23470:16149"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23462:6892","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3122:3249":{"id":"0:3122:3249","crate_id":0,"name":"Tuple5Combination","span":{"filename":"src/adaptors/mod.rs","begin":[833,0],"end":[833,69]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2613:2401":{"id":"0:2613:2401","crate_id":0,"name":"all_unique","span":{"filename":"src/lib.rs","begin":[1877,4],"end":[1883,5]},"visibility":"default","docs":"Check whether all elements are unique (non equal).\n\nEmpty iterators are considered to have unique elements:\n\n```\nuse itertools::Itertools;\n\nlet data = vec![1, 2, 3, 4, 1, 5];\nassert!(!data.iter().all_unique());\nassert!(data[0..4].iter().all_unique());\nassert!(data[1..6].iter().all_unique());\n\nlet data : Option<usize> = None;\nassert!(data.into_iter().all_unique());\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,41],"end":[148,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sources::Unfold","name":"Unfold","id":"0:4039:1679","glob":false}},"0:358:3276":{"id":"0:358:3276","crate_id":0,"name":"CoalescePredicate","span":{"filename":"src/adaptors/coalesce.rs","begin":[30,0],"end":[32,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:361:3277"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2966:184":{"id":"2:2966:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2968:997","2:2969:826","2:2970:792","2:2971:713","2:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6463:6432":{"id":"1:6463:6432","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:23447","1:6465:10250","1:6466:23448","1:6467:23449","1:6468:23450","1:6469:23451"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3012:3240":{"id":"0:3012:3240","crate_id":0,"name":"Tuple1Combination","span":{"filename":"src/adaptors/mod.rs","begin":[742,0],"end":[744,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2278:4221":{"id":"0:2278:4221","crate_id":0,"name":"Container","span":{"filename":"src/duplicates_impl.rs","begin":[119,8],"end":[119,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"KeyXorValue","id":"0:2296:4222","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"2:13433:21660":{"id":"2:13433:21660","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:6533":{"id":"2:13437:6533","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:16011:4340","str::slice_mut_unchecked":"1:16011:4340","crate::ops::Index":"2:3576:3874"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[171,0],"end":[171,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::diff::diff_with","name":"diff_with","id":"0:1169:1708","glob":false}},"0:673:1617":{"id":"0:673:1617","crate_id":0,"name":"MergeBy","span":{"filename":"src/adaptors/mod.rs","begin":[524,0],"end":[532,1]},"visibility":"public","docs":"An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.\n\nIterator element type is `I::Item`.\n\nSee [`.merge_by()`](crate::Itertools::merge_by) for more information.","links":{"crate::Itertools::merge_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13484:58669":{"id":"2:13484:58669","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13053:4461","prim@char":"1:16005:4335","str::splitn":"1:16011:4340"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49581:5299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:667:1616":{"id":"0:667:1616","crate_id":0,"name":"Merge","span":{"filename":"src/adaptors/mod.rs","begin":[496,0],"end":[496,47]},"visibility":"public","docs":"An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.\n\nIterator element type is `I::Item`.\n\nSee [`.merge()`](crate::Itertools::merge_by) for more information.","links":{"crate::Itertools::merge_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"MergeBy","id":"0:673:1617","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"J"}},{"type":{"kind":"resolved_path","inner":{"name":"MergeLte","id":"0:2981:3211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[90,8],"end":[90,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::DedupBy","name":"DedupBy","id":"0:390:1604","glob":false}},"0:2936:1612":{"id":"0:2936:1612","crate_id":0,"name":"PutBack","span":{"filename":"src/adaptors/mod.rs","begin":[175,0],"end":[180,1]},"visibility":"public","docs":"An iterator adaptor that allows putting back a single\nitem to the front of the iterator.\n\nIterator element type is `I::Item`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"1:4670:6428":{"id":"1:4670:6428","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4671:6677","1:4672:15614","1:4674:15615","1:4675:15616","1:4676:6448","1:4677:15617","1:4678:15618","1:4680:15619","1:4681:3836","1:4682:4458","1:4683:1807","1:4685:3180"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3234:3254":{"id":"0:3234:3254","crate_id":0,"name":"Tuple9Combination","span":{"filename":"src/adaptors/mod.rs","begin":[837,0],"end":[837,77]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/adaptors/mod.rs","begin":[10,0],"end":[10,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::coalesce","name":"coalesce","id":"0:333:2129","glob":true}},"0:4014:1674":{"id":"0:4014:1674","crate_id":0,"name":"RcIter","span":{"filename":"src/rciter_impl.rs","begin":[8,0],"end":[11,1]},"visibility":"public","docs":"A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":false,"fields":["0:4016:3419"],"impls":[]}},"0:3907:1660":{"id":"0:3907:1660","crate_id":0,"name":"PeekNth","span":{"filename":"src/peek_nth.rs","begin":[8,0],"end":[14,1]},"visibility":"public","docs":"See [`peek_nth()`] for more information.","links":{"`peek_nth()`":"0:1814:1659"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3290:3257":{"id":"0:3290:3257","crate_id":0,"name":"Tuple11Combination","span":{"filename":"src/adaptors/mod.rs","begin":[839,0],"end":[839,83]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2499:1831":{"id":"0:2499:1831","crate_id":0,"name":"interleave_shortest","span":{"filename":"src/lib.rs","begin":[462,4],"end":[467,5]},"visibility":"default","docs":"Alternate elements from two iterators until at least one of them has run\nout.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::Itertools;\n\nlet it = (1..7).interleave_shortest(vec![-1, -2]);\nitertools::assert_equal(it, vec![1, -1, 2, -2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"InterleaveShortest","id":"0:2922:1608","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2872:3323":{"id":"0:2872:3323","crate_id":0,"name":"MapSpecialCaseFnInto","span":{"filename":"src/adaptors/map.rs","begin":[116,0],"end":[116,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13444:24479":{"id":"2:13444:24479","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16011:4340"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49733:5318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2695:1728":{"id":"0:2695:1728","crate_id":0,"name":"k_smallest","span":{"filename":"src/lib.rs","begin":[2736,4],"end":[2743,5]},"visibility":"default","docs":"Sort the k smallest elements into a new iterator, in ascending order.\n\n**Note:** This consumes the entire iterator, and returns the result\nas a new iterator that owns its elements.  If the input contains\nless than k elements, the result is equivalent to `self.sorted()`.\n\nThis is guaranteed to use `k * sizeof(Self::Item) + O(1)` memory\nand `O(n log k)` time, with `n` the number of elements in the input.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n**Note:** This is functionally-equivalent to `self.sorted().take(k)`\nbut much more efficient.\n\n```\nuse itertools::Itertools;\n\n// A random permutation of 0..15\nlet numbers = vec![6, 9, 1, 14, 0, 4, 8, 7, 11, 2, 10, 3, 13, 12, 5];\n\nlet five_smallest = numbers\n    .into_iter()\n    .k_smallest(5);\n\nitertools::assert_equal(five_smallest, 0..5);\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["k",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:440:3314":{"id":"0:440:3314","crate_id":0,"name":"Out","span":{"filename":"src/adaptors/map.rs","begin":[12,4],"end":[12,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"2:13462:5021":{"id":"2:13462:5021","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47492:176","prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2222:4181":{"id":"0:2222:4181","crate_id":0,"name":"Buffer","span":{"filename":"src/tuple_impl.rs","begin":[241,4],"end":[241,85]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsMut","id":"2:3168:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:1018:2683":{"id":"0:1018:2683","crate_id":0,"name":"sorted","span":{"filename":"src/free.rs","begin":[270,0],"end":[275,1]},"visibility":"public","docs":"Sort all iterator elements into a new iterator in ascending order.\n\n[`IntoIterator`] enabled version of [`Itertools::sorted`].\n\n```\nuse itertools::sorted;\nuse itertools::assert_equal;\n\nassert_equal(sorted(\"rust\".chars()), \"rstu\".chars());\n```","links":{"`IntoIterator`":"2:8403:151","`Itertools::sorted`":"0:2496:1747"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1161:3554":{"id":"0:1161:3554","crate_id":0,"name":"Shorter","span":{"filename":"src/diff.rs","begin":[23,4],"end":[23,30]},"visibility":"default","docs":"The total number of elements that were in `J` along with the remaining elements of `I`.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}}]}},"0:5069":{"id":"0:5069","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3585,22],"end":[3585,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:5071:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23771:6886":{"id":"2:23771:6886","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23772:6890"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23767:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4584:4279":{"id":"0:4584:4279","crate_id":0,"name":"Only","span":{"filename":"src/with_position.rs","begin":[46,4],"end":[46,11]},"visibility":"default","docs":"This is the only element.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"}]}},"0:2496:1747":{"id":"0:2496:1747","crate_id":0,"name":"Itertools","span":{"filename":"src/lib.rs","begin":[429,0],"end":[3473,1]},"visibility":"public","docs":"An [`Iterator`] blanket implementation that provides extra adaptors and\nmethods.\n\nThis trait defines a number of methods. They are divided into two groups:\n\n* *Adaptors* take an iterator and parameter as input, and return\na new iterator value. These are listed first in the trait. An example\nof an adaptor is [`.interleave()`](Itertools::interleave)\n\n* *Regular methods* are those that don't return iterators and instead\nreturn a regular value of some other kind.\n[`.next_tuple()`](Itertools::next_tuple) is an example and the first regular\nmethod in the list.","links":{"`Iterator`":"2:8601:157","Itertools::interleave":"0:2496:1747","Itertools::next_tuple":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:2497:1824","0:2499:1831","0:2501:1649","0:2502:1840","0:2504:1698","0:2506:1861","0:2508:1877","0:2511:1902","0:2514:1919","0:2515:1942","0:2517:1954","0:2519:1969","0:2521:1681","0:2522:1988","0:2523:1992","0:2525:1997","0:2530:2000","0:2535:2012","0:2539:2018","0:2544:1637","0:2547:2037","0:2549:2045","0:2552:2067","0:2555:2077","0:2556:1710","0:2558:1748","0:2560:2110","0:2561:2129","0:2563:2135","0:2564:2141","0:2566:2149","0:2567:2154","0:2569:2163","0:2570:2169","0:2573:2181","0:2574:2188","0:2577:1663","0:2579:2208","0:2581:2215","0:2583:2230","0:2585:1627","0:2586:1629","0:2587:1665","0:2588:1669","0:2589:2296","0:2591:1694","0:2592:2316","0:2594:2324","0:2596:2331","0:2598:2342","0:2600:2348","0:2602:2355","0:2605:2363","0:2608:2381","0:2611:2393","0:2613:2401","0:2615:2411","0:2616:2419","0:2617:2430","0:2619:432","0:2620:2442","0:2621:2454","0:2625:2463","0:2629:2469","0:2631:671","0:2632:2502","0:2634:2506","0:2639:2507","0:2644:2547","0:2648:2556","0:2651:2588","0:2663:2625","0:2674:2641","0:2677:2652","0:2680:2664","0:2681:2675","0:2683:2679","0:2686:2683","0:2687:2687","0:2689:2691","0:2692:2697","0:2695:1728","0:2696:2727","0:2703:2735","0:2709:2746","0:2712:2762","0:2716:2770","0:2719:2773","0:2723:1711","0:2726:2806","0:2730:2810","0:2734:2821","0:2737:2831","0:2742:2836","0:2746:2843","0:2749:2849","0:2754:2853","0:2758:2876","0:2771:2890","0:2785:2896","0:2798:2906","0:2799:2915","0:2800:2923","0:2801:2933","0:2803:2958","0:2806:1721"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:2808"]}},"0:2615:2411":{"id":"0:2615:2411","crate_id":0,"name":"dropping","span":{"filename":"src/lib.rs","begin":[1900,4],"end":[1907,5]},"visibility":"default","docs":"Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.\n\nIt works similarly to *.skip(* `n` *)* except it is eager and\npreserves the iterator type.\n\n```\nuse itertools::Itertools;\n\nlet mut iter = \"αβγ\".chars().dropping(2);\nitertools::assert_equal(iter, \"γ\".chars());\n```\n\n*Fusing notes: if the iterator is exhausted by dropping,\nthe result of calling `.next()` again depends on the iterator implementation.*","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3576:3874":{"id":"2:3576:3874","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3578:181","2:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2925:124":{"id":"2:2925:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:464:1615":{"id":"0:464:1615","crate_id":0,"name":"MapOk","span":{"filename":"src/adaptors/map.rs","begin":[68,0],"end":[68,64]},"visibility":"public","docs":"An iterator adapter to apply a transformation within a nested `Result::Ok`.\n\nSee [`.map_ok()`](crate::Itertools::map_ok) for more information.","links":{"crate::Itertools::map_ok":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"MapSpecialCase","id":"0:2851:3312","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"MapSpecialCaseFnOk","id":"0:2864:3317","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[155,41],"end":[155,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::unique_impl::UniqueBy","name":"UniqueBy","id":"0:4344:1693","glob":false}},"0:2555:2077":{"id":"0:2555:2077","crate_id":0,"name":"kmerge","span":{"filename":"src/lib.rs","begin":[1026,4],"end":[1032,5]},"visibility":"default","docs":"Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.\n\nIf all base iterators are sorted (ascending), the result is sorted.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::Itertools;\n\nlet a = (0..6).step(3);\nlet b = (1..6).step(3);\nlet c = (2..6).step(3);\nlet it = vec![a, b, c].into_iter().kmerge();\nitertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"KMerge","id":"0:1618:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4050:4607":{"id":"2:4050:4607","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4051:5210"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4745:6451":{"id":"1:4745:6451","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:15673","1:4747:15674","1:4748:15675","1:4749:15676"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:234":{"id":"0:234","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,4],"end":[150,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::tee::Tee","name":"Tee","id":"0:4068:1682","glob":false}},"0:2596:2331":{"id":"0:2596:2331","crate_id":0,"name":"next_tuple","span":{"filename":"src/lib.rs","begin":[1697,4],"end":[1702,5]},"visibility":"default","docs":"Advances the iterator and returns the next items grouped in a tuple of\na specific size (up to 12).\n\nIf there are enough elements to be grouped in a tuple, then the tuple is\nreturned inside `Some`, otherwise `None` is returned.\n\n```\nuse itertools::Itertools;\n\nlet mut iter = 1..5;\n\nassert_eq!(Some((1, 2)), iter.next_tuple());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"traits::HomogeneousTuple","id":"0:2171:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6689:6415":{"id":"1:6689:6415","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6690:23468","1:6691:10172","1:6692:10173","1:6693:10175","1:6694:10174","1:6695:10176","1:6696:10177","1:6697:10179","1:6698:8430","1:6699:10182","1:6700:10183","1:6701:10184","1:6702:10185","1:6703:10186","1:6704:10187","1:6705:10180","1:6706:10181"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2549:2045":{"id":"0:2549:2045","crate_id":0,"name":"merge_by","span":{"filename":"src/lib.rs","begin":[965,4],"end":[971,5]},"visibility":"default","docs":"Return an iterator adaptor that merges the two base iterators in order.\nThis is much like [`.merge()`](Itertools::merge) but allows for a custom ordering.\n\nThis can be especially useful for sequences of tuples.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::Itertools;\n\nlet a = (0..).zip(\"bc\".chars());\nlet b = (0..).zip(\"ad\".chars());\nlet it = a.merge_by(b, |x, y| x.1 <= y.1);\nitertools::assert_equal(it, vec![(0, 'a'), (0, 'b'), (1, 'c'), (1, 'd')]);\n```","links":{"Itertools::merge":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}],["is_first",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MergeBy","id":"0:673:1617","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13511:62278":{"id":"2:13511:62278","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116":{"id":"0:116","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[109,8],"end":[109,14]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Update","name":"Update","id":"0:3351:1623","glob":false}},"0:2567:2154":{"id":"0:2567:2154","crate_id":0,"name":"dedup_by_with_count","span":{"filename":"src/lib.rs","begin":[1237,4],"end":[1243,5]},"visibility":"default","docs":"Remove duplicates from sections of consecutive identical elements, while keeping a count of\nhow many repeated elements were present.\nThis will determine equality using a comparison function.\nIf the iterator is sorted, all elements will be unique.\n\nIterator element type is `(usize, Self::Item)`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![(0, 'a'), (1, 'a'), (0, 'b'), (0, 'c'), (1, 'c'), (1, 'b'), (2, 'b')];\nitertools::assert_equal(data.into_iter().dedup_by_with_count(|x, y| x.1 == y.1),\n                        vec![(2, (0, 'a')), (1, (0, 'b')), (2, (0, 'c')), (2, (1, 'b'))]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"Cmp"}]],"output":{"kind":"resolved_path","inner":{"name":"DedupByWithCount","id":"0:416:1606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"Cmp"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"Cmp","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Cmp"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3094:3248":{"id":"0:3094:3248","crate_id":0,"name":"Tuple4Combination","span":{"filename":"src/adaptors/mod.rs","begin":[832,0],"end":[832,67]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:790:1609":{"id":"0:790:1609","crate_id":0,"name":"FilterMapOk","span":{"filename":"src/adaptors/mod.rs","begin":[922,0],"end":[925,1]},"visibility":"public","docs":"An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`.\n\nSee [`.filter_map_ok()`](crate::Itertools::filter_map_ok) for more information.","links":{"crate::Itertools::filter_map_ok":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[130,4],"end":[130,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::merge_join::MergeJoinBy","name":"MergeJoinBy","id":"0:1701:1656","glob":false}},"0:2220:1956":{"id":"0:2220:1956","crate_id":0,"name":"TupleCollect","span":{"filename":"src/tuple_impl.rs","begin":[239,0],"end":[252,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:2221:1825","0:2222:4181","0:2223:4185","0:2225:2332","0:2227:4195","0:2228:4196"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3309:4597-0:5056:2627":{"id":"a:2:3309:4597-0:5056:2627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:4597","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3309:4597","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13525:62282":{"id":"2:13525:62282","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:5056:2627":{"id":"b:2:3201-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3203:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3177:228":{"id":"2:3177:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:127","2:3180:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1021:1705":{"id":"0:1021:1705","crate_id":0,"name":"concat_impl","span":{"filename":"src/concat_impl.rs","begin":[1,0],"end":[22,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1025:432"],"is_stripped":true}},"2:13072:5314":{"id":"2:13072:5314","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13074:6860","2:13075:922","2:13076:23349","2:13077:23350"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:333:2129":{"id":"0:333:2129","crate_id":0,"name":"coalesce","span":{"filename":"src/adaptors/coalesce.rs","begin":[1,0],"end":[237,1]},"visibility":{"restricted":{"parent":"0:332:1602","path":"::adaptors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:343:3275","0:358:3276","0:379:1620","0:390:1604","0:2827:3293","0:395:3295","0:2835:3297","0:412:1603","0:416:1606","0:2841:3307","0:423:1605"],"is_stripped":true}},"0:203":{"id":"0:203","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[136,4],"end":[136,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::peeking_take_while::PeekingTakeWhile","name":"PeekingTakeWhile","id":"0:1858:1664","glob":false}},"0:736:2231":{"id":"0:736:2231","crate_id":0,"name":"HasCombination","span":{"filename":"src/adaptors/mod.rs","begin":[709,0],"end":[711,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:738:3237"],"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1174:1637":{"id":"0:1174:1637","crate_id":0,"name":"flatten_ok","span":{"filename":"src/flatten_ok.rs","begin":[1,0],"end":[166,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1193:1638"],"is_stripped":true}},"0:1159:1541":{"id":"0:1159:1541","crate_id":0,"name":"1","span":{"filename":"src/diff.rs","begin":[21,25],"end":[21,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}}},"0:2552:2067":{"id":"0:2552:2067","crate_id":0,"name":"merge_join_by","span":{"filename":"src/lib.rs","begin":[1001,4],"end":[1007,5]},"visibility":"default","docs":"Create an iterator that merges items from both this and the specified\niterator in ascending order.\n\nIt chooses whether to pair elements based on the `Ordering` returned by the\nspecified compare function. At any point, inspecting the tip of the\niterators `I` and `J` as items `i` of type `I::Item` and `j` of type\n`J::Item` respectively, the resulting iterator will:\n\n- Emit `EitherOrBoth::Left(i)` when `i < j`,\n  and remove `i` from its source iterator\n- Emit `EitherOrBoth::Right(j)` when `i > j`,\n  and remove `j` from its source iterator\n- Emit `EitherOrBoth::Both(i, j)` when  `i == j`,\n  and remove both `i` and `j` from their respective source iterators\n\n```\nuse itertools::Itertools;\nuse itertools::EitherOrBoth::{Left, Right, Both};\n\nlet multiples_of_2 = (0..10).step(2);\nlet multiples_of_3 = (0..10).step(3);\n\nitertools::assert_equal(\n    multiples_of_2.merge_join_by(multiples_of_3, |i, j| i.cmp(j)),\n    vec![Both(0, 0), Left(2), Right(3), Left(4), Both(6, 6), Left(8), Right(9)]\n);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}],["cmp_fn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MergeJoinBy","id":"0:1701:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"std::cmp::Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3868:1540":{"id":"0:3868:1540","crate_id":0,"name":"0","span":{"filename":"src/minmax.rs","begin":[15,11],"end":[15,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:2882:1626":{"id":"0:2882:1626","crate_id":0,"name":"MultiProduct","span":{"filename":"src/adaptors/multi_product.rs","begin":[17,0],"end":[19,25]},"visibility":"public","docs":"An iterator adaptor that iterates over the cartesian product of\nmultiple iterators of type `I`.\n\nAn iterator element type is `Vec<I>`.\n\nSee [`.multi_cartesian_product()`](crate::Itertools::multi_cartesian_product)\nfor more information.","links":{"crate::Itertools::multi_cartesian_product":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"1:5651:6508":{"id":"1:5651:6508","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5652:23375","1:5653:4806"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22748:6970":{"id":"2:22748:6970","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22749:6890","2:22750:16130","2:22751:16131","2:22752:16132","2:22753:16133","2:22754:16134","2:22755:16135","2:22756:16136","2:22757:16137","2:22758:16138","2:22759:16139","2:22760:16140","2:22761:16141","2:22762:16142","2:22763:16143","2:22764:16144","2:22765:16145","2:22766:16146","2:22767:16147","2:22768:16148","2:22769:16149","2:22770:16150","2:22771:16151","2:22772:16152","2:22773:16153"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1073:1629":{"id":"0:1073:1629","crate_id":0,"name":"combinations_with_replacement","span":{"filename":"src/combinations_with_replacement.rs","begin":[1,0],"end":[109,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3703:1630"],"is_stripped":true}},"0:1632:1654":{"id":"0:1632:1654","crate_id":0,"name":"KMergeBy","span":{"filename":"src/kmerge_impl.rs","begin":[157,0],"end":[162,1]},"visibility":"public","docs":"An iterator adaptor that merges an abitrary number of base iterators\naccording to an ordering function.\n\nIterator element type is `I::Item`.\n\nSee [`.kmerge_by()`](crate::Itertools::kmerge_by) for more\ninformation.","links":{"crate::Itertools::kmerge_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"2:22937:6487":{"id":"2:22937:6487","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22927:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1748:2923":{"id":"0:1748:2923","crate_id":0,"name":"multipeek","span":{"filename":"src/multipeek_impl.rs","begin":[18,0],"end":[26,1]},"visibility":"public","docs":"An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing the base iterator.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"MultiPeek","id":"0:3884:1658","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,8],"end":[103,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::MergeBy","name":"MergeBy","id":"0:673:1617","glob":false}},"0:3364:3368":{"id":"0:3364:3368","crate_id":0,"name":"Both","span":{"filename":"src/either_or_both.rs","begin":[9,4],"end":[9,14]},"visibility":"default","docs":"Both values are present.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"A"},{"kind":"generic","inner":"B"}]}},"2:13418:3359":{"id":"2:13418:3359","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:602:3170":{"id":"0:602:3170","crate_id":0,"name":"put_back","span":{"filename":"src/adaptors/mod.rs","begin":[183,0],"end":[190,1]},"visibility":"public","docs":"Create an iterator where you can put back a single item","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23462:6892":{"id":"2:23462:6892","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23463:1268","2:23464:1267","2:23465:1265","2:23466:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22874:6973","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5793:6411":{"id":"1:5793:6411","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5794:23411"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[183,0],"end":[183,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::ziptuple::multizip","name":"multizip","id":"0:2489:1723","glob":false}},"2:10310:3601":{"id":"2:10310:3601","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:316":{"id":"0:316","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,46],"end":[180,53]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sources::iterate","name":"iterate","id":"0:2130:1718","glob":false}},"0:148":{"id":"0:148","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,4],"end":[122,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::flatten_ok::FlattenOk","name":"FlattenOk","id":"0:1193:1638","glob":false}},"0:2634:2506":{"id":"0:2634:2506","crate_id":0,"name":"fold_results","span":{"filename":"src/lib.rs","begin":[2140,4],"end":[2145,5]},"visibility":"default","docs":"See [`.fold_ok()`](Itertools::fold_ok).","links":{"Itertools::fold_ok":"0:2496:1747"},"attrs":["#[deprecated(note = \"Use .fold_ok() instead\", since = \"0.10.0\")]"],"deprecation":{"since":"0.10.0","note":"Use .fold_ok() instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["start",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"A"}],"output":{"kind":"generic","inner":"B"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1366:1642":{"id":"0:1366:1642","crate_id":0,"name":"groupbylazy","span":{"filename":"src/groupbylazy.rs","begin":[1,0],"end":[571,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1433:1646","0:1457:1648","0:1471:1647","0:1494:1643","0:1508:1645","0:1518:1644"],"is_stripped":true}},"0:438:3313":{"id":"0:438:3313","crate_id":0,"name":"MapSpecialCaseFn","span":{"filename":"src/adaptors/map.rs","begin":[11,0],"end":[14,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:440:3314","0:441:376"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3363:4631":{"id":"2:3363:4631","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:181","2:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1564":{"id":"0:0:1564","crate_id":0,"name":"itertools","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3608,1]},"visibility":"public","docs":"Extra iterator adaptors, functions and macros.\n\nTo extend [`Iterator`] with methods in this crate, import\nthe [`Itertools`] trait:\n\n```\nuse itertools::Itertools;\n```\n\nNow, new methods like [`interleave`](Itertools::interleave)\nare available on all iterators:\n\n```\nuse itertools::Itertools;\n\nlet it = (1..3).interleave(vec![-1, -2]);\nitertools::assert_equal(it, vec![1, -1, 2, -2]);\n```\n\nMost iterator methods are also provided as functions (with the benefit\nthat they convert parameters using [`IntoIterator`]):\n\n```\nuse itertools::interleave;\n\nfor elt in interleave(&[1, 2, 3], &[2, 3, 4]) {\n    /* loop body */\n}\n```\n\n## Crate Features\n\n- `use_std`\n  - Enabled by default.\n  - Disable to compile itertools using `#![no_std]`. This disables\n    any items that depend on collections (like `group_by`, `unique`,\n    `kmerge`, `join` and many more).\n\n## Rust Version\n\nThis version of itertools requires Rust 1.32 or later.","links":{"`Itertools`":"0:2496:1747","Itertools::interleave":"0:2496:1747","`Iterator`":"2:8601:157","`IntoIterator`":"2:8403:151"},"attrs":["#![warn(missing_docs)]","#![crate_name = \"itertools\"]","#![doc(html_root_url = \"https://docs.rs/itertools/0.8/\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:54:1601","0:276:1703","0:2496:1747","0:2810:2977","0:2813:2987","0:2816:2999","0:5056:2627","0:2493:1742","0:2494:1769","0:2495:1807","0:11","0:280","0:281","0:284","0:287","0:290","0:294","0:297","0:300","0:303","0:306","0:310","0:313","0:316","0:319","0:323","0:326","0:329","0:922","0:1020"],"is_stripped":false}},"0:2325:1691":{"id":"0:2325:1691","crate_id":0,"name":"unique_impl","span":{"filename":"src/unique_impl.rs","begin":[2,0],"end":[178,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4344:1693","0:4357:1692"],"is_stripped":true}},"2:10933:214":{"id":"2:10933:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10935:181","2:10936:3782","2:10937:3780","2:10938:21660","2:10939:21661","2:10940:753","2:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10924:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2674:2641":{"id":"0:2674:2641","crate_id":0,"name":"sum1","span":{"filename":"src/lib.rs","begin":[2443,4],"end":[2449,5]},"visibility":"default","docs":"Iterate over the entire iterator and add all the elements.\n\nAn empty iterator returns `None`, otherwise `Some(sum)`.\n\n# Panics\n\nWhen calling `sum1()` and a primitive integer type is being returned, this\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n\n```\nuse itertools::Itertools;\n\nlet empty_sum = (1..1).sum1::<i32>();\nassert_eq!(empty_sum, None);\n\nlet nonempty_sum = (1..11).sum1::<i32>();\nassert_eq!(nonempty_sum, Some(55));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::iter::Sum","id":"2:8362:2643","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2810:2977":{"id":"0:2810:2977","crate_id":0,"name":"equal","span":{"filename":"src/lib.rs","begin":[3488,0],"end":[3504,1]},"visibility":"public","docs":"Return `true` if both iterables produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.\n\nThis is an [`IntoIterator`] enabled function that is similar to the standard\nlibrary method [`Iterator::eq`].\n\n```\nassert!(itertools::equal(vec![1, 2, 3], 1..4));\nassert!(!itertools::equal(&[0, 0], &[0, 0, 0]));\n```","links":{"`IntoIterator`":"2:8403:151","`Iterator::eq`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"generic","inner":"I"}],["b",{"kind":"generic","inner":"J"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:2391:1722":{"id":"0:2391:1722","crate_id":0,"name":"MultiUnzip","span":{"filename":"src/unziptuple.rs","begin":[32,0],"end":[35,1]},"visibility":"public","docs":"An iterator that can be unzipped into multiple collections.\n\nSee [`.multiunzip()`](crate::Itertools::multiunzip) for more information.","links":{"crate::Itertools::multiunzip":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:2393:1721"],"generics":{"params":[{"name":"FromI","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:319":{"id":"0:319","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[181,0],"end":[181,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::with_position::Position","name":"Position","id":"0:4573:1719","glob":false}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,36],"end":[121,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::format::FormatWith","name":"FormatWith","id":"0:3721:1636","glob":false}},"0:2946:1611":{"id":"0:2946:1611","crate_id":0,"name":"Product","span":{"filename":"src/adaptors/mod.rs","begin":[286,0],"end":[293,1]},"visibility":"public","docs":"An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.\n\nIterator element type is `(I::Item, J::Item)`.\n\nSee [`.cartesian_product()`](crate::Itertools::cartesian_product) for more information.","links":{"crate::Itertools::cartesian_product":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2547:2037":{"id":"0:2547:2037","crate_id":0,"name":"merge","span":{"filename":"src/lib.rs","begin":[941,4],"end":[947,5]},"visibility":"default","docs":"Return an iterator adaptor that merges the two base iterators in\nascending order.  If both base iterators are sorted (ascending), the\nresult is sorted.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::Itertools;\n\nlet a = (0..11).step(3);\nlet b = (0..11).step(5);\nlet it = a.merge(b);\nitertools::assert_equal(it, vec![0, 0, 3, 5, 6, 9, 10]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"Merge","id":"0:667:1616","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2090:1677":{"id":"0:2090:1677","crate_id":0,"name":"sources","span":{"filename":"src/sources.rs","begin":[1,0],"end":[183,1]},"visibility":"crate","docs":"Iterators that are sources (produce elements from parameters,\nnot from another iterator).","links":{},"attrs":["#![allow(deprecated)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4031:1678","0:2099:1716","0:2108:1717","0:4039:1679","0:4048:1680","0:2130:1718"],"is_stripped":true}},"0:4575:4273":{"id":"0:4575:4273","crate_id":0,"name":"First","span":{"filename":"src/with_position.rs","begin":[40,4],"end":[40,12]},"visibility":"default","docs":"This is the first element.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"}]}},"2:3216:1414":{"id":"2:3216:1414","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3422:4644":{"id":"2:3422:4644","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13438:62266":{"id":"2:13438:62266","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:16011:4340","crate::ops::IndexMut":"2:3580:4449","str::slice_unchecked":"1:16011:4340"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5779:6416":{"id":"1:5779:6416","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5780:23400","1:5781:23401","1:5782:23402","1:5783:23403"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3739:4651":{"id":"2:3739:4651","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3741:22918"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3373:1540":{"id":"0:3373:1540","crate_id":0,"name":"0","span":{"filename":"src/either_or_both.rs","begin":[13,10],"end":[13,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"B"}},"1:6867:6404":{"id":"1:6867:6404","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6868:23433"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:985:1840":{"id":"0:985:1840","crate_id":0,"name":"intersperse_with","span":{"filename":"src/free.rs","begin":[66,0],"end":[71,1]},"visibility":"public","docs":"Iterate `iterable` with a particular value created by a function inserted\nbetween each element.\n\n[`IntoIterator`] enabled version of [`Iterator::intersperse_with`].\n\n```\nuse itertools::intersperse_with;\n\nlet mut i = 10;\nitertools::assert_equal(intersperse_with((0..3), || { i -= 1; i }), vec![0, 9, 1, 8, 2]);\nassert_eq!(i, 8);\n```","links":{"`IntoIterator`":"2:8403:151","`Iterator::intersperse_with`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["element",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"IntersperseWith","id":"0:3816:1651","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[106,8],"end":[106,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Coalesce","name":"Coalesce","id":"0:379:1620","glob":false}},"0:5072":{"id":"0:5072","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3585,29],"end":[3585,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3277:217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3999:68":{"id":"2:3999:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4000:1427"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:1253:1639":{"id":"0:1253:1639","crate_id":0,"name":"grouping_map","span":{"filename":"src/grouping_map.rs","begin":[1,0],"end":[536,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]","#![cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3777:2775","0:1292:1641","0:3791:1640"],"is_stripped":true}},"0:2619:432":{"id":"0:2619:432","crate_id":0,"name":"concat","span":{"filename":"src/lib.rs","begin":[1972,4],"end":[1977,5]},"visibility":"default","docs":"Combine all an iterator's elements into one element by using [`Extend`].\n\nThis combinator will extend the first item with each of the rest of the\nitems of the iterator. If the iterator is empty, the default value of\n`I::Item` is returned.\n\n```rust\nuse itertools::Itertools;\n\nlet input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];\nassert_eq!(input.into_iter().concat(),\n           vec![1, 2, 3, 4, 5, 6]);\n```","links":{"`Extend`":"2:8412:2439"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Extend","id":"2:8412:2439","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3246:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1508:1645":{"id":"0:1508:1645","crate_id":0,"name":"Chunks","span":{"filename":"src/groupbylazy.rs","begin":[510,0],"end":[515,1]},"visibility":"public","docs":"An iterator that yields the Chunk iterators.\n\nIterator element type is `Chunk`.\n\nSee [`.chunks()`](crate::Itertools::chunks) for more information.","links":{"crate::Itertools::chunks":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[182,40],"end":[182,50]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::unziptuple::MultiUnzip","name":"MultiUnzip","id":"0:2391:1722","glob":false}},"2:3580:4449":{"id":"2:3580:4449","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:3874","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[101,8],"end":[101,13]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::MapOk","name":"MapOk","id":"0:464:1615","glob":false}},"1:5801:6419":{"id":"1:5801:6419","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5802:8388"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,76],"end":[126,82]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::groupbylazy::Groups","name":"Groups","id":"0:1457:1648","glob":false}},"1:4752:6454":{"id":"1:4752:6454","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:15686","1:4754:15687","1:4755:15688","1:4757:6453","1:4758:15689","1:4760:15690","1:4761:7482"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4670:6428","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3197-0:5056:2627":{"id":"b:2:3197-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3200:3244"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2563:2135":{"id":"0:2563:2135","crate_id":0,"name":"dedup","span":{"filename":"src/lib.rs","begin":[1170,4],"end":[1175,5]},"visibility":"default","docs":"Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.\n\nIterator element type is `Self::Item`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![1., 1., 2., 3., 3., 2., 2.];\nitertools::assert_equal(data.into_iter().dedup(),\n                        vec![1., 2., 3., 2.]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Dedup","id":"0:412:1603","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2521:1681":{"id":"0:2521:1681","crate_id":0,"name":"tee","span":{"filename":"src/lib.rs","begin":[795,4],"end":[800,5]},"visibility":"default","docs":"Split into an iterator pair that both yield all elements from\nthe original iterator.\n\n**Note:** If the iterator is clonable, prefer using that instead\nof using this method. It is likely to be more efficient.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::Itertools;\nlet xs = vec![0, 1, 2, 3];\n\nlet (mut t1, t2) = xs.into_iter().tee();\nitertools::assert_equal(t1.next(), Some(0));\nitertools::assert_equal(t2, 0..4);\nitertools::assert_equal(t1, 1..4);\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Tee","id":"0:4068:1682","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Tee","id":"0:4068:1682","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1160:1542":{"id":"0:1160:1542","crate_id":0,"name":"2","span":{"filename":"src/diff.rs","begin":[21,37],"end":[21,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"PutBack","id":"0:2936:1612","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"J"}}],"bindings":[]}},"param_names":[]}}},"0:1014:2297":{"id":"0:1014:2297","crate_id":0,"name":"min","span":{"filename":"src/free.rs","begin":[234,0],"end":[239,1]},"visibility":"public","docs":"Return the minimum value of the iterable.\n\n[`IntoIterator`] enabled version of [`Iterator::min`].\n\n```\nuse itertools::min;\n\nassert_eq!(min(0..10), Some(0));\n```","links":{"`Iterator::min`":"2:8601:157","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:4085:1687":{"id":"0:4085:1687","crate_id":0,"name":"Tuples","span":{"filename":"src/tuple_impl.rs","begin":[82,0],"end":[88,1]},"visibility":"public","docs":"An iterator that groups the items in tuples of a specific size.\n\nSee [`.tuples()`](crate::Itertools::tuples) for more information.","links":{"crate::Itertools::tuples":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HomogeneousTuple","id":"0:2171:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2687:2687":{"id":"0:2687:2687","crate_id":0,"name":"sorted_by","span":{"filename":"src/lib.rs","begin":[2628,4],"end":[2635,5]},"visibility":"default","docs":"Sort all iterator elements into a new iterator in ascending order.\n\n**Note:** This consumes the entire iterator, uses the\n[`slice::sort_by`] method and returns the result as a new\niterator that owns its elements.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n```\nuse itertools::Itertools;\n\n// sort people in descending order by age\nlet people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];\n\nlet oldest_people_first = people\n    .into_iter()\n    .sorted_by(|a, b| Ord::cmp(&b.1, &a.1))\n    .map(|(person, _age)| person);\n\nitertools::assert_equal(oldest_people_first,\n                        vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);\n```","links":{"`slice::sort_by`":"1:16010:4339"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6561:6516":{"id":"1:6561:6516","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6562:23461","1:6563:23462"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3206:3252":{"id":"0:3206:3252","crate_id":0,"name":"Tuple8Combination","span":{"filename":"src/adaptors/mod.rs","begin":[836,0],"end":[836,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:4577:1540":{"id":"0:4577:1540","crate_id":0,"name":"0","span":{"filename":"src/with_position.rs","begin":[40,10],"end":[40,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:2544:1637":{"id":"0:2544:1637","crate_id":0,"name":"flatten_ok","span":{"filename":"src/lib.rs","begin":[920,4],"end":[925,5]},"visibility":"default","docs":"Return an iterator adaptor that flattens every `Result::Ok` value into\na series of `Result::Ok` values. `Result::Err` values are unchanged.\n \nThis is useful when you have some common error type for your crate and\nneed to propogate it upwards, but the `Result::Ok` case needs to be flattened.\n\n```\nuse itertools::Itertools;\n\nlet input = vec![Ok(0..2), Err(false), Ok(2..4)];\nlet it = input.iter().cloned().flatten_ok();\nitertools::assert_equal(it.clone(), vec![Ok(0), Ok(1), Err(false), Ok(2), Ok(3)]);\n \n// This can also be used to propogate errors when collecting.\nlet output_result: Result<Vec<i32>, bool> = it.collect();\nassert_eq!(output_result, Err(false));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"FlattenOk","id":"0:1193:1638","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6441:6429":{"id":"1:6441:6429","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6442:6740","1:6443:6741","1:6444:10882","1:6445:23441","1:6447:23442","1:6449:23443","1:6450:23444","1:6452:23445"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[129,41],"end":[129,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::kmerge_impl::KMergeBy","name":"KMergeBy","id":"0:1632:1654","glob":false}},"2:3716:4649":{"id":"2:3716:4649","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3647:4450","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2677:2652":{"id":"0:2677:2652","crate_id":0,"name":"product1","span":{"filename":"src/lib.rs","begin":[2471,4],"end":[2477,5]},"visibility":"default","docs":"Iterate over the entire iterator and multiply all the elements.\n\nAn empty iterator returns `None`, otherwise `Some(product)`.\n\n# Panics\n\nWhen calling `product1()` and a primitive integer type is being returned,\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n```\nuse itertools::Itertools;\n\nlet empty_product = (1..1).product1::<i32>();\nassert_eq!(empty_product, None);\n\nlet nonempty_product = (1..11).product1::<i32>();\nassert_eq!(nonempty_product, Some(3628800));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"std::iter::Product","id":"2:8366:1611","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[153,49],"end":[153,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::duplicates_impl::DuplicatesBy","name":"DuplicatesBy","id":"0:2313:1690","glob":false}},"0:4039:1679":{"id":"0:4039:1679","crate_id":0,"name":"Unfold","span":{"filename":"src/sources.rs","begin":[118,0],"end":[122,1]},"visibility":"public","docs":"See [`unfold`](crate::unfold) for more information.","links":{"crate::unfold":"0:2108:1717"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"St","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":["0:4043:1324"],"impls":[]}},"2:8362:2643":{"id":"2:8362:2643","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8364:2644"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4357:1692":{"id":"0:4357:1692","crate_id":0,"name":"Unique","span":{"filename":"src/unique_impl.rs","begin":[156,0],"end":[158,1]},"visibility":"public","docs":"An iterator adapter to filter out duplicate elements.\n\nSee [`.unique()`](crate::Itertools::unique) for more information.","links":{"crate::Itertools::unique":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2686:2683":{"id":"0:2686:2683","crate_id":0,"name":"sorted","span":{"filename":"src/lib.rs","begin":[2593,4],"end":[2602,5]},"visibility":"default","docs":"Sort all iterator elements into a new iterator in ascending order.\n\n**Note:** This consumes the entire iterator, uses the\n[`slice::sort`] method and returns the result as a new\niterator that owns its elements.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n```\nuse itertools::Itertools;\n\n// sort the letters of the text in ascending order\nlet text = \"bdacfe\";\nitertools::assert_equal(text.chars().sorted(),\n                        \"abcdef\".chars());\n```","links":{"`slice::sort`":"1:16010:4339"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2621:2454":{"id":"0:2621:2454","crate_id":0,"name":"try_collect","span":{"filename":"src/lib.rs","begin":[2009,4],"end":[2015,5]},"visibility":"default","docs":"`.try_collect()` is more convenient way of writing\n`.collect::<Result<_, _>>()`\n\n# Example\n\n```\nuse std::{fs, io};\nuse itertools::Itertools;\n\nfn process_dir_entries(entries: &[fs::DirEntry]) {\n    // ...\n}\n\nfn do_stuff() -> std::io::Result<()> {\n    let entries: Vec<_> = fs::read_dir(\".\")?.try_collect()?;\n    process_dir_entries(&entries);\n\n    Ok(())\n}\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromIterator","id":"2:8399:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:990:2420":{"id":"0:990:2420","crate_id":0,"name":"rev","span":{"filename":"src/free.rs","begin":[101,0],"end":[106,1]},"visibility":"public","docs":"Iterate `iterable` in reverse.\n\n[`IntoIterator`] enabled version of [`Iterator::rev`].\n\n```\nuse itertools::rev;\n\nfor elt in rev(&[1, 2, 3]) {\n    /* loop body */\n}\n```","links":{"`Iterator::rev`":"2:8601:157","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"iter::Rev","id":"2:46727:3438","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8447:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,8],"end":[104,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::TakeWhileRef","name":"TakeWhileRef","id":"0:708:1618","glob":false}},"2:3504:4516":{"id":"2:3504:4516","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:62912":{"id":"5:6091:62912","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3515:3813":{"id":"2:3515:3813","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:548":{"id":"0:548","crate_id":0,"name":null,"span":{"filename":"src/adaptors/mod.rs","begin":[11,47],"end":[11,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::map::MapOk","name":"MapOk","id":"0:464:1615","glob":false}},"0:2808":{"id":"0:2808","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3475,0],"end":[3475,53]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["minmax_by","tuples","group_by","sorted_unstable","join","filter_map_ok","set_from","filter_ok","format","product1","merge_join_by","map_ok","position_min_by","fold_results","into_group_map_by","step","permutations","multi_cartesian_product","sorted","position_minmax_by_key","merge","position_minmax_by","counts","find_position","collect_tuple","at_most_one","interleave","dedup_by","take_while_ref","dedup","combinations_with_replacement","coalesce","update","fold_ok","sum1","zip_eq","position_max_by","counts_by","fold1","multiunzip","minmax_by_key","find_or_last","dedup_by_with_count","interleave_shortest","while_some","partition_map","position_min_by_key","next_tuple","position_min","into_grouping_map","position_max_by_key","sorted_by_cached_key","format_with","sorted_by_key","k_smallest","merge_by","into_group_map","sorted_unstable_by_key","intersperse","kmerge_by","dropping","multipeek","flatten_ok","zip_longest","circular_tuple_windows","dedup_with_count","all_equal","tuple_windows","try_collect","tree_fold1","map_results","contains","collect_vec","fold_while","foreach","find_or_first","pad_using","partition_result","minmax","kmerge","exactly_one","cartesian_product","tee","map_into","unique","powerset","chunks","peeking_take_while","duplicates_by","tuple_combinations","duplicates","intersperse_with","dropping_back","concat","fold_options","sorted_unstable_by","all_unique","with_position","combinations","sorted_by","batching","into_grouping_map_by","position_max","unique_by","positions","position_minmax"],"trait":{"kind":"resolved_path","inner":{"name":"Itertools","id":"0:2496:1747","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"generic","inner":"T"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3346:3607":{"id":"2:3346:3607","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:181","2:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:4691-0:5056:2627":{"id":"a:2:9259:4691-0:5056:2627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:4691","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9259:4691","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3367:1541":{"id":"0:3367:1541","crate_id":0,"name":"1","span":{"filename":"src/either_or_both.rs","begin":[9,12],"end":[9,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"B"}},"0:1697:2067":{"id":"0:1697:2067","crate_id":0,"name":"merge_join_by","span":{"filename":"src/merge_join.rs","begin":[11,0],"end":[22,1]},"visibility":"public","docs":"Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.\n\nSee [`.merge_join_by()`](crate::Itertools::merge_join_by) for more information.","links":{"crate::Itertools::merge_join_by":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["left",{"kind":"generic","inner":"I"}],["right",{"kind":"generic","inner":"J"}],["cmp_fn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MergeJoinBy","id":"0:1701:1656","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1158:1540":{"id":"0:1158:1540","crate_id":0,"name":"0","span":{"filename":"src/diff.rs","begin":[21,18],"end":[21,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"usize"}},"0:3329:1610":{"id":"0:3329:1610","crate_id":0,"name":"FilterOk","span":{"filename":"src/adaptors/mod.rs","begin":[847,0],"end":[850,1]},"visibility":"public","docs":"An iterator adapter to filter values within a nested `Result::Ok`.\n\nSee [`.filter_ok()`](crate::Itertools::filter_ok) for more information.","links":{"crate::Itertools::filter_ok":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2395:1694":{"id":"0:2395:1694","crate_id":0,"name":"with_position","span":{"filename":"src/with_position.rs","begin":[1,0],"end":[100,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2406:1695","0:4573:1719"],"is_stripped":true}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,29],"end":[148,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sources::RepeatCall","name":"RepeatCall","id":"0:4031:1678","glob":false}},"0:431:841":{"id":"0:431:841","crate_id":0,"name":"map","span":{"filename":"src/adaptors/map.rs","begin":[1,0],"end":[124,1]},"visibility":{"restricted":{"parent":"0:332:1602","path":"::adaptors"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2851:3312","0:438:3313","0:464:1615","0:467:1624","0:2864:3317","0:486:1614","0:2872:3323"],"is_stripped":true}},"0:2225:2332":{"id":"0:2225:2332","crate_id":0,"name":"collect_from_iter_no_buf","span":{"filename":"src/tuple_impl.rs","begin":[246,4],"end":[247,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6963:6397":{"id":"1:6963:6397","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6964:23417"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6106:15417":{"id":"5:6106:15417","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16011:4340"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3859:1712":{"id":"0:3859:1712","crate_id":0,"name":"MinMaxResult","span":{"filename":"src/minmax.rs","begin":[6,0],"end":[16,1]},"visibility":"public","docs":"`MinMaxResult` is an enum returned by `minmax`.\n\nSee [`.minmax()`](crate::Itertools::minmax) for more detail.","links":{"crate::Itertools::minmax":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:3861:2877","0:3863:2878","0:3866:2879"],"impls":[]}},"2:3273:1826":{"id":"2:3273:1826","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[170,0],"end":[170,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::cons_tuples_impl::cons_tuples","name":"cons_tuples","id":"0:1033:1706","glob":false}},"0:3865:1540":{"id":"0:3865:1540","crate_id":0,"name":"0","span":{"filename":"src/minmax.rs","begin":[11,15],"end":[11,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"2:3210:127":{"id":"2:3210:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:2504:1698":{"id":"0:2504:1698","crate_id":0,"name":"zip_longest","span":{"filename":"src/lib.rs","begin":[536,4],"end":[541,5]},"visibility":"default","docs":"Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.\n\nThis iterator is *fused*.\n\nAs long as neither input iterator is exhausted yet, it yields two values\nvia `EitherOrBoth::Both`.\n\nWhen the parameter iterator is exhausted, it only yields a value from the\n`self` iterator via `EitherOrBoth::Left`.\n\nWhen the `self` iterator is exhausted, it only yields a value from the\nparameter iterator via `EitherOrBoth::Right`.\n\nWhen both iterators return `None`, all further invocations of `.next()`\nwill return `None`.\n\nIterator element type is\n[`EitherOrBoth<Self::Item, J::Item>`](EitherOrBoth).\n\n```rust\nuse itertools::EitherOrBoth::{Both, Right};\nuse itertools::Itertools;\nlet it = (0..1).zip_longest(1..3);\nitertools::assert_equal(it, vec![Both(0, 1), Right(2)]);\n```","links":{"EitherOrBoth":"0:3361:1725"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"ZipLongest","id":"0:4614:1699","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,33],"end":[126,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::groupbylazy::IntoChunks","name":"IntoChunks","id":"0:1494:1643","glob":false}},"0:2824:3014":{"id":"0:2824:3014","crate_id":0,"name":"is_done","span":{"filename":"src/lib.rs","begin":[3602,4],"end":[3607,5]},"visibility":"public","docs":"Return true if `self` is `Done`, false if it is `Continue`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2737:2831":{"id":"0:2737:2831","crate_id":0,"name":"position_max_by_key","span":{"filename":"src/lib.rs","begin":[3028,4],"end":[3034,5]},"visibility":"default","docs":"Return the position of the maximum element in the iterator, as\ndetermined by the specified function.\n\nIf several elements are equally maximum, the position of the\nlast of them is returned.\n\n# Examples\n\n```\nuse itertools::Itertools;\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_max_by_key(|x| x.abs()), None);\n\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(4));\n\nlet a = [1_i32, 1, -1, -1];\nassert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["key",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:6417":{"id":"1:5789:6417","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:23388"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14239:4487":{"id":"2:14239:4487","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14240:21236","2:14241:21237","2:14242:21238","2:14243:21239","2:14244:21240","2:14245:21241","2:14246:3836"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5739:6414":{"id":"1:5739:6414","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5740:8388","1:5741:10697"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,33],"end":[127,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::intersperse::Intersperse","name":"Intersperse","id":"0:1550:1650","glob":false}},"0:2002:3418":{"id":"0:2002:3418","crate_id":0,"name":"put_back_n","span":{"filename":"src/put_back_n_impl.rs","begin":[19,0],"end":[26,1]},"visibility":"public","docs":"Create an iterator where you can put back multiple values to the front\nof the iteration.\n\nIterator element type is `I::Item`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"PutBackN","id":"0:4004:1672","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:22874:6973":{"id":"2:22874:6973","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22875:6890","2:22876:1245","2:22877:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9258:4692":{"id":"2:9258:4692","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2981:3211":{"id":"0:2981:3211","crate_id":0,"name":"MergeLte","span":{"filename":"src/adaptors/mod.rs","begin":[481,0],"end":[481,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:13543:62286":{"id":"2:13543:62286","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16005:4335"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49776:5326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2223:4185":{"id":"0:2223:4185","crate_id":0,"name":"collect_from_iter","span":{"filename":"src/tuple_impl.rs","begin":[243,4],"end":[244,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Buffer","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6107:15418":{"id":"5:6107:15418","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16011:4340"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10574:4580":{"id":"2:10574:4580","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:146","2:10576:22183","2:10577:22184"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13083:5312":{"id":"2:13083:5312","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[100,8],"end":[100,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::MapInto","name":"MapInto","id":"0:486:1614","glob":false}},"0:708:1618":{"id":"0:708:1618","crate_id":0,"name":"TakeWhileRef","span":{"filename":"src/adaptors/mod.rs","begin":[618,0],"end":[621,1]},"visibility":"public","docs":"An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.\n\nSee [`.take_while_ref()`](crate::Itertools::take_while_ref) for more information.","links":{"crate::Itertools::take_while_ref":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:1002:2557":{"id":"0:1002:2557","crate_id":0,"name":"fold","span":{"filename":"src/free.rs","begin":[170,0],"end":[175,1]},"visibility":"public","docs":"Perform a fold operation over the iterable.\n\n[`IntoIterator`] enabled version of [`Iterator::fold`].\n\n```\nuse itertools::fold;\n\nassert_eq!(fold(&[1., 2., 3.], 0., |a, &b| f32::max(a, b)), 3.);\n```","links":{"`IntoIterator`":"2:8403:151","`Iterator::fold`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}],"output":{"kind":"generic","inner":"B"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:4031:1678":{"id":"0:4031:1678","crate_id":0,"name":"RepeatCall","span":{"filename":"src/sources.rs","begin":[11,0],"end":[13,1]},"visibility":"public","docs":"See [`repeat_call`](crate::repeat_call) for more information.","links":{"crate::repeat_call":"0:2099:1716"},"attrs":["#[deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")]"],"deprecation":{"since":"0.8.0","note":"Use std repeat_with() instead"},"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3366:1540":{"id":"0:3366:1540","crate_id":0,"name":"0","span":{"filename":"src/either_or_both.rs","begin":[9,9],"end":[9,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"A"}},"0:1892:1666":{"id":"0:1892:1666","crate_id":0,"name":"Permutations","span":{"filename":"src/permutations.rs","begin":[13,0],"end":[16,1]},"visibility":"public","docs":"An iterator adaptor that iterates through all the `k`-permutations of the\nelements from an iterator.\n\nSee [`.permutations()`](crate::Itertools::permutations) for\nmore information.","links":{"crate::Itertools::permutations":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:3712:1634":{"id":"0:3712:1634","crate_id":0,"name":"ExactlyOneError","span":{"filename":"src/exactly_one_err.rs","begin":[20,0],"end":[26,1]},"visibility":"public","docs":"Iterator returned for the error case of `IterTools::exactly_one()`\nThis iterator yields exactly the same elements as the input iterator.\n\nDuring the execution of exactly_one the iterator must be mutated.  This wrapper\neffectively \"restores\" the state of the input iterator when it's handed back.\n\nThis is very similar to PutBackN except this iterator only supports 0-2 elements and does not\nuse a `Vec`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2279:4217":{"id":"0:2279:4217","crate_id":0,"name":"make","span":{"filename":"src/duplicates_impl.rs","begin":[121,8],"end":[121,56]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"qualified_path","inner":{"name":"Container","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2275:4215","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:14165:141":{"id":"2:14165:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14166:277","2:14167:518","2:14168:280","2:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13426:62265":{"id":"2:13426:62265","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23086:12724":{"id":"2:23086:12724","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23087:9335","2:23088:16124","2:23089:16125"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23079:6427","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:441:376":{"id":"0:441:376","crate_id":0,"name":"call","span":{"filename":"src/adaptors/map.rs","begin":[13,4],"end":[13,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"qualified_path","inner":{"name":"Out","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:438:3313","args":null,"param_names":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2648:2556":{"id":"0:2648:2556","crate_id":0,"name":"fold1","span":{"filename":"src/lib.rs","begin":[2247,4],"end":[2252,5]},"visibility":"default","docs":"Accumulator of the elements in the iterator.\n\nLike `.fold()`, without a base case. If the iterator is\nempty, return `None`. With just one element, return it.\nOtherwise elements are accumulated in sequence using the closure `f`.\n\n```\nuse itertools::Itertools;\n\nassert_eq!((0..10).fold1(|x, y| x + y).unwrap_or(0), 45);\nassert_eq!((0..0).fold1(|x, y| x * y), None);\n```","links":{},"attrs":["#[deprecated(since = \"0.10.2\", note = \"Use `Iterator::reduce` instead\")]"],"deprecation":{"since":"0.10.2","note":"Use `Iterator::reduce` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2813:2987":{"id":"0:2813:2987","crate_id":0,"name":"assert_equal","span":{"filename":"src/lib.rs","begin":[3516,0],"end":[3539,1]},"visibility":"public","docs":"Assert that two iterables produce equal sequences, with the same\nsemantics as [`equal(a, b)`](equal).\n\n**Panics** on assertion failure with a message that shows the\ntwo iteration elements.\n\n```ignore\nassert_equal(\"exceed\".split('c'), \"excess\".split('c'));\n// ^PANIC: panicked at 'Failed assertion Some(\"eed\") == Some(\"ess\") for iteration 1',\n```","links":{"equal":"0:2810:2977"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"generic","inner":"I"}],["b",{"kind":"generic","inner":"J"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:5064":{"id":"0:5064","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3585,9],"end":[3585,13]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::marker::Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2723:1711":{"id":"0:2723:1711","crate_id":0,"name":"minmax","span":{"filename":"src/lib.rs","begin":[2940,4],"end":[2944,5]},"visibility":"default","docs":"Return the minimum and maximum elements in the iterator.\n\nThe return type `MinMaxResult` is an enum of three variants:\n\n- `NoElements` if the iterator is empty.\n- `OneElement(x)` if the iterator has exactly one element.\n- `MinMax(x, y)` is returned otherwise, where `x <= y`. Two\n   values are equal if and only if there is more than one\n   element in the iterator and all elements are equal.\n\nOn an iterator of length `n`, `minmax` does `1.5 * n` comparisons,\nand so is faster than calling `min` and `max` separately which does\n`2 * n` comparisons.\n\n# Examples\n\n```\nuse itertools::Itertools;\nuse itertools::MinMaxResult::{NoElements, OneElement, MinMax};\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().minmax(), NoElements);\n\nlet a = [1];\nassert_eq!(a.iter().minmax(), OneElement(&1));\n\nlet a = [1, 2, 3, 4, 5];\nassert_eq!(a.iter().minmax(), MinMax(&1, &5));\n\nlet a = [1, 1, 1, 1];\nassert_eq!(a.iter().minmax(), MinMax(&1, &1));\n```\n\nThe elements can be floats but no particular result is guaranteed\nif an element is NaN.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"MinMaxResult","id":"0:3859:1712","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3524:132":{"id":"2:3524:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:181","2:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:3838:3860":{"id":"0:3838:3860","crate_id":0,"name":"KMergeByLt","span":{"filename":"src/kmerge_impl.rs","begin":[115,0],"end":[115,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:922":{"id":"0:922","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[186,0],"end":[186,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::either_or_both::EitherOrBoth","name":"EitherOrBoth","id":"0:3361:1725","glob":false}},"0:2611:2393":{"id":"0:2611:2393","crate_id":0,"name":"all_equal","span":{"filename":"src/lib.rs","begin":[1851,4],"end":[1859,5]},"visibility":"default","docs":"Check whether all elements compare equal.\n\nEmpty iterators are considered to have equal elements:\n\n```\nuse itertools::Itertools;\n\nlet data = vec![1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5];\nassert!(!data.iter().all_equal());\nassert!(data[0..3].iter().all_equal());\nassert!(data[3..5].iter().all_equal());\nassert!(data[5..8].iter().all_equal());\n\nlet data : Option<usize> = None;\nassert!(data.into_iter().all_equal());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[91,8],"end":[91,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::DedupWithCount","name":"DedupWithCount","id":"0:423:1605","glob":false}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,4],"end":[134,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::peek_nth::PeekNth","name":"PeekNth","id":"0:3907:1660","glob":false}},"2:3647:4450":{"id":"2:3647:4450","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3649:22828","2:3650:22829","2:3651:2381"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3367:4445":{"id":"2:3367:4445","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2785:2896":{"id":"0:2785:2896","crate_id":0,"name":"position_minmax_by","span":{"filename":"src/lib.rs","begin":[3276,4],"end":[3285,5]},"visibility":"default","docs":"Return the postions of the minimum and maximum elements of an\niterator, as determined by the specified comparison function.\n\nThe return value is a variant of [`MinMaxResult`] like for\n[`position_minmax`].\n\nFor the minimum, if several elements are equally minimum, the\nposition of the first of them is returned. For the maximum, if\nseveral elements are equally maximum, the position of the last\nof them is returned.\n\n# Examples\n\n```\nuse itertools::Itertools;\nuse itertools::MinMaxResult::{NoElements, OneElement, MinMax};\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), NoElements);\n\nlet a = [10_i32];\nassert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), OneElement(0));\n\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(4, 3));\n\nlet a = [1_i32, 1, -1, -1];\nassert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(2, 1));\n```\n\n[`position_minmax`]: Self::position_minmax","links":{"Self::position_minmax":"0:2758:2876","`MinMaxResult`":"0:3859:1712"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MinMaxResult","id":"0:3859:1712","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13417:793":{"id":"2:13417:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16005:4335"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3178:3251":{"id":"0:3178:3251","crate_id":0,"name":"Tuple7Combination","span":{"filename":"src/adaptors/mod.rs","begin":[835,0],"end":[835,73]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:8447:120":{"id":"2:8447:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8448:3003","2:8449:5017","2:8450:5018","2:8451:5019","2:8455:5020","2:8458:5021"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:5077":{"id":"0:5077","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3585,33],"end":[3585,42]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3276:218","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3791:1640":{"id":"0:3791:1640","crate_id":0,"name":"GroupingMap","span":{"filename":"src/grouping_map.rs","begin":[52,0],"end":[54,1]},"visibility":"public","docs":"`GroupingMap` is an intermediate struct for efficient group-and-fold operations.\nIt groups elements by their key and at the same time fold each group\nusing some aggregating operation.\n \nNo method on this struct performs temporary allocations.","links":{},"attrs":["#[must_use = \"GroupingMap is lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[99,8],"end":[99,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Batching","name":"Batching","id":"0:2961:1613","glob":false}},"0:995:1807":{"id":"0:995:1807","crate_id":0,"name":"chain","span":{"filename":"src/free.rs","begin":[138,0],"end":[143,1]},"visibility":"public","docs":"Create an iterator that first iterates `i` and then `j`.\n\n[`IntoIterator`] enabled version of [`Iterator::chain`].\n\n```\nuse itertools::chain;\n\nfor elt in chain(&[1, 2, 3], &[4]) {\n    /* loop body */\n}\n```","links":{"`Iterator::chain`":"2:8601:157","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["i",{"kind":"generic","inner":"I"}],["j",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"iter::Chain","id":"2:46587:3447","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:790:5049":{"id":"5:790:5049","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2013:1673":{"id":"0:2013:1673","crate_id":0,"name":"rciter_impl","span":{"filename":"src/rciter_impl.rs","begin":[2,0],"end":[100,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4014:1674","0:2027:3419"],"is_stripped":true}},"0:2530:2000":{"id":"0:2530:2000","crate_id":0,"name":"map_ok","span":{"filename":"src/lib.rs","begin":[860,4],"end":[865,5]},"visibility":"default","docs":"Return an iterator adaptor that applies the provided closure\nto every `Result::Ok` value. `Result::Err` values are\nunchanged.\n\n```\nuse itertools::Itertools;\n\nlet input = vec![Ok(41), Err(false), Ok(11)];\nlet it = input.into_iter().map_ok(|i| i + 1);\nitertools::assert_equal(it, vec![Ok(42), Err(false), Ok(12)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"MapOk","id":"0:464:1615","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"T"}],"output":{"kind":"generic","inner":"U"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1995:1671":{"id":"0:1995:1671","crate_id":0,"name":"put_back_n_impl","span":{"filename":"src/put_back_n_impl.rs","begin":[1,0],"end":[60,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4004:1672","0:2002:3418"],"is_stripped":true}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[178,0],"end":[178,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::repeatn::repeat_n","name":"repeat_n","id":"0:2053:1715","glob":false}},"5:6103:62913":{"id":"5:6103:62913","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2228:4196":{"id":"0:2228:4196","crate_id":0,"name":"left_shift_push","span":{"filename":"src/tuple_impl.rs","begin":[251,4],"end":[251,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:998:3452":{"id":"0:998:3452","crate_id":0,"name":"cloned","span":{"filename":"src/free.rs","begin":[154,0],"end":[159,1]},"visibility":"public","docs":"Create an iterator that clones each element from &T to T\n\n[`IntoIterator`] enabled version of [`Iterator::cloned`].\n\n```\nuse itertools::cloned;\n\nassert_eq!(cloned(b\"abc\").next(), Some(b'a'));\n```","links":{"`IntoIterator`":"2:8403:151","`Iterator::cloned`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"iter::Cloned","id":"2:46600:3453","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:3993:1668":{"id":"0:3993:1668","crate_id":0,"name":"ProcessResults","span":{"filename":"src/process_results_impl.rs","begin":[9,0],"end":[12,1]},"visibility":"public","docs":"An iterator that produces only the `T` values as long as the\ninner iterator produces `Ok(T)`.\n\nUsed by [`process_results`](crate::process_results), see its docs\nfor more information.","links":{"crate::process_results":"0:1988:1714"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2560:2110":{"id":"0:2560:2110","crate_id":0,"name":"multi_cartesian_product","span":{"filename":"src/lib.rs","begin":[1111,4],"end":[1118,5]},"visibility":"default","docs":"Return an iterator adaptor that iterates over the cartesian product of\nall subiterators returned by meta-iterator `self`.\n\nAll provided iterators must yield the same `Item` type. To generate\nthe product of iterators yielding multiple types, use the\n[`iproduct`] macro instead.\n\n\nThe iterator element type is `Vec<T>`, where `T` is the iterator element\nof the subiterators.\n\n```\nuse itertools::Itertools;\nlet mut multi_prod = (0..3).map(|i| (i * 2)..(i * 2 + 2))\n    .multi_cartesian_product();\nassert_eq!(multi_prod.next(), Some(vec![0, 2, 4]));\nassert_eq!(multi_prod.next(), Some(vec![0, 2, 5]));\nassert_eq!(multi_prod.next(), Some(vec![0, 3, 4]));\nassert_eq!(multi_prod.next(), Some(vec![0, 3, 5]));\nassert_eq!(multi_prod.next(), Some(vec![1, 2, 4]));\nassert_eq!(multi_prod.next(), Some(vec![1, 2, 5]));\nassert_eq!(multi_prod.next(), Some(vec![1, 3, 4]));\nassert_eq!(multi_prod.next(), Some(vec![1, 3, 5]));\nassert_eq!(multi_prod.next(), None);\n```","links":{"`iproduct`":"0:2493:1742"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"MultiProduct","id":"0:2882:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2920:183":{"id":"2:2920:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:604","2:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:4075:1684":{"id":"0:4075:1684","crate_id":0,"name":"TupleBuffer","span":{"filename":"src/tuple_impl.rs","begin":[26,0],"end":[31,1]},"visibility":"public","docs":"An iterator over a incomplete tuple.\n\nSee [`.tuples()`](crate::Itertools::tuples) and\n[`Tuples::into_buffer()`].","links":{"crate::Itertools::tuples":"0:2496:1747","`Tuples::into_buffer()`":"0:4085:1687"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HomogeneousTuple","id":"0:2171:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2644:2547":{"id":"0:2644:2547","crate_id":0,"name":"fold_options","span":{"filename":"src/lib.rs","begin":[2221,4],"end":[2232,5]},"visibility":"default","docs":"Fold `Option` values from an iterator.\n\nOnly `Some` values are folded. If no `None` is encountered, the folded\nvalue is returned inside `Some`. Otherwise, the operation terminates\nand returns `None`. No iterator elements are consumed after the `None`.\n\nThis is the `Option` equivalent to [`fold_ok`](Itertools::fold_ok).\n\n```\nuse std::ops::Add;\nuse itertools::Itertools;\n\nlet mut values = vec![Some(1), Some(2), Some(-2)].into_iter();\nassert_eq!(values.fold_options(5, Add::add), Some(5 + 1 + 2 - 2));\n\nlet mut more_values = vec![Some(2), None, Some(0)].into_iter();\nassert!(more_values.fold_options(0, Add::add).is_none());\nassert_eq!(more_values.next().unwrap(), Some(0));\n```","links":{"Itertools::fold_ok":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["start",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"A"}],"output":{"kind":"generic","inner":"B"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4021:1676":{"id":"0:4021:1676","crate_id":0,"name":"RepeatN","span":{"filename":"src/repeatn.rs","begin":[8,0],"end":[11,1]},"visibility":"public","docs":"An iterator that produces *n* repetitions of an element.\n\nSee [`repeat_n()`](crate::repeat_n) for more information.","links":{"crate::repeat_n":"0:2053:1715"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13512:62279":{"id":"2:13512:62279","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2515:1942":{"id":"0:2515:1942","crate_id":0,"name":"tuple_windows","span":{"filename":"src/lib.rs","begin":[697,4],"end":[703,5]},"visibility":"default","docs":"Return an iterator over all contiguous windows producing tuples of\na specific size (up to 12).\n\n`tuple_windows` clones the iterator elements so that they can be\npart of successive windows, this makes it most suited for iterators\nof references and other values that are cheap to copy.\n\n```\nuse itertools::Itertools;\nlet mut v = Vec::new();\n\n// pairwise iteration\nfor (a, b) in (1..5).tuple_windows() {\n    v.push((a, b));\n}\nassert_eq!(v, vec![(1, 2), (2, 3), (3, 4)]);\n\nlet mut it = (1..5).tuple_windows();\nassert_eq!(Some((1, 2, 3)), it.next());\nassert_eq!(Some((2, 3, 4)), it.next());\nassert_eq!(None, it.next());\n\n// this requires a type hint\nlet it = (1..5).tuple_windows::<(_, _, _)>();\nitertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);\n\n// you can also specify the complete type\nuse itertools::TupleWindows;\nuse std::ops::Range;\n\nlet it: TupleWindows<Range<u32>, (u32, u32, u32)> = (1..5).tuple_windows();\nitertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TupleWindows","id":"0:4098:1685","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"traits::HomogeneousTuple","id":"0:2171:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:2381":{"id":"2:13449:2381","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13053:4461","prim@char":"1:16005:4335"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4111:1686":{"id":"0:4111:1686","crate_id":0,"name":"CircularTupleWindows","span":{"filename":"src/tuple_impl.rs","begin":[205,0],"end":[211,1]},"visibility":"public","docs":"An iterator over all windows,wrapping back to the first elements when the\nwindow would otherwise exceed the length of the iterator, producing tuples\nof a specific size.\n\nSee [`.circular_tuple_windows()`](crate::Itertools::circular_tuple_windows) for more\ninformation.","links":{"crate::Itertools::circular_tuple_windows":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TupleCollect","id":"0:2220:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"2:8601:157":{"id":"2:8601:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8602:1825","2:8603:922","2:8604:5024","2:8607:1730","2:8608:495","2:8610:3182","2:8613:5025","2:8614:2412","2:8615:5026","2:8616:1807","2:8618:1777","2:8620:1649","2:8621:1840","2:8623:841","2:8626:2431","2:8633:3264","2:8635:3268","2:8638:2822","2:8639:3222","2:8640:5027","2:8642:5028","2:8644:5029","2:8647:1306","2:8648:3180","2:8649:5030","2:8653:5031","2:8656:1743","2:8657:3139","2:8658:5032","2:8660:3836","2:8661:2443","2:8663:2454","2:8666:5033","2:8668:2999","2:8678:5034","2:8693:5035","2:8695:2628","2:8699:3595","2:8708:2557","2:8711:3414","2:8713:5036","2:8716:276","2:8723:294","2:8730:2364","2:8737:2357","2:8746:5037","2:8756:1014","2:8763:5038","2:8770:3470","2:8771:2297","2:8772:3697","2:8784:2823","2:8791:3708","2:8803:2844","2:8810:2420","2:8811:5039","2:8816:5040","2:8819:3452","2:8822:4200","2:8823:2644","2:8825:2653","2:8827:415","2:8830:5041","2:8833:997","2:8836:5042","2:8839:604","2:8842:5043","2:8845:907","2:8847:826","2:8849:792","2:8851:713","2:8853:696","2:8855:5044","2:8856:5045","2:8864:5046"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:670:2037":{"id":"0:670:2037","crate_id":0,"name":"merge","span":{"filename":"src/adaptors/mod.rs","begin":[509,0],"end":[515,1]},"visibility":"public","docs":"Create an iterator that merges elements in `i` and `j`.\n\n[`IntoIterator`] enabled version of [`Itertools::merge`](crate::Itertools::merge).\n\n```\nuse itertools::merge;\n\nfor elt in merge(&[1, 2, 3], &[2, 3, 4]) {\n    /* loop body */\n}\n```","links":{"`IntoIterator`":"2:8403:151","crate::Itertools::merge":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["i",{"kind":"generic","inner":"I"}],["j",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"Merge","id":"0:667:1616","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:3895:1662":{"id":"0:3895:1662","crate_id":0,"name":"PadUsing","span":{"filename":"src/pad_tail.rs","begin":[12,0],"end":[17,1]},"visibility":"public","docs":"An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.\n\nIterator element type is `I::Item`.\n\nSee [`.pad_using()`](crate::Itertools::pad_using) for more information.","links":{"crate::Itertools::pad_using":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,4],"end":[119,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::cons_tuples_impl::ConsTuples","name":"ConsTuples","id":"0:3692:1632","glob":false}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[151,45],"end":[151,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::tuple_impl::TupleWindows","name":"TupleWindows","id":"0:4098:1685","glob":false}},"0:1471:1647":{"id":"0:1471:1647","crate_id":0,"name":"Group","span":{"filename":"src/groupbylazy.rs","begin":[393,0],"end":[400,1]},"visibility":"public","docs":"An iterator for the elements in a single group.\n\nIterator element type is `I::Item`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:925:1726":{"id":"0:925:1726","crate_id":0,"name":"free","span":{"filename":"src/free.rs","begin":[1,0],"end":[275,1]},"visibility":"public","docs":"Free functions that create iterator adaptors or call iterator methods.\n\nThe benefit of free functions is that they accept any [`IntoIterator`] as\nargument, so the resulting code may be easier to read.","links":{"`IntoIterator`":"2:8403:151"},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:983:1649","0:985:1840","0:988:2822","0:990:2420","0:992:1777","0:995:1807","0:998:3452","0:1002:2557","0:1006:276","0:1009:294","0:1012:3470","0:1014:2297","0:1016:2469","0:1018:2683","0:953","0:956","0:959","0:962","0:965","0:968","0:971","0:974","0:977","0:980"],"is_stripped":true}},"0:1801:1659":{"id":"0:1801:1659","crate_id":0,"name":"peek_nth","span":{"filename":"src/peek_nth.rs","begin":[1,0],"end":[102,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3907:1660","0:1814:1659"],"is_stripped":true}},"0:2800:2923":{"id":"0:2800:2923","crate_id":0,"name":"multipeek","span":{"filename":"src/lib.rs","begin":[3374,4],"end":[3379,5]},"visibility":"default","docs":"An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing the base iterator.\n\n# Examples\n```\nuse itertools::Itertools;\n\nlet mut iter = (0..10).multipeek();\nassert_eq!(iter.peek(), Some(&0));\nassert_eq!(iter.peek(), Some(&1));\nassert_eq!(iter.peek(), Some(&2));\nassert_eq!(iter.next(), Some(0));\nassert_eq!(iter.peek(), Some(&1));\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"MultiPeek","id":"0:3884:1658","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,45],"end":[126,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::groupbylazy::Chunk","name":"Chunk","id":"0:1518:1644","glob":false}},"0:1494:1643":{"id":"0:1494:1643","crate_id":0,"name":"IntoChunks","span":{"filename":"src/groupbylazy.rs","begin":[465,0],"end":[472,1]},"visibility":"public","docs":"`ChunkLazy` is the storage for a lazy chunking operation.\n\n`IntoChunks` behaves just like `GroupBy`: it is iterable, and\nit only buffers if several chunk iterators are alive at the same time.\n\nThis type implements [`IntoIterator`] (it is **not** an iterator\nitself), because the chunk iterators need to borrow from this\nvalue. It should be stored in a local variable or temporary and\niterated.\n\nIterator element type is `Chunk`, each chunk's iterator.\n\nSee [`.chunks()`](crate::Itertools::chunks) for more information.","links":{"crate::Itertools::chunks":"0:2496:1747","`IntoIterator`":"2:8403:151"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13063:4452":{"id":"2:13063:4452","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13065:5314","2:13066:23305","2:13067:23306","2:13068:23307","2:13069:23308","2:13070:23309","2:13071:23310"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13534:7037":{"id":"2:13534:7037","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12992:4457","`FromStr`":"2:12992:4457"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:4457","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:4457","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8412:2439":{"id":"2:8412:2439","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8414:2731","2:8416:5022","2:8417:5023"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:4537":{"id":"5:6105:4537","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3558:4654":{"id":"2:3558:4654","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:237","2:3561:206","2:3562:22929"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1153:1709":{"id":"0:1153:1709","crate_id":0,"name":"Diff","span":{"filename":"src/diff.rs","begin":[15,0],"end":[26,1]},"visibility":"public","docs":"A type returned by the [`diff_with`] function.\n\n`Diff` represents the way in which the elements yielded by the iterator `I` differ to some\niterator `J`.","links":{"`diff_with`":"0:1169:1708"},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1156:3552","0:1161:3554","0:1165:3556"],"impls":[]}},"0:956":{"id":"0:956","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[22,4],"end":[22,9]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::merge","name":"merge","id":"0:670:2037","glob":false}},"2:13766:138":{"id":"2:13766:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13767:181","2:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1020":{"id":"0:1020","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[190,0],"end":[190,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::free","name":"free","id":"0:925:1726","glob":true}},"2:3357:4632":{"id":"2:3357:4632","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:181","2:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,38],"end":[180,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sources::unfold","name":"unfold","id":"0:2108:1717","glob":false}},"2:10300:3604":{"id":"2:10300:3604","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[94,8],"end":[94,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::InterleaveShortest","name":"InterleaveShortest","id":"0:2922:1608","glob":false}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,47],"end":[124,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::grouping_map::GroupingMapBy","name":"GroupingMapBy","id":"0:1292:1641","glob":false}},"0:3340:1622":{"id":"0:3340:1622","crate_id":0,"name":"Positions","span":{"filename":"src/adaptors/mod.rs","begin":[1006,0],"end":[1010,1]},"visibility":"public","docs":"An iterator adapter to get the positions of each element that matches a predicate.\n\nSee [`.positions()`](crate::Itertools::positions) for more information.","links":{"crate::Itertools::positions":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2851:3312":{"id":"0:2851:3312","crate_id":0,"name":"MapSpecialCase","span":{"filename":"src/adaptors/map.rs","begin":[6,0],"end":[9,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"a:2:3268:211-0:5056:2627":{"id":"a:2:3268:211-0:5056:2627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3268:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8879:3129":{"id":"2:8879:3129","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3318:3258":{"id":"0:3318:3258","crate_id":0,"name":"Tuple12Combination","span":{"filename":"src/adaptors/mod.rs","begin":[840,0],"end":[840,85]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2514:1919":{"id":"0:2514:1919","crate_id":0,"name":"chunks","span":{"filename":"src/lib.rs","begin":[657,4],"end":[662,5]},"visibility":"default","docs":"Return an *iterable* that can chunk the iterator.\n\nYield subiterators (chunks) that each yield a fixed number elements,\ndetermined by `size`. The last chunk will be shorter if there aren't\nenough elements.\n\n`IntoChunks` is based on `GroupBy`: it is iterable (implements\n`IntoIterator`, **not** `Iterator`), and it only buffers if several\nchunk iterators are alive at the same time.\n\nIterator element type is `Chunk`, each chunk's iterator.\n\n**Panics** if `size` is 0.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![1, 1, 2, -2, 6, 0, 3, 1];\n//chunk size=3 |------->|-------->|--->|\n\n// Note: The `&` is significant here, `IntoChunks` is iterable\n// only by reference. You can also call `.into_iter()` explicitly.\nfor chunk in &data.into_iter().chunks(3) {\n    // Check that the sum of each chunk is 4.\n    assert_eq!(4, chunk.sum());\n}\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoChunks","id":"0:1494:1643","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:62914":{"id":"5:6104:62914","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:4453","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:4453","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4488","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:5048","5:785:5049","5:786:5050"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:423:1605":{"id":"0:423:1605","crate_id":0,"name":"DedupWithCount","span":{"filename":"src/adaptors/coalesce.rs","begin":[217,0],"end":[217,58]},"visibility":"public","docs":"An iterator adaptor that removes repeated duplicates, while keeping a count of how many\nrepeated elements were present.\n\nSee [`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","links":{"crate::Itertools::dedup_with_count":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"DedupByWithCount","id":"0:416:1606","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"DedupEq","id":"0:2835:3297","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[168,0],"end":[168,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::structs","name":"structs","id":"0:54:1601","glob":true}},"2:3416:4643":{"id":"2:3416:4643","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:181","2:3419:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2570:2169":{"id":"0:2570:2169","crate_id":0,"name":"duplicates_by","span":{"filename":"src/lib.rs","begin":[1285,4],"end":[1291,5]},"visibility":"default","docs":"Return an iterator adaptor that produces elements that appear more than once during the\niteration. Duplicates are detected using hash and equality.\n\nDuplicates are detected by comparing the key they map to with the keying function `f` by\nhash and equality. The keys are stored in a hash map in the iterator.\n\nThe iterator is stable, returning the duplicate items in the order in which they occur in\nthe adapted iterator. Each duplicate item is returned exactly once. If an item appears more\nthan twice, the second item is the item retained and the rest are discarded.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];\nitertools::assert_equal(data.into_iter().duplicates_by(|s| s.len()),\n                        vec![\"aa\", \"c\"]);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"DuplicatesBy","id":"0:2313:1690","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"V"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13448:24279":{"id":"2:13448:24279","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49751:5316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2511:1902":{"id":"0:2511:1902","crate_id":0,"name":"group_by","span":{"filename":"src/lib.rs","begin":[621,4],"end":[627,5]},"visibility":"default","docs":"Return an *iterable* that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.\n\n`GroupBy` is the storage for the lazy grouping operation.\n\nIf the groups are consumed in order, or if each group's iterator is\ndropped without keeping it around, then `GroupBy` uses no\nallocations.  It needs allocations only if several group iterators\nare alive at the same time.\n\nThis type implements [`IntoIterator`] (it is **not** an iterator\nitself), because the group iterators need to borrow from this\nvalue. It should be stored in a local variable or temporary and\niterated.\n\nIterator element type is `(K, Group)`: the group's key and the\ngroup iterator.\n\n```\nuse itertools::Itertools;\n\n// group data into runs of larger than zero or not.\nlet data = vec![1, 3, -2, -2, 1, 0, 1, 2];\n// groups:     |---->|------>|--------->|\n\n// Note: The `&` is significant here, `GroupBy` is iterable\n// only by reference. You can also call `.into_iter()` explicitly.\nlet mut data_grouped = Vec::new();\nfor (key, group) in &data.into_iter().group_by(|elt| *elt >= 0) {\n    data_grouped.push((key, group.collect()));\n}\nassert_eq!(data_grouped, vec![(true, vec![1, 3]), (false, vec![-2, -2]), (true, vec![1, 0, 1, 2])]);\n```","links":{"`IntoIterator`":"2:8403:151"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["key",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"GroupBy","id":"0:1433:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2442:1698":{"id":"0:2442:1698","crate_id":0,"name":"zip_longest","span":{"filename":"src/zip_longest.rs","begin":[1,0],"end":[83,2]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4614:1699"],"is_stripped":true}},"2:13538:15420":{"id":"2:13538:15420","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4322:4224":{"id":"0:4322:4224","crate_id":0,"name":"ById","span":{"filename":"src/duplicates_impl.rs","begin":[126,4],"end":[126,20]},"visibility":"public","docs":"Apply the identity function to elements before checking them for equality.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:2493:1742":{"id":"0:2493:1742","crate_id":0,"name":"iproduct","span":{"filename":"src/lib.rs","begin":[264,0],"end":[280,1]},"visibility":"public","docs":"Create an iterator over the “cartesian product” of iterators.\n\nIterator element type is like `(A, B, ..., E)` if formed\nfrom iterators `(I, J, ..., M)` with element types `I::Item = A`, `J::Item = B`, etc.\n\n```\n# use itertools::iproduct;\n#\n# fn main() {\n// Iterate over the coordinates of a 4 x 4 x 4 grid\n// from (0, 0, 0), (0, 0, 1), .., (0, 1, 0), (0, 1, 1), .. etc until (3, 3, 3)\nfor (i, j, k) in iproduct!(0..4, 0..4, 0..4) {\n   // ..\n}\n# }\n```","links":{},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! iproduct {\n    (@flatten $I:expr,) => { ... };\n    (@flatten $I:expr, $J:expr, $($K:expr,)*) => { ... };\n    ($I:expr) => { ... };\n    ($I:expr, $J:expr) => { ... };\n    ($I:expr, $J:expr, $($K:expr),+) => { ... };\n}"},"0:4300:1690":{"id":"0:4300:1690","crate_id":0,"name":"DuplicatesBy","span":{"filename":"src/duplicates_impl.rs","begin":[10,4],"end":[13,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Key","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:332:1602":{"id":"0:332:1602","crate_id":0,"name":"adaptors","span":{"filename":"src/adaptors/mod.rs","begin":[1,0],"end":[1159,2]},"visibility":"crate","docs":"Licensed under the Apache License, Version 2.0\n<https://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n<https://opensource.org/licenses/MIT>, at your\noption. This file may not be copied, modified, or distributed\nexcept according to those terms.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2908:1607","0:577:1824","0:2922:1608","0:2936:1612","0:602:3170","0:2946:1611","0:2961:1613","0:2971:1625","0:661:3209","0:2981:3211","0:667:1616","0:670:2037","0:673:1617","0:708:1618","0:2990:1619","0:2999:1621","0:736:2231","0:3012:3240","0:3038:3246","0:3066:3247","0:3094:3248","0:3122:3249","0:3150:3250","0:3178:3251","0:3206:3252","0:3234:3254","0:3262:3256","0:3290:3257","0:3318:3258","0:3329:1610","0:790:1609","0:3340:1622","0:3351:1623","0:537","0:539","0:542","0:545","0:548","0:551","0:554"],"is_stripped":true}},"0:2221:1825":{"id":"0:2221:1825","crate_id":0,"name":"Item","span":{"filename":"src/tuple_impl.rs","begin":[240,4],"end":[240,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:2236:4209":{"id":"0:2236:4209","crate_id":0,"name":"private","span":{"filename":"src/duplicates_impl.rs","begin":[3,0],"end":[3,11]},"visibility":{"restricted":{"parent":"0:2232:1688","path":"::duplicates_impl"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4300:1690","0:2275:4215","0:4322:4224","0:2284:4227","0:4327:4228","0:4337:4225"],"is_stripped":true}},"2:3268:211":{"id":"2:3268:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13505:62275":{"id":"2:13505:62275","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2592:2316":{"id":"0:2592:2316","crate_id":0,"name":"positions","span":{"filename":"src/lib.rs","begin":[1659,4],"end":[1664,5]},"visibility":"default","docs":"Return an iterator adaptor that yields the indices of all elements\nsatisfying a predicate, counted from the start of the iterator.\n\nEquivalent to `iter.enumerate().filter(|(_, v)| predicate(v)).map(|(i, _)| i)`.\n\n```\nuse itertools::Itertools;\n\nlet data = vec![1, 2, 3, 3, 4, 6, 7, 9];\nitertools::assert_equal(data.iter().positions(|v| v % 2 == 0), vec![1, 4, 5]);\n\nitertools::assert_equal(data.iter().positions(|v| v % 2 == 1).rev(), vec![7, 6, 3, 2, 0]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Positions","id":"0:3340:1622","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2053:1715":{"id":"0:2053:1715","crate_id":0,"name":"repeat_n","span":{"filename":"src/repeatn.rs","begin":[14,0],"end":[22,1]},"visibility":"public","docs":"Create an iterator that produces `n` repetitions of `element`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["element",{"kind":"generic","inner":"A"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"RepeatN","id":"0:4021:1676","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"a:2:9258:4692-0:5056:2627":{"id":"a:2:9258:4692-0:5056:2627","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:4692","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9258:4692","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,8],"end":[107,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::TupleCombinations","name":"TupleCombinations","id":"0:2999:1621","glob":false}},"0:2171:1704":{"id":"0:2171:1704","crate_id":0,"name":"HomogeneousTuple","span":{"filename":"src/tuple_impl.rs","begin":[15,0],"end":[17,2]},"visibility":"public","docs":"Implemented for homogeneous tuples of size up to 12.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TupleCollect","id":"0:2220:1956","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2566:2149":{"id":"0:2566:2149","crate_id":0,"name":"dedup_with_count","span":{"filename":"src/lib.rs","begin":[1214,4],"end":[1219,5]},"visibility":"default","docs":"Remove duplicates from sections of consecutive identical elements, while keeping a count of\nhow many repeated elements were present.\nIf the iterator is sorted, all elements will be unique.\n\nIterator element type is `(usize, Self::Item)`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\nlet data = vec!['a', 'a', 'b', 'c', 'c', 'b', 'b'];\nitertools::assert_equal(data.into_iter().dedup_with_count(),\n                        vec![(2, 'a'), (1, 'b'), (2, 'c'), (2, 'b')]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"DedupWithCount","id":"0:423:1605","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2522:1988":{"id":"0:2522:1988","crate_id":0,"name":"step","span":{"filename":"src/lib.rs","begin":[820,4],"end":[824,5]},"visibility":"default","docs":"Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.\n\nThe iterator steps by yielding the next element from the base iterator,\nthen skipping forward `n - 1` elements.\n\nIterator element type is `Self::Item`.\n\n**Panics** if the step is 0.\n\n```\nuse itertools::Itertools;\n\nlet it = (0..8).step(3);\nitertools::assert_equal(it, vec![0, 3, 6]);\n```","links":{},"attrs":["#[deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.8.0","note":"Use std .step_by() instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Step","id":"0:2971:1625","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:4645":{"id":"2:3426:4645","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13469:24478":{"id":"2:13469:24478","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12845:5303","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13536:7235":{"id":"2:13536:7235","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,28],"end":[121,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::format::Format","name":"Format","id":"0:3732:1635","glob":false}},"0:2275:4215":{"id":"0:2275:4215","crate_id":0,"name":"KeyMethod","span":{"filename":"src/duplicates_impl.rs","begin":[118,4],"end":[122,5]},"visibility":"public","docs":"A keying method for use with `DuplicatesBy`","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:2278:4221","0:2279:4217"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5723:6412":{"id":"1:5723:6412","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5724:23377","1:5725:23378","1:5726:23379","1:5727:23380"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2605:2363":{"id":"0:2605:2363","crate_id":0,"name":"find_or_first","span":{"filename":"src/lib.rs","begin":[1790,4],"end":[1800,5]},"visibility":"default","docs":"Find the value of the first element satisfying a predicate or return the first element, if any.\n\nThe iterator is not advanced past the first element found.\n\n```\nuse itertools::Itertools;\n\nlet numbers = [1, 2, 3, 4];\nassert_eq!(numbers.iter().find_or_first(|&&x| x > 5), Some(&1));\nassert_eq!(numbers.iter().find_or_first(|&&x| x > 2), Some(&3));\nassert_eq!(std::iter::empty::<i32>().find_or_first(|&x| x > 5), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2999:1621":{"id":"0:2999:1621","crate_id":0,"name":"TupleCombinations","span":{"filename":"src/adaptors/mod.rs","begin":[701,0],"end":[707,1]},"visibility":"public","docs":"An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\nof a specific size.\n\nSee [`.tuple_combinations()`](crate::Itertools::tuple_combinations) for more\ninformation.","links":{"crate::Itertools::tuple_combinations":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HasCombination","id":"0:736:2231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:1033:1706":{"id":"0:1033:1706","crate_id":0,"name":"cons_tuples","span":{"filename":"src/cons_tuples_impl.rs","begin":[60,0],"end":[64,1]},"visibility":"public","docs":"Create an iterator that maps for example iterators of\n`((A, B), C)` to `(A, B, C)`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"ConsTuples","id":"0:3692:1632","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"generic","inner":"J"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"J"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:2864:3317":{"id":"0:2864:3317","crate_id":0,"name":"MapSpecialCaseFnOk","span":{"filename":"src/adaptors/map.rs","begin":[85,0],"end":[85,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2508:1877":{"id":"0:2508:1877","crate_id":0,"name":"batching","span":{"filename":"src/lib.rs","begin":[579,4],"end":[584,5]},"visibility":"default","docs":"A “meta iterator adaptor”. Its closure receives a reference to the\niterator and may pick off as many elements as it likes, to produce the\nnext iterator element.\n\nIterator element type is `B`.\n\n```\nuse itertools::Itertools;\n\n// An adaptor that gathers elements in pairs\nlet pit = (0..4).batching(|it| {\n           match it.next() {\n               None => None,\n               Some(x) => match it.next() {\n                   None => None,\n                   Some(y) => Some((x, y)),\n               }\n           }\n       });\n\nitertools::assert_equal(pit, vec![(0, 1), (2, 3)]);\n```\n","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Batching","id":"0:2961:1613","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2583:2230":{"id":"0:2583:2230","crate_id":0,"name":"tuple_combinations","span":{"filename":"src/lib.rs","begin":[1443,4],"end":[1449,5]},"visibility":"default","docs":"Return an iterator adaptor that iterates over the combinations of the\nelements from an iterator.\n\nIterator element can be any homogeneous tuple of type `Self::Item` with\nsize up to 12.\n\n```\nuse itertools::Itertools;\n\nlet mut v = Vec::new();\nfor (a, b) in (1..5).tuple_combinations() {\n    v.push((a, b));\n}\nassert_eq!(v, vec![(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]);\n\nlet mut it = (1..5).tuple_combinations();\nassert_eq!(Some((1, 2, 3)), it.next());\nassert_eq!(Some((1, 2, 4)), it.next());\nassert_eq!(Some((1, 3, 4)), it.next());\nassert_eq!(Some((2, 3, 4)), it.next());\nassert_eq!(None, it.next());\n\n// this requires a type hint\nlet it = (1..5).tuple_combinations::<(_, _, _)>();\nitertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);\n\n// you can also specify the complete type\nuse itertools::TupleCombinations;\nuse std::ops::Range;\n\nlet it: TupleCombinations<Range<u32>, (u32, u32, u32)> = (1..5).tuple_combinations();\nitertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"TupleCombinations","id":"0:2999:1621","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"adaptors::HasCombination","id":"0:736:2231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3341:4633":{"id":"2:3341:4633","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:181","2:3344:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2734:2821":{"id":"0:2734:2821","crate_id":0,"name":"position_max","span":{"filename":"src/lib.rs","begin":[3000,4],"end":[3006,5]},"visibility":"default","docs":"Return the position of the maximum element in the iterator.\n\nIf several elements are equally maximum, the position of the\nlast of them is returned.\n\n# Examples\n\n```\nuse itertools::Itertools;\n\nlet a: [i32; 0] = [];\nassert_eq!(a.iter().position_max(), None);\n\nlet a = [-3, 0, 1, 5, -10];\nassert_eq!(a.iter().position_max(), Some(3));\n\nlet a = [1, 1, -1, -1];\nassert_eq!(a.iter().position_max(), Some(1));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:983:1649":{"id":"0:983:1649","crate_id":0,"name":"intersperse","span":{"filename":"src/free.rs","begin":[47,0],"end":[52,1]},"visibility":"public","docs":"Iterate `iterable` with a particular value inserted between each element.\n\n[`IntoIterator`] enabled version of [`Iterator::intersperse`].\n\n```\nuse itertools::intersperse;\n\nitertools::assert_equal(intersperse((0..3), 8), vec![0, 8, 1, 8, 2]);\n```","links":{"`Iterator::intersperse`":"2:8601:157","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["element",{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersperse","id":"0:1550:1650","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1016:2469":{"id":"0:1016:2469","crate_id":0,"name":"join","span":{"filename":"src/free.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Combine all iterator elements into one String, seperated by `sep`.\n\n[`IntoIterator`] enabled version of [`Itertools::join`].\n\n```\nuse itertools::join;\n\nassert_eq!(join(&[1, 2, 3], \", \"), \"1, 2, 3\");\n```","links":{"`Itertools::join`":"0:2496:1747","`IntoIterator`":"2:8403:151"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["sep",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5012:6490":{"id":"1:5012:6490","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5013:3490","1:5014:15738"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2821":{"id":"0:2821","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3593,0],"end":[3608,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:2823:3012","0:2824:3014"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3774:4624":{"id":"2:3774:4624","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:988:2822":{"id":"0:988:2822","crate_id":0,"name":"enumerate","span":{"filename":"src/free.rs","begin":[84,0],"end":[88,1]},"visibility":"public","docs":"Iterate `iterable` with a running index.\n\n[`IntoIterator`] enabled version of [`Iterator::enumerate`].\n\n```\nuse itertools::enumerate;\n\nfor (i, elt) in enumerate(&[1, 2, 3]) {\n    /* loop body */\n}\n```","links":{"`IntoIterator`":"2:8403:151","`Iterator::enumerate`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"iter::Enumerate","id":"2:46628:3433","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:2556:1710":{"id":"0:2556:1710","crate_id":0,"name":"kmerge_by","span":{"filename":"src/lib.rs","begin":[1055,4],"end":[1063,5]},"visibility":"default","docs":"Return an iterator adaptor that flattens an iterator of iterators by\nmerging them according to the given closure.\n\nThe closure `first` is called with two elements *a*, *b* and should\nreturn `true` if *a* is ordered before *b*.\n\nIf all base iterators are sorted according to `first`, the result is\nsorted.\n\nIterator element type is `Self::Item`.\n\n```\nuse itertools::Itertools;\n\nlet a = vec![-1f64, 2., 3., -5., 6., -7.];\nlet b = vec![0., 2., -4.];\nlet mut it = vec![a, b].into_iter().kmerge_by(|a, b| a.abs() < b.abs());\nassert_eq!(it.next(), Some(0.));\nassert_eq!(it.last(), Some(-7.));\n```","links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["first",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"KMergeBy","id":"0:1632:1654","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12992:4457":{"id":"2:12992:4457","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12993:126","2:12994:21694"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3212-0:5056:2627":{"id":"b:2:3212-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3181:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3215:127","2:3216:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,30],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::MapResults","name":"MapResults","id":"0:467:1624","glob":false}},"0:965":{"id":"0:965","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[28,0],"end":[28,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::multipeek_impl::multipeek","name":"multipeek","id":"0:1748:2923","glob":false}},"2:13441:5337":{"id":"2:13441:5337","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16005:4335"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49429:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:789:5048":{"id":"5:789:5048","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:2497:1824":{"id":"0:2497:1824","crate_id":0,"name":"interleave","span":{"filename":"src/lib.rs","begin":[444,4],"end":[449,5]},"visibility":"default","docs":"Alternate elements from two iterators until both have run out.\n\nIterator element type is `Self::Item`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\nlet it = (1..7).interleave(vec![-1, -2]);\nitertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"Interleave","id":"0:2908:1607","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:980":{"id":"0:980","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[36,0],"end":[36,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::rciter_impl::rciter","name":"rciter","id":"0:2027:3419","glob":false}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[182,28],"end":[182,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::unziptuple::multiunzip","name":"multiunzip","id":"0:2388:1721","glob":false}},"0:1036:1627":{"id":"0:1036:1627","crate_id":0,"name":"combinations","span":{"filename":"src/combinations.rs","begin":[1,0],"end":[128,2]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1049:1628"],"is_stripped":true}},"2:10306:3602":{"id":"2:10306:3602","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:297":{"id":"0:297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[175,0],"end":[175,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::minmax::MinMaxResult","name":"MinMaxResult","id":"0:3859:1712","glob":false}},"0:1677:1655":{"id":"0:1677:1655","crate_id":0,"name":"merge_join","span":{"filename":"src/merge_join.rs","begin":[1,0],"end":[167,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1697:2067","0:1701:1656"],"is_stripped":true}},"1:6863:6402":{"id":"1:6863:6402","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:23424"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2594:2324":{"id":"0:2594:2324","crate_id":0,"name":"update","span":{"filename":"src/lib.rs","begin":[1676,4],"end":[1681,5]},"visibility":"default","docs":"Return an iterator adaptor that applies a mutating function\nto each element before yielding it.\n\n```\nuse itertools::Itertools;\n\nlet input = vec![vec![1], vec![3, 2, 1]];\nlet it = input.into_iter().update(|mut v| v.push(0));\nitertools::assert_equal(it, vec![vec![1, 0], vec![3, 2, 1, 0]]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["updater",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Update","id":"0:3351:1623","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":null}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2616:2419":{"id":"0:2616:2419","crate_id":0,"name":"dropping_back","span":{"filename":"src/lib.rs","begin":[1924,4],"end":[1932,5]},"visibility":"default","docs":"Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.\n\nThis is only possible on double ended iterators. `n` may be\nlarger than the number of elements.\n\nNote: This method is eager, dropping the back elements immediately and\npreserves the iterator type.\n\n```\nuse itertools::Itertools;\n\nlet init = vec![0, 3, 6, 9].into_iter().dropping_back(1);\nitertools::assert_equal(init, vec![0, 3, 6]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedIterator","id":"2:8447:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2681:2675":{"id":"0:2681:2675","crate_id":0,"name":"sorted_unstable_by","span":{"filename":"src/lib.rs","begin":[2532,4],"end":[2539,5]},"visibility":"default","docs":"Sort all iterator elements into a new iterator in ascending order.\n\n**Note:** This consumes the entire iterator, uses the\n[`slice::sort_unstable_by`] method and returns the result as a new\niterator that owns its elements.\n\nThe sorted iterator, if directly collected to a `Vec`, is converted\nwithout any extra copying or allocation cost.\n\n```\nuse itertools::Itertools;\n\n// sort people in descending order by age\nlet people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];\n\nlet oldest_people_first = people\n    .into_iter()\n    .sorted_unstable_by(|a, b| Ord::cmp(&b.1, &a.1))\n    .map(|(person, _age)| person);\n\nitertools::assert_equal(oldest_people_first,\n                        vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);\n```","links":{"`slice::sort_unstable_by`":"1:16010:4339"},"attrs":["#[cfg(feature = \"use_alloc\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"alloc::vec::IntoIter","id":"5:7379:1598","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"2:37624:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4578:4275":{"id":"0:4578:4275","crate_id":0,"name":"Middle","span":{"filename":"src/with_position.rs","begin":[42,4],"end":[42,13]},"visibility":"default","docs":"This is neither the first nor the last element.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"T"}]}},"0:1843:1713":{"id":"0:1843:1713","crate_id":0,"name":"PeekingNext","span":{"filename":"src/peeking_take_while.rs","begin":[14,0],"end":[20,1]},"visibility":"public","docs":"An iterator that allows peeking at an element before deciding to accept it.\n\nSee [`.peeking_take_while()`](crate::Itertools::peeking_take_while)\nfor more information.\n\nThis is implemented by peeking adaptors like peekable and put back,\nbut also by a few iterators that can be peeked natively, like the slice’s\nby reference iterator (`std::slice::Iter`).","links":{"crate::Itertools::peeking_take_while":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:1844:3923"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8403:151":{"id":"2:8403:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8404:1825","2:8405:1598","2:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13447:62267":{"id":"2:13447:62267","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49723:5328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3276:218":{"id":"2:3276:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13519:24014":{"id":"2:13519:24014","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390:1604":{"id":"0:390:1604","crate_id":0,"name":"DedupBy","span":{"filename":"src/adaptors/coalesce.rs","begin":[117,0],"end":[117,95]},"visibility":"public","docs":"An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.\n\nSee [`.dedup_by()`](crate::Itertools::dedup_by) or [`.dedup()`](crate::Itertools::dedup) for more information.","links":{"crate::Itertools::dedup":"0:2496:1747","crate::Itertools::dedup_by":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoalesceBy","id":"0:343:3275","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"DedupPred2CoalescePred","id":"0:2827:3293","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Pred"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Pred","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:2430:1861":{"id":"0:2430:1861","crate_id":0,"name":"zip_eq","span":{"filename":"src/zip_eq_impl.rs","begin":[27,0],"end":[35,1]},"visibility":"public","docs":"Iterate `i` and `j` in lock step.\n\n**Panics** if the iterators are not of the same length.\n\n[`IntoIterator`] enabled version of [`Itertools::zip_eq`](crate::Itertools::zip_eq).\n\n```\nuse itertools::zip_eq;\n\nlet data = [1, 2, 3, 4, 5];\nfor (a, b) in zip_eq(&data[..data.len() - 1], &data[1..]) {\n    /* loop body */\n}\n```","links":{"crate::Itertools::zip_eq":"0:2496:1747","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["i",{"kind":"generic","inner":"I"}],["j",{"kind":"generic","inner":"J"}]],"output":{"kind":"resolved_path","inner":{"name":"ZipEq","id":"0:4601:1697","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"J"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"J","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"J"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:4727:1595":{"id":"1:4727:1595","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4728:2474","1:4729:15648","1:4731:15649","1:4732:7405","1:4733:15650","1:4734:15651","1:4735:4852","1:4744:3836"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:379:1620":{"id":"0:379:1620","crate_id":0,"name":"Coalesce","span":{"filename":"src/adaptors/coalesce.rs","begin":[90,0],"end":[90,66]},"visibility":"public","docs":"An iterator adaptor that may join together adjacent elements.\n\nSee [`.coalesce()`](crate::Itertools::coalesce) for more information.","links":{"crate::Itertools::coalesce":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoalesceBy","id":"0:343:3275","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:2099:1716":{"id":"0:2099:1716","crate_id":0,"name":"repeat_call","span":{"filename":"src/sources.rs","begin":[43,0],"end":[47,1]},"visibility":"public","docs":"An iterator source that produces elements indefinitely by calling\na given closure.\n\nIterator element type is the return type of the closure.\n\n```\nuse itertools::repeat_call;\nuse itertools::Itertools;\nuse std::collections::BinaryHeap;\n\nlet mut heap = BinaryHeap::from(vec![2, 5, 3, 7, 8]);\n\n// extract each element in sorted order\nfor element in repeat_call(|| heap.pop()).while_some() {\n    print!(\"{}\", element);\n}\n\nitertools::assert_equal(\n    repeat_call(|| 1).take(5),\n    vec![1, 1, 1, 1, 1]\n);\n```","links":{},"attrs":["#[deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")]"],"deprecation":{"since":"0.8.0","note":"Use std repeat_with() instead"},"kind":"function","inner":{"decl":{"inputs":[["function",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"RepeatCall","id":"0:4031:1678","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"A"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:4344:1693":{"id":"0:4344:1693","crate_id":0,"name":"UniqueBy","span":{"filename":"src/unique_impl.rs","begin":[13,0],"end":[18,1]},"visibility":"public","docs":"An iterator adapter to filter out duplicate elements.\n\nSee [`.unique_by()`](crate::Itertools::unique) for more information.","links":{"crate::Itertools::unique":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13458:2364":{"id":"2:13458:2364","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13053:4461","prim@char":"1:16005:4335","`None`":"2:47492:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1012:3470":{"id":"0:1012:3470","crate_id":0,"name":"max","span":{"filename":"src/free.rs","begin":[218,0],"end":[223,1]},"visibility":"public","docs":"Return the maximum value of the iterable.\n\n[`IntoIterator`] enabled version of [`Iterator::max`].\n\n```\nuse itertools::max;\n\nassert_eq!(max(0..10), Some(9));\n```","links":{"`IntoIterator`":"2:8403:151","`Iterator::max`":"2:8601:157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2956:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:2579:2208":{"id":"0:2579:2208","crate_id":0,"name":"take_while_ref","span":{"filename":"src/lib.rs","begin":[1383,4],"end":[1388,5]},"visibility":"default","docs":"Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `accept` returns `true`.\n\nIt uses the `Clone` trait to restore the original iterator so that the\nlast and rejected element (first `false`) is still available when\n`take_while_ref` is done.\n\n```\nuse itertools::Itertools;\n\nlet mut hexadecimals = \"0123456789abcdef\".chars();\n\nlet decimals = hexadecimals.take_while_ref(|c| c.is_numeric())\n                           .collect::<String>();\nassert_eq!(decimals, \"0123456789\");\nassert_eq!(hexadecimals.next(), Some('a'));\n\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["accept",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"TakeWhileRef","id":"0:708:1618","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[97,8],"end":[97,15]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::Product","name":"Product","id":"0:2946:1611","glob":false}},"2:3383:4636":{"id":"2:3383:4636","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4583:1540":{"id":"0:4583:1540","crate_id":0,"name":"0","span":{"filename":"src/with_position.rs","begin":[44,9],"end":[44,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:1630:2077":{"id":"0:1630:2077","crate_id":0,"name":"kmerge","span":{"filename":"src/kmerge_impl.rs","begin":[141,0],"end":[147,1]},"visibility":"public","docs":"Create an iterator that merges elements of the contained iterators using\nthe ordering function.\n\nEquivalent to `iterable.into_iter().kmerge()`.\n\n```\nuse itertools::kmerge;\n\nfor elt in kmerge(vec![vec![0, 2, 4], vec![1, 3, 5], vec![6, 7]]) {\n    /* loop body */\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"KMerge","id":"0:1618:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3728:224":{"id":"2:3728:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729:181","2:3730:4651","2:3731:686","2:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[169,0],"end":[169,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::concat_impl::concat","name":"concat","id":"0:1025:432","glob":false}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[180,25],"end":[180,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sources::repeat_call","name":"repeat_call","id":"0:2099:1716","glob":false}},"2:3215:127":{"id":"2:3215:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38805:4603","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:13420:62263":{"id":"2:13420:62263","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1226:671":{"id":"0:1226:671","crate_id":0,"name":"format","span":{"filename":"src/format.rs","begin":[1,0],"end":[113,70]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3721:1636","0:3732:1635"],"is_stripped":true}},"2:13455:58672":{"id":"2:13455:58672","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:16005:4335","self::pattern":"2:13053:4461"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:5313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5063:1540":{"id":"0:5063:1540","crate_id":0,"name":"0","span":{"filename":"src/lib.rs","begin":[3590,9],"end":[3590,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"T"}},"0:2561:2129":{"id":"0:2561:2129","crate_id":0,"name":"coalesce","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1154,5]},"visibility":"default","docs":"Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.\n\nThe closure `f` is passed two elements, `previous` and `current` and may\nreturn either (1) `Ok(combined)` to merge the two values or\n(2) `Err((previous', current'))` to indicate they can't be merged.\nIn (2), the value `previous'` is emitted by the iterator.\nEither (1) `combined` or (2) `current'` becomes the previous value\nwhen coalesce continues with the next pair of elements to merge. The\nvalue that remains at the end is also emitted by the iterator.\n\nIterator element type is `Self::Item`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\n// sum same-sign runs together\nlet data = vec![-1., -2., -3., 3., 1., 0., -1.];\nitertools::assert_equal(data.into_iter().coalesce(|x, y|\n        if (x >= 0.) == (y >= 0.) {\n            Ok(x + y)\n        } else {\n            Err((x, y))\n        }),\n        vec![-6., 4., -1.]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Coalesce","id":"0:379:1620","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}},{"type":{"kind":"tuple","inner":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}]}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4327:4228":{"id":"0:4327:4228","crate_id":0,"name":"KeyValue","span":{"filename":"src/duplicates_impl.rs","begin":[160,4],"end":[160,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:542":{"id":"0:542","crate_id":0,"name":null,"span":{"filename":"src/adaptors/mod.rs","begin":[11,30],"end":[11,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::map::map_ok","name":"map_ok","id":"0:480:2000","glob":false}},"0:1622:3862":{"id":"0:1622:3862","crate_id":0,"name":"kmerge_pred","span":{"filename":"src/kmerge_impl.rs","begin":[111,4],"end":[111,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:791:5050":{"id":"5:791:5050","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3277:217":{"id":"2:3277:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6865:6403":{"id":"1:6865:6403","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6866:23429"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2835:3297":{"id":"0:2835:3297","crate_id":0,"name":"DedupEq","span":{"filename":"src/adaptors/coalesce.rs","begin":[145,0],"end":[145,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:1726:1711":{"id":"0:1726:1711","crate_id":0,"name":"minmax","span":{"filename":"src/minmax.rs","begin":[2,0],"end":[115,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3859:1712"],"is_stripped":true}},"2:3278:106":{"id":"2:3278:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2716:2770":{"id":"0:2716:2770","crate_id":0,"name":"into_grouping_map","span":{"filename":"src/lib.rs","begin":[2881,4],"end":[2886,5]},"visibility":"default","docs":"Constructs a `GroupingMap` to be used later with one of the efficient \ngroup-and-fold operations it allows to perform.\n \nThe input iterator must yield item in the form of `(K, V)` where the\nvalue of type `K` will be used as key to identify the groups and the\nvalue of type `V` as value for the folding operation.\n \nSee [`GroupingMap`] for more informations\non what operations are available.","links":{"`GroupingMap`":"0:3791:1640"},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"GroupingMap","id":"0:3791:1640","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/adaptors/mod.rs","begin":[11,38],"end":[11,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::map::MapInto","name":"MapInto","id":"0:486:1614","glob":false}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[120,4],"end":[120,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::exactly_one_err::ExactlyOneError","name":"ExactlyOneError","id":"0:3712:1634","glob":false}},"0:2961:1613":{"id":"0:2961:1613","crate_id":0,"name":"Batching","span":{"filename":"src/adaptors/mod.rs","begin":[388,0],"end":[391,1]},"visibility":"public","docs":"A “meta iterator adaptor”. Its closure receives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.\n\nIterator element type is *X*, if the return type of `F` is *Option\\<X\\>*.\n\nSee [`.batching()`](crate::Itertools::batching) for more information.","links":{"crate::Itertools::batching":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2608:2381":{"id":"0:2608:2381","crate_id":0,"name":"contains","span":{"filename":"src/lib.rs","begin":[1826,4],"end":[1833,5]},"visibility":"default","docs":"Returns `true` if the given item is present in this iterator.\n\nThis method is short-circuiting. If the given item is present in this\niterator, this method will consume the iterator up-to-and-including\nthe item. If the given item is not present in this iterator, the\niterator will be exhausted.\n\n```\nuse itertools::Itertools;\n\n#[derive(PartialEq, Debug)]\nenum Enum { A, B, C, D, E, }\n \nlet mut iter = vec![Enum::A, Enum::B, Enum::C, Enum::D].into_iter();\n \n// search `iter` for `B`\nassert_eq!(iter.contains(&Enum::B), true);\n// `B` was found, so the iterator now rests at the item after `B` (i.e, `C`).\nassert_eq!(iter.next(), Some(Enum::C));\n \n// search `iter` for `E`\nassert_eq!(iter.contains(&Enum::E), false);\n// `E` wasn't found, so `iter` is now exhausted\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["query",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4001-0:5056:2627":{"id":"b:2:4001-0:5056:2627","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3999:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:4003:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4098:1685":{"id":"0:4098:1685","crate_id":0,"name":"TupleWindows","span":{"filename":"src/tuple_impl.rs","begin":[138,0],"end":[144,1]},"visibility":"public","docs":"An iterator over all contiguous windows that produces tuples of a specific size.\n\nSee [`.tuple_windows()`](crate::Itertools::tuple_windows) for more\ninformation.","links":{"crate::Itertools::tuple_windows":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"0:2220:1956","args":null,"param_names":[]}}}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"HomogeneousTuple","id":"0:2171:1704","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2803:2958":{"id":"0:2803:2958","crate_id":0,"name":"counts_by","span":{"filename":"src/lib.rs","begin":[3438,4],"end":[3445,5]},"visibility":"default","docs":"Collect the items in this iterator and return a `HashMap` which\ncontains each item that appears in the iterator and the number\nof times it appears,\ndetermining identity using a keying function.\n\n```\n# use itertools::Itertools;\nstruct Character {\n  first_name: &'static str,\n  last_name:  &'static str,\n}\n \nlet characters =\n    vec![\n        Character { first_name: \"Amy\",   last_name: \"Pond\"      },\n        Character { first_name: \"Amy\",   last_name: \"Wong\"      },\n        Character { first_name: \"Amy\",   last_name: \"Santiago\"  },\n        Character { first_name: \"James\", last_name: \"Bond\"      },\n        Character { first_name: \"James\", last_name: \"Sullivan\"  },\n        Character { first_name: \"James\", last_name: \"Norington\" },\n        Character { first_name: \"James\", last_name: \"Kirk\"      },\n    ];\n \nlet first_name_frequency = \n    characters\n        .into_iter()\n        .counts_by(|c| c.first_name);\n     \nassert_eq!(first_name_frequency[\"Amy\"], 3);\nassert_eq!(first_name_frequency[\"James\"], 4);\nassert_eq!(first_name_frequency.contains_key(\"Asha\"), false);\n```","links":{},"attrs":["#[cfg(feature = \"use_std\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"HashMap","id":"1:1306:143","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10529:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}],"output":{"kind":"generic","inner":"K"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2581:2215":{"id":"0:2581:2215","crate_id":0,"name":"while_some","span":{"filename":"src/lib.rs","begin":[1404,4],"end":[1408,5]},"visibility":"default","docs":"Return an iterator adaptor that filters `Option<A>` iterator elements\nand produces `A`. Stops on the first `None` encountered.\n\nIterator element type is `A`, the unwrapped element.\n\n```\nuse itertools::Itertools;\n\n// List all hexadecimal digits\nitertools::assert_equal(\n    (0..).map(|i| std::char::from_digit(i, 16)).while_some(),\n    \"0123456789abcdef\".chars());\n\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"WhileSome","id":"0:2990:1619","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}},"param_names":[]}}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3262:3256":{"id":"0:3262:3256","crate_id":0,"name":"Tuple10Combination","span":{"filename":"src/adaptors/mod.rs","begin":[838,0],"end":[838,80]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:2873:3591":{"id":"2:2873:3591","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:5207","1:2579:5208","1:2580:5209","1:2581:5210"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3371:207":{"id":"0:3371:207","crate_id":0,"name":"Right","span":{"filename":"src/either_or_both.rs","begin":[13,4],"end":[13,12]},"visibility":"default","docs":"Only the right value of type `B` is present.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"generic","inner":"B"}]}},"0:2130:1718":{"id":"0:2130:1718","crate_id":0,"name":"iterate","span":{"filename":"src/sources.rs","begin":[176,0],"end":[183,1]},"visibility":"public","docs":"Creates a new iterator that infinitely applies function to value and yields results.\n\n```\nuse itertools::iterate;\n\nitertools::assert_equal(iterate(1, |&i| i * 3).take(5), vec![1, 3, 9, 27, 81]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["initial_value",{"kind":"generic","inner":"St"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Iterate","id":"0:4048:1680","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"St"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"St","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"St"}}}],"output":{"kind":"generic","inner":"St"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1974:1667":{"id":"0:1974:1667","crate_id":0,"name":"process_results_impl","span":{"filename":"src/process_results_impl.rs","begin":[2,0],"end":[97,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3993:1668","0:1988:1714"],"is_stripped":true}},"0:2798:2906":{"id":"0:2798:2906","crate_id":0,"name":"exactly_one","span":{"filename":"src/lib.rs","begin":[3304,4],"end":[3321,5]},"visibility":"default","docs":"If the iterator yields exactly one element, that element will be returned, otherwise\nan error will be returned containing an iterator that has the same output as the input\niterator.\n\nThis provides an additional layer of validation over just calling `Iterator::next()`.\nIf your assumption that there should only be one element yielded is false this provides\nthe opportunity to detect and handle that, preventing errors at a distance.\n\n# Examples\n```\nuse itertools::Itertools;\n\nassert_eq!((0..10).filter(|&x| x == 2).exactly_one().unwrap(), 2);\nassert!((0..10).filter(|&x| x > 1 && x < 4).exactly_one().unwrap_err().eq(2..4));\nassert!((0..10).filter(|&x| x > 1 && x < 5).exactly_one().unwrap_err().eq(2..5));\nassert!((0..10).filter(|&_| false).exactly_one().unwrap_err().eq(0..0));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"ExactlyOneError","id":"0:3712:1634","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3721:1636":{"id":"0:3721:1636","crate_id":0,"name":"FormatWith","span":{"filename":"src/format.rs","begin":[11,0],"end":[15,1]},"visibility":"public","docs":"Format all iterator elements lazily, separated by `sep`.\n\nThe format value can only be formatted once, after that the iterator is\nexhausted.\n\nSee [`.format_with()`](crate::Itertools::format_with) for more information.","links":{"crate::Itertools::format_with":"0:2496:1747"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:2502:1840":{"id":"0:2502:1840","crate_id":0,"name":"intersperse_with","span":{"filename":"src/lib.rs","begin":[502,4],"end":[507,5]},"visibility":"default","docs":"An iterator adaptor to insert a particular value created by a function\nbetween each element of the adapted iterator.\n\nIterator element type is `Self::Item`.\n\nThis iterator is *fused*.\n\n```\nuse itertools::Itertools;\n\nlet mut i = 10;\nitertools::assert_equal((0..3).intersperse_with(|| { i -= 1; i }), vec![0, 9, 1, 8, 2]);\nassert_eq!(i, 8);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["element",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"IntersperseWith","id":"0:3816:1651","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:416:1606":{"id":"0:416:1606","crate_id":0,"name":"DedupByWithCount","span":{"filename":"src/adaptors/coalesce.rs","begin":[190,0],"end":[191,89]},"visibility":"public","docs":"An iterator adaptor that removes repeated duplicates, while keeping a count of how many\nrepeated elements were present. This will determine equality using a comparison function.\n\nSee [`.dedup_by_with_count()`](crate::Itertools::dedup_by_with_count) or\n[`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","links":{"crate::Itertools::dedup_by_with_count":"0:2496:1747","crate::Itertools::dedup_with_count":"0:2496:1747"},"attrs":["#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoalesceBy","id":"0:343:3275","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"resolved_path","inner":{"name":"DedupPredWithCount2CoalescePred","id":"0:2841:3307","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Pred"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Pred","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"0:2523:1992":{"id":"0:2523:1992","crate_id":0,"name":"map_into","span":{"filename":"src/lib.rs","begin":[833,4],"end":[838,5]},"visibility":"default","docs":"Convert each item of the iterator using the [`Into`] trait.\n\n```rust\nuse itertools::Itertools;\n\n(1i32..42i32).map_into::<f64>().collect_vec();\n```","links":{"`Into`":"2:3171:149"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"MapInto","id":"0:486:1614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8601:157","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3171:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13509:62277":{"id":"2:13509:62277","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2489:1723":{"id":"0:2489:1723","crate_id":0,"name":"multizip","span":{"filename":"src/ziptuple.rs","begin":[39,0],"end":[44,1]},"visibility":"public","docs":"An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.\n\nThe iterator `Zip<(I, J, ..., M)>` is formed from a tuple of iterators (or values that\nimplement [`IntoIterator`]) and yields elements\nuntil any of the subiterators yields `None`.\n\nThe iterator element type is a tuple like like `(A, B, ..., E)` where `A` to `E` are the\nelement types of the subiterator.\n\n**Note:** The result of this macro is a value of a named type (`Zip<(I, J,\n..)>` of each component iterator `I, J, ...`) if each component iterator is\nnameable.\n\nPrefer [`izip!()`] over `multizip` for the performance benefits of using the\nstandard library `.zip()`. Prefer `multizip` if a nameable type is needed.\n\n```\nuse itertools::multizip;\n\n// iterate over three sequences side-by-side\nlet mut results = [0, 0, 0, 0];\nlet inputs = [3, 7, 9, 6];\n\nfor (r, index, input) in multizip((&mut results, 0..10, &inputs)) {\n    *r = index * 10 + input;\n}\n\nassert_eq!(results, [0 + 3, 10 + 7, 29, 36]);\n```","links":{"`IntoIterator`":"2:8403:151","`izip!()`":"0:2494:1769"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Zip","id":"0:4627:1701","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"Zip","id":"0:4627:1701","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3174:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"Zip","id":"0:4627:1701","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:977":{"id":"0:977","crate_id":0,"name":null,"span":{"filename":"src/free.rs","begin":[34,0],"end":[34,41]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::merge_join::merge_join_by","name":"merge_join_by","id":"0:1697:2067","glob":false}},"0:1009:294":{"id":"0:1009:294","crate_id":0,"name":"any","span":{"filename":"src/free.rs","begin":[202,0],"end":[207,1]},"visibility":"public","docs":"Test whether the predicate holds for any elements in the iterable.\n\n[`IntoIterator`] enabled version of [`Iterator::any`].\n\n```\nuse itertools::any;\n\nassert!(any(&[0, -1, 2], |elt| *elt > 0));\n```","links":{"`Iterator::any`":"2:8601:157","`IntoIterator`":"2:8403:151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iterable",{"kind":"generic","inner":"I"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8403:151","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:8403:151","args":null,"param_names":[]}}}}],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:5066":{"id":"0:5066","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[3585,15],"end":[3585,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::clone::Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"FoldWhile","id":"0:5056:2627","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:5068:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4004:1672":{"id":"0:4004:1672","crate_id":0,"name":"PutBackN","span":{"filename":"src/put_back_n_impl.rs","begin":[10,0],"end":[13,1]},"visibility":"public","docs":"An iterator adaptor that allows putting multiple\nitems in front of the iterator.\n\nIterator element type is `I::Item`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[95,8],"end":[95,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::adaptors::FilterMapOk","name":"FilterMapOk","id":"0:790:1609","glob":false}},"1:1079:6510":{"id":"1:1079:6510","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:5048","1:1081:7235","1:1082:15417","1:1083:15418","1:1084:15419","1:1085:15420","1:1086:15421"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10308:189":{"id":"2:10308:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[158,4],"end":[158,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::zip_longest::ZipLongest","name":"ZipLongest","id":"0:4614:1699","glob":false}},"2:10529:142":{"id":"2:10529:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10530:715","2:10532:5206"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2227:4195":{"id":"0:2227:4195","crate_id":0,"name":"num_items","span":{"filename":"src/tuple_impl.rs","begin":[249,4],"end":[249,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1146:1707":{"id":"0:1146:1707","crate_id":0,"name":"diff","span":{"filename":"src/diff.rs","begin":[1,0],"end":[61,1]},"visibility":"crate","docs":"\"Diff\"ing iterators for caching elements to sequential collections without requiring the new\nelements' iterator to be `Clone`.\n\n- [`Diff`] (produced by the [`diff_with`] function)\ndescribes the difference between two non-`Clone` iterators `I` and `J` after breaking ASAP from\na lock-step comparison.","links":{"`diff_with`":"0:1169:1708","`Diff`":"0:1153:1709"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1153:1709","0:1169:1708"],"is_stripped":true}},"2:3181:227":{"id":"2:3181:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:127","2:3184:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"17:9368:8318":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11779:8470":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11073:6474":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:13402:8878":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10642:11762":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:3905:9667":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5855:7591":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:12794:7099":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:1623:4236":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:1432:4699":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:47797:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"14:216:47978":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:7824:8092":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:22599:60787":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:51375:6893":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:46628:3433":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:11424:5302":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:14165:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10926:10800":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5379:10064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10673:49816":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:13962:60851":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:16024:4351":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1486:4712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:668:7992":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:0:4314":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:11313:57681":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:57675:10490":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:51313:6904":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:45919:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:48513:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:3811:4656":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:4955:9094":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:24234:7147":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:50199:7106":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:49323:5277":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5371:10063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4281:9814":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:47602:4999":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:14571:10693":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:12500:7231":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:3733:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7856:7631":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"12:815:4704":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5505:7578":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7681:6578":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:50167:7104":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:6699:10182":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:7073:7616":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:16009:4338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:3652:6460":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4535:9082":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:46779:4175":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:11502:4897":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:4599:8082":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"5:8130:4441":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:25240:7021":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13772:8995":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:12258:6539":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:3118:7803":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13331:8861":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:10924:6427":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:624:9486":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:897:7986":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7633:6575":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:51898:10424":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:8391:4438":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:47550:1598":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:14602:6676":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:14103:8131":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10095:7959":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:4215:4441":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:9347:6484":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:1729:6732":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:13627:8937":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46708:4549":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:0:4315":{"crate_id":17,"path":["object"],"kind":"module"},"1:5657:6506":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10224:10780":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11947:8502":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4459:9894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:294:10760":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:4704:9086":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10420:7874":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:46609:4547":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:6200:10265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11118:49633":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:7796:6584":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:11993:8514":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13532:8915":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:51208:6924":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11317:5297":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:2253:4236":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11189:6494":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:6633:6146":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:3518:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6072:7547":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13180:8823":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:6865:6403":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3277:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:48049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10403:7888":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:5739:6414":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:1540:9503":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"9:686:7299":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:14809:6509":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:730:63242":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8414:5342":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:1944:3005":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:3296:4596":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:50020:6853":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4082:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:1547:9505":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10571:10788":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"0:5061:2630":{"crate_id":0,"path":["itertools","FoldWhile","Done"],"kind":"variant"},"1:11139:5290":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:10253:7880":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7549:7537":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:14566:10691":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:12006:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:16026:4353":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:5033:4612":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:850:7982":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:12740:8130":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11970:8509":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"12:1256:4712":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12247:8554":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46296:7014":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11204:6496":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"15:230:7454":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:47663:3490":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:6441:6429":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10950:10802":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4227:9800":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:14589:10698":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:49627:5330":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:9638:8123":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:13488:8901":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:15971:60288":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:47525:1825":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"12:1147:4711":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:5164:4621":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"15:269:7459":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:2755:4601":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:5934:6786":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10635:8330":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11519:8420":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:632:9491":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9332:7946":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:53462:10478":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:2200:8081":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:4884:4625":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10211:10779":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:50045:6855":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7378:7533":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13963:9045":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11254:7859":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:374:7248":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4215:9799":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:15020:6581":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10236:7856":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:11396:5301":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:681:8384":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:50034:6854":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:3171:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:12287:8559":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:50448:4604":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:10061:10776":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:1045:6519":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:3957:9703":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:3647:4450":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:47004:4540":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3329:3490":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:2170:4490":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:8446:4490":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:50191:7111":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7870:7535":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:12992:4457":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:6863:6402":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:49039:7233":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:1079:6510":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:47713:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:3195:7794":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:7979:8109":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:50436:4605":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7303:7627":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"7:38:47296":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10697:10877":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:46799:1701":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:11162:5290":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6807:7614":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12568:8622":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:4739:6982":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:5110:4619":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8136:6664":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:8403:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:299:10761":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:5815:7590":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:7642:4496":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11082:6450":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:3044:61879":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3196:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:3370:6520":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:47965:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:1658:9582":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:8298:7255":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:50418:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2437:10867":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2862:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10448:7941":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:5790:7589":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"20:181:1591":{"crate_id":20,"path":["either","Either"],"kind":"enum"},"2:5029:3582":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:9296:8317":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10071:7965":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:12238:6597":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:1203:7433":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:13063:4452":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:49776:5326":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13348:8866":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46638:4554":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6028:10189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:8115:1598":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12598:8628":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10502:10604":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:48269:3603":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3351:4630":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:10812:6676":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12632:8641":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9729:63234":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4272:9809":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5130:9924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:2968:7790":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:4371:9859":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:13583:11062":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:4084:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"12:2059:6521":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:3662:8107":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:1021:6664":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8197:8109":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:15413:6726":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12741:8652":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:6910:10305":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11328:8657":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:12298:6541":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5987:10162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:745:63239":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11847:8490":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4101:9773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:49663:5331":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6768:7828":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13429:8882":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:3892:9657":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:651:7987":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:24734:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10864:8365":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:1597:3490":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13978:9046":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:15392:6719":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1736:9624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3268:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"9:809:2589":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2192:6523":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10962:10803":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4506:9081":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:7257:8079":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:48007:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"19:117:8223":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:47688:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:22937:6487":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:37624:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:7111:8092":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:3388:4641":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5969:10155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:11475:6400":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:48829:2589":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:4230:9074":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13240:8837":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:10306:3602":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:4643:8084":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:432:4453":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:9471:23650":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5753:7587":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12028:8518":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9133:49630":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:11113:3490":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:5953:10143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6087:7526":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:12154:6630":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13810:9004":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6893:10300":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3357:4632":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:49266:5289":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:13957:6580":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:4050:4607":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"12:162:7435":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:49758:5324":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:4727:1595":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:15484:58063":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:12769:10878":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"2:11282:5304":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:12278:6540":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"12:940:4706":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1215:7267":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9264:8315":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:8263:4528":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12480:8609":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:24212:10662":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:3338:7778":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8485:6627":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"12:2412:9337":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"12:1703:7447":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6644:10289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6691:7612":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:51336:6908":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10028:10773":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:5295:48049":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11665:8443":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:46056:6988":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:2314:7882":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:10933:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7514:7549":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:531:9431":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:8106:4488":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:8902:49624":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7195:7621":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:157:42468":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:12208:8549":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:53416:10474":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:10477:7949":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:48255:3605":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:24090:7039":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:6892:1651":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13912:9034":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:10663:4713":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:12783:8660":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:46431:7221":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:46410:5324":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:867:7984":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"12:353:10649":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:10300:3604":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:48276:3602":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"0:2495:1807":{"crate_id":0,"path":["itertools","chain"],"kind":"macro"},"18:136:11048":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7823:7540":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5185:9963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"12:869:4441":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:6437:4556":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"13:0:4305":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:7250:7626":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13564:8923":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6636:7545":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12645:8642":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11835:8487":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"9:1056:7361":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:46986:4536":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:32397:60953":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"12:2280:4711":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:16023:4350":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:23467:12743":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:6208:7599":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:9404:8319":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11424:6720":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4262:9802":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11116:3447":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10353:7883":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:3371:4637":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:9973:7081":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13733:8980":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:9258:4692":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:4611:4538":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10795:6489":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:4436:6469":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13760:8992":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12659:8643":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:3990:9722":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:599:9473":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5292:10014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:8879:3129":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7928:6987":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:11482:8405":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:49445:3969":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:5377:6718":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"12:114:11054":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:4823:9090":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5945:10138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3174:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5314:8315":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3204:6448":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46736:4559":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10106:7960":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:3728:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:52082:6926":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13788:8999":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1618:1598":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:6100:10203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:49477:5297":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10294:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:3515:3813":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11794:8476":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12142:8539":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13154:8817":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10912:10796":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:6812:10290":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:3558:4654":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:15499:7463":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5528:10106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46578:4546":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10149:10770":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"0:276:1703":{"crate_id":0,"path":["itertools","traits"],"kind":"module"},"1:8478:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4514:6467":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:8138:7262":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11147:10606":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:1717:9618":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:3346:3607":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10657:11764":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:5207:4622":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"9:603:47475":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:3416:4643":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:10680:12105":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:15123:10699":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:46388:5325":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:1497:4703":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47492:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12385:8592":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:9380:4452":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:994:7260":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11246:6498":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"9:1075:7369":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:4377:1598":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:2062:6440":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:45898:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13520:8912":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:14822:6583":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1653:4702":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10304:7878":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:16030:4357":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:49435:3968":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"12:1682:7446":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:7212:4441":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"14:56:8405":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3504:4516":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11133:3969":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5414:10079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10458:8277":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:12771:7098":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:49742:5317":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:16025:4352":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:8849:7857":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6591:7610":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:8463:4491":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:6475:4441":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3430:4646":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:24032:7044":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:14610:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:49877:6846":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:48800:10677":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:161:42469":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:1622:9552":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:13278:10850":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:15131:6589":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:6463:6432":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1441:4236":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5273:7781":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:15976:11767":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3274:4594":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12685:8645":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:51394:10415":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:6689:6415":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:4157:7922":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:46587:3447":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6852:10291":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:12734:7097":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:49297:5279":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6518:7607":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:16004:4334":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:9260:4907":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:1091:8079":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:48262:3604":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:823:3753":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"12:2045:4490":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:24144:23116":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10822:6425":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10279:7890":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:5985:6792":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:8179:1594":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12307:8565":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:14627:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:2218:7244":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:22874:6973":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:13078:5313":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:775:8227":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13453:8890":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:49197:7095":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3745:4653":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:24666:6667":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:50238:7166":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:37648:4575":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2797:4602":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7453:7529":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:11410:5299":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:1663:4703":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9088:49629":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:3716:4649":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:4448:9079":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"2:22748:6970":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4494:9907":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:12000:6579":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:53377:6899":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:6577:7609":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:24836:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"12:1103:4236":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:15093:6539":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:46600:3453":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:13766:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11664:3490":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:610:9478":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:5788:8079":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:2773:7813":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4347:9846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:3341:7241":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:903:6644":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:49681:5332":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:8197:1598":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13547:8919":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:5522:10105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6152:7528":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:830:7981":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:32497:60954":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:13942:9042":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:0:4306":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:45942:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4364:9857":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6464:7541":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10117:7961":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6176:10255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:1472:4710":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:472:11056":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:537:9433":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:2159:3490":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13041:8772":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:45965:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"12:1162:7431":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:3246:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11750:8459":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6176:7598":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:46789:4562":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:12253:6606":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:3757:6989":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6136:7568":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3565:6459":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:13283:11061":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:670:42796":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11915:8492":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:3048:61881":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"12:843:4700":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4425:9879":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6949:7832":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11410:6790":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:38805:4603":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4164:9795":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:37625:2812":{"crate_id":2,"path":["core","cmp","Ordering","Less"],"kind":"foreign_type"},"18:755:63240":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6614:10286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:3309:4597":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"12:1121:4710":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2462:10869":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:10569:6427":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:49891:6849":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6357:7603":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:5561:7580":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:3970:8079":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10948:6612":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:3039:61882":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"12:971:4708":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:5862:6783":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:699:6639":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11681:6564":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:6963:6397":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6126:7596":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:6701:10184":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:7799:6585":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"9:749:7303":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:3363:4631":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:50068:10855":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:2598:10870":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"0:2816:2999":{"crate_id":0,"path":["itertools","partition"],"kind":"function"},"1:16016:4343":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:7121:4896":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12467:8607":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"9:469:47406":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:3362:6522":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"0:54:1601":{"crate_id":0,"path":["itertools","structs"],"kind":"module"},"1:11405:6787":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"9:963:7366":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13620:8935":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:5012:6490":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"18:740:10758":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:12183:6632":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"12:2032:3490":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3524:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6021:7786":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:4922:9093":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12582:8624":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10456:8128":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:6203:6736":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:3041:7792":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10001:49678":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5736:7586":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:3488:7800":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:46977:4534":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:1694:7265":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:5889:8090":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:10611:10791":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12537:8617":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:16015:4342":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11231:7861":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"14:47:10835":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10543:8369":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:12199:6633":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:7927:1625":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:8313:7155":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2754:7780":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:7379:1598":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:3918:9677":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11654:6561":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7146:7617":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:3327:6680":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10381:10885":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11604:8433":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4523:9920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7333:7548":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:3759:3490":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4736:57641":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:24632:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:3549:9069":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:11571:2589":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10938:10801":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:6867:6404":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:12056:8105":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:11264:6593":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:12010:8517":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:3336:6521":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2887:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:9799:10769":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:22561:60769":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"0:2813:2987":{"crate_id":0,"path":["itertools","assert_equal"],"kind":"function"},"2:3102:6427":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4377:9862":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:52129:6930":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5241:9989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:5996:7594":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"12:1238:7434":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6744:7826":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3375:4635":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:49956:6851":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"0:2493:1742":{"crate_id":0,"path":["itertools","iproduct"],"kind":"macro"},"6:6214:10274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:11336:10689":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:3145:7802":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4752:6454":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:9034:49627":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:49581:5299":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:49908:6850":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9722:6713":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:13418:6733":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:6864:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"12:2072:6523":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:563:9453":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8742:6756":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:47619:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:3939:9073":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:48808:4582":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:4008:10765":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:51670:6909":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:6032:7519":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6636:10287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:32296:4484":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:9775:8125":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:10240:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:7936:57607":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:15046:60465":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:12134:6629":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:47611:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13924:9036":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"12:2040:4441":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4083:9765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13685:8979":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:5875:8088":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:7477:7551":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:1607:4699":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7467:7530":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:14239:6471":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:45781:4657":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13986:9049":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10623:10792":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:47542:4699":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:10446:10849":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:9943:63229":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:525:9428":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6554:7608":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:49563:5301":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:51231:6928":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9178:10872":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:12524:5319":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11434:8390":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:46340:7222":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:50351:10410":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10308:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4046:9744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:9933:10771":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8977:6617":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:51741:6897":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:53592:10484":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:591:9468":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9719:10767":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3198:6675":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10081:7890":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:1602:9538":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:49336:5278":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:14030:6579":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:3038:5048":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"12:787:4703":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:16017:4344":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10310:3601":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:24870:7133":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12442:8604":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:24598:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:5972:6791":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:3400:4639":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5191:9966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2193:4671":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"9:927:47400":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:3894:5344":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:32345:60952":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:10574:4580":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13386:8874":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:2186:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12712:8649":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:8366:1611":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:5415:6440":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:705:8227":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:22601:60790":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:3286:3130":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:9770:8124":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:9643:57602":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:6106:10204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:838:5314":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12982:8720":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:7453:8079":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:5421:7573":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:37631:3693":{"crate_id":2,"path":["core","cmp","Ordering","Greater"],"kind":"foreign_type"},"2:10529:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11199:8380":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6239:10280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5159:9948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"15:248:7455":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:3604:8244":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4127:9783":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3395:4638":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:24049:10658":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:5420:10082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:3429:7515":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5197:9967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3383:4636":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10331:7892":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:4688:6449":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13370:8871":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"12:0:4311":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:9762:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:23771:6886":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47015:4542":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:6973:1500":{"crate_id":5,"path":["alloc","vec"],"kind":"module"},"2:3276:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:2262:7270":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:22801:6984":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:48546:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:1635:4700":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6155:10241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2915:415":{"crate_id":2,"path":["core","cmp"],"kind":"module"},"17:13865:9020":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12040:8520":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"0:0:1564":{"crate_id":0,"path":["itertools"],"kind":"module"},"16:4641:9084":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:2961:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"6:6221:10277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:88:42402":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:5723:6412":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:2484:49716":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13306:8853":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:14551:6515":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46748:4560":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6923:10306":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6101:7524":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12456:8606":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:1572:9519":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"9:234:7326":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:5651:6508":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9886:10770":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:9978:7082":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11430:6739":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:5707:7584":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:24118:10320":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5228:9980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:5789:6417":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7342:7562":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46618:4176":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9476:8321":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:50195:7105":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:52243:6918":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5548:10120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11015:10807":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1457:4711":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5472:7576":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4306:4699":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:46281:5325":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"1:10958:6463":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4331:9837":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13205:8833":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:50225:6543":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"6:4241:9801":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10581:58064":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:7119:7520":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:1908:43767":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:4920:4626":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10377:7881":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1554:9508":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10489:7951":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:47559:4905":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:11453:10171":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:0:1590":{"crate_id":20,"path":["either"],"kind":"module"},"16:5927:7592":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13377:8873":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7738:7628":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:24182:23117":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"18:637:8227":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2399:10865":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:1563:9513":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:10251:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:51818:10422":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:46470:7154":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7804:7538":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12275:8558":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:3091:7850":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:1700:9611":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5407:7572":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13609:8934":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:69:4489":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:1617:9550":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:46717:3128":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:1708:9612":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:3972:9710":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1476:4441":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:48091:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:5407:10078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:858:7983":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7884:7536":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4203:9798":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:3278:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11356:6721":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9600:63231":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"14:250:9289":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:52936:6907":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"12:764:4699":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:46424:7220":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:48792:4583":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:1528:4708":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:3522:8240":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:47881:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:48495:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:14644:60463":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:13816:60850":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11350:6720":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:7619:6574":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:4095:9770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:9769:63230":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12431:8602":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13590:8929":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:22546:60769":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:13574:8926":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:543:9436":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:50175:7109":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2912:7789":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"9:41:7351":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:47755:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:3375:7242":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"7:85:47303":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12095:8531":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6238:7531":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:621:10599":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46394:7218":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9961:10772":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:53515:10481":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:10302:3605":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"14:244:10647":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:49358:5296":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:49349:5293":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:4890:9092":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:50395:7116":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:9162:7860":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4501:9910":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:3951:4490":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3580:4449":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:16003:4333":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7158:7618":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:24802:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:3287:7798":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:4727:6981":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:4350:9076":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:4782:6824":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:46656:6144":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:13564:10867":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:7669:1777":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"12:432:7436":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6219:7600":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4431:9882":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:605:9476":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:50183:7112":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46699:4558":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5459:10092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7420:7550":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:11767:8467":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4669:6440":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:4358:9854":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:23868:7128":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:3103:6810":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"0:5058:105":{"crate_id":0,"path":["itertools","FoldWhile","Continue"],"kind":"variant"},"6:3881:9649":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"14:0:4312":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:9186:7918":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:12223:6752":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:8362:10311":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:11355:5298":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13356:8869":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:14:2474":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:12079:10559":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:48528:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:46325:7017":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6068:10192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:5155:4620":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3839:8079":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6644:7611":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9809:63235":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:6791:6514":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3273:1826":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:9065:49628":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4066:9755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:52435:6895":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:10614:5220":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6269:7602":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:9259:4691":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:24564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:49751:5316":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:7216:7623":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:10988:10805":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:52160:6933":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6887:10299":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5975:7593":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7511:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11611:6560":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:13540:8918":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"0:2494:1769":{"crate_id":0,"path":["itertools","izip"],"kind":"macro"},"2:48632:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:23125:6427":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:3576:3874":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6391:7604":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:8886:4545":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:16020:4347":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:7445:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:5630:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:32337:4673":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"12:183:7439":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2920:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:14317:5220":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:5793:6411":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4005:9727":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12610:8630":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:3862:9639":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4133:9785":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13598:8930":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12168:8337":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12552:8621":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1501:4704":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:12262:8557":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:821:7980":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1723:9621":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:10836:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5978:10161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1419:3490":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5346:7527":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:616:9481":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11228:6497":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:6091:10199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3521:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:7290:10871":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13933:9040":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:23939:7130":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:1760:9633":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10800:6674":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:8160:1598":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:3978:9713":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5360:7570":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:6185:10258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:14078:7118":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10241:1595":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4052:9747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5522:7579":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:11176:6493":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:10805:6424":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11653:8442":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:46548:8099":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:49839:6842":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:53338:6934":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:466:11055":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:11594:6559":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12073:8530":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11588:8432":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:15186:6527":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:979:4709":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10558:10785":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:5384:7571":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4120:9781":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:23086:12724":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9849:63233":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:51177:6936":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:50179:7108":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4387:9865":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:791:7977":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12343:8571":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4183:9796":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11337:7947":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:3714:9070":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3774:4624":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:3018:7791":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7571:7525":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"0:5056:2627":{"crate_id":0,"path":["itertools","FoldWhile"],"kind":"enum"},"2:2865:4522":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:2512:7876":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:14805:10877":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:16012:4341":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3379:4634":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:57696:10491":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:53189:6931":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10431:8126":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:10814:7913":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:569:9456":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:5580:7769":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46758:4561":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:56387:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3172:7793":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:8203:1598":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5717:7585":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3422:4644":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:15510:7463":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:16005:4335":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10041:10774":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:53451:10477":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:9759:10768":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8807:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"9:776:7348":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:53299:6914":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6491:7606":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11186:10607":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5359:10056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:695:7993":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"15:0:4313":{"crate_id":15,"path":["addr2line"],"kind":"module"},"0:2496:1747":{"crate_id":0,"path":["itertools","Itertools"],"kind":"trait"},"17:12195:8547":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:51073:6935":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13446:8889":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:51250:10413":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:6703:10186":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10516:7952":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12671:8644":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:1450:4700":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:5038:4613":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:51520:6929":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11572:8427":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4670:6428":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:3951:9701":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12182:8546":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8929:6766":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:4401:6705":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11082:7865":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11045:49632":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:46028:4608":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:12049:6583":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:1744:9628":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:11449:6513":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:933:4705":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:1843:8079":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9971:63232":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:23462:6892":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:46287:10668":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:53500:10480":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:10266:7879":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:22837:6991":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:802:7978":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7406:7532":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:14576:6424":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12373:8590":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5312:10030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:5583:11768":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:1784:8077":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4060:9752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13062:8781":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:24103:7040":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:5833:5273":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:49043:5280":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6569:7821":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:14239:4487":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10435:10781":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:1511:4706":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6413:7451":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:6764:6440":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:4386:9077":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13554:8920":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12795:8667":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:74:1433":{"crate_id":2,"path":["core","u32"],"kind":"module"},"16:3392:7804":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:3218:7795":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:2938:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5210:9968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11094:6452":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:11670:6563":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:51718:6894":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:14236:6469":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13221:8836":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6005:10171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1584:9528":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9689:63236":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"8:0:4307":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:9245:7869":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:45809:4655":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:46688:1650":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:50187:7110":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:3488:4490":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:5436:10086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1533:9500":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:11956:5292":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:51144:6903":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13119:8816":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:5029:9096":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:77:1489":{"crate_id":2,"path":["core","usize"],"kind":"module"},"2:32156:7178":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"5:4699:8084":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:4517:9917":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11714:8454":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:46450:7019":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10140:7892":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:48580:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4401:9869":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:13655:6595":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2184:3839":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"6:1676:9594":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:53126:6911":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2187:6522":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:45873:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:23661:6486":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:5731:6413":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3329:6681":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:52793:6939":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4751:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:2175:6520":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:46970:4533":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:1505:4705":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:48817:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2733:1635":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"12:928:4702":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11726:8457":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"13:232:9334":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:51693:6912":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:3405:4640":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12408:8601":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:11438:5300":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:7336:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11499:8410":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:16019:4346":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:51442:6937":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4306:9825":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:923:7259":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:4304:6475":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"14:11:10835":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:547:7771":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5469:10094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13780:8998":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:50203:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13884:9025":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2460:10868":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:157:7318":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:53425:10475":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6366:7452":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1596:9536":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:10539:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:4398:6704":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:895:7430":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:3997:9726":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"12:750:3490":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:3506:7799":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6881:10298":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:2941:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:2398:9335":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5504:6726":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4033:9739":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13465:8896":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"12:2269:4710":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:24530:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:10706:3447":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"17:10599:10790":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13172:8822":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:48839:10678":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:22850:6427":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:10844:7892":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6718:7824":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:52003:6938":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2945:7812":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:8344:7257":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:11923:1646":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:12112:3490":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:8121:7261":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:3365:7779":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:16018:4345":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:6954:7239":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13819:9006":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13163:8821":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6166:7597":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2396:4486":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"12:399:7437":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4478:9902":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:50359:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:51282:6916":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:50404:7117":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10128:7962":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:1156:10860":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11066:3970":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:47839:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:661:7991":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:14242:6467":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:5433:7574":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1161:11765":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:14068:6825":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7185:7620":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:1527:9497":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:1236:10764":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:51355:10414":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:8399:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10975:10804":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8392:2589":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:48847:10679":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:48616:5055":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:49402:4455":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:49459:5290":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12221:8550":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:56400:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49286:5288":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:47593:4906":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:3426:4645":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11628:8437":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"14:194:47972":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:46995:4538":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:8163:5709":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2291:6815":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:3800:9072":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:24700:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8492:6628":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12118:8537":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46371:7217":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:16010:4339":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:542:7502":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:46108:6995":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:38868:4598":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4745:6451":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"18:767:8238":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:0:4316":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:12845:5303":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7620:4495":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12243:6758":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"9:722:7302":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:49713:5327":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5274:10002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10701:7276":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13318:8856":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11277:8381":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9598:8122":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:9896:63238":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2991:7801":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5386:10065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13272:8850":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:4477:9080":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:51766:6898":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:15332:6499":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:713:4575":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:14937:8132":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:13072:5314":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:51543:6932":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:22927:6427":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10052:10775":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:24126:10321":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12946:8689":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7259:10871":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2401:10866":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11026:10808":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:48519:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:5282:10007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6794:6429":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12072:57677":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:13782:6587":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:2330:7269":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:52586:6919":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13582:8927":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:15236:6536":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8912:4534":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:52400:6913":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"9:900:9388":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2889:7807":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:1690:9605":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:16011:4340":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5231:9097":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13506:8905":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1674:4704":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3491:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11361:6722":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:5956:6788":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46727:3438":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:1011:3490":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:24768:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9551:7858":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:22931:6485":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:1136:4609":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6935:10308":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:3743:7910":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12051:8521":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9649:10766":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:5407:4443":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:8100:1808":{"crate_id":2,"path":["core","iter","sources","empty","empty"],"kind":"function"},"18:721:8229":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"13:120:47944":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:15987:58062":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:5330:8316":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:7736:6580":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:5536:4685":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:13892:10851":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:8954:7919":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:1311:7966":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"12:2392:1647":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:7653:6576":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7236:7625":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6605:7543":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"5:8330:7256":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:2163:1598":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7894:7565":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:50341:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:692:7301":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:12061:60284":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:46350:7223":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12917:8669":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6424:7605":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9210:49631":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:14634:6450":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:46483:7155":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12401:10868":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:15054:6540":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:4065:4606":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"0:2810:2977":{"crate_id":0,"path":["itertools","equal"],"kind":"function"},"2:9767:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:5964:6789":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11152:6492":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:7931:6663":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:51922:10425":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4145:9794":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10673:4714":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:12019:6581":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2507:1692":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3740:6462":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12494:8611":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8293:6664":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:1442:1598":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4255:6738":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"7:0:1479":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:2166:4441":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"12:2036:1598":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"14:189:10835":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:5184:4600":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"12:2404:63227":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13054:8779":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11932:8498":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11738:8458":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:53553:10483":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:3999:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12507:8612":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7226:7624":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11378:7915":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14000:9052":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:8379:4437":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:2768:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5672:7583":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:11137:4699":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:13935:57603":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6110:7567":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4671:9085":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6999:7615":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:2181:6521":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:8929:49625":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4410:9872":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3343:6685":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10200:10778":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"14:231:4440":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:15755:8135":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:53396:10472":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:8362:2643":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:46:9339":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:16027:4354":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:51489:6925":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:7843:7630":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4112:9777":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:6252:7601":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:10854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:12120:6626":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:46558:10853":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11539:8421":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9143:4901":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:49378:5295":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6051:10190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2816:7806":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:51048:10412":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3336:3606":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13098:8811":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5255:10000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:52369:6910":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:5100:4618":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4036:6615":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8843:10872":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:3241:7796":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12155:8542":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:3868:9640":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:12248:6605":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1153:10858":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3181:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:51096:6923":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:10291:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:4964:3750":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:4643:6440":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:4614:9083":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12771:8657":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11962:8507":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:24247:7146":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:52322:6906":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5563:10131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:645:7990":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:13857:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:12167:6631":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:8412:2439":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:6561:6516":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:53047:6927":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:4417:9078":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11304:49634":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:9737:6714":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"9:27:7350":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:10298:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:8250:4454":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:10570:6640":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4419:9878":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"12:2419:4454":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3882:5343":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"12:952:4707":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11981:8512":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4317:9831":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:45988:4524":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:4790:9089":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4475:6471":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3064:7849":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:6257:4495":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7264:7544":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:9067:6601":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:1644:4701":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:3772:4699":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:4516:6468":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:11244:5291":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:1486:4490":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:15217:6529":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:5380:6719":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:3341:4633":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3355:6691":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12234:8552":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5428:10084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8031:6664":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:8447:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10827:7914":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:46679:4557":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13296:8852":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:15354:6718":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:1646:4711":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:46417:7219":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:4443:3490":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:11358:7916":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:10529:10605":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3686:6455":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:13053:4461":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3439:4648":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:23079:6427":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:7174:7619":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9528:3969":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:5488:7577":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9574:7866":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:53405:10473":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1194:11766":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:9005:49626":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:53530:10482":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:13919:6578":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13842:9019":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:51866:10423":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:8882:4544":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:46063:4619":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:12810:7100":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:16029:4356":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5766:7588":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:49733:5318":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5400:10076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:3772:9071":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:1655:4712":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:8601:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10584:7921":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:510:10762":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:10535:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"16:4304:9075":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:49527:5333":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:24065:10316":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:16022:4349":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6620:7819":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12521:8615":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11520:6549":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4023:9736":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:23136:6890":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"12:880:4490":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:11406:8386":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13192:8828":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:6014:7595":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11678:8444":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:3040:10310":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9280:8316":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:23134:6891":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:3280:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7042:7836":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:46049:6987":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:10878:5343":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:12057:10690":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"12:2066:6522":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:22533:4575":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6858:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:49509:5334":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:1492:4702":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:578:9462":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46309:7015":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:1183:7432":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5221:9976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:51121:6915":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"9:1020:7368":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:49609:5329":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2268:6812":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:47923:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:2843:7787":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:4242:8079":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:47534:3490":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:16021:4348":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:4734:9087":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:16006:4336":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:51592:6917":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:11205:5303":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:2543:7948":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:812:7979":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:611:7988":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4470:9900":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:49723:5328":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:24010:10314":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:7295:7546":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12725:8650":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8694:6747":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:3966:9708":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:6086:6728":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:51639:6905":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7786:7539":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6964:4905":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:3264:7797":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:886:7985":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2956:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:5745:6415":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:46647:4555":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10887:8366":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:10312:3600":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:9865:3753":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:10801:10795":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:49767:5325":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:607:10763":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:1534:4709":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8643:6744":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:12128:1598":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11696:8453":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:4852:9091":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4325:9835":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:49862:6843":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:14959:8134":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:16008:4337":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:48133:7159":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:5595:7581":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:2777:7272":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:5269:10001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:12756:8656":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:13781:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:3396:6523":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:45857:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4013:9730":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:7761:7629":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3345:6686":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13282:8851":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10656:8332":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:1666:7445":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"9:0:4308":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7024:7835":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:24219:7183":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9440:8320":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11398:6492":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:5456:7575":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:49248:5286":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:22578:60789":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5779:6416":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:1235:7268":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:46768:4551":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"10:0:4309":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:169:11052":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10407:7875":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1665:9586":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13477:8897":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:53436:10476":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4404:6706":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:49257:1645":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11001:10806":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10953:6613":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:11809:8482":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:37628:125":{"crate_id":2,"path":["core","cmp","Ordering","Equal"],"kind":"foreign_type"},"5:2310:7285":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7205:7622":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:6870:10294":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:6682:7542":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:24496:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:6323:6737":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1195:11060":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11458:8404":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1637:4710":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:12034:6582":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12327:8566":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5998:10167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13497:8904":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6899:10301":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:50171:7107":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6124:10215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"12:777:1598":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11555:8425":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13394:8876":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:4995:9095":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2282:6814":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:1939:4490":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:4515:5354":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:6731:7825":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7667:6577":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3739:4651":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:10596:6662":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:8106:3970":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:584:9465":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5167:9950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:15202:6528":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:13083:5312":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:16028:4355":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11100:7867":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:47679:1598":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:24166:23108":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:7755:4553":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:2794:7514":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:7849:8097":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:23767:6427":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:13129:6845":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3201:6677":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"12:379:7438":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4395:9868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4040:9742":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:8176:7238":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:10579:4581":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4073:9758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:23673:60772":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:519:9425":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:783:8227":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:47671:4699":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4341:9843":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:49276:5287":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:6941:6401":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1522:4707":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:51027:10411":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:10870:6461":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4439:9887":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:3320:7851":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:56361:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"11:54:7422":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:46500:7156":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:3945:9700":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:786:3753":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:13898:9027":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7279:7837":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11146:5327":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:22580:60791":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11159:8379":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:46363:5326":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:49368:5294":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1630:9557":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:56374:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:2052:6520":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:49983:6852":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:3410:4642":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:5801:6419":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11293:10544":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"16:6780:7613":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2966:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:1463:4701":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:8472:1955":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:53252:6896":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:15475:10564":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:32331:4485":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11126:4175":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:28051:6090":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:5960:7776":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3177:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:8384:6664":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"5:8146:61889":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:2218:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8650:6746":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4193:9797":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:0:4310":{"crate_id":11,"path":["adler"],"kind":"module"},"5:6672:4685":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10370:8384":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12738:6674":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:4438:6470":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13258:8845":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10788:10793":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:48558:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:2553:7273":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:897:6643":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:9064:6753":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3434:4647":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12699:8648":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:15033:6582":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:6688:7251":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10160:8327":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:13637:8942":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:55964:6882":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:13799:9003":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4449:9893":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:4762:9088":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2925:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4511:9915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:14129:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"18:152:11049":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11640:8440":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:10591:6648":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:5837:5274":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:511:3792":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:49417:5323":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9659:63237":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:53477:10479":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11822:8486":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7392:7534":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:4477:6472":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4300:9822":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10317:7877":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:3367:4445":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"9:996:7367":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11416:6731":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:50055:6856":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:15073:10563":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:15230:6535":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:6085:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2866:7788":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4293:9821":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:7857:6182":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:49429:3967":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:6510:4548":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:10304:3603":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5632:7582":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1522:9495":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11616:8436":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10179:8329":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:5604:6822":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"12:856:4701":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9631:57601":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:32693:4674":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10468:7950":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:46670:3127":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:10862:6698":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9839:7892":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:46465:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5347:10051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:14953:8133":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:22990:6890":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:46021:4650":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13746:8986":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"either","html_root_url":"https://docs.rs/either/1/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}