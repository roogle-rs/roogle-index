{"root":"0:0:2067","crate_version":"1.0.57","includes_private":false,"index":{"2:12937:21725":{"id":"2:12937:21725","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:21716":{"id":"2:12957:21716","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12589:8849","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12263:458","str::split":"2:12951:21712"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43172:8834","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:28502":{"id":"2:12930:28502","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12929:28492"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43437:8851","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:2464":{"id":"2:12943:2464","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41273:191","prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13032:29712":{"id":"2:13032:29712","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4678:29712"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43471:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:29708":{"id":"2:13013:29708","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:21707":{"id":"2:12922:21707","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12921:21706","str::split_at_mut_checked":"2:12924:21711"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:21712":{"id":"2:12951:21712","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12589:8849","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12263:458","str::split_whitespace":"2:12929:28492","str::rsplit":"2:12957:21716"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43154:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:3027":{"id":"2:13004:3027","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13029:29711":{"id":"2:13029:29711","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4680:29711"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43453:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:21720":{"id":"2:12969:21720","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12263:458","str::splitn":"2:12966:21718","self::pattern":"2:12589:8849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43276:8836","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:29699":{"id":"2:12987:29699","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12589:8849","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12263:458","str::match_indices":"2:12984:29698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43322:8865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:29701":{"id":"2:12992:29701","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:25857":{"id":"2:12931:25857","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43408:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:29706":{"id":"2:13001:29706","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:23183":{"id":"5:5614:23183","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13024:23050"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:30410":{"id":"5:5612:30410","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2396","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2396","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:9195":{"id":"5:5597:9195","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:30406","5:5597:9195","5:5600:30407","5:5603:30408","5:5611:30409","5:5612:30410","5:5613:3374","5:5614:23183","5:5615:23184"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12994:29702":{"id":"2:12994:29702","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:29705":{"id":"2:12998:29705","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12615:8844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:334":{"id":"2:12909:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12910:21683","`u8`":"1:12280:1784"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:21710":{"id":"2:12923:21710","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12924:21711"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:21682":{"id":"2:12917:21682","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:21722":{"id":"2:12972:21722","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:23046":{"id":"2:13021:23046","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:23557":{"id":"2:12928:23557","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43140:3350","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:21683":{"id":"2:12910:21683","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12280:1784"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:23047":{"id":"2:13022:23047","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39244:8987","Self::is_ascii":"2:13021:23046"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39244:8987","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:29696":{"id":"2:12963:29696","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12589:8849","str::split":"2:12951:21712","prim@char":"1:12263:458","str::split_terminator":"2:12960:29695"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43222:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:3153":{"id":"2:13031:3153","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4681:3153"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43462:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:29709":{"id":"2:13016:29709","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:21679":{"id":"2:12911:21679","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41273:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:21680":{"id":"2:12913:21680","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41273:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:23042":{"id":"2:12907:23042","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12137:8853"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:29694":{"id":"2:12932:29694","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43418:8863","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:23050":{"id":"2:13024:23050","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:21723":{"id":"2:12975:21723","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:21724":{"id":"2:12934:21724","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:23054":{"id":"2:13027:23054","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37273"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:21711":{"id":"2:12924:21711","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12923:21710"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:23055":{"id":"2:13028:23055","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37273"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:29690":{"id":"2:12904:29690","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12902:29689"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:23184":{"id":"5:5615:23184","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13025:23051"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12901:29688":{"id":"2:12901:29688","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2067":{"id":"0:0:2067","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.57\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:2062"],"is_stripped":false}}},"5:5596:30406":{"id":"5:5596:30406","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2396","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2396","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:30408":{"id":"5:5603:30408","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:29693":{"id":"2:12920:29693","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12269:1657","crate::ops::IndexMut":"2:3158:3232","str::slice_unchecked":"2:12919:29692"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:28492":{"id":"2:12929:28492","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12930:28502"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43428:8852","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:21706":{"id":"2:12921:21706","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12923:21710","str::split_at_mut":"2:12922:21707"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:29692":{"id":"2:12919:29692","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12269:1657","str::slice_mut_unchecked":"2:12920:29693","crate::ops::Index":"2:38890:3231"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:30407":{"id":"5:5600:30407","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:29703":{"id":"2:12996:29703","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:963":{"id":"2:12899:963","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12263:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:29695":{"id":"2:12960:29695","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12589:8849","str::split":"2:12951:21712","prim@char":"1:12263:458","`DoubleEndedIterator`":"2:7966:131","str::rsplit_terminator":"2:12963:29696"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43204:8869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898":{"id":"2:12898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12899:963","2:12900:2423","2:12901:29688","2:12902:29689","2:12904:29690","2:12907:23042","2:12908:29691","2:12909:334","2:12910:21683","2:12911:21679","2:12913:21680","2:12915:21681","2:12917:21682","2:12919:29692","2:12920:29693","2:12921:21706","2:12922:21707","2:12923:21710","2:12924:21711","2:12926:28519","2:12927:28316","2:12928:23557","2:12929:28492","2:12930:28502","2:12931:25857","2:12932:29694","2:12933:28520","2:12934:21724","2:12937:21725","2:12940:21726","2:12943:2464","2:12947:2422","2:12951:21712","2:12954:21714","2:12957:21716","2:12960:29695","2:12963:29696","2:12966:21718","2:12969:21720","2:12972:21722","2:12975:21723","2:12978:2303","2:12981:29697","2:12984:29698","2:12987:29699","2:12990:29700","2:12992:29701","2:12994:29702","2:12996:29703","2:12997:29704","2:12998:29705","2:13001:29706","2:13004:3027","2:13007:21727","2:13010:29707","2:13013:29708","2:13016:29709","2:13019:29710","2:13021:23046","2:13022:23047","2:13023:23049","2:13024:23050","2:13025:23051","2:13026:23053","2:13027:23054","2:13028:23055","2:13029:29711","2:13031:3153","2:13032:29712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12927:28316":{"id":"2:12927:28316","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12263:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43130:8855","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:21726":{"id":"2:12940:21726","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:2303":{"id":"2:12978:2303","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12589:8849","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12263:458","str::rmatches":"2:12981:29697"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43358:8866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:29697":{"id":"2:12981:29697","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12589:8849","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12263:458","str::matches":"2:12978:2303"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43376:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:29710":{"id":"2:13019:29710","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12550:137","`FromStr`":"2:12549:2384"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41414:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12549:2384","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12549:2384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:3374":{"id":"5:5613:3374","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:21714":{"id":"2:12954:21714","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12405:8840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:29691":{"id":"2:12908:29691","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13025:23051":{"id":"2:13025:23051","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13007:21727":{"id":"2:13007:21727","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:2062":{"id":"0:74-20:0:2062","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[248,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:2062","glob":true}}},"2:12926:28519":{"id":"2:12926:28519","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12263:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43124:8856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:30409":{"id":"5:5611:30409","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:29707":{"id":"2:13010:29707","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:21681":{"id":"2:12915:21681","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10681:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:2422":{"id":"2:12947:2422","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41273:191","prim@char":"1:12263:458","self::pattern":"2:12589:8849"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41271:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12610:8846","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:29689":{"id":"2:12902:29689","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:28520":{"id":"2:12933:28520","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43446:8850","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12966:21718":{"id":"2:12966:21718","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12263:458","self::pattern":"2:12589:8849","str::rsplitn":"2:12969:21720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43258:8838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:29700":{"id":"2:12990:29700","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13023:23049":{"id":"2:13023:23049","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:29698":{"id":"2:12984:29698","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12589:8849","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12263:458","str::rmatch_indices":"2:12987:29699"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43304:8864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12595:8845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:29704":{"id":"2:12997:29704","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13026:23053":{"id":"2:13026:23053","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:37273"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:2423":{"id":"2:12900:2423","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"5:7631:8892":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5653:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:491:9970":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:1929:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:4806:3461":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5557:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:8155:17001":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1809:672":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11137:3496":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:2696:3352":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:42243:2351":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:2723:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:3925:16076":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6689:14723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:12516:17354":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:10824:2379":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:3595:3316":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14560:20616":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:7849:27055":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5436:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:12261:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:700:2427":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2936:16005":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:9496:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:12589:8849":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12824:17107":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:41462:3180":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:43955:9369":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:2478:15985":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:1585:3184":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:497:9971":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:6749:31060":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:10955:8829":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10954:17121":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7446:15142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5283:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7580:16979":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3108:3213":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11730:17231":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:4976:16667":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13674:20563":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:5492:3486":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:2612:15991":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10018:17062":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7590:16980":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7061:16966":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4891:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:4103:31060":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:4386:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8113:3308":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:40484:3518":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1535:10869":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:14986:21335":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:21249:27678":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4143:3427":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6714:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:4129:3425":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12530:17345":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:15473:21375":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:7047:3570":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:3016:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:12230:24133":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3810:16030":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:43222:8868":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:41856:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:5940:3165":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:22233:3701":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:40063:9159":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:2788:15999":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:30219:8909":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:0:2198":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:10836:23918":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:2542:28730":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:9068:2347":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6586:31060":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:32902:3568":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6991:32717":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:11549:3501":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:8175:17002":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:45148:3621":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13785:17288":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:40284:9178":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:8029:15524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10870:3311":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:4882:16642":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:5401:31060":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11770:3398":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2708:15995":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14587:20617":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:42335:2353":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:6588:16947":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:5863:16915":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:4316:8802":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:9212:24113":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43124:8856":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:1891:3183":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:559:9977":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:22:791":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11324:17188":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5400:16903":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7633:32571":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:3283:3370":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3119:2392":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:2944:9207":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:15126:21342":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:860:32828":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:5700:16905":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8450:3348":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:12105:9309":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:44063:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:2983:24155":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11124:3495":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5134:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:39932:3229":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:39656:3154":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4992:13947":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:23065:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:2569:2382":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:1169:30838":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:1354:3196":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:43874:9349":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6620:16949":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:15376:21364":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5181:13963":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:13252:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12225:17301":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:4523:8946":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:687:3180":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:45215:3586":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6606:16948":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:22200:3702":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:44088:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:15092:21339":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:45830:3655":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:22155:9237":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:11788:17281":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11799:17282":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:41354:2345":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:46296:8751":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:5708:8913":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:45422:3593":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:45169:3626":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:1607:3200":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:31761:2186":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:15023:21337":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:14131:20588":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15992:21554":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:7539:16975":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5296:13977":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12175:17314":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:515:21607":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:8188:17003":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12887:17110":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7690:3184":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:45680:3634":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:15010:21336":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:15078:17140":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:9999:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2338:15978":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:6693:3522":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:8351:15722":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1653:10879":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5367:16901":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:22312:28140":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1555:3187":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:9465:3254":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:7330:9848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11812:17240":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:4502:16538":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"13:109:32373":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7473:16971":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11526:27010":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:42542:28368":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:15814:21395":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:3740:31060":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:22449:28091":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12454:17335":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2636:15992":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12478:17337":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:46261:8748":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:1885:3254":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:1917:3199":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:1025:3194":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12201:17327":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14311:20599":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:4437:31085":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:9163:3535":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:42532:2375":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12808:17066":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:4843:3434":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:44066:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4230:25851":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41211:3390":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43748:8889":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11595:17226":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"14:160:15902":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:16032:20058":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:45297:3659":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11583:17196":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:645:3159":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:33216:9212":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:7546:15149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:39699:8970":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11128:17133":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22228:3703":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:43584:8882":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10610:3367":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:7485:15146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6962:16961":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:1581:3183":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:13529:3206":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4742:23935":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:31730:17007":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:22603:3402":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:30600:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13972:20577":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:6819:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8551:3449":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12371:17112":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7931:3136":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:5191:13964":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:7461:15144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:15720:21388":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:12663:8873":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:1098:17138":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:6738:14729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"15:327:15931":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:22050:3708":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:6277:27040":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:7339:15139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39830:28154":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10478:27052":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2471:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:8253:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:8108:3310":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"18:80:21581":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14868:21329":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:2443:3301":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12647:17343":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"11:2352:3195":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:44129:3716":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:2287:30873":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:10880:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:13538:20077":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:15273:21354":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8796:2379":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:14402:20605":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13497:20074":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:3077:8783":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:40260:3349":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:37652:9221":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:21968:3706":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:8019:3258":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:31847:8777":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:8473:3351":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:578:9980":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:39051:9225":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9105:3539":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7398:30868":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:7006:16963":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4800:13927":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:41406:3141":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:9633:3310":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:9113:2427":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:1862:3248":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15301:21357":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:11711:8821":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:8006:15522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"15:0:2195":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:872:32625":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:403:17081":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:43418:8863":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:1596:3198":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:45851:3589":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5031:13951":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6976:16962":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14723:21324":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:928:3189":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:5260:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2966:8781":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:42495:3323":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11543:24120":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:7452:15143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:35611:9217":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5960:16918":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:7575:15151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:40010:28496":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:3196:16009":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:39972:9164":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:837:3188":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:5449:8807":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1939:2328":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:3366:3367":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:8467:3350":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:45475:3654":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:3126:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:10241:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7602:15153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:8019:2393":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"15:394:15938":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4281:3456":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5897:16916":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:12246:24065":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5515:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:12276:863":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:9284:24069":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:2554:32324":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10982:17122":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:15281:21355":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15836:21397":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12422:17334":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:31751:9273":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:32843:3566":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:9354:3525":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:15582:21378":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10350:17095":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2634:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:42297:2351":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:7891:9154":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:3647:2379":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:4467:3332":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43276:8836":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4876:13933":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:4560:16550":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13363:20064":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11576:23819":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46005:3595":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:1107:15890":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10889:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:7813:16992":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:45591:27904":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11075:17141":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6494:16941":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7497:16972":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3244:3198":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5407:1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2499:2204":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:12270:1745":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4909:13936":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:3597:17267":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:4641:16562":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:15151:21344":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12043:17245":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12056:17246":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11497:17169":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:16093:21557":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:44167:8770":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:22590:3403":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:33735:9216":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6542:14711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:9403:3564":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14012:20580":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:5083:1244":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:41895:3513":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:570:9979":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:10251:24154":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:6398:16933":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:38810:8928":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:1496:10864":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12572:17101":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:43555:8880":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:10607:3371":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:7306:10018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:15222:21351":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:787:3182":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:43408:3347":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:7741:16988":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:7516:15147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6721:14727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:4821:17349":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:10612:17098":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:33389:9213":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"14:40:20057":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9119:3536":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:7421:28269":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6504:16942":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8588:3484":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:5682:3493":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:4412:3458":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:9178:3538":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13252:20058":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5307:16883":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:7251:2435":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:9136:3534":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2854:16002":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:43304:8864":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:0:2196":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:4390:8935":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11214:17132":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45201:3638":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:5351:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22186:2180":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14271:20596":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:43902:9368":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:7649:24144":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:5756:16908":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:15313:21358":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6678:14722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:39722:8973":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:41337:3180":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4959:13942":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21340:3578":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:42000:2355":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11293:17162":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:31818:9186":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4787:13926":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:21883:3577":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"9:502:15770":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:10399:3350":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1671:10881":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13855:20571":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9984:17089":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:43172:8834":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13832:20569":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14212:20592":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8430:3317":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:41233:3391":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8130:3309":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11574:15885":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13024:17115":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:7913:3151":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:41320:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6417:14701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11174:3320":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:6874:14763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8186:3361":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:726:21602":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:1051:3195":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:2508:15986":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5415:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:7428:30698":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:14341:20601":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:883:3192":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10622:32938":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8813:2381":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43204:8869":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1724:31060":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:1580:10873":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:5415:32713":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3577:2331":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12408:17324":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:7727:16987":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:21261:27673":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:6435:14702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5385:16902":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3871:3184":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13485:20073":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:621:2330":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2876:8778":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:38906:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:43727:8887":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8194:3217":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6532:16943":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:21203:27676":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:7100:31100":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:4174:8932":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:21448:2180":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:6385:16932":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:45253:3598":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:7984:9926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6532:14710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:725:2180":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:13723:20564":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:4856:16639":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2756:30844":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:2234:30769":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:1663:10880":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:2304:3193":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:21459:3575":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5382:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2878:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:4108:28136":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13986:20578":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:15608:21380":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11825:17262":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5927:16917":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:7545:3270":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:33020:9209":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:3029:16008":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14051:20583":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:30627:8982":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:14855:21328":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:22365:28163":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2674:27052":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:7549:16976":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:1054:3194":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:7359:15141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14038:20582":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11419:17101":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:39801:8965":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:45101:3625":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:473:9967":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11615:24357":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:7297:23560":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:4268:3332":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:41737:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7412:2427":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"14:7:15902":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:21771:27680":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11209:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:10395:9321":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:867:32573":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:10036:2362":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:2477:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:1639:10878":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:1910:3198":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9638:24147":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:1526:10868":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:43064:8833":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:45492:3660":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41011:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:868:3202":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:0:968":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1478:3180":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:774:3181":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:14284:20597":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22556:28073":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6729:14728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:41271:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13272:20059":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:597:17083":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:1534:3185":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41049:3388":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2956:8779":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:6102:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"10:36:32292":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:1887:3255":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14912:21331":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:39782:8969":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:15:2306":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:7225:27058":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:4120:28135":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:3026:31006":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:14386:20604":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:30251:27969":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:6475:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:437:15951":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:37542:9219":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:21759:3571":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4740:23933":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:9688:28598":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:45443:3599":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12150:17248":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:3396:3184":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4089:3423":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:6696:3523":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:43886:9350":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:42288:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:8545:3460":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44142:3713":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:16187:21564":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:941:2379":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:14414:20606":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:31:15902":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4979:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6066:16922":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13211:20056":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:38921:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:102:32316":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:42503:28525":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12049:23552":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:8301:17008":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8492:3394":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:13225:27736":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:9258:24116":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2929:3565":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5361:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1887:2427":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:893:3183":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:5506:3487":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12300:17330":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:4940:16654":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42007:2362":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:2902:16004":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:3244:27257":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11102:17135":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:16105:21558":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:13753:20566":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:2295:9237":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:828:3201":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:3129:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15400:21367":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4965:13943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:588:3152":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9344:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:12604:8847":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5665:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:42963:8824":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5336:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:726:3404":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:45507:3661":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:2175:17210":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:2281:649":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:44070:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6447:14704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:15701:21387":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:3329:16010":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1828:3184":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:9263:24123":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1503:10865":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5400:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:39662:8933":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:2112:3219":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:10681:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:10232:3248":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:22497:28076":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:2684:15994":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:6940:8915":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:40125:9176":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:15822:21396":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:21279:2180":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:45718:3588":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:7998:3163":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4824:13929":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:31744:8944":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:5037:16682":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1062:31060":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:43882:9352":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"11:1566:15892":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8746:2377":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2961:8780":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:39963:9157":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43322:8865":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:7703:3508":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:13401:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:44190:28532":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:485:9969":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:3538:3314":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12792:17065":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43534:8879":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6491:14663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4952:13941":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5014:13949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:1325:3195":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6574:16946":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:11647:17227":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4743:16618":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14847:21327":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6519:14708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:396:32308":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4081:3422":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5002:13948":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:29789:3400":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2440:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:6153:3332":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:2369:15895":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:4811:13928":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:10038:2363":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:362:3150":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46281:8750":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7529:3140":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:43870:9347":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5643:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46182:3607":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:11149:8837":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15596:21379":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6379:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"8:0:2189":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"9:330:15823":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13814:20568":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:8294:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:11661:17198":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15214:21350":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5052:13954":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11025:27013":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:113:21583":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2382:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:43113:8859":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8164:3179":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:5061:3332":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9271:16968":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:1490:10863":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:10042:2360":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:42954:8825":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13774:17287":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:15197:21348":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:15102:21340":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:939:3190":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"9:482:15766":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:1207:17146":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:41199:3399":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:22614:3417":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14147:20589":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:15356:21362":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5200:13965":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15418:21369":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46345:8754":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:45651:3628":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5306:13978":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:40054:9171":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10545:27049":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5352:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:11865:17285":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:517:9972":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5624:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:7306:32492":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:43761:8870":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:6364:3530":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:10025:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11392:17172":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5250:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:38890:3231":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12464:17336":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12399:17333":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:4469:8944":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6353:16931":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:5483:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:7366:3484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15383:21365":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13325:20062":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4916:13937":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1593:10875":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5370:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46250:8747":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:4332:3457":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:581:8982":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:22074:2180":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:6466:16939":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12318:17113":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:811:3184":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:31726:2633":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:5846:16914":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40095:9174":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:491:33602":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12557:17141":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:15569:21377":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6120:16925":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1565:10872":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5598:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5754:3531":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:38894:9223":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15138:21343":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:37487:9218":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12768:17063":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:6750:3528":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:12285:937":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:3769:3393":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3737:2427":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13738:20565":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:5914:32454":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:14436:20607":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10968:3497":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11621:24364":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8533:3390":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:2401:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:6309:24126":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:5719:3332":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6665:16952":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6746:14730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:6581:3518":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10317:17094":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:45069:3584":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41993:2354":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:150:15954":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13146:17385":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:8073:16997":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:589:28531":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6300:16928":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"10:44:15877":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14475:20610":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:351:32304":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:2427:3029":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:12615:8844":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6821:14736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6802:15920":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:1160:3196":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43003:8815":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:10604:3369":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:8226:17006":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2355:15979":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:3095:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6026:16920":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5677:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3335:8930":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5376:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:12280:1784":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:7887:9155":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12089:17243":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:3264:17244":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:46437:8758":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10936:3490":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:2536:32322":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:3806:3218":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5861:3514":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3791:3217":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11755:17233":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14545:20615":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:43042:8814":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11156:9368":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:16249:21569":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:6560:16945":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:1575:3216":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13922:20574":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"14:187:15910":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2418:15982":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:5162:26115":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:12405:8840":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:3614:16012":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:10218:17061":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:5074:2336":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15289:21356":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"11:328:32296":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5236:13969":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10828:33545":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40518:9150":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:710:3186":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3368:3368":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:1621:10876":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:3669:16013":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13999:20579":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:31849:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12683:17347":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:39912:8813":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43570:8881":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11227:17131":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:33562:9214":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4139:3426":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:9199:3516":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12659:17342":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:11524:17222":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12274:730":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:45311:3573":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6900:14764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8802:2380":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:4031:3332":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:11031:27051":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:7537:15148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:42992:8827":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8565:3452":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:43920:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"11:875:3191":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"2:10032:2355":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5146:13961":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:41659:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:8393:9153":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11686:24148":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:6388:3719":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:43358:8866":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5617:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:5239:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11239:24337":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1826:3238":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:39684:28099":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:640:3158":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:3158:3232":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:924:3203":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12289:17294":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:573:33604":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:2441:3300":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6768:14733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:6657:14719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:7984:3162":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11367:17141":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:46203:3641":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:8012:15523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10092:17091":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2423:2427":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6749:16953":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:41345:2427":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:43601:8883":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:45553:28037":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:11066:8835":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:40033:9170":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:39712:8972":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:9385:3320":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:12291:9356":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:2808:16000":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:16259:20066":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7559:16977":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13606:20082":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:545:9975":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:7321:2345":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:15333:21360":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:15678:21386":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:15616:21381":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:356:3149":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:22141:3712":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7098:32431":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7912:2180":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:538:9974":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:12823:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:38943:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10917:24043":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:13474:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1578:2427":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:37597:9220":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6664:14720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10887:33544":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10044:17090":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:45268:3604":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7755:16989":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:670:21598":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14463:20609":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:2764:2183":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"9:53:15786":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:8306:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:21247:27669":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4845:3437":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15426:21370":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:43029:8813":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:8197:15685":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10769:33003":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:5008:943":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6811:14735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:800:3183":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11256:17160":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:6872:16957":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:533:3131":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:39857:3273":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:4459:8943":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:16069:21555":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:13455:20071":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:4570:8947":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12724:17106":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:4424:16506":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11826:8764":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:15168:21345":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:2205:30870":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:1494:2427":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5277:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:13955":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9223:3130":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:4238:3332":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:4587:16554":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4924:13938":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:9148:3537":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10915:33106":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:10461:28372":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5039:13952":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:0:2190":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3237:2379":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7558:28154":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13344:20063":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7656:16984":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:922:3188":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:1072:3196":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:39244:8987":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:21215:27676":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13064:17067":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11016:17124":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9807:17070":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:3278:3197":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11510:17168":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3586:24293":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1063:3195":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7648:16983":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10155:16902":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12851:17108":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:3520:3315":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13509:20075":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14752:21325":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9938:17088":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"14:202:8890":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:15748:21390":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6047:16921":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13526:20076":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:2453:3306":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11443:17177":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11014:27045":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:5314:13979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:3329:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15342:21361":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:1590:3197":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5122:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:22418:28100":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:22583:28523":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:10671:2180":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:5796:9168":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2425:3296":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2049:8786":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:4308:2379":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"7:78:15745":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:4067:3421":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:3283:30997":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:14091:20586":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15635:21383":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:3475:16011":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:4148:3180":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:32961:9210":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1516:3181":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:1309:3193":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:16121:21559":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10817:3483":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12264:17298":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11853:17284":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:8317:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:9332:3517":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:39741:3154":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:45186:3632":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:3025:2488":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:14260:20595":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:43428:8852":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11674:17228":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:31762:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11405:17171":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"11:1142:15891":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:41479:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13594:20081":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5174:3445":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13173:17386":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10710:17100":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12127:17250":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:5686:16904":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:680:21599":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:15116:21341":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14529:20614":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:41817:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:45340:3627":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1547:10870":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:45054:3619":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:7573:3268":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:21230:27666":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:41620:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12543:17344":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:6086:3530":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:15957:21553":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:45378:3639":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11189:17137":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:42550:28369":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2528:15987":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:46270:8749":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2644:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2934:3567":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:1628:10877":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:7597:8801":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:2562:32320":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:5526:3488":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1485:10862":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6764:3529":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:11063:17145":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:39941:3348":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9886:17086":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:5006:16674":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:6419:9180":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:3473:17249":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:1923:3200":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:21881:2180":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4803:3481":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12929:17112":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:8259:17007":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:5193:26115":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:39845:3271":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:43462:3154":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:43437:8851":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:2087:3217":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:2435:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10284:17093":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:945:3191":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:31817:2395":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12508:17339":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:8643:2340":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10185:17060":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12189:17326":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:7514:3177":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:8178:26163":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10573:33395":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:294:2396":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:4543:3139":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:689:21600":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13387:20066":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:38961:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6317:16929":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8142:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:6608:9160":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:43446:8850":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:45361:3633":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:12275:881":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42750:28170":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:5266:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:32237:9206":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:39001:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:11089:17136":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12949:17113":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5781:16910":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4942:13940":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:5419:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7888:16995":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:8247:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5536:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40024:9169":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:5528:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9858:17085":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:9063:3495":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11142:17101":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:43898:9346":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1824:3237":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:10249:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:9359:3526":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"11:1903:3197":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:45524:28074":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:40499:3377":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6629:14716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:43676:8885":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:6788:32137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12030:17247":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13116:17384":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:2591:3359":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:3270:3199":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:4901:3439":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6585:3519":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:6609:14714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14449:20608":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4932:13939":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:698:21601":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2660:15993":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:11135:8839":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:14246:20594":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:4738:23931":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:2631:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12262:1137":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:41776:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15176:21346":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:523:9973":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2878:16003":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:9251:26151":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8158:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:14994:21323":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12342:17297":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6650:14718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4031:3420":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:9683:28278":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:12278:875":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:43713:8886":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11166:17139":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10534:33543":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:635:33630":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12863:17109":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:39819:3272":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:15249:21352":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:21352:3575":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13399:20067":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:538:21609":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:39954:9156":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:42014:2363":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:44080:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:553:9976":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43878:9348":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10253:26158":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2458:15984":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41093:27887":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:41329:2379":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:7809:26128":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:2303:15949":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4897:13935":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:217:8789":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7085:32833":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11841:17283":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:2101:3218":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9230:24056":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:4802:16631":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5457:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14356:20602":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:4395:8936":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14298:20598":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:11667:8823":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:6670:14721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:45813:3606":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11715:17230":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:9981:2331":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4531:16544":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:4928:28398":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:0:2197":{"crate_id":17,"path":["object"],"kind":"module"},"2:39814:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:45701:3640":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2323:15977":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"18:531:21608":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:8387:3210":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13308:20061":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8431:28277":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41385:2346":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:8300:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12328:17295":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8559:3395":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10419:17057":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:10951:24053":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11051:17151":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:2548:32307":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2140:3194":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:521:21604":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13473:20072":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11153:17102":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13877:20572":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:42260:27888":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:8786:2378":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:30240:2351":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2637:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:5107:16706":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:6619:28370":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6412:16934":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:6409:14700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:11107:8838":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9046:3494":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:951:3192":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"19:0:1235":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6263:32829":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:2525:30835":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:6763:14732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:8384:2383":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7014:16964":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:2469:3184":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:532:2848":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:6895:16958":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3238:26359":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:10289:3324":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12388:17323":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:9179:8845":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14876:21330":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7799:16991":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11269:17161":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:32423:9205":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7769:16990":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:40086:9173":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:41414:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:9781:17084":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:8584:3482":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:5542:3489":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11378:3289":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:4073:3183":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:5018:3480":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:46375:8756":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"7:0:1834":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:39982:9165":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15931:20055":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:6049:9569":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13959:20576":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:43055:8830":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:9501:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:8708:2375":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:11877:17241":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7379:32481":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:6261:3717":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6940:32825":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:5912:3183":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40526:9152":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10137:17055":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:4500:31085":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10410:24145":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:42754:8816":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2548:15988":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7052:16965":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:15655:21385":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"20:0:2062":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"6:5244:13970":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11688:17194":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8480:3347":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5212:13966":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:39775:8968":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5477:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:45133:3591":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:673:2379":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:5769:16909":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10899:3313":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:11702:17229":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13015:17071":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:12549:2384":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:4155:8776":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:4693:3478":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15390:21366":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"9:424:15769":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:5910:9158":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"14:214:15911":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:12286:1844":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:22102:9237":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:3304:3200":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3406:8785":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:42520:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:849:3180":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5225:13968":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:7966:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:718:21594":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11567:17225":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:6524:14709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:7389:11007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2606:2180":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14599:20618":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43866:9344":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:5466:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:5895:2341":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:42982:8826":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:31737:28728":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"7:31:15738":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3415:3356":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12287:1357":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:39875:3287":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6698:14724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:3032:31003":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:299:32310":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6278:16927":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:3325:3372":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:3241:27256":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:7075:31065":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:12269:1657":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:12121:9311":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39673:8971":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:9340:3332":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:41698:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5083:13956":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2394:15981":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:2379:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:21332:2180":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:45460:3605":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:7584:15152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3936:3398":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11440:3288":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:13046:17068":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:669:30988":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:3488:3332":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:1863:2526":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:11634:8822":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:6231:16926":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10720:32865":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5742:16907":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:6185:27042":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2297:9238":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:14503:20612":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"15:306:15927":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:8216:17005":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8486:3395":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:15445:21372":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:2274:3292":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10524:17097":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:623:33629":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:706:8847":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3018:9215":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:3251:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:8288:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:10125:23899":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:5679:3491":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10671:33473":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:10319:3500":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15778:21393":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7456:2427":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:8271:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:4485:3450":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5160:13962":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7528:16974":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5611:3490":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6543:16944":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:9916:17087":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12433:17071":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:903:3184":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"5:1153:30956":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:3028:30843":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:5868:3515":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:3369:8782":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4728:3424":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:1741:9131":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4151:3428":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43944:3569":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:1582:15893":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5565:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"9:447:15767":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7823:16993":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:11590:23556":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1559:10871":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:42272:28034":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:9089:3497":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6782:16954":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14235:20593":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:22521:27900":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:364:32312":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13568:20079":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:12282:1772":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:7412:10992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:909:3185":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3458:3377":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2279:3293":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:8169:3178":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:7868:27047":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2628:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:7356:9162":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:513:17082":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:859:2427":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12993:17114":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:123:32317":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6505:14664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"11:1883:2379":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"9:238:2375":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14977:21334":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:261:32625":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6471:14706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11749:3396":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:15410:21368":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:16050:20059":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:40470:28547":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:30187:3212":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:14189:20591":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:7643:3376":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:4718:16616":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:12235:3164":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:3660:3180":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:46050:3629":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:22483:28156":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:4:1218":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13089:17383":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8497:3386":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:279:31060":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8103:2525":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:7111:32832":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:8265:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10997:17123":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13553:20078":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12238:17300":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:16138:21560":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:1087:32315":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:4273:8950":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6915:14765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:507:33604":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6028:3512":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10877:17103":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:6667:2427":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:2998:16006":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:15646:21384":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:659:21597":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:2383:2379":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:10848:3180":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7686:16985":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:7357:9163":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:41470:2427":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:31688:3498":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:4095:3424":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:918:3187":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7570:16978":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:7503:2382":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:643:33604":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:40:3233":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1544:3186":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:1040:3193":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46398:8757":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:43154:3351":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6478:14707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"9:178:15872":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13797:20567":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:43084:8832":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:21334:3574":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14079:20585":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:45606:3622":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:41581:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:542:32609":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6634:16950":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6706:14725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:2728:15996":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1510:10866":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9755:17054":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:7339:3214":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"9:392:15768":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:4747:8959":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41065:3389":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:21730:2180":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"11:856:3190":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9737:17056":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:6636:14717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:481:21605":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8120:3311":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6079:16923":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:2592:15990":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:43890:9351":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:46224:3662":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5075:16697":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5588:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9217:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:11148:24039":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10439:17096":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"13:226:32325":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:45236:3592":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:38981:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5020:13950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:2203:17170":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46241:8746":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2883:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12485:17338":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13187:20055":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:42735:9337":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:6621:3527":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:7561:15150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:43258:8838":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:7388:3220":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:13277:8991":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:45928:3623":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:9671:17058":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8272:3363":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22541:27894":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:9097:2379":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8460:3349":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:39733:8861":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:6540:3183":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:45116:3585":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7144:16967":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13946:20575":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:15760:21391":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"9:357:15783":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:3605:3342":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:6407:3720":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:10916:8840":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6480:16940":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:12277:869":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12900:17111":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:9076:3496":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11709:3397":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6597:14713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:40493:9148":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15039:21338":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:41177:28146":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:42511:3325":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:479:9968":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:38846:8784":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:914:3186":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12621:17348":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:2660:3360":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:4986:17355":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:14968:21333":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:45084:3620":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:6930:8914":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8397:3376":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:39992:9166":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:2037:17176":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2271:3291":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12494:17302":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:8118:16999":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:11537:17189":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:5445:8806":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15456:21373":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6756:14731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:22100:29096":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:5211:3512":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11026:17125":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6342:32576":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:3834:3396":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:22012:3707":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:3323:3371":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6813:16955":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:16198:21565":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:7368:3183":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11898:17261":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6948:16960":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11773:17280":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:2195:3127":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10502:3494":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:46322:8753":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6775:14734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:15206:21349":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:42233:27973":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:43649:8884":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:4615:3462":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10846:3308":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:41397:9294":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:12367:9357":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12107:17101":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1968:2329":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11341:17174":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"0:0:2067":{"crate_id":0,"path":["thiserror"],"kind":"module"},"17:14575:17071":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:1574:2379":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:6880:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2748:15997":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:2234:17195":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:4252:3453":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:7604:16981":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8731:2376":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14489:20611":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:45393:3587":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:41542:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"15:288:15926":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:1723:10886":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11915:17286":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:3036:31004":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:6621:14715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:4260:3454":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:31760:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5320:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10284:3322":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12353:17331":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:10040:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2640:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:9626:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:4830:16636":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7910:16996":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4062:16190":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44178:8768":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:7429:10990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:4771:16623":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5630:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:11115:17134":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:41251:3392":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:39768:8967":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:40270:9177":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:765:21596":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5489:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:7348:15140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:8341:15721":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:21735:3581":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:7428:16970":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8540:3459":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:3123:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11042:17126":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5445:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12671:17378":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:4614:16558":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40508:9149":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:1692:3446":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15624:21382":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:7356:3204":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10661:17099":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13235:20057":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40111:9175":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12351:9355":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12707:17105":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:7404:25845":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6160:15948":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:3354:27869":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:465:9966":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:4132:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:481:27038":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7621:8891":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12076:17242":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:12266:1256":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43779:8871":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12597:17350":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:8282:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"11:2231:15885":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5671:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10908:24063":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:96:21582":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10170:16903":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:3249:31002":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:9828:2352":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:14177:20590":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2888:2530":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12281:1766":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11467:17175":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15944:20056":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:7585:3269":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11743:17232":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"11:2403:3180":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:5581:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"13:0:2187":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:1585:10874":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7618:16982":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11191:23821":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:14933:21332":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:43894:9345":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:11604:23820":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:5995:16919":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:1707:10885":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"10:0:2191":{"crate_id":10,"path":["adler"],"kind":"module"},"16:3899:16073":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:2607:8986":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:1189:30957":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8418:3313":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:5102:13957":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6562:14712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"14:220:15912":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:7448:2427":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6433:16936":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3018:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5344:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"11:742:3187":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6648:16951":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:9349:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8267:24143":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"11:2124:3193":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:43100:8862":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10905:17104":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:564:9978":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4593:3461":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:8202:17004":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4971:13944":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:651:33604":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:5831:16913":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:608:33622":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11621:17199":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:14516:20613":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7397:32426":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5290:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5112:13958":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10652:3135":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:7695:16986":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12584:17102":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:40076:9172":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:16151:21561":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:4924:3433":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:7798:17083":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5347:16900":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11491:24335":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:10841:24360":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:21232:27671":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:43376:8867":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:2838:16001":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3014:16007":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6758:15921":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:16212:21566":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:14025:20581":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1463:2379":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:503:3127":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:8259:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40001:9167":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:39071:8925":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6335:16930":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:6907:8913":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:0:2192":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:256:32573":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1517:10867":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:7924:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8262:26126":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13424:20069":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:38231:9222":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:21193:8982":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:44151:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2925:9185":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:12595:8845":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:1854:27983":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"11:1066:15889":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7467:15145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:9327:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:12284:1760":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:8136:17000":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3603:3183":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"18:563:21610":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13412:20068":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:10993:8841":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:13439:3714":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"11:434:32298":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:4242:8949":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13292:20060":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:45763:3594":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:836:2379":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5472:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:16269:20068":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6098:16924":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:46124:3635":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:832:3185":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:7956:3135":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"11:430:32314":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1686:10883":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6927:16959":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12251:17299":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7168:16968":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13581:20080":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:43130:8855":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5502:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:13419:3717":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:39021:3171":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:21281:3579":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:557:3133":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:15368:21363":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:12610:8846":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:5802:16911":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:42972:8828":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5423:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4985:13946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:1007:3193":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:4268:3455":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:2307:30788":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:7314:10821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:39905:3312":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:11121:8836":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:6849:16956":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:45792:3600":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12362:17332":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:41395:2178":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3831:3397":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:4514:8945":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12443:17325":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:1840:9247":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:42314:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:12137:8853":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:8328:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:15734:21389":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46307:8752":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40042:9179":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:12264:1805":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5636:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:10044:2361":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:7937:2394":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12213:17328":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:45282:3653":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:2438:15983":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:880:3182":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1525:3182":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:5623:3332":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:1699:10884":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:21457:3576":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8406:3378":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"14:165:15903":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:1676:32318":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:3314:9224":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:46153:3656":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:5817:16912":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7132:32827":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:15434:21371":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4837:13930":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15521:21376":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:1896:3184":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:7928:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43453:8860":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10759:17101":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:39058:2634":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:30225:9122":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46095:3601":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11764:17234":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:39756:8966":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:5390:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11845:15935":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11547:17223":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:735:21595":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12695:17346":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5329:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"14:0:2194":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14325:20600":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:6460:14705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:12263:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10251:17092":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:43140:3350":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13899:20573":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:10034:2354":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:12283:1778":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:5557:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13375:20065":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:3341:8929":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10818:17102":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10493:27744":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:4966:3379":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:32609:9208":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:5009:3479":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:41396:2348":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:12279:856":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11605:17221":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42903:29459":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14111:20587":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13437:20070":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9052:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:40135:9161":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:12288:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:586:9981":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:7254:26695":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:1648:3332":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"2:22505:28101":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:754:21603":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15799:21394":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:5747:3530":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:2326:3194":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:39885:3286":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:15190:21347":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:16079:21556":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5046:13953":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:10859:23938":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:0:1649":{"crate_id":1,"path":["std"],"kind":"module"},"2:7473:9144":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:1975:759":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:16235:21568":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:45574:27891":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10068:17069":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:0:2188":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:5740:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12969:17059":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:637:3157":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2712:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:41033:3387":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15058:21322":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11313:17163":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13844:20570":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:3842:16039":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:3281:3369":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:11028:8834":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:22088:3711":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:8004:3257":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:9367:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:43074:8831":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:2443:3183":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:4468:16527":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:16176:21563":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:6456:16938":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:7348:2427":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:12267:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:867:3181":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14788:21326":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:8075:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:2151:3195":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:11838:26148":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:16165:21562":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:4870:13932":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:22472:3401":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6442:16937":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:41503:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7509:16973":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:46360:8755":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11634:17197":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11557:17224":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5546:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7857:16994":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:11469:26131":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:39749:8860":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7355:16969":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14372:20603":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:16223:21567":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:12278:17329":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:8093:16998":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:15463:21374":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11493:17182":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"11:1603:15894":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:10873:3351":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5219:13967":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:1340:3194":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:7706:8910":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2768:15998":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:2735:3362":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3324:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:3778:16021":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7936:3138":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:12328:9358":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"12:0:2193":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11354:17173":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:598:33626":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12268:1623":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:2572:15989":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:4352:16457":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11852:15935":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13766:17289":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:844:3189":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10928:3258":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:15769:21392":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9304:23554":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:5722:16906":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:6614:28539":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:8610:3436":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:41454:2379":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:33079:9211":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43471:8861":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:12214:24070":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4864:13931":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:6412:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22433:28533":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8660:2374":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:7378:3205":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:1771:1298":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:40477:9146":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:25465:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:1680:10882":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:43738:8888":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:1734:648":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:10030:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:613:33609":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4885:13934":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4907:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:2374:15980":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6427:16935":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:4037:3419":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15324:21359":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:1602:3199":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:12273:714":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:4847:3438":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4913:16650":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:14066:20584":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11242:17159":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15266:21353":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10393:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:44121:3715":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}