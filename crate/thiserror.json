{"root":"0:0:1794","crate_version":"1.0.44","includes_private":false,"index":{"5:5529:22690":{"id":"5:5529:22690","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12274:22693"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:29337":{"id":"2:12265:29337","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150":{"id":"2:12150","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12151:823","2:12152:2152","2:12153:3064","2:12154:29315","2:12156:29316","2:12159:23446","2:12160:29317","2:12161:316","2:12162:315","2:12163:24511","2:12165:24512","2:12167:24513","2:12169:24514","2:12171:29318","2:12172:29319","2:12173:24533","2:12174:24534","2:12175:26803","2:12176:27246","2:12177:22665","2:12178:3299","2:12179:3297","2:12180:22739","2:12181:29320","2:12182:2980","2:12183:24549","2:12186:24550","2:12189:24551","2:12192:2193","2:12196:2151","2:12200:22738","2:12203:3298","2:12206:24543","2:12209:29321","2:12212:29322","2:12215:24545","2:12218:24547","2:12221:29323","2:12224:29324","2:12227:2034","2:12230:29325","2:12233:29326","2:12236:29327","2:12239:29328","2:12241:29329","2:12243:29330","2:12245:29331","2:12246:29332","2:12247:29333","2:12250:29334","2:12253:2597","2:12256:24552","2:12259:29335","2:12262:29336","2:12265:29337","2:12268:29338","2:12270:22687","2:12271:25646","2:12272:22691","2:12273:22692","2:12274:22693","2:12275:29339","2:12277:3439","2:12278:29340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12183:24549":{"id":"2:12183:24549","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:823":{"id":"2:12151:823","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:2151":{"id":"2:12196:2151","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:29335":{"id":"2:12259:29335","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:29336":{"id":"2:12262:29336","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:29997":{"id":"5:5514:29997","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12227:2034":{"id":"2:12227:2034","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11852:3186","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatches":"2:12230:29325"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43836:9126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12277:3439":{"id":"2:12277:3439","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4543:3439"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43940:3440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12218:24547":{"id":"2:12218:24547","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12030:421","str::splitn":"2:12215:24545","self::pattern":"2:11852:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43754:9097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12161:316":{"id":"2:12161:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12162:315","`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:8387:1907","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12189:24551":{"id":"2:12189:24551","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12233:29326":{"id":"2:12233:29326","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11852:3186","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatch_indices":"2:12236:29327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43782:9124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:29316":{"id":"2:12156:29316","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12154:29315"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"generic":"T"},"items":["0:12:1910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12271:25646":{"id":"2:12271:25646","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39702:25781","Self::is_ascii":"2:12270:22687"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39702:25781","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:24543":{"id":"2:12206:24543","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11852:3186","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split":"2:12200:22738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43650:9095","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1793":{"id":"0:58:1793","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:59:1914"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}}},"0:63:1914":{"id":"0:63:1914","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3389:1912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:29321":{"id":"2:12209:29321","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11852:3186","str::split":"2:12200:22738","prim@char":"1:12030:421","`DoubleEndedIterator`":"2:7310:121","str::rsplit_terminator":"2:12212:29322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43682:9129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1911":{"id":"0:51:1911","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5306:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12236:29327":{"id":"2:12236:29327","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11852:3186","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::match_indices":"2:12233:29326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43800:9125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:24534":{"id":"2:12174:24534","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12173:24533"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:1791":{"id":"0:43:1791","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:44:1911"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}}},"2:12179:3297":{"id":"2:12179:3297","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12178:3299"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43915:9111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:23446":{"id":"2:12159:23446","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11412:9113"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:24533":{"id":"2:12173:24533","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12174:24534"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12165:24512":{"id":"2:12165:24512","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12221:29323":{"id":"2:12221:29323","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12275:29339":{"id":"2:12275:29339","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4542:29339"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43931:9120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12270:22687":{"id":"2:12270:22687","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:24514":{"id":"2:12169:24514","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1910":{"id":"0:21:1910","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:1911":{"id":"0:47:1911","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:24511":{"id":"2:12163:24511","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:27246":{"id":"2:12176:27246","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43608:9115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:22665":{"id":"2:12177:22665","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43618:3626","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:24513":{"id":"2:12167:24513","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:3298":{"id":"2:12203:3298","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11668:9101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:315":{"id":"2:12162:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12212:29322":{"id":"2:12212:29322","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11852:3186","str::split":"2:12200:22738","prim@char":"1:12030:421","str::split_terminator":"2:12209:29321"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43700:9128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12230:29325":{"id":"2:12230:29325","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11852:3186","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::matches":"2:12227:2034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43854:9127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:2193":{"id":"2:12192:2193","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12253:2597":{"id":"2:12253:2597","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:22738":{"id":"2:12200:22738","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11852:3186","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split_whitespace":"2:12178:3299","str::rsplit":"2:12206:24543"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43632:3627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1910":{"id":"0:15:1910","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:24550":{"id":"2:12186:24550","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:29331":{"id":"2:12245:29331","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:1910":{"id":"0:24:1910","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1910":{"id":"0:8:1910","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3377:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:1916","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:63:1914"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12181:29320":{"id":"2:12181:29320","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43896:9123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1909":{"id":"0:25:1909","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"2:12239:29328":{"id":"2:12239:29328","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12246:29332":{"id":"2:12246:29332","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:29318":{"id":"2:12171:29318","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12036:1420","str::slice_mut_unchecked":"2:12172:29319","crate::ops::Index":"2:2984:3514"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12215:24545":{"id":"2:12215:24545","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186","str::rsplitn":"2:12218:24547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43736:9099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29998":{"id":"5:5517:29998","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29999":{"id":"5:5525:29999","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29996":{"id":"5:5510:29996","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2130","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2130","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29996","5:5511:9432","5:5514:29997","5:5517:29998","5:5525:29999","5:5526:30000","5:5527:3650","5:5528:22689","5:5529:22690"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:12:1910":{"id":"0:12:1910","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1911":{"id":"0:44:1911","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:65:1909":{"id":"0:65:1909","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"2:12172:29319":{"id":"2:12172:29319","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12036:1420","crate::ops::IndexMut":"2:2988:3515","str::slice_unchecked":"2:12171:29318"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::path::PathBuf","id":"1:5126:191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1911"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12154:29315":{"id":"2:12154:29315","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:29329":{"id":"2:12241:29329","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:3064":{"id":"2:12153:3064","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"items":["0:47:1911"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:1910":{"id":"0:18:1910","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:1790":{"id":"0:6:1790","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:8:1910"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1909","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:9","0:16","0:19","0:22","0:13"]}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::path::Path","id":"1:5238:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1911"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53:1911":{"id":"0:53:1911","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5306:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68-20:0:1788":{"id":"0:68-20:0:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1788","glob":true}}},"0:0:1794":{"id":"0:0:1794","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[255,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.44\")]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:68-20:0:1788"],"is_stripped":false}}},"2:12175:26803":{"id":"2:12175:26803","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43602:9116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12243:29330":{"id":"2:12243:29330","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:29333":{"id":"2:12247:29333","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11877:9105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:29338":{"id":"2:12268:29338","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11813:127","`FromStr`":"2:11812:2108"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11812:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11812:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12272:22691":{"id":"2:12272:22691","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1914":{"id":"0:59:1914","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3389:1912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12278:29340":{"id":"2:12278:29340","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4540:29340"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43949:9121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12178:3299":{"id":"2:12178:3299","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12179:3297"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43906:9112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:22739":{"id":"2:12180:22739","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43886:3623","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:29317":{"id":"2:12160:29317","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1790","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1910"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12250:29334":{"id":"2:12250:29334","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1911":{"id":"0:49:1911","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5306:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12256:24552":{"id":"2:12256:24552","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:3186"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12273:22692":{"id":"2:12273:22692","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12152:2152":{"id":"2:12152:2152","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:9432":{"id":"5:5511:9432","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:30000":{"id":"5:5526:30000","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2130","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2130","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3650":{"id":"5:5527:3650","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:22689":{"id":"5:5528:22689","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12273:22692"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:22693":{"id":"2:12274:22693","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12224:29324":{"id":"2:12224:29324","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:9106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:9107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:2980":{"id":"2:12182:2980","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43924:9110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1792":{"id":"0:48:1792","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:49:1911"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}}}},"paths":{"6:1536:11094":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:736:3465":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:7412:3553":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:22040:27175":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:41671:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4685:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4368:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11007:16930":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:22560:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13332:20872":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4928:16290":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:41520:3664":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10609:16915":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"12:0:1923":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:45867:3866":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8407:2098":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:4992:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:46167:3867":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:5414:31552":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11888:19613":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11175:9596":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4818:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:1288:3477":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12851:20148":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:45766:3901":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:8809:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4729:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:40598:9399":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1778:3522":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7725:3449":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8236:3670":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:2962:15642":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:20877:1909":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:9048:16693":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40446:9403":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:41657:3668":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:3594:3463":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:504:16706":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4535:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2606:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:10082:3532":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:4742:3705":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:5954:3785":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:43682:9129":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:3395:16880":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:42690:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13043:20161":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:9192:23460":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:7998:23745":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:8252:16643":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4938:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:5567:16541":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:40207:9221":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5028:16318":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11220:16967":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10511:16864":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"18:719:20970":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12592:20132":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:946:3474":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:3442:3598":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9734:16731":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:41858:2103":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:276:2130":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10471:16861":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:2541:15625":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:4002:27351":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:10419:9098":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5877:14368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5824:3451":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12691:20139":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"11:667:3469":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13069:20163":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:2825:9451":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4387:3716":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:40405:3624":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12333:20118":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:7474:16610":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4616:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"9:330:15465":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13548:20880":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8942:3809":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:40427:9396":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12982:20157":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12605:20133":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:32213:9501":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:8389:2068":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:20915:3853":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:41722:2156":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"14:160:15540":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4754:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2353:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:10298:9095":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:14315:20936":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:2131:3413":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11979:22932":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:46991:3935":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:22028:3679":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:39329:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"2:1630:592":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13957:20911":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:868:3464":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4323:16093":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11617:15573":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14350:20939":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4963:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12077:19626":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10417:16829":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:7736:3481":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:629:28901":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8194:3624":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:14102:20923":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11056:16961":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:1048:31147":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11310:3773":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:2170:28790":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:2799:9446":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12365:16919":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:4753:16259":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:9913:16769":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10223:16805":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:4384:9201":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3178:3483":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:22080:27177":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:6485:28912":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1917:2058":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:8166:16640":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:586:3438":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6130:14411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:2966:30266":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:20711:27209":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:11084:16926":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8497:2101":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:22527:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:8387:1907":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41586:27198":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11074:16743":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5080:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7568:31433":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:43896:9123":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:8125:16637":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:7511:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:5475:3612":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:22791:3682":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:521:20980":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11568:16744":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:311:31123":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:43182:26981":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:44548:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5767:14360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10161:16801":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14329:20937":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11164:16955":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:6608:3800":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:1517:15533":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:42702:27605":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11428:16739":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:1576:3483":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:113:20959":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:44601:3980":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6015:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:11155:16964":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6763:16591":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:541:2431":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:22117:27191":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:3894:15712":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:4701:3726":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10786:16878":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11241:16969":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:42436:2086":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7025:31220":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:30441:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8555:2104":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:8290:3724":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:11189:16745":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:1513:11091":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13492:20878":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7545:9170":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:5561:3765":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:4042:3693":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"9:486:15408":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"15:306:15565":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:6161:23826":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:5622:3801":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:8949:16718":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12757:20142":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4984:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3237:9045":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:587:10208":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12952:20155":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:40995:9391":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2787:3836":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8549:2103":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:4985:3612":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1575:11098":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4469:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10038:16765":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:481:23844":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:599:32337":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:595:10209":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10110:16803":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6658:16588":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10280:16853":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:10377:9099":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9100:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:12653:3982":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12891:20151":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9223:16722":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:43754:9097":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:7182:3498":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13854:20901":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9887:16778":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40396:3512":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13167:20169":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:652:32346":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"11:1068:15530":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:43428:9087":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:573:10206":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:3810:15676":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3145:9461":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13591:20883":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:9054:22961":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:11535:3674":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13803:20898":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:40162:9227":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6713:15558":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4489:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:7529:3467":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11098:16928":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:1696:11109":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:1102:28671":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:3581:2103":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2497:15623":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1717:11111":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:40456:9404":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9188:16721":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4785:16267":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:40299:3556":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:7268:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:9016:16538":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2709:3426":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:6160:31454":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:7231:28877":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:6791:27457":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:12033:1061":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:5752:3788":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11514:3672":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10883:16881":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8356:3703":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:671:20974":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:4393:9202":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11379:22664":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2766:9443":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:2926:15641":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:9409:32053":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12671:20138":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12711:20140":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:3183:28907":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:261:31885":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"15:327:15569":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7061:31295":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2901:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4587:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:9032:23264":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1482:3468":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:4724:16254":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4887:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:2761:3837":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:5793:31444":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:40418:9395":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4496:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:5745:3787":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:2970:30267":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:2461:28830":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3180:24102":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4841:16275":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:0:1927":{"crate_id":17,"path":["object"],"kind":"module"},"2:3377:1913":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12053:19624":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:1554:2103":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:2105:16841":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:256:31972":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:12048:1520":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12646:20136":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:41503:3663":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:7337:2106":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:44651:9033":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:44132:9144":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12106:19628":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:43438:9085":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:12053:1577":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:6470:16581":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9850:16758":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:6156:14412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5058:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6711:14794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:47599:3909":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7693:16624":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:5843:16554":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:97:31137":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:4396:16142":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2744:2123":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8278:3666":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:119:31138":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:2842:9455":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44375:9583":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5553:16540":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:8659:16709":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:7272:15174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3739:3672":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8008:3639":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7920:3637":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7852:3593":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13566:20882":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9487:23614":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:2514:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:21312:3849":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:6775:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13055:20162":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10266:16798":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10555:16913":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4374:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:43650:9095":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:2402:1934":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:10986:3769":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:9282:3538":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12815:20145":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:6594:3799":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:11337:22939":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:2243:28756":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:515:20983":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:2180:31136":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"14:165:15541":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10765:23656":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5673:16547":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:4768:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:6306:3984":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11753:16978":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:44221:9148":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2569:23841":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:1761:615":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:582:9234":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:21749:3847":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:21279:1909":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:9936:1909":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:8542:16690":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11542:16692":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12921:20153":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:42222:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:11382:9540":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5959:16558":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:20879:3851":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11642:16748":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:21533:3860":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:5779:3789":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6197:16564":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:4506:16180":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11696:16976":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:12078:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:6809:3840":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:123:9879":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:43782:9124":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:7609:15364":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13604:20884":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2631:3638":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6820:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2594:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:6838:9383":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12618:20134":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13999:20916":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46881:3874":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10832:16873":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:44355:9579":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:9759:26775":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:48075:9021":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"20:0:1788":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"16:4900:16286":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"9:357:15425":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:7474:9152":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:40506:9417":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:42443:2087":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7240:31639":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:481:20981":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:2567:15626":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45622:3899":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:40588:9414":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:6705:14793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6986:16601":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6250:16567":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44371:9582":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10770:3590":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:5863:14327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7362:16605":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11992:19620":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:40283:27117":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12043:751":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:21200:3849":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:40968:3653":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:7310:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:657:2157":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:45937:3884":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1442:2157":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:46243:3879":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:79:15387":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:7887:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:40558:9412":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4819:3700":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:12051:1519":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:7245:2157":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4046:3694":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1257:3476":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45796:3906":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:531:3417":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8150:3654":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:42429:2078":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4814:16272":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10351:16857":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:507:32346":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:8152:16639":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:41731:2103":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:9952:16766":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:42935:27606":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:6815:16593":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:6429:3792":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:9134:3604":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:22101:27181":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8224:3623":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:7382:3555":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6289:16568":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4824:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"11:798:3471":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9040:16603":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8217:3627":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7707:16625":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:8457:2099":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:5987:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7759:3542":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:12041:650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6667:15559":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12148:19631":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6008:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:1979:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11287:23835":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:46311:3940":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:22055:27613":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:9290:2077":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5836:14367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4315:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14007:20917":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:55:15584":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:2373:15618":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:7546:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10812:16877":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:8086:16635":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10458:16860":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:44664:27617":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10330:16827":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:3343:3632":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:562:10204":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:41874:2157":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5558:3763":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:2959:2216":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8965:3790":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:119:9878":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:47941:9011":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2377:3583":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:30455:27094":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"11:365:31120":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:11633:9589":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:11398:9542":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6028:14381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:7864:3594":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:4904:3750":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:1055:3477":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:9475:16725":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12539:20128":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42261:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:6558:2157":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:9655:16729":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:9661:9553":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:2882:23612":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:3635:15650":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:5626:16544":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"13:226:31148":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:40488:9407":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13140:20168":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:4171:3719":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:1837:3538":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6347:16573":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:793:3468":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4626:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:11557:9588":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:40526:9398":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:8141:3652":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:42181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:11872:9107":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10444:16824":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:4267:9194":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6850:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:2141:28889":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3508:23647":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"8:0:1919":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:14380:20941":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5775:14361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1495:11088":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:9075:23015":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7255:2072":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:7743:3541":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:10943:3542":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10799:16876":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:837:2103":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:547:10202":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2293:15587":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4291:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2857:15638":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:12470:27481":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:40474:27460":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:7739:16626":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:43886:3623":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:4789:27383":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:46487:27570":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10654:16892":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2715:15632":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:49943:3862":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:14015:20918":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4568:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4463:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:12049:1521":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10361:16852":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:5301:16519":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47996:9016":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3940:3686":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:21747:1909":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9153:3834":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:434:15589":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:40105:3440":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7331:31637":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:399:31133":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11020:16929":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:5318:28912":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11726:16977":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:43540:9093":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:43915:9111":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8241:3662":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:285:31125":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:21048:3854":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:8230:3671":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4606:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7592:16619":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4740:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14150:20924":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:10094:2103":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:4716:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:39228:9187":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5807:16553":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10486:16862":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10051:16764":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:43186:9078":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:1565:3467":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:8872:16715":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13448:20876":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6724:16590":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:42767:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:10904:9089":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:6655:2165":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7515:16614":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7855:16631":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13109:20166":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:6744:9401":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7553:16617":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6175:16563":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:9296:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3499:2060":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:526:10200":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:44244:9130":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:5413:3759":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:45666:3900":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13862:20902":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:43618:3626":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:8997:16689":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7763:16628":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:4:1026":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9083:16694":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6688:11216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:2133:16800":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:12522:9242":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:42745:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:3212:3482":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10529:3645":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"11:1818:2103":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:3298:3643":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40953:3791":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:47677:3881":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4695:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6332:16572":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4794:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8910:3808":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8312:3725":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:2527:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13971:20913":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:7211:3466":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:2317:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44084:9143":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43511:9091":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:0:500":{"crate_id":2,"path":["core"],"kind":"module"},"17:12659:20137":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7656:3422":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13707:20889":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:1073:3479":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:10251:3772":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:7540:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:40346:3572":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9399:16724":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13949:20910":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11329:16734":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:6465:3798":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:986:3477":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2808:9452":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:42727:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4917:13706":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:8818:3767":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:1544:3612":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12435:20123":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:3519:16898":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:3934:3687":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1631:11102":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:3042:15644":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11450:22679":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4704:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6589:10079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4395:13493":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46021:3843":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:968:3476":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:7636:1909":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:46927:3880":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4868:16278":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14197:20928":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:8794:16713":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:21284:3845":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:14177:20926":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:3674:3669":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:42025:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:40120:9226":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46433:27535":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:474:10194":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14403:20943":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6671:11218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:47961:9013":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:12031:1539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:1473:3465":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:11852:3186":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2830:9453":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4506:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1776:3521":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:9744:23841":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13179:20170":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:8899:16716":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9939:16767":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11955:19617":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9344:31680":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:2699:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:45836:3918":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:40219:9222":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:506:10199":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:1918:9048":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:1041:3476":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:41566:27618":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2777:9445":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:2201:2106":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:10834:23435":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:4895:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:9442:31659":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"13:110:31195":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6554:16586":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:10336:9096":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:5444:3761":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:638:3444":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2704:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40356:3571":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2874:15639":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2988:3515":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5067:16333":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9926:16768":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11388:16737":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2850:9457":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2795:9447":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:7529:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40756:9416":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:356:3435":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11924:19615":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4328:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11669:16975":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:43602:9116":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:45642:3864":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:4074:3463":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:12435:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13456:20877":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6648:11233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:7418:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:4194:3612":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12826:20146":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7928:3501":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:9821:16756":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3460:3597":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11610:15573":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9571:31970":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10945:16957":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:11812:2108":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:9545:9245":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:6894:23833":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:40946:27456":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"15:288:15564":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4949:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:5393:3758":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8285:3723":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7038:31300":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8296:3715":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40939:9385":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12089:19627":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6868:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1814:3532":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:8740:16711":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:3867:15709":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11167:23439":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:6296:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:21625:3841":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:12040:648":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:2164:16825":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:7564:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10097:16804":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:1426:3463":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46067:3907":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22179:3683":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:3082:3516":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:5128:3785":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11385:22660":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:4164:3612":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5970:3801":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6232:16566":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2475:9238":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:32300:9425":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2815:9449":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:7718:2107":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:915:3469":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:822:3487":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:4393:3612":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12769:20143":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:9966:16728":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4996:16310":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12552:20129":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13155:16745":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:40436:9402":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11591:9029":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:894:3466":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4556:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:44367:9584":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:40539:9410":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:564:20986":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11520:16743":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:42422:2077":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:12050:1522":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10956:3762":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"10:44:15519":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:21988:27589":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:952:3475":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11231:3811":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:9540:9244":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13096:20165":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11109:16962":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:7763:23714":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:5975:9798":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"13:0:1917":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:46691:3914":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:5535:9406":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:45956:3933":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:3524:3621":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:1973:16806":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:644:3463":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1839:3539":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7494:16612":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:9875:16784":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10981:16932":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2783:9444":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:5362:9068":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2523:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:39345:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:1027:15529":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:20741:27345":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:44196:9146":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"9:426:15411":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:11210:16966":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12346:16920":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:48045:9019":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6744:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43800:9125":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2520:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6303:16569":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6077:14384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4748:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12792:20144":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:10101:22658":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13513:20879":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2314:15615":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7631:16621":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13882:20904":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4026:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:4473:3726":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"9:0:1920":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3259:3647":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13778:20895":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12566:20130":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:47141:3869":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12412:20121":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:7295:15176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:7762:27353":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5044:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:10143:3627":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:2591:3628":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:9899:16774":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12878:20150":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6540:16585":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:11212:23011":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8979:23274":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:1569:11097":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14341:20938":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:2984:3514":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:0:1928":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1121:3479":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:11617:9587":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:2399:15619":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:40184:9121":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"9:450:15409":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6022:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:9806:16755":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6598:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:2375:3582":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:22153:3681":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:9202:23451":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8806:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12186:19634":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:7833:16630":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8864:3810":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6834:14802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:45688:3905":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2925:2124":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8334:3755":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:7682:3421":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:21972:27109":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6915:31308":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:46803:3868":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6841:14803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:1138:28676":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:7505:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:9256:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6136:13559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:9288:2078":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10978:9082":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:630:2103":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:6692:16589":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:21180:3846":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7445:16608":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:11877:9105":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:4440:9203":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2421:15620":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9840:16757":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9105:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:532:10201":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"14:31:15540":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:7593:23820":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12377:20119":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:491:32338":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4389:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5015:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:42300:3786":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9744:32148":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:12001:3450":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:6425:3791":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4678:3685":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:21186:3848":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:22428:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13905:20906":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45818:3912":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:12037:1504":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46119:3919":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:9170:23746":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6573:11048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:12690:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:8924:16717":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:41739:3463":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:1527:11093":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46645:3908":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:44439:9597":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11815:19609":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:40226:9223":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11155:3768":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:502:3413":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2687:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4446:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:2033:3476":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:4965:16303":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8173:3600":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13923:20908":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:44383:9578":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:1464:3464":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6356:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:760:3467":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:12133:19630":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5612:16543":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:7278:15175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4543:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:44053:9141":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"0:0:1794":{"crate_id":0,"path":["thiserror"],"kind":"module"},"17:13732:20891":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10323:16856":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:923:3471":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10795:3594":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"18:736:20971":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3998:3691":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11591:16745":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:40728:3625":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9153:16720":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:1011:28912":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:21528:3852":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:4329:9199":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2917:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:5900:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10403:16858":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:6789:16592":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:40962:9387":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:7463:15335":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:4567:3743":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1663:11105":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4738:3701":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:5126:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6044:30859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10597:16914":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1611:31145":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3217:28900":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12966:20156":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12004:19621":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:619:2059":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:12044:752":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5805:14364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2207:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6900:16597":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:7396:27117":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44558:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2820:9450":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11832:19610":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11996:23252":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:42943:9246":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:3166:9189":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:1888:2057":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:910:3468":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:21134:3844":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:644:32346":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:31017:9234":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:7349:3462":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:10741:3754":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:5882:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:48022:9018":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:21118:1909":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:2209:3573":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:940:3473":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:30619:27167":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:8068:16634":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:555:3419":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14189:20927":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5916:16556":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13125:20167":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12017:19622":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:11813:23838":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7912:21278":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:43632:3627":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:41986:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:40132:27108":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6565:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:48007:9017":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11352:23007":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:40465:9405":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:1976:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:660:20973":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43498:9076":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2695:9043":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4971:1052":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:4962:2064":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5704:16549":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:20743:27350":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:10118:3463":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11852:19611":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"14:7:15540":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10568:16871":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:8605:16688":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11371:16736":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6067:14383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:6248:3801":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2517:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:5612:9173":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4133:22659":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12394:20120":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:1570:3482":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13870:20903":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13757:20893":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:12448:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:2962:28836":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:6987:3652":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:690:20976":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"7:32:15380":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:7047:3780":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11045:16925":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:2060:3478":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4456:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44159:9145":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:22626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:3389:1912":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:14417:20944":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:4054:3695":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:6726:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4833:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5955:14373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4944:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:40987:9389":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11454:16740":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10293:16819":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:9318:16723":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:5429:3760":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:7710:3448":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11034:16960":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:42974:27076":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:47347:3903":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:12012:22943":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4475:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43736:9099":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:20696:27209":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:6769:9173":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3517:3466":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:4436:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:207:9051":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5793:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13016:20159":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:10535:3643":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:5051:13720":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:10783:22907":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:7599:15363":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40148:9225":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11416:16738":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:6069:23817":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7261:28645":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:41537:3665":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:40252:9220":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6317:16570":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:8814:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5849:14326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"9:393:15410":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5940:16557":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4341:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4810:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:817:3473":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:7523:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:2771:9442":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:7289:16604":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"11:2174:28495":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6484:16582":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:3735:3502":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:3219:3645":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:8210:16642":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:10391:9097":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5818:14365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:7425:3554":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:20683:9234":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:9294:2087":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:582:16707":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:41947:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:21303:1909":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6171:14413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:44351:9576":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:9482:3593":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:7586:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:43448:9086":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:6788:9174":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1595:11100":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:1852:3484":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:4002:3466":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:44210:9147":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:39455:3456":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:3155:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:14163:20925":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:10825:3596":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:3204:3484":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:12042:754":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:3220:15646":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4633:23528":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:10760:22909":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12579:20131":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:12047:1523":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:727:20978":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2919:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:1012:3478":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:23238:3676":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:46721:3920":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4564:16190":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:3221:3646":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4664:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:11668:9101":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"14:215:15549":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8926:3806":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:878:3488":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10906:16879":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:39487:9462":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9665:31874":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3736:3673":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10575:3421":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8800:3766":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:4032:3692":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40233:9224":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:46097:3913":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:12497:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9978:22911":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:699:20977":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:554:10203":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1590:11099":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:5080:23748":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:904:3467":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:643:3445":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:22758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10390:16828":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:695:3470":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22063:27184":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7523:16707":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1672:28912":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14216:20930":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11033:23830":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:9246:2060":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4854:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:2194:31143":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:43419:9083":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:3185:27691":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:14037:20920":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:9300:2085":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11473:3673":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10968:22948":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:46957:3886":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6931:16598":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:5737:16551":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:2035:3501":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6427:16578":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:2611:15628":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:43924:9110":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2166:9473":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"18:80:20957":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2935:2127":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:332:31134":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4842:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43949:9121":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:507:15412":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:1103:15531":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:1667:1099":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:6977:16600":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:10339:23611":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4929:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12174:19633":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:836:3474":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:7199:3489":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:9281:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5979:14375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4955:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:929:3472":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:9118:16719":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:4315:3722":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7525:16615":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:9020:23727":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:45919:3878":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:3171:2103":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42103:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4787:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40200:9120":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:43530:9092":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11603:23757":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:13303:20871":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:44566:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:10263:9102":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4973:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:4234:2103":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3970:3688":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8984:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:5398:16539":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7539:16616":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:43854:9127":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40977:9388":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:41883:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:7438:9063":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14259:20933":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:5363:16537":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:766:20972":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:4609:9215":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7753:16627":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9528:31897":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"10:36:31119":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:44406:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:6145:3982":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:1845:3483":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1523:3500":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:7874:3591":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:3938:3612":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7622:16620":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4184:3720":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13368:20873":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10123:16774":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:22167:3680":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10544:16912":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6036:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44639:9035":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:6439:3466":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:9990:16772":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:530:31298":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10253:16799":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:3386:3653":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4428:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44231:9149":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:860:2157":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:30385:3496":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7665:16622":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11498:16742":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:30989:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:1506:11090":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:488:10196":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7534:23762":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6502:16583":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11943:19616":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3800:3467":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12424:20122":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4550:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7517:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43940:3440":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:42982:27077":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:14395:20942":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2747:9042":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2168:9474":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:14044:20921":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14236:20932":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:1637:9374":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8003:23255":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4781:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:9292:2086":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13795:20897":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5074:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12254:20115":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10199:16807":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:12745:3491":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:40172:9228":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:1911:11275":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13719:20890":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7073:16602":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:40549:9411":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:3186:16875":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:41866:3463":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:39494:2121":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:1673:11106":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"14:221:15550":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:48060:9020":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:10969:16959":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:40742:9415":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6057:15586":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:1501:15532":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:47923:3942":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5986:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:5387:3612":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"18:538:20985":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3160:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:43576:9122":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1681:11107":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5994:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4764:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1411:2103":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8834:3768":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:10322:3761":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"9:237:2099":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:1924:661":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:13029:20160":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7731:3480":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:4740:3704":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10529:16911":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13427:20874":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12318:20117":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:9561:16727":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5629:3802":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:21:689":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:6128:16562":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13083:20164":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:3186:21281":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:2914:3497":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:35:3517":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13639:20869":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:4620:16198":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11264:16970":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:4623:3691":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:43608:9115":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:531:20984":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:43167:9569":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:4032:28912":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6516:16584":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8848:3769":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"15:0:1925":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:749:3466":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:12052:799":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:41645:3667":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:9286:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:46335:3941":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4637:23532":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:40574:9413":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:47847:3887":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1273:3478":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:4032:15826":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:614:32341":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13964:20912":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:44264:9131":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4380:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12631:20135":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:4815:805":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5342:16536":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:2465:15622":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:4262:9193":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:8771:16712":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:635:3443":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:7574:23828":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:8021:16632":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2443:15621":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:1838:3482":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:44363:9580":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1733:11112":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5920:14372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8566:2105":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1776:3467":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:8176:16641":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:39522:9200":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:6850:16594":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46265:3885":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7679:16623":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2825:15637":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:681:20975":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:42964:2099":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:22494:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12727:20141":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:1558:2157":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:10470:23824":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:46464:27534":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:13771:20894":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6456:16580":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:6541:3796":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:9497:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11767:19607":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:2737:15633":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12303:20116":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:22692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:12035:1390":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:40192:3440":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4304:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:12936:20154":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11354:16735":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:500:10198":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:1826:3466":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1649:11104":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7099:16603":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5590:16542":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8539:2102":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:3058:15645":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:30194:3678":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:48137:9023":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12864:20149":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:2836:9454":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:1702:3712":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:39529:9184":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39411:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:1690:11108":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40497:9408":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:21062:9473":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:6798:9175":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8330:3753":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:43359:27455":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13697:20888":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:43590:9119":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8204:3625":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:574:32346":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42662:27607":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:7221:3490":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13847:20900":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9032:16539":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:403:31128":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44016:9139":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:8841:16714":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:10937:9090":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:482:10195":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:8105:16636":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:5593:9397":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4163:3718":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:9505:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7484:16611":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:6193:23261":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"15:394:15576":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:400:16705":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10103:23751":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:2803:9448":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8480:2100":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:21919:26723":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10148:16802":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:4148:9206":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5008:13716":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:45897:3872":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:40271:3557":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10080:16818":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:7407:16606":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:1545:11095":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:44622:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:362:3436":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10303:16854":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:723:3464":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:40313:3558":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"16:6531:31592":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:10947:22928":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:4698:16252":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11194:3604":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:3984:3689":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:4339:9200":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8304:3671":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:10405:9100":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"9:177:15514":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2846:9456":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:9727:27339":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13673:20886":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8872:2157":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:40517:9409":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4650:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:42142:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13683:20887":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4770:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8990:3416":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:2555:3636":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1603:11101":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5799:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2697:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:6955:28948":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:21310:3855":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14054:20922":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:20726:27349":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2791:3838":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3300:3644":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8878:3807":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3200:9044":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:5379:3757":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:10805:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:42927:9247":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:7558:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:22659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:2781:15635":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43459:9077":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10313:16855":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:10532:3647":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"14:187:15548":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2932:2126":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:45734:3871":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10863:16728":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6886:16596":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:6978:24257":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10994:16931":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:11594:9590":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6323:16571":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:8977:27352":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:40376:9075":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:3172:9188":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:7857:3590":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12457:20124":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2212:3574":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:7661:3424":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:11923:9133":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:1557:11096":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2749:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:21015:3859":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"11:805:3472":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:7250:10155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13991:20915":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:4413:3425":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:5689:16548":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10339:16826":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1587:3485":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9604:16728":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8897:3805":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:1858:3485":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7584:16618":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6386:16576":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:5967:14374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9475:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:8388:2075":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:2689:15631":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:5498:3762":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46213:3873":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:47981:9015":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11234:16968":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:3261:3648":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9485:31988":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:9946:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:46386:27569":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:4049:9041":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9518:16726":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:10671:16917":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:1733:9483":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2474:1909":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:3580:15649":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:895:2103":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:4426:28945":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43906:9112":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11199:16956":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6214:16565":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:7020:23822":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:4014:27337":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9296:16691":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:0:1926":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11178:16965":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:39508:16642":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:48098:9022":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:30513:27134":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:2752:9424":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5994:16560":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:32209:23714":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:14227:20931":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:20929:9473":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:47950:9012":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:45712:3865":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12161:19632":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:7282:2157":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12840:20147":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:46289:3934":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:7235:9393":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:2492:3635":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:39267:9047":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9614:31969":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:4592:16194":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43520:9094":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4872:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11044:23832":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:1302:3479":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:14026:20919":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13435:20875":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12035:19623":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:22725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3414:3612":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:11290:16733":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5829:14366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:47801:3936":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2352:15617":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10957:16958":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2859:9459":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:1075:16771":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4908:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:5049:23748":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13557:20881":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2929:2125":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:44359:9581":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1503:3470":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:4476:16174":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:6796:14799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3517:3599":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4401:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:1538:15534":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:12045:753":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:2216:3575":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7433:16607":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5100:16342":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:42952:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:6642:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:8494:9106":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:5994:9418":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5882:16555":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:11866:9108":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3330:3467":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:20724:27347":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:13830:20899":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:8138:16638":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:0:1922":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11304:23257":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:7128:22676":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:4635:23530":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13749:20892":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11791:19608":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12479:20125":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:9298:2084":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:12034:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:881:3465":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:10815:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9977:16729":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:1638:11103":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4483:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:42064:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6357:16574":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:3295:15647":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:782:3486":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7904:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:919:3470":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"14:202:9150":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:6637:28912":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:850:3463":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6864:31448":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12029:948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:590:27624":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:10161:23725":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5651:16546":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5737:14298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11144:16954":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:39702:25781":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:6538:3795":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:2049:3477":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12502:20126":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12354:16918":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:7372:23256":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:21866:26735":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6939:16599":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12030:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:609:32347":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9115:3811":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4800:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4524:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7637:3437":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:3110:3655":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:3992:3690":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:7463:9151":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:39389:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:5720:16550":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:5615:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:2049:3502":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:2690:28828":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"14:40:19609":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:0:1412":{"crate_id":1,"path":["std"],"kind":"module"},"2:41480:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11967:19618":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2900:15640":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:30425:9435":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:8632:16708":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:20927:26873":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12065:19625":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:21178:1909":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:1184:16779":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3321:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"10:0:1921":{"crate_id":10,"path":["adler"],"kind":"module"},"2:43836:9126":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5639:16545":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3841:3674":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:2960:30271":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:2186:31142":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:32173:3770":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:4413:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:41807:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:2156:593":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:568:10205":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:3777:15667":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11600:16746":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:7552:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7575:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12526:20127":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4420:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6618:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6372:16575":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:0:1918":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11979:19619":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:9027:23273":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:7012:31290":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:5366:9069":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:42672:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4638:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8211:3626":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:4258:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11905:19614":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:7191:2157":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6872:16595":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:21101:3850":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:44038:9140":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10499:16863":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:2511:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:41756:2072":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13574:20870":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:39515:26982":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:14:2037":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5068:13722":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2756:3835":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9866:16759":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:62:9824":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4862:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:44427:3839":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:8982:28033":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:14205:20929":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:47970:9014":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7799:16629":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:2361:2599":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2694:1916":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:10843:23445":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:26048:3677":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11127:16742":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5890:14370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:41908:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:2637:15629":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:30419:9169":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6438:16579":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:40266:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:41815:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:2966:9046":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:3025:15643":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:1822:2157":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:39433:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:9110:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:2663:15630":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13981:20914":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:1561:3466":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2519:15624":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:41789:2073":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5025:13718":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:10225:9088":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:20971:3858":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:755:20979":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4155:3717":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:4117:9205":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:8043:16633":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:44387:9596":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11872:19612":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13659:16773":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:10186:9101":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:2387:3588":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11623:16747":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4441:16163":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:7281:2129":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11467:16741":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:7725:9392":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40111:9191":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:41747:2157":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12118:19629":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:653:10256":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:3744:15658":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10066:16792":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:5306:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8997:23014":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6607:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:1831:3467":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5382:16538":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11118:16963":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:14282:20934":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:12055:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43485:9075":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:12054:1143":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:4235:3721":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:1582:3484":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:7721:3494":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:707:9108":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:4536:16186":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:22461:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10377:16830":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:7231:9394":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:3238:3485":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7505:16613":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:2759:15634":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:47885:3921":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:1756:9482":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2854:9458":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:44609:3981":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10845:16874":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2332:15616":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10249:16812":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4723:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:6930:28929":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:12036:1420":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:10430:16859":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9777:16754":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:2223:28876":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:14359:20940":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9274:3626":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42718:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"9:52:15428":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44379:9577":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4848:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12905:20152":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:11412:9113":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10581:16893":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13620:20885":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4698:3752":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13787:20896":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13914:20907":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8856:2103":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10520:16865":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:12046:749":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:8389:2074":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:1747:27597":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:44067:9142":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:7847:3592":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:13894:20905":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:45974:3939":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10931:16945":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:4913:3751":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2359:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2698:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11050:23798":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:5839:3466":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:844:3475":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6571:16587":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:43410:9084":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4495:3727":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:22004:27168":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1709:11110":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:3441:15648":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:7290:2157":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:47739:3915":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:12028:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:22146:27586":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:8711:16710":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13937:20909":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10621:16916":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:2168:31140":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9716:32288":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11141:3767":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11250:16933":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:47489:3875":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:39314:9460":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10633:16872":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6805:14800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:579:10207":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1118:28853":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:8113:3595":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:12642:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:149:15592":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:636:32351":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:11857:9106":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11272:16732":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:39369:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:1821:3505":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:494:10197":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1492:3469":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:41609:3675":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:41622:3666":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41798:9527":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2589:15627":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:624:32345":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:5972:16559":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:3183:21287":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:46567:3902":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2803:15636":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4518:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11367:22944":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4796:3706":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10427:3766":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:6625:3755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7313:31643":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:7272:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12994:20158":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:1500:11089":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:5238:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:6720:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6239:31642":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:4190:9064":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"14:0:1924":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:21637:27212":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10013:16770":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:4363:28945":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6396:16577":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:1520:11092":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3651:2157":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6018:16561":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:22593:3427":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7463:16609":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:3720:3501":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43931:9120":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:96:20958":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:1064:3478":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:9706:16730":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:261:28912":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2359:3578":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:43700:9128":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:3669:28912":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:6079:3612":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:14301:20935":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10175:16728":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5775:16552":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8161:3596":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:7363:2128":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}