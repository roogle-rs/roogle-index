{"root":"0:0:1744","crate_version":"1.0.40","includes_private":false,"index":{"2:11880:23269":{"id":"2:11880:23269","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:32404":{"id":"5:5332:32404","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:2072","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2072","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:31732":{"id":"2:11894:31732","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42850:9365","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:31730":{"id":"2:11884:31730","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11863:1378","str::slice_mut_unchecked":"2:11885:31731","crate::ops::Index":"2:2989:3805"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1851":{"id":"0:47:1851","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:3919":{"id":"5:5317:3919","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:3591":{"id":"2:11892:3591","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11891:3593"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42869:9353","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:23310":{"id":"2:11902:23310","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:23268":{"id":"2:11878:23268","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:2135":{"id":"2:11905:2135","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:3280":{"id":"2:11895:3280","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42878:9352","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:31746":{"id":"2:11963:31746","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:31738":{"id":"2:11946:31738","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11565:3481","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::rmatch_indices":"2:11949:31739"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42736:9366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:31736":{"id":"2:11937:31736","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863":{"id":"2:11863","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11864:801","2:11865:2094","2:11866:3362","2:11867:31727","2:11869:31728","2:11872:27653","2:11873:31729","2:11874:311","2:11875:23271","2:11876:23267","2:11878:23268","2:11880:23269","2:11882:23270","2:11884:31730","2:11885:31731","2:11886:23291","2:11887:23292","2:11888:28305","2:11889:29727","2:11890:21140","2:11891:3593","2:11892:3591","2:11893:25585","2:11894:31732","2:11895:3280","2:11896:23308","2:11899:23309","2:11902:23310","2:11905:2135","2:11909:2093","2:11913:23299","2:11916:3592","2:11919:23302","2:11922:31733","2:11925:31734","2:11928:23304","2:11931:23306","2:11934:31735","2:11937:31736","2:11940:1975","2:11943:31737","2:11946:31738","2:11949:31739","2:11952:31740","2:11954:31741","2:11956:31742","2:11958:31743","2:11959:31744","2:11960:31745","2:11963:31746","2:11966:2889","2:11969:23311","2:11972:31747","2:11975:31748","2:11978:31749","2:11981:31750","2:11983:23041","2:11984:23042","2:11985:23038","2:11986:23037","2:11987:31751","2:11989:3732","2:11990:31752"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:8186:1847","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1850"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:63:1854":{"id":"0:63:1854","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3388:1852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916:3592":{"id":"2:11916:3592","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11389:9343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:12:1850"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11876:23267":{"id":"2:11876:23267","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1850":{"id":"0:24:1850","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:23270":{"id":"2:11882:23270","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:23299":{"id":"2:11913:23299","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11565:3481","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split_whitespace":"2:11891:3593","str::rsplit":"2:11919:23302"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42586:3918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1850":{"id":"0:15:1850","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:2093":{"id":"2:11909:2093","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:31750":{"id":"2:11981:31750","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11527:126","`FromStr`":"2:11526:2050"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11526:2050","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11526:2050","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:28305":{"id":"2:11888:28305","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42556:9358","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:31735":{"id":"2:11934:31735","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:31752":{"id":"2:11990:31752","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:31752"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42903:9363","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44:1851":{"id":"0:44:1851","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:58:1743":{"id":"0:58:1743","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:59:1854"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}},"2:11886:23291":{"id":"2:11886:23291","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11887:23292"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1850":{"id":"0:18:1850","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:31734":{"id":"2:11925:31734","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11565:3481","str::split":"2:11913:23299","prim@char":"1:11857:411","str::split_terminator":"2:11922:31733"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42654:9370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1850"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11943:31737":{"id":"2:11943:31737","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11565:3481","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1975"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42808:9369","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11949:31739":{"id":"2:11949:31739","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11565:3481","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::match_indices":"2:11946:31738"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42754:9367","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1850":{"id":"0:12:1850","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1850":{"id":"0:8:1850","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:65:1849":{"id":"0:65:1849","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11889:29727":{"id":"2:11889:29727","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42562:9357","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11956:31742":{"id":"2:11956:31742","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:23311":{"id":"2:11969:23311","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:23042":{"id":"2:11984:23042","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:32400":{"id":"5:5316:32400","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2072","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2072","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:32400","5:5317:3919","5:5320:32401","5:5323:32402","5:5331:32403","5:5332:32404","5:5333:3942","5:5334:23040","5:5335:23039"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5333:3942":{"id":"5:5333:3942","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11864:801":{"id":"2:11864:801","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:31727":{"id":"2:11867:31727","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:31733":{"id":"2:11922:31733","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11565:3481","str::split":"2:11913:23299","prim@char":"1:11857:411","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11925:31734"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42636:9371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11985:23038":{"id":"2:11985:23038","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:23271":{"id":"2:11875:23271","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:31743":{"id":"2:11958:31743","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1850"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11986:23037":{"id":"2:11986:23037","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3376:1853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2675:1856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:63:1854"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11865:2094":{"id":"2:11865:2094","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:31751":{"id":"2:11987:31751","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:31751"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42885:9362","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:3732":{"id":"2:11989:3732","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:3732"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42894:3733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:23292":{"id":"2:11887:23292","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11886:23291"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:3362":{"id":"2:11866:3362","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:23306":{"id":"2:11931:23306","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11857:411","str::splitn":"2:11928:23304","self::pattern":"2:11565:3481"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42708:9339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:1975":{"id":"2:11940:1975","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11565:3481","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1975"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42790:9368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:31740":{"id":"2:11952:31740","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323:32402":{"id":"5:5323:32402","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1849":{"id":"0:25:1849","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5331:32403":{"id":"5:5331:32403","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:23039":{"id":"5:5335:23039","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11986:23037"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:31729":{"id":"2:11873:31729","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:31741":{"id":"2:11954:31741","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:31748":{"id":"2:11975:31748","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:25585":{"id":"2:11893:25585","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42840:3914","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1742":{"id":"0:48:1742","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1851"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}},"2:11972:31747":{"id":"2:11972:31747","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:23040":{"id":"5:5334:23040","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11985:23038"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5056:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1851"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:43:1741":{"id":"0:43:1741","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1851"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"2:11869:31728":{"id":"2:11869:31728","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11867:31727"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:23041":{"id":"2:11983:23041","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9056:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1741","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1851"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6:1740":{"id":"0:6:1740","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:8:1850"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:16","0:22","0:19","0:9","0:13"]}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5168:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1851"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11966:2889":{"id":"2:11966:2889","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1854":{"id":"0:59:1854","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3388:1852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11872:27653":{"id":"2:11872:27653","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11133:9355"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:31749":{"id":"2:11978:31749","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:31731":{"id":"2:11885:31731","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11863:1378","crate::ops::IndexMut":"2:2993:3806","str::slice_unchecked":"2:11884:31730"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5320:32401":{"id":"5:5320:32401","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:3593":{"id":"2:11891:3593","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11892:3591"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42860:9354","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1850"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:53:1851":{"id":"0:53:1851","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5236:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1744":{"id":"0:0:1744","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[255,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.40\")]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:68-20:0:1738"],"is_stripped":false}},"2:11919:23302":{"id":"2:11919:23302","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11565:3481","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split":"2:11913:23299"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42604:9337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68-20:0:1738":{"id":"0:68-20:0:1738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1738","glob":true}},"2:11959:31744":{"id":"2:11959:31744","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11896:23308":{"id":"2:11896:23308","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1851":{"id":"0:49:1851","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5236:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11899:23309":{"id":"2:11899:23309","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:311":{"id":"2:11874:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11875:23271","`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1851":{"id":"0:51:1851","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5236:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:23304":{"id":"2:11928:23304","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481","str::rsplitn":"2:11931:23306"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42690:9341","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:21140":{"id":"2:11890:21140","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42572:3917","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:31745":{"id":"2:11960:31745","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:3481"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11590:9347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1850":{"id":"0:21:1850","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2588:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:4539:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:21515:29803":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46699:9267":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11639:20150":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9844:17096":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"14:215:15811":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:738:3757":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:1021:17025":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:1898:1998":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:39888:9634":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10824:21945":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4402:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:39879:3743":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11263:25364":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:487:10452":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:2454:1849":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10875:16999":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:11565:3481":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:4413:9447":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:39257:9362":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:39241:9466":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12934:20920":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:2177:31411":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:3595:32489":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7343:16867":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:21369:1849":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:38834:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3453:3912":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:41885:9494":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2792:4137":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"12:1836:2099":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43333:9829":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:9000:2001":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2934:2067":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6017:16816":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:3125:17105":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:3344:3903":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:40792:2099":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:6175:3758":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:950:3765":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:262:32489":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40649:2045":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44536:29938":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:1339:2045":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:42439:9317":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4628:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:574:34783":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:40674:2013":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:3515:2045":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:851:3780":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5000:13908":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:3983:3988":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5698:14544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:7481:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:45519:4197":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2344:2891":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43038:9385":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12046:20175":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:7469:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:3599:15923":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4828:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:44897:4182":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6284:16832":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9644:17032":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:4232:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:10020:9330":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:21742:29952":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4439:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:43329:9835":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8347:2040":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:1575:3759":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:10546:16985":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"12:1555:15796":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"12:1840:3758":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11511:15828":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:1988:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:481:21007":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:42604:9337":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4673:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:2342:3870":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:2749:15892":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:39344:9766":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7497:16875":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:4606:16522":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:45365:4202":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:1647:1073":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5772:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:962:3767":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4429:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:40504:29573":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:44851:4178":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9738:17063":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:8170:3963":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4100:4012":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10774:16995":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10121:17099":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2847:9700":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:41066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:8796:16975":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:9445:9802":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:6395:4091":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:8794:2045":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13279:20950":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5800:14551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9997:22094":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:3118:21723":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4871:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:20447:30463":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7700:3835":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:4144:16348":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:44995:29904":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:9108:16981":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:5762:10054":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11951:20169":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6200:16827":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:5995:25368":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2820:9694":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12225:20187":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6186:16826":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9061:16980":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11214:21139":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:44429:4200":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5460:16797":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13340:20952":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:4689:16533":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:4:1000":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:39654:3916":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:1520:11361":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:1652:11374":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:39643:9646":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"12:2080:3770":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:39519:29939":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:679:3738":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:6241:16829":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:30533:9479":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2657:15888":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8506:2047":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4353:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43185:9391":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:1786:3814":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:6107:32492":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:4164:9306":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6698:14981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4307:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8218:3958":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:3264:3759":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"18:113:20985":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"9:863:15594":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4781:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:690:21002":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5541:16802":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:45553:4179":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:42452:9318":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:1527:3903":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:21:671":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8397:2041":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44827:4196":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:5411:16794":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46239:4195":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:6524:4092":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:1824:3825":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"12:2053:3768":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:39619:9660":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:1420:3761":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:4849:16573":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:208:9294":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4618:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"9:896:15595":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:420:15846":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12748:20907":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5184:15842":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:755:21005":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:1370:2099":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:11579:9350":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:4069:3903":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:10946:25385":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:10093:9337":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:499:10454":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:38951:9444":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:5815:16812":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10088:17102":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:46622:9264":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:29901:3787":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:45253:4214":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:7099:9640":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5122:16774":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7537:25381":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"12:2190:33619":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:39218:9465":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:967:17021":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3899:3981":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4328:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:12147:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13594:20971":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40665:2099":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:21624:3971":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4217:16397":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:9010:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2813:9697":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1663:11375":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12756:20908":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45129:4221":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:39491:9650":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:38937:16893":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:5660:14484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8495:2046":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:5751:4090":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4451:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:2184:30249":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4597:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:44775:4189":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"0:0:1744":{"crate_id":0,"path":["thiserror"],"kind":"module"},"2:38690:9290":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"12:1859:3775":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:11823:28021":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:2487:15881":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:933:3763":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5472:16798":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:3049:3947":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"12:2198:33621":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:31689:4063":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13393:20957":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8816:4100":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11033:9848":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:7944:25823":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5951:14564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7890:16886":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10418:3935":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:42869:9353":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:42878:9352":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:21749:3973":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10455:17180":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:7557:16878":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:2069:3769":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:5761:16809":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5752:14549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:4786:16558":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4910:13899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:7201:15358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:0:1866":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11893:20166":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46503:9255":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2788:9689":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12073:20177":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9885:17140":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:39210:9363":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:8157:3918":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11876:1473":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8975:25814":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:8510:15838":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6567:16842":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:6955:3758":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7059:2013":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:2916:17100":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2868:15897":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:5552:4094":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:5428:4055":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6052:16818":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6743:14984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8176:3962":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:21275:30427":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:4262:16418":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"12:1872:3777":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:7028:2099":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:660:20999":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:9559:28220":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5780:16810":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:6538:4093":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"9:920:15593":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:1800:3795":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"12:834:3765":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:2904:31487":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:1597:3777":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12948:20921":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:736:20997":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:44228:4219":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:599:34802":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3927:3984":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:2075:31425":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:39562:9656":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10139:16980":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:8981:16978":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:21263:4142":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"18:515:21009":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:2297:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:40640:2098":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2825:9695":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12874:20915":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3732:32489":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:40657:3755":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:8802:4103":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:6174:4094":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:586:10464":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:914:3759":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:9751:17061":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"12:777:15789":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:10854:16998":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:5124:32489":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:546:10458":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42894:3733":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5708:4082":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:6359:4084":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:2859:9703":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:42392:9327":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:3869:3979":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:1771:17040":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8740:4059":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39297:9464":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13518:20965":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5938:14562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:39921:9638":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:5628:16805":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10394:17187":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1046:31462":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:1847:3831":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"9:586:15662":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"15:193:15820":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11235:19650":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8917:25785":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:21462:29809":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6790:16852":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:10833:4055":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:2509:15882":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8113:3891":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1571:11367":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:39668:9662":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"9:188:15636":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:10108:17098":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3971:3986":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:4413:16449":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:11241:21946":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:2727:15891":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6619:16844":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42860:9354":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:2341:15875":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11149:19644":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9401:17020":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:5664:16806":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:12008:20172":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2475:3927":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:538:21011":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:41621:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:4218:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11515:20144":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4703:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:1586:3775":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:20847:1849":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6634:14977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:8596:16971":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:42413:9319":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12485:20896":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"12:274:33605":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12198:20185":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12322:20194":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:6468:4087":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:3713:3759":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:38958:9428":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39131:3733":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:25596:3969":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:43007:9383":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10476:17190":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:9526:17036":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"12:60:33612":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6496:11299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11160:21984":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:46051:4191":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"9:505:15774":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:473:10450":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:7087:3754":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:531:21010":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2804:9691":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:6971:31443":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5823:14554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:20856:4150":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11879:779":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:4742:29830":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:20666:4145":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:41893:29039":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:561:10460":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:5418:9417":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42140:29284":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:0:1858":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:6373:32489":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:10214:9340":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:20828:4146":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:46523:9257":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:1894:9291":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:868:2045":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"15:175:15819":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:9274:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:22387:3974":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:39146:9471":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:4635:16527":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9274:17009":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13536:20967":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:46607:9263":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:20695:1849":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3446:3890":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:46558:9260":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:6743:16850":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:3689:15965":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:4669:3997":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:38856:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:1051:3768":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7942:16889":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:9746:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4457:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:4577:9459":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8786:4062":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9223:17006":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3117:32584":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:22090:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:5488:4056":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12211:20186":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:39271:9468":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:6294:2099":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:12357:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2771:9688":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8144:3916":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:6764:14986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8052:3886":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:8329:2009":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9601:17039":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:21600:29013":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:9068:2025":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:39865:9632":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:659:2099":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10997:19635":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9691:17060":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6376:16838":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9059:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:9378:3884":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:2668:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:7120:3848":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:48874:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:853:3766":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:6791:14988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5510:16800":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:7566:29672":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:2465:15880":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"13:226:33624":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4627:4045":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12955:20922":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:5450:9653":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:44583:4144":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:30141:29648":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:8561:16946":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:4662:16530":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"12:632:2045":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:920:3760":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:22321:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:5374:16792":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11288:19654":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11872:734":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:6222:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11855:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:870:2099":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:39682:9663":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:609:34789":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"9:33:15665":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"12:1852:3774":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21775:3975":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:393:33599":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:50214:29942":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:4298:3903":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"14:202:9392":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1771:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:11526:2050":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4727:13878":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6571:11326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10682:16991":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41651:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9712:17088":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13214:20947":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:22024:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8871:16976":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:9066:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:9069:4104":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:4268:32491":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:578:10463":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:22189:3719":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:12674:20903":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:5996:16815":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"12:985:3768":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4697:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11828:20162":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:7134:29615":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1604:11370":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2830:22082":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:43218:9373":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:8014:16893":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13031:20928":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:6607:25795":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:5172:9311":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:44274:4199":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:1580:3774":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7166:16856":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9088:3895":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:41922:2041":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:7435:16872":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:6608:9648":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:40866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:7980:16892":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11869:735":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12926:20919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:43360:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:43337:9830":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12617:20900":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4611:3978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10374:17153":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:1074:3770":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12816:20895":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:2705:15890":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:42364:9326":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11356:19659":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6865:33693":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13374:20955":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:4331:32491":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:8187:2016":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4483:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:9981:9343":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11368:19660":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44873:4181":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:39510:9652":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40707:2014":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1710:11380":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:2896:31412":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:1611:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10650:21997":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:487:16958":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"9:382:15699":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:39872:29901":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:21371:4148":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7278:16861":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:8241:16963":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:41910:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"12:762:3759":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:22255:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:652:34783":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12103:20179":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7637:16881":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:562:16959":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4408:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43113:9387":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4962:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:9058:2019":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:1899:11522":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:45207:4210":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:5359:4053":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:4496:4036":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:119:10134":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:1735:2182":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:5682:4081":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10310:17184":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:3188:15903":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:41348:2018":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:2761:4136":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6877:16853":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:9204:31095":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:4396:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44659:4213":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6079:14595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:3566:15914":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"14:0:1864":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:7498:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2841:9699":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"9:800:15728":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3989:30958":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6316:16834":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2605:15886":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:40563:3959":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6541:14975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11617:20149":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:5896:4094":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:39450:3915":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"12:1065:33617":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:7525:3785":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7929:16888":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10820:3835":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4549:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:9947:17142":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9433:17014":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6667:14980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2389:15877":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"14:221:15812":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:44380:4212":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10721:16993":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5843:14555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4322:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:4092:4011":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:671:21000":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:3151:32578":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4725:3999":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:7618:3715":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:7511:15546":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"14:31:15802":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:44398:29905":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9475:17038":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7469:16873":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:2360:3875":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:10921:17197":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4733:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:11338:9839":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:860:3755":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2225:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:42736:9366":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:42144:9320":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:641:3736":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:48504:4223":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:46512:9256":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12164:20183":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:300:33608":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:6572:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"14:187:15810":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:39358:3850":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:12022:20173":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:39533:9654":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:3389:3888":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:1747:11383":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4236:9437":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"7:32:15563":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:11878:1471":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"12:646:3755":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:44250:4207":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5558:16803":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"12:119:33614":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:9288:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:1185:3768":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:10720:22028":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6123:16821":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9930:17117":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43576:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:42636:9371":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:1583:11368":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:20449:30460":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:803:3779":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:8236:4008":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1723:11381":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:45489:4194":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:10732:9332":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:7237:16858":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:822:3764":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4979:25817":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4757:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:5343:4052":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10182:17104":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:2507:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:7518:25383":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:1044:15791":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2687:2186":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5525:16801":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:40575:3960":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:42562:9357":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6496:16840":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8479:2044":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:484:25389":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:5491:4058":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:42530:9364":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11199:19648":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:11839:22005":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10207:17170":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13506:20964":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:9422:17015":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13039:20929":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:5527:9644":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11137:19643":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4805:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:956:3766":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:6298:16833":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12176:20184":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6512:10334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5614:33805":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:564:21012":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"12:353:33603":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:386:16957":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1451:3790":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:0:1867":{"crate_id":17,"path":["object"],"kind":"module"},"17:12909:20918":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:45443:4190":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:1716:4005":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"12:669:3761":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:3105:2045":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:22222:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:4316:4009":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:6161:16824":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5596:16804":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7603:16880":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:3314:3945":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:3172:3777":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6668:34054":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13082:20933":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:11013:4061":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:9051:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6676:16846":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:41901:9493":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5722:14546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13231:20949":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:7581:3729":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42808:9369":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:12233:9489":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3238:3936":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:3603:3961":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:2395:31454":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:20615:4155":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:1541:11364":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:39278:9469":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:7428:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:4241:9438":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4559:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8151:3917":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:10222:22081":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:2065:3707":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:39137:9435":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10321:17150":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:4833:4043":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"10:0:1861":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41940:29031":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:1788:3815":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:4122:9450":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:2825:15895":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:7815:3883":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11875:1472":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:10310:4059":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:7793:3884":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:43325:9834":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:681:21001":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11052:3895":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:7173:10411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:861:3767":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4994:13907":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7869:3791":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:41612:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"7:79:15570":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:1571:3758":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5235:34005":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:9021:16979":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12964:20923":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:11384:3964":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8864:4099":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:540:2727":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:153:15849":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:4139:2045":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:39481:9649":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:2433:15879":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8092:3946":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:3854:16082":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:3975:3987":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41606:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:8951:34754":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:5163:16791":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:1618:9621":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12278:20191":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10752:16994":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:1903:17074":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:2612:3930":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11199:21155":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:6053:14594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:7298:16863":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11939:20168":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:7646:3739":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:5168:9310":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10466:17189":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:8055:16942":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:4099:3903":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"15:0:1865":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6359:16837":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8997:21421":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:12307:20193":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6517:15816":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4379:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11841:20163":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7511:16876":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:2497:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:1564:2045":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:62:10080":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:11856:925":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:12399:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:22288:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1849:3832":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:39463:9642":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3961:3985":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6471:4088":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:6823:25364":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:41106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:50235:29954":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:9527:29759":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:4441:16453":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:4327:16435":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4890:13897":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11606:20148":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:5433:16795":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6000:14567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:1962:17058":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4334:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:2900:31486":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:42572:3917":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"11:36:33597":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:7522:2049":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7396:16870":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12972:20924":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9909:17097":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:1392:3756":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4862:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:11103:9790":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6270:16831":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:20703:4149":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:30035:29606":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:41639:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:1514:11360":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:4385:16445":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:39311:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8810:2099":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43555:4224":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:42556:9358":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:42754:9367":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:22156:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13413:20959":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13327:20951":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:4721:16541":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:1600:32489":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:7030:27400":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:20428:30462":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:7271:28028":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"12:1534:15795":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:6911:4073":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11787:20159":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:43593:9279":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6521:14973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:9658:17086":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:9913:3755":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6034:16817":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9539:17035":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:5010:25817":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2503:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7909:16887":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:3199:3940":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:3632:15932":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43393:9849":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:42690:9341":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10680:3885":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:4921:13900":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5878:14556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10708:16992":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:1677:11376":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5737:16808":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10583:16986":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:9323:9491":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:39894:3945":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13176:20943":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4671:3998":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:525:10456":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6593:16843":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:2842:15896":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:31738:9671":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:4721:3742":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:5835:3903":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6530:14974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:41362:2027":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9070:2026":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:6024:4228":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7329:16866":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:2893:2158":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:44459:4188":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"9:592:15613":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:5168:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44629:4209":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4084:4010":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:8608:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:7218:15359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:12181:30964":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:8776:29671":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:1509:11359":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:11229:21149":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11143:25386":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:8186:1847":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:2261:15844":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13354:20953":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:3124:25117":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:2757:9670":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10520:17193":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13100:20935":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:96:20984":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:939:3764":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7267:16860":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:7195:15357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12148:20182":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:42970:9381":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12361:20196":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:9778:17062":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:39594:9658":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5741:14548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:10200:9342":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11087:19640":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:3146:3774":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9031:34755":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:4387:3718":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11166:4066":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:44948:29865":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:2216:3867":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:22123:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11186:19647":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:43563:4225":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5494:16799":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:46543:9259":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11774:20158":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9382:17022":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9181:3831":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:6221:32489":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:11119:9792":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11661:20151":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:3402:15905":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:8212:16962":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9446:17027":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:242:34747":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:29977:29567":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:247:34751":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10458:3715":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:9874:21043":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12638:20902":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:2930:15899":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11874:1475":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:11315:9842":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:1410:3760":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9165:34749":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:7446:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46637:9265":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:9064:2028":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3665:3965":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:21763:3972":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4422:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:48926:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6946:3781":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:9250:17007":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:1866:3776":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2129:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:4749:16545":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12550:20898":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13158:20941":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:493:10453":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"12:725:3756":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4574:16514":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11761:20157":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9339:17017":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11054:19638":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8772:4061":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12118:20180":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:11791:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7249:16859":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5559:4095":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:6488:10501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:14:1978":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:1731:11382":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:43317:9832":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13478:20962":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:8441:16970":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:6743:4141":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13071:20932":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4520:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:39603:9659":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11576:20146":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:0:1370":{"crate_id":1,"path":["std"],"kind":"module"},"1:4900:1026":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:5323:4051":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5959:14565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:4024:9284":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13492:20963":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6842:33909":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:6702:9630":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4662:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5447:16796":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:9897:17141":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8134:3915":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:10845:21920":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:4649:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:8162:16961":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:41146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8230:4017":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4656:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46161:4211":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:7845:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:9736:1849":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"9:649:15615":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:6071:4226":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"12:1138:3771":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"9:622:15614":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"14:160:15802":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:38944:30556":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:40438:3956":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:21584:29033":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:1065:3769":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2776:9687":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:42586:3918":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"12:2178:33620":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:534:3711":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:5640:3758":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:44358:4208":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3428:2001":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:8101:3887":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:4968:4078":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"12:0:1863":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:2835:9698":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:2300:15873":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:10710:3887":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:3371:3889":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:41226:4079":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:1726:29863":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:5921:9665":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11873:730":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5912:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:20426:30458":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:42544:9361":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9820:17137":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:44681:4216":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13572:20969":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:8295:16965":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:3505:3758":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:4092:9449":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12337:16997":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:11864:1457":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:5236:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4775:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:48887:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46447:4218":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:7163:3847":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7580:1849":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:534:34010":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:8631:16972":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2894:15898":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4787:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:4842:4044":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:21106:4151":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2971:9289":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:9328:17018":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"12:751:3758":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:2209:3865":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:1559:11366":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:43150:9388":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5910:14559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:878:3756":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11320:22084":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40776:2045":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:38752:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:1527:11362":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12896:20917":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:2865:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:10205:4054":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:29935:9413":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:1066:32618":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:590:29899":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11217:19649":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:3010:15901":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12695:20904":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2548:25375":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:11636:9375":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:7205:9394":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13148:20940":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46660:9266":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:4297:16429":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:39501:9651":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:20654:1849":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:2358:3874":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12291:20192":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:3177:9432":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:9115:21991":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:43512:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:40455:3957":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:10186:9339":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:2104:31429":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:636:34796":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4361:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8225:4016":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11504:15828":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12781:20910":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4416:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:21659:29577":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:4817:16565":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12630:20901":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:22354:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:7440:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:11863:1378":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:8393:16968":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:10172:9341":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"13:0:1857":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:11278:9840":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4489:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5902:14558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11436:20141":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:9938:3918":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"12:2205:2048":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4766:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:39542:9655":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5917:14560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9362:16980":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:11089:4104":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:38878:3748":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:123:10135":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:44296:4187":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:10490:17191":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2800:9692":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:12480:3808":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11247:19651":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6649:14979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:699:21003":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:20744:4150":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:3932:3903":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11014:19636":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:5786:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:31729:9746":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:7956:16890":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10350:16995":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10949:19633":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44481:4192":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4274:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:43198:9372":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4945:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11559:20145":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:5697:30846":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:2782:9690":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:505:3707":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:1983:3792":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:12208:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"9:977:15596":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5990:14566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2683:15889":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:11877:1474":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10929:25366":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4248:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9118:34746":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8928:3710":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:766:20998":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:3863:3980":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11161:19645":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:9544:25375":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:4768:785":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13134:20938":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:5388:16793":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12980:20925":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:2157:31451":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:11585:9349":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:2793:15894":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:7136:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1695:11378":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43164:9389":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3281:3924":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4751:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3921:3983":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:40906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:9700:17059":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10385:17186":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:6655:30234":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5931:14561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:2796:4139":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10973:19634":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:1401:3757":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:40733:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:7388:16869":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:3376:1853":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:2624:31415":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:11354:9841":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9293:17024":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:48939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:0:1738":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"1:4552:3984":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"12:1003:3769":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11343:3965":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:3979:3755":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:5056:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:7452:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:21651:29889":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11721:20154":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:5746:4078":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"8:0:1859":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:6667:32492":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:20823:1849":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:4313:9444":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:41588:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3190:30457":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4501:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:904:3758":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:771:3778":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7372:33955":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:3263:15904":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:7277:9414":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:2830:9696":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:558:3713":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13557:20968":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9553:16980":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:2993:3806":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6528:16841":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:39158:29651":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:6519:2107":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:644:34783":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:3138:3776":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12265:20190":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:8991:34756":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:9056:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:9889:2045":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9873:17139":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:7150:3846":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7357:16868":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"12:387:33598":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5793:16811":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7667:3772":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:12768:20909":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2930:2066":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:1568:2099":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11594:20147":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6922:24482":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:2367:15876":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:43175:9390":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:277:2072":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:10699:9331":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11974:20170":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11870:732":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13459:20961":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12884:20916":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:1712:9728":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:9501:17023":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:0:1862":{"crate_id":11,"path":["adler"],"kind":"module"},"1:11881:1110":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:42484:9334":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:553:10459":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:2682:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3907:3758":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6654:16845":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6059:34083":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11734:20155":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8489:2045":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7567:16879":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:9062:2027":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:43313:9833":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:320:33610":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2339:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6070:16819":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10608:16987":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:21636:29535":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10655:3882":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:5759:14550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:11133:9355":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:45703:4203":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:40826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11873:20165":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7487:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4820:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4743:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40484:29009":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:44204:29902":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:39472:9643":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12349:20195":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:7684:3834":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9193:34750":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:12425:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:491:34784":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12134:20181":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:6829:34017":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:31725:2292":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8181:3954":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11034:19637":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:44729:4201":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40801:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:8666:16973":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8274:4048":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10221:17181":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:7001:31113":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:9064:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1645:11373":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:41369:2028":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:8188:2015":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:5309:4050":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6643:14978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:40527:3967":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12087:20178":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:7145:2071":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2538:3928":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:8822:34748":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:9383:22089":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:614:34799":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46584:9262":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2282:15872":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4637:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:951:32489":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11259:19652":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2732:2065":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13192:20945":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:22057:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43520:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46532:9258":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:638:3735":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:45049:29903":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:21676:29547":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:42708:9339":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11070:21156":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:43309:9831":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:42885:9362":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:3528:3755":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2333:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"12:1120:15793":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:7847:16884":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:6880:22103":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:12160:9488":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7426:16871":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:624:34794":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:1230:3771":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:5703:16807":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10283:17155":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:44805:4193":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:719:20996":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2855:9702":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11125:19642":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13141:20939":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6506:9417":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7677:3773":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:9328:9492":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:43305:9827":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:1216:3769":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2989:3805":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6109:16820":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13580:20970":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5813:14553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2535:15883":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"12:1085:15792":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10047:22067":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11748:20156":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:6851:3944":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:8848:4101":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"12:697:3762":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10332:17185":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13114:20936":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:505:10455":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:8110:16940":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11330:19657":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10528:16984":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:2557:15884":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8252:4018":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:39571:9645":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11528:17145":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:39188:9472":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2808:9693":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3197:3939":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:8293:9348":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:3656:3792":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:10420:17179":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:11880:1528":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11909:20167":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:35:3810":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:39551:9664":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:7853:25112":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2679:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:6690:16847":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11857:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12730:20905":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10134:4065":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4714:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11828:3741":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:8272:16964":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13184:20944":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:2320:15874":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12237:20188":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10940:25380":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:41673:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:10626:4047":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:7592:3716":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:6330:16835":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40725:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:21568:28992":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:3913:3982":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11485:20142":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:39235:3733":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:9671:17053":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:521:21006":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"14:7:15802":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12251:20189":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1609:11371":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:5374:4054":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:41725:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:8983:16854":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:38768:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:4687:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7521:15547":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:46301:4215":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6781:16851":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10245:17183":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4468:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"15:214:15824":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:4303:9443":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10075:17101":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11699:24481":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:21697:29654":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12797:20911":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:6985:2099":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:7075:2048":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10062:17103":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:4562:21971":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11247:21931":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:42903:9363":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3087:3807":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:7529:9639":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11070:19639":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11882:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40398:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:9371:16981":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9155:16982":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4900:13898":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4244:4015":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:11862:1348":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:5203:15840":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6210:16828":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2676:9286":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:621:2000":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10233:17182":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7211:16857":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6757:14985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9183:16983":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:1518:15794":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:653:10513":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:8746:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13527:20966":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:42125:9820":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:8941:16977":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13059:20931":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6735:16849":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7970:16891":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2864:9704":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4952:13903":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46569:9261":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:2745:9285":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:11536:17143":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:44:15780":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10625:16988":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7319:16865":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8164:3914":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:8420:2042":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:9577:17041":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4062:27399":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:10668:21987":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11300:19655":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:4367:9446":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:925:3761":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"9:0:1860":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5839:16813":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:39391:3864":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:621:31463":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6137:16822":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:45283:4217":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2212:3866":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:1704:3759":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:12860:20914":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:9317:17019":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:3026:15902":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46363:4180":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:8475:16941":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:39316:3849":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:42992:9382":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:727:21004":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:39633:9661":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:8781:28974":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9018:22001":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:7475:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:847:2045":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:10296:17154":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:38928:2063":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:1969:3791":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:7135:34112":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2579:15885":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6146:16823":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:3121:25111":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5690:14543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13203:20946":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12836:20912":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11106:19641":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:42494:9335":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:1931:17034":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:8368:16967":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10434:17188":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"9:676:15604":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:7825:16883":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40589:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:355:3727":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12033:20174":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:11461:9273":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:7949:3931":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:10058:9344":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10822:16996":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:39401:3863":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:9458:17052":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5949:16814":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:6594:11300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5728:14547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9071:34766":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:41186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6463:16839":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6704:16848":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:42402:9328":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:38910:9707":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5890:14557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10257:17157":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:48861:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7861:3929":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"13:110:33671":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:3159:3938":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1687:11377":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:20578:4154":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:7197:2070":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:8881:34760":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:9681:17087":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:6355:3743":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11500:20143":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11684:20152":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4301:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:361:3728":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4545:16509":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:7469:16959":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:42373:9325":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:39174:9470":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11001:4060":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:38737:9705":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13366:20954":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:4841:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:1592:3776":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13168:20942":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:21111:4174":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:8494:15840":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2455:9483":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:5545:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10403:16994":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:6903:16854":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:9303:17023":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:11590:9347":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:891:3757":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4476:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:39441:3803":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:42465:9333":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:929:3762":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2675:1856":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:3937:32489":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11867:632":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4389:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:19:15664":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"12:98:33623":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:9627:17046":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:567:10461":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7483:16874":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11860:1035":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4795:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"14:165:15803":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5981:34008":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10445:16997":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10353:25378":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:40421:3955":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4850:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:20854:4152":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:39198:9473":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:2572:3920":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8970:25782":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:594:10465":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4369:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4224:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:4888:16588":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:6931:3809":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7798:3882":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11405:3966":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2631:15887":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"9:111:15608":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:8526:16945":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2385:1874":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:588:3731":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13126:20937":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9857:17118":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:7828:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6548:4048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:11389:9343":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5967:33153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4237:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9791:17090":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:40716:9775":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:7095:9641":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9764:17089":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:7252:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11800:20160":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:45026:29949":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4630:4019":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:42840:3914":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:1083:3771":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:6087:25391":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"12:1628:33615":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10497:17192":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6816:34026":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7194:9393":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:8613:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48913:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6119:25821":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:39913:9636":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:3242:9288":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11343:19658":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5805:14552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:42654:9370":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:1431:3762":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:39264:9467":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:2919:3788":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4882:13896":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7788:2181":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:43021:9384":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:48900:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3716:15968":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7022:2099":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:43502:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:3977:30960":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10506:17158":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:21713:29538":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:8701:16974":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:2937:2068":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:9060:2018":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:8056:16894":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:5675:4080":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44184:29895":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12850:20913":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10412:3937":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4877:13895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4988:13906":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11853:20164":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6472:15817":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8963:25803":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7044:34088":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:20394:30424":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7093:16855":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:582:9479":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4583:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43086:9386":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6719:14982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4261:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7288:16862":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8437:2043":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:42382:9329":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:6692:32502":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:8418:16969":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5219:15838":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:7597:3717":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:1030:32617":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:6611:11303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8270:4046":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12060:20176":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11868:633":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:1201:3770":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:20409:30424":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:4346:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3770:3966":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:646:3737":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8758:4060":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:10131:9338":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3640:2099":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:1617:11372":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10845:16997":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:43341:9848":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:6963:3782":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:39328:29615":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6773:14987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6728:14983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:810:3760":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:507:34783":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3205:9287":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:3150:9706":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:44499:29892":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4929:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:4164:4014":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11997:20171":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9722:17085":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:2370:3880":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:6535:9419":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:43321:9836":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:9283:17026":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:3644:3791":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:40784:3755":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13404:20958":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:4847:3903":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:43381:4140":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1927:1999":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:11570:9348":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"14:40:19635":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9107:4135":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"12:815:3763":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5945:14563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:30516:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:1704:11379":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6171:16825":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:29941:9680":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7872:16885":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:4667:3994":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:1589:11369":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:4891:2005":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:4113:4013":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5716:14545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"9:709:2041":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10642:16989":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:9048:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:2771:15893":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6252:16830":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"12:1832:2045":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6094:14596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:7939:25793":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3157:3937":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:1354:3755":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11025:22025":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:8137:16960":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:0:1868":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:481:10451":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13091:20934":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:20381:9479":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:6318:25795":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:41709:9784":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:8085:3944":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43605:9277":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2228:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6628:14976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6345:16836":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11315:19656":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:42850:9365":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4748:3993":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:8835:4098":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:4358:9445":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:38792:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:8752:3917":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:707:9350":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:39903:9635":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12739:20906":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:8940:21460":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42313:30955":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:4402:4019":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3112:3775":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:41355:2019":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:40540:3958":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:46409:4198":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:8774:16943":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3171:9433":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12514:20897":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:5878:15843":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11858:1491":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9350:17016":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:6525:9418":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"12:1029:3770":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4566:21975":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3437:22879":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:3249:17123":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13221:20948":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9631:17033":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12609:20899":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10360:17151":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7309:16864":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"12:1845:3759":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:6059:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:4357:16441":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10159:17106":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3668:3964":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10796:16944":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13047:20930":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13007:20926":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4681:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11174:19646":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:20697:4147":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:4519:16507":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:7463:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:41932:28990":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:8911:34765":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10670:16990":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13024:20927":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:1550:11365":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4424:4020":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:44518:4177":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:4921:16597":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10270:17156":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11813:20161":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:6940:2099":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2993:15900":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4720:13877":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7543:16877":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7704:2292":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13382:20956":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:10645:21953":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:11708:20153":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:39421:9317":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:80:20983":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9488:17037":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:2894:32559":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:10415:3939":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:7661:3740":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"9:827:15696":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8903:4083":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42474:9336":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13436:20960":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4564:21973":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:10863:4062":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:12368:4226":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:11871:733":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:39584:9657":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"9:956:15592":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9263:17008":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4571:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:2851:9701":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7260:3759":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:7805:3885":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:29712:3970":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4313:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11271:19653":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8880:4102":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:7480:22106":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8296:3996":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7117:34086":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4981:13905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11547:17144":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:9978:3825":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7659:16882":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2940:2069":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11861:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:7386:15518":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:531:10457":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3388:1852":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:20641:4156":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:42790:9368":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:9805:17136":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:38812:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:9831:17138":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3236:3935":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:6719:33961":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8244:3963":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10894:17000":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:45909:4222":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:572:10462":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:3457:15906":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2411:15878":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:7434:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11479:21921":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:46485:4183":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:38651:9431":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:2766:4138":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:8339:16966":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44328:4220":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:1534:11363":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:22786:3968":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:6282:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}