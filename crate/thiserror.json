{"root":"0:0:1877","crate_version":"1.0.49","includes_private":false,"index":{"2:12483:28423":{"id":"2:12483:28423","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4559:28423"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43728:8498","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12364:28402":{"id":"2:12364:28402","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12362:28401"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12464:21272":{"id":"2:12464:21272","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:864":{"id":"2:12359:864","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12051:446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12476:28422":{"id":"2:12476:28422","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12021:131","`FromStr`":"2:12020:2194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12020:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12020:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12482:22440":{"id":"2:12482:22440","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12387:27327":{"id":"2:12387:27327","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12386:27330"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43712:8489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12411:21261":{"id":"2:12411:21261","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11876:8478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:8822":{"id":"5:5518:8822","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12379:28404":{"id":"2:12379:28404","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12057:1496","str::slice_mut_unchecked":"2:12380:28405","crate::ops::Index":"2:3072:2894"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12394:20692":{"id":"2:12394:20692","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12375:21227":{"id":"2:12375:21227","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12481:22439":{"id":"2:12481:22439","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29081":{"id":"5:5517:29081","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2208","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2879","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2208","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2879","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:28401":{"id":"2:12362:28401","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:22572":{"id":"5:5536:22572","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12482:22440"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12444:28411":{"id":"2:12444:28411","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12060:8487","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::match_indices":"2:12441:28410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43597:8503","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12461:2697":{"id":"2:12461:2697","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:338":{"id":"2:12369:338","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12370:337","`u8`":"1:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:21269":{"id":"2:12429:21269","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:2236":{"id":"2:12360:2236","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29083":{"id":"5:5524:29083","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:21259":{"id":"2:12408:21259","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12060:8487","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split_whitespace":"2:12386:27330","str::rsplit":"2:12414:21263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43429:3006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12420:28408":{"id":"2:12420:28408","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12060:8487","str::split":"2:12408:21259","prim@char":"1:12051:446","str::split_terminator":"2:12417:28407"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43497:8506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:3029":{"id":"5:5534:3029","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:2235":{"id":"2:12404:2235","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41469:194","prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:29081","5:5518:8822","5:5521:29082","5:5524:29083","5:5532:29084","5:5533:29085","5:5534:3029","5:5535:22571","5:5536:22572"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12383:27317":{"id":"2:12383:27317","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43399:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:28405":{"id":"2:12380:28405","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12057:1496","crate::ops::IndexMut":"2:3076:2895","str::slice_unchecked":"2:12379:28404"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12397:20694":{"id":"2:12397:20694","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:21267":{"id":"2:12426:21267","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12051:446","str::splitn":"2:12423:21265","self::pattern":"2:12060:8487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43551:8474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12479:22436":{"id":"2:12479:22436","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39501:21163","Self::is_ascii":"2:12478:22435"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39501:21163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12455:28417":{"id":"2:12455:28417","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12085:8482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12400:2278":{"id":"2:12400:2278","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41469:194","prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:22435":{"id":"2:12478:22435","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12485:2820":{"id":"2:12485:2820","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4560:2820"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43737:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12381:21251":{"id":"2:12381:21251","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12382:21252"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:27318":{"id":"2:12390:27318","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43721:8488","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:29085":{"id":"5:5533:29085","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2208","`String`":"5:7487:245"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2208","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2879","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12447:28412":{"id":"2:12447:28412","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12470:28420":{"id":"2:12470:28420","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12388:26101":{"id":"2:12388:26101","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43683:3002","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:27627":{"id":"2:12384:27627","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43405:8493","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12480:22438":{"id":"2:12480:22438","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12382:21252":{"id":"2:12382:21252","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12381:21251"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:28416":{"id":"2:12454:28416","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12458:28418":{"id":"2:12458:28418","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12486:28424":{"id":"2:12486:28424","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4557:28424"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43746:8499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:28406":{"id":"2:12389:28406","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43693:8501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:29082":{"id":"5:5521:29082","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:21228":{"id":"2:12377:21228","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12438:28409":{"id":"2:12438:28409","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12060:8487","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::matches":"2:12435:2118"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43651:8505","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12467:28419":{"id":"2:12467:28419","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12391:21271":{"id":"2:12391:21271","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:22571":{"id":"5:5535:22571","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12481:22439"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:1872":{"id":"0:74-20:0:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1872","glob":true}}},"2:12417:28407":{"id":"2:12417:28407","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12060:8487","str::split":"2:12408:21259","prim@char":"1:12051:446","`DoubleEndedIterator`":"2:7476:125","str::rsplit_terminator":"2:12420:28408"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43479:8507","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12441:28410":{"id":"2:12441:28410","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12060:8487","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatch_indices":"2:12444:28411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43579:8502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:21265":{"id":"2:12423:21265","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487","str::rsplitn":"2:12426:21267"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43533:8476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:28400":{"id":"2:12361:28400","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:27330":{"id":"2:12386:27330","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12387:27327"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43703:8490","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12370:337":{"id":"2:12370:337","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12368:28403":{"id":"2:12368:28403","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:28415":{"id":"2:12453:28415","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:2118":{"id":"2:12435:2118","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12060:8487","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::rmatches":"2:12438:28409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43633:8504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12367:21164":{"id":"2:12367:21164","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11620:8491"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:28414":{"id":"2:12451:28414","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:29084":{"id":"5:5532:29084","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1877":{"id":"0:0:1877","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[257,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.49\")]","#![allow(clippy :: module_name_repetitions, clippy :: needless_lifetimes,\nclippy :: return_self_not_must_use, clippy :: wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:1872"],"is_stripped":false}}},"2:12373:21226":{"id":"2:12373:21226","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12473:28421":{"id":"2:12473:28421","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12051:446","self::pattern":"2:12060:8487"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12385:20440":{"id":"2:12385:20440","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43415:3005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12371:21225":{"id":"2:12371:21225","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:21263":{"id":"2:12414:21263","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12060:8487","`DoubleEndedIterator`":"2:7476:125","prim@char":"1:12051:446","str::split":"2:12408:21259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43447:8472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:21270":{"id":"2:12432:21270","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12065:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12080:8484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:28413":{"id":"2:12449:28413","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358":{"id":"2:12358","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12359:864","2:12360:2236","2:12361:28400","2:12362:28401","2:12364:28402","2:12367:21164","2:12368:28403","2:12369:338","2:12370:337","2:12371:21225","2:12373:21226","2:12375:21227","2:12377:21228","2:12379:28404","2:12380:28405","2:12381:21251","2:12382:21252","2:12383:27317","2:12384:27627","2:12385:20440","2:12386:27330","2:12387:27327","2:12388:26101","2:12389:28406","2:12390:27318","2:12391:21271","2:12394:20692","2:12397:20694","2:12400:2278","2:12404:2235","2:12408:21259","2:12411:21261","2:12414:21263","2:12417:28407","2:12420:28408","2:12423:21265","2:12426:21267","2:12429:21269","2:12432:21270","2:12435:2118","2:12438:28409","2:12441:28410","2:12444:28411","2:12447:28412","2:12449:28413","2:12451:28414","2:12453:28415","2:12454:28416","2:12455:28417","2:12458:28418","2:12461:2697","2:12464:21272","2:12467:28419","2:12470:28420","2:12473:28421","2:12476:28422","2:12478:22435","2:12479:22436","2:12480:22438","2:12481:22439","2:12482:22440","2:12483:28423","2:12485:2820","2:12486:28424"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"17:3441:16298":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:46265:26948":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:9531:31955":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4438:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:4774:15673":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5027:13123":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5060:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41362:26929":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4802:13098":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:41527:2189":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6569:15999":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14346:20355":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:7934:27799":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:43256:8453":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:541:2529":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:10298:2189":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:7690:2803":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:622:2144":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:4787:415":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12225:19048":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:45738:3260":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:9033:20584":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:2406:15032":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6045:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40049:8604":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12123:19041":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:2049:2858":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:1058:2858":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10430:16273":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:4491:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:14068:20334":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:44172:8986":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:30218:8547":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10591:2803":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:23403:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:5495:2991":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:755:20403":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12621:19546":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4585:15604":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:29969:3055":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43497:8506":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:45443:3240":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13949:20323":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:3243:255":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:4023:27835":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11573:16154":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11351:16386":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11910:19028":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:1118:29829":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:1075:16185":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6201:20576":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:5787:3164":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:587:9611":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:5091:23461":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8011:20588":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1273:2859":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:40080:27789":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9931:28043":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:676:252":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13851:20315":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43317:8471":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2546:259":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:20861:27525":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:7771:20470":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:40224:8783":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10661:16330":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10227:16221":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7568:16030":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:40016:8606":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7544:16028":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:871:2845":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:11389:16146":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:840:2189":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8870:3185":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:9460:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:6003:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:7618:14776":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:8205:16055":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11201:16344":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7862:16044":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13906:20320":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9790:31973":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:9003:20518":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:4168:3094":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:447:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10551:3022":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:113:20383":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7792:16042":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:7472:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:2576:23002":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:12068:1602":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:3315:15060":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7613:16032":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7582:16031":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13228:19586":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:7897:8779":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11098:16350":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:6192:8786":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:1068:14942":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:573:9609":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:2797:2808":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9102:16107":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2891:8838":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:0:527":{"crate_id":2,"path":["core"],"kind":"module"},"17:11661:16106":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9051:16103":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:43693:8501":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"11:1048:30799":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:4240:3097":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7512:8530":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:21802:27528":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11613:8405":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:22725:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:8225:3006":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:43387:8497":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:582:8621":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6616:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10456:16244":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:12065:789":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6156:15976":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4471:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:32026:8582":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6415:15990":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12373:19535":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:39149:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:766:20396":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:1527:10496":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"9:507:14824":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:7860:2972":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:22153:27027":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10112:16206":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:2174:28260":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:12072:1598":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7855:2971":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:10760:3130":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:7884:16045":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10167:22815":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10750:16290":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:39989:2821":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:32033:8899":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44359:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"18:736:20395":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14478:20364":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:43956:8523":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:4160:3093":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3461:15061":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:4834:846":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10520:16276":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:41299:3042":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4957:13116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:4053:15240":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:4613:15608":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8006:23474":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13876:20317":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2450:15034":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:695:2851":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:9492:2165":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44164:8987":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:2832:2201":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13259:19588":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:43447:8472":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:568:9608":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:42564:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:7434:27789":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:21044:3227":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:41441:3046":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:1076:2860":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:3741:3052":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6843:14214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9070:15952":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12778:19557":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:9886:16171":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6386:15988":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:6332:3360":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6574:9647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:749:2847":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:4194:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8238:3050":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:44041:8508":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:261:29406":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:1011:29406":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8202:3003":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:4578:3119":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9574:31962":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:4363:29453":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:2012:16224":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12983:19569":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:1500:10492":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:13487:20297":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:14469:20363":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:1671:1146":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"11:2201:2192":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11000:16299":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8415:2184":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:4268:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1681:10510":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8293:3099":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:8594:16105":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:11197:8999":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:11606:8945":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:32008:20470":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:5976:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:42524:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5899:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:41612:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:5661:15959":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12154:19043":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9762:31979":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6024:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:11825:8990":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4994:13120":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:7890:2193":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10903:16296":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"9:177:14926":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42226:2165":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46942:3245":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:719:20394":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:14522:20367":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:22169:26949":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:595:9612":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6031:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5574:15954":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:9607:16141":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:3915:15126":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11639:14985":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7102:16016":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"9:330:14877":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"3:0:471":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:10126:16207":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:41783:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1709:10513":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:40549:8804":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:12730:8629":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4756:13092":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"0:0:1877":{"crate_id":0,"path":["thiserror"],"kind":"module"},"1:9038:20617":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11074:16376":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:10109:23491":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:43399:8494":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:12080:8484":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:47290:3251":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13868:20316":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4608:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:6817:3216":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:40004:8605":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5419:15953":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4921:15700":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4478:3102":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6145:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40193:2892":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6901:16009":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4889:13108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:2160:626":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9985:16181":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:2223:2954":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:9159:3210":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4680:3061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13792:20310":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:5325:29406":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11448:16148":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:21227:8863":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"18:96:20382":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11173:16379":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13723:20308":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:646:2826":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3188:25881":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44007:8525":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:483:22965":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:43337:8470":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:12050:990":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5017:13122":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2908:8840":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:2574:15039":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11815:16394":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:7600:23006":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:11802:8993":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7708:16037":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:2744:15046":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:8195:16054":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:1568:2848":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:43746:8499":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:8562:2161":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10738:16334":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:8097:16048":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:2223:29899":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:6304:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:1818:2189":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11332:3148":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"14:221:14962":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:11765:8991":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:2669:1999":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:11316:16374":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:8338:3129":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:521:20404":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:1663:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2472:15035":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"9:357:14837":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13966:20324":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10240:16188":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:45720:3254":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:9140:2983":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11023:16297":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6818:16006":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7067:30950":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:8971:3165":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:41978:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:39307:8852":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12075:1206":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"7:0:1648":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7128:16017":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11272:16382":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12086:19038":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:9500:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:624:31998":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10165:16209":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:7534:16027":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"14:187:14960":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:5121:15756":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4397:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4320:3098":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:1411:2189":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3518:2847":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:4351:8582":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:46066:3261":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:2849:3213":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:30312:26838":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:3655:15063":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:9984:20651":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:736:2846":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:5390:3133":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13667:20304":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2380:15031":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:41680:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:30788:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:46792:3311":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2172:8864":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"11:630:2189":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11719:16160":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:7220:2879":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7541:22947":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:614:31988":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1536:10497":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:3232:15059":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:4176:3095":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10278:16219":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11367:16351":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7462:16021":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:8990:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:3054:8422":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:2321:15028":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22220:26932":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:2881:15052":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11326:20610":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:47782:8391":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:30184:2877":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:39314:8556":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:44152:8982":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:3183:29803":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6083:14998":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:6318:15982":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7436:16020":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:2497:1996":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:5088:15747":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:2168:30785":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4037:3068":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:3391:3032":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:12017:20613":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:8953:16130":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:667:2850":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10370:16217":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4422:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7391:16019":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13914:20321":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:6014:8806":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2339:15029":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:4527:15594":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4712:3102":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13838:20314":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6944:31003":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13693:20294":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:5832:2832":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2938:8847":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7733:2830":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11111:16349":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2785:247":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43597:8503":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11162:16343":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8312:3050":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4844:13103":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:4719:15666":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6795:8551":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:41744:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1426:2844":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:43551:8474":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:9650:16142":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4910:13110":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11490:16150":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10784:24189":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5866:15968":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8840:3143":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3945:3062":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"9:237:2185":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"18:671:20398":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:22593:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:4949:15704":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5070:13127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:41382:27797":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:7401:8780":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13298:19590":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11507:16151":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46234:26939":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:1545:10498":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:1513:10494":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:2918:8843":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4382:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7320:2241":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44440:8411":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:6884:8789":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13676:20305":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:22890:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:1573:2863":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:3325:8421":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:22332:3057":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11261:16372":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:40346:8799":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11971:19031":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:4127:8588":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6735:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6742:14970":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:6546:3170":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:2859:8832":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:3939:2991":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:2947:8849":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:46187:26856":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:918:2850":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4370:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1764:649":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:2962:29826":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:12656:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11788:16393":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:45868:3283":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:4011:27831":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:41316:3043":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:1737:8874":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:1557:2189":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:21345:3222":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3013:2202":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:526:9603":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12208:19047":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:2690:29368":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12598:19545":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:43721:8488":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14269:20348":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:1641:8760":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:1575:10501":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7936:2882":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:8670:8483":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:1842:2918":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:21477:3225":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:2670:15043":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6850:14215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:599:31993":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7768:16040":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:515:20407":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12237:19049":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:12069:1599":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:10088:2911":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:40791:8778":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:641:2825":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5076:13128":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11761:16162":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12074:19037":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6960:16012":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:39908:8571":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:3065:15058":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:10575:16278":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13758:20293":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:14282:20349":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:500:9601":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6696:14971":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:1717:10514":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:4986:15717":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:12049:397":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:41822:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6037:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:723:2845":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:7608:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8985:20578":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:42019:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:21213:3230":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:42487:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10397:16271":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:558:2801":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:4709:3128":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10726:16333":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4330:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6805:14211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12196:19046":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11124:16348":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11306:16159":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7375:2192":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9081:20618":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:13778:16187":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11625:23488":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:793:2849":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12888:19563":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11495:3052":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:5135:3160":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4783:13095":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:12054:1107":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:3504:2145":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"19:0:1087":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:4946:13114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5648:15958":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:4751:3080":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22857:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:534:2799":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:6602:3174":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:41333:3044":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:4:1070":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12484:16337":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:2428:15033":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:5249:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:40096:2935":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11536:3051":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"14:31:14952":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:22956:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:9617:31960":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:1817:2911":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:40783:8776":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:7501:8529":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:907:2848":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10447:16245":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6657:10636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:20908:27680":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:79:14799":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:644:2844":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7882:2970":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:6077:23012":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12252:19050":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7530:16121":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11253:155":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:44367:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:4035:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:22193:3056":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:40395:8787":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:8895:16128":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:6169:22993":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:39087:8423":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:10623:8475":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:43373:8500":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46288:26928":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10962:16292":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13286:19589":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13802:20311":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10862:22914":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:22692:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6261:15980":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:4234:2189":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:5982:15972":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6086:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:21468:1996":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:10443:3141":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:5753:3162":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:4807:3082":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:1631:10505":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2368:2699":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:45775:3315":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:46604:3244":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3720:2882":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:5588:15955":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:12055:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12576:19544":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11358:16387":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"9:52:14840":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14118:20340":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11244:16156":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1138:29846":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:895:2189":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:39048:8567":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:7526:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:0:2008":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:949:2855":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:1184:16193":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9086:15953":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12658:19548":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1585:2865":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:6663:29406":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6720:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11586:16155":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:9277:16136":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:1838:2863":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:5435:31187":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12645:19547":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6968:16013":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:1922:8424":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5814:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44018:8526":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14335:20354":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:40068:2936":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:1548:2991":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:43225:8464":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:0:2004":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:40285:8795":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8397:2155":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13554:20299":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12293:19053":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:12678:28038":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10616:16281":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13632:20303":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8948:3184":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:43207:8461":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:39328:8564":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:46728:3256":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:8154:16051":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10545:3024":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:11841:8992":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5612:15956":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:9172:16133":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:9496:2172":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:3178:2864":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:0:2012":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5808:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2596:15040":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:0:1488":{"crate_id":1,"path":["std"],"kind":"module"},"5:3217:29815":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3989:3065":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:7739:2861":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:3330:2848":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:5369:8444":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4458:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2366:2957":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"9:486:14820":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:2783:8419":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6598:9482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9488:2972":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:46682:3250":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2903:8839":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:7584:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7090:31286":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6165:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43479:8507":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:4465:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3266:3027":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43235:8462":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:9494:2164":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4537:13072":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14083:20336":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11189:22911":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:7893:2875":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:43327:8469":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:5909:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:40773:8775":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:12705:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:45597:3282":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:4272:8573":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:12000:22889":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:10788:16335":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:2959:2301":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:7520:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:644:31985":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11632:14985":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:42779:26446":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:7573:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12876:19562":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:43308:8468":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:10581:8476":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:14090:20337":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:42240:2173":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:2170:28364":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7015:16015":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7387:2843":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:1579:2864":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:0:2010":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10316:16225":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12267:19051":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:4277:8574":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4618:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13826:20313":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:6511:29406":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7463:2933":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5838:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10410:16237":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:8686:16122":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:399:30793":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:6893:31200":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4750:13091":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:14308:20351":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:44160:8983":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12067:786":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:21351:3224":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:11151:16378":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:10779:22813":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:10595:8474":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:707:8485":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:7299:28344":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:39165:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:32019:27331":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:12111:19040":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:5994:9201":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6017:15974":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11295:16383":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:4973:2151":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:8560:1994":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3513:25671":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:40063:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10548:3026":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:4393:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12043:19035":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12945:19566":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:15:2121":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:10685:16289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:5455:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:3529:3000":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:2966:29824":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:7281:14586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:43728:8498":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5322:15933":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11472:20553":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:878:2869":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4856:13105":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9521:16139":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7523:16026":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:5060:23461":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9867:16170":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:8115:16049":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"9:450:14821":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7492:16023":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1672:29406":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2840:8812":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10440:16274":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:42732:27025":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:11182:8459":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:6814:8552":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:5403:15952":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:9852:16169":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:40233:8790":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9752:16144":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:43993:8524":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:10347:3006":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:3764:15071":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13890:20318":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:45757:3309":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:49744:3238":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:6627:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:12861:3358":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:8219:3005":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:2384:2962":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:1302:2860":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:41467:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:2504:15036":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40243:8791":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:4806:15681":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:1523:2881":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:276:2208":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7487:245":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:207:8427":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:40262:8793":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7503:16024":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:311:30778":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:4138:25573":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8878:2241":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43712:8489":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10467:8479":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7597:31083":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4003:3067":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:9660:31939":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"14:7:14952":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11374:20439":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:21180:3235":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12062:19036":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9176:23478":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:11327:16384":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4812:13099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:2219:2953":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6401:15989":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:14434:20360":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9823:16168":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:10429:8465":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4189:3096":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:46758:3262":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:1779:2900":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:1501:14944":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10468:16275":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10023:16143":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8826:3142":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5872:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2638:3017":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:2970:29827":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1638:10506":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12136:19042":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:562:9607":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:44423:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:5994:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:536:31031":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:14134:20342":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4830:3076":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:9490:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11281:16373":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7450:2932":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6687:16002":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:14033:20331":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:43405:8493":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13973:20325":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1673:10509":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13685:20306":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:11141:8467":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:9493:23022":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:43929:8522":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:1911:10678":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10949:16291":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"9:393:14822":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5784:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:30254:26853":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2923:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:1845:2864":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:12898:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:657:2241":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11309:22995":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:21444:1996":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10334:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:21449:3221":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:7237:2870":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10990:22904":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:782:2867":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:6584:2241":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:6902:23018":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:8794:16125":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2879:3214":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10084:16179":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:3020:2204":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:21042:1996":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10698:16311":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:1442:2241":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:21283:1996":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:0:869":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12305:19054":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44465:27822":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:44349:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6634:3131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10107:23471":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:14001:20328":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"14:215:14961":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:14499:20365":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:39981:8499":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:12065:8483":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13611:20302":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:42515:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13739:20309":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:4059:3071":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:9959:16183":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5886:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:3888:15123":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:3522:2978":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4415:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:0:2014":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12062:684":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10771:16310":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2394:2967":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:7581:23016":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:45513:3241":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12465:16338":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:45920:3295":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:481:20405":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9328:3005":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:7304:14588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:7529:2206":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:6912:265":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:44240:9000":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:12070:1600":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:7644:1996":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:43579:8502":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8505:2187":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"10:0:2007":{"crate_id":10,"path":["adler"],"kind":"module"},"11:1831:2848":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5996:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:4341:8581":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:6473:3173":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:21365:3225":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14460:20362":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:7912:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:41518:2240":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7342:31230":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11177:3143":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4725:13088":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:41453:3047":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:7397:8781":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8286:3045":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:40253:8792":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:12280:19052":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:2888:23008":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:14163:20345":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4498:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7269:31293":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:7447:2207":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14056:20333":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:45698:3248":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:943:2854":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7718:2829":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:47771:8390":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:2131:2795":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:47724:3318":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:46090:3310":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:10150:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:7029:22709":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12057:1496":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:7538:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:42219:2164":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:12066:790":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:2141:29816":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:9709:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10036:16186":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:47876:8397":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:40023:8607":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6859:14216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:30816:8621":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:21299:3220":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6279:15981":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:47846:8395":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:8659:16102":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:9780:16145":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4753:3081":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12711:19552":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4485:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:21912:1996":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:6203:28039":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:41552:2159":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:10975:3137":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:3997:3066":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8212:3004":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:11620:8491":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:45898:3289":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:43813:8517":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:2782:2002":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13135:19579":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6204:15977":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6877:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:884:2846":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:5407:2991":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8304:3091":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:11216:2983":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:652:31985":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:8985:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:2854:8833":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2924:8844":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:5575:3138":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:1121:2860":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:5639:3176":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:7549:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:6433:3166":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:3797:15080":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10139:16208":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:986:2858":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2498:8625":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:6824:8553":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:47478:3257":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:9455:31972":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"9:0:2006":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:4500:3103":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:2499:3014":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"11:844:2856":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"10:44:14931":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:4051:3070":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:9865:8956":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:7561:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:14100:20338":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:6981:29451":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:22824:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2216:2952":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12997:19570":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:629:28299":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9350:16104":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:2921:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:4626:8598":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:10486:22991":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:12085:8482":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1781:2901":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:2598:3007":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:5424:3135":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8298:3100":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:4348:266":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:6098:2991":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:10351:23658":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:22626:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:40030:8608":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:149:15004":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:46136:3317":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:44148:8979":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:6560:31283":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:579:9610":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:42771:26447":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:7828:16043":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"15:394:14988":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:505:2795":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:46492:3290":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:6784:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7474:16022":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4982:1096":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:2934:8846":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13546:20298":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8244:3049":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8320:3101":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10966:20659":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"11:2060:2859":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2875:3212":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3226:3025":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4940:13113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:2284:14999":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:11108:8466":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:9972:16182":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6456:15992":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4826:13101":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:42233:2172":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:1776:2848":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:2865:8835":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:1895:2142":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:41861:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6600:16001":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:4164:2991":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:45968:3243":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4570:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:42983:8454":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13897:20319":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:822:2868":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:45637:3294":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:39959:8611":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:44184:8999":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:21790:3217":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:12074:8485":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:4047:3069":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7664:2804":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:3939:3063":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13085:19576":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5046:13124":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6226:15978":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:44452:8409":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:4462:15577":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39969:8612":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:8072:16047":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3224:3024":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:41585:2160":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:798:2852":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:8232:3002":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11008:3144":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"11:1027:14941":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7571:2848":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:22137:26942":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"12:0:2009":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13162:19581":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5995:15973":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:2786:246":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4835:13102":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:1492:2850":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:25805:268":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:3565:16316":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:3212:2863":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:1538:14946":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:2722:15045":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12698:19551":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:20891:27677":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9242:16135":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11062:16375":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43703:8490":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2883:8837":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:39945:8609":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11639:16157":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5827:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11215:16346":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:3238:2866":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:7669:2806":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:6650:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14024:20330":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:897:2847":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6041:15975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:30418:26924":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6929:16011":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:47808:8393":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40202:3003":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:5973:3160":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:1822:2241":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9998:16180":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:5816:31152":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4403:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8181:2979":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:47540:3291":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:7153:3031":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4789:13096":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:46368:3278":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:3171:2189":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:2969:15055":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4448:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:47602:3312":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2618:15041":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:504:16120":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:5373:8445":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6545:15998":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4951:13115":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:3305:3023":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:9137:16108":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6697:10619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:7744:2862":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4697:13085":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7782:16041":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:1840:2917":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10637:16283":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6582:10451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:4634:3067":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:8825:16126":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:20848:8621":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6829:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11991:19032":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6607:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:2644:15042":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:7865:2969":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:12850:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:7555:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12830:19560":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2792:249":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47797:8392":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:1858:2866":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12671:19549":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"9:426:14823":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4392:3092":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3652:2241":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:32120:8813":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"7:32:14792":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5317:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7651:16034":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5746:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:0:2013":{"crate_id":17,"path":["object"],"kind":"module"},"2:47899:8398":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8121:2974":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:8932:3181":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:3419:2991":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2930:8845":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:7420:2934":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:12064:788":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:5509:3137":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4850:13104":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:41671:2241":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:1696:10512":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46522:3296":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:506:9602":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4317:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10059:16184":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12685:19550":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:5555:8794":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:40336:8798":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:403:30794":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:14126:20341":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:40143:2951":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4666:13083":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:22923:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:805:2853":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:8158:3033":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10929:16295":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12172:19044":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7514:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:8167:16052":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:8249:3041":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:8181:16053":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:40355:8800":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:2913:8841":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:3023:2205":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4772:13094":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:1611:30791":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10186:16210":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:9701:16143":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7694:16036":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:3830:15089":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:22344:3059":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:30240:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:11163:3142":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5776:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9288:2917":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:7041:31290":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:10540:8473":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:42469:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:5727:15963":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:660:20397":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:12058:1583":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:3288:8420":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4975:13118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:43864:8520":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:40742:27843":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:8169:2975":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11048:16363":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6361:15986":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:3800:2848":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:2548:15038":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:6721:16003":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:39275:2837":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:80:20381":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:7585:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12737:19554":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3679:3048":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:12033:22908":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10012:16142":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:22311:28048":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:9198:24196":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:3846:3053":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:6153:3358":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:5978:3176":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:2033:2857":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:2864:15051":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7006:16014":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2907:15053":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9207:16134":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12513:19540":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:1288:2858":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12098:19039":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11473:16149":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11191:16157":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11886:19027":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44410:3357":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4864:13106":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6243:15979":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:7476:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6268:31296":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11072:23023":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:3017:2203":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:44156:8984":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:12076:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"14:160:14952":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:43633:8504":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:7213:3155":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5905:15969":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:3232:16293":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:40525:3004":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:3264:3026":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:20906:27675":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:14536:20368":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:2409:2020":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11687:16158":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:4862:15689":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11235:16381":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13981:20326":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:532:9604":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:6956:29402":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4965:13117":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"11:817:2854":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14221:20347":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:22031:26468":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6844:16007":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10214:16222":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41543:2241":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:47648:3263":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:4557:15600":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:14145:20343":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:9177:27038":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12437:19537":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:547:9605":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10265:16220":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:5440:3136":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:21094:8863":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:43429:3006":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:9504:2171":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:3744:3051":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:8926:16129":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46446:3284":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:12953:2872":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21092:27281":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:13055:19574":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:9116:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:10420:16272":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:22318:3058":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:12020:2194":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:40323:8785":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:3594:2844":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:365:30776":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:9701:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:12061:682":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8574:2191":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:40535:8803":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:9963:26260":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:1733:10515":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:494:9600":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4652:13082":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:9744:8631":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9060:22922":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13451:20296":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:42058:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4552:13074":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:40110:2937":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:42097:3161":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:44176:8980":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13024:19572":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:3115:3034":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"11:119:30790":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:3465:2976":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9208:24198":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:119:9281":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:9442:2145":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10646:16329":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:8713:16123":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:40314:8797":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3233:8851":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12846:19561":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4376:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4931:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:1464:2845":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:1561:2241":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:4628:13080":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:21136:3234":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:7259:2871":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10980:16142":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:12052:1618":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:10390:8478":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10824:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10853:22883":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:7660:16035":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10588:16279":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:6256:3176":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7928:3016":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13010:19571":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3273:28246":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:5712:15962":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10366:16230":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:41900:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4687:13084":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7259:9558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6499:15995":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11835:22711":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:2871:8834":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:12022:2831":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:39997:8498":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4924:3127":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:9111:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44203:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:1103:14943":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:2788:15048":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:42740:8633":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4648:22832":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:42761:2185":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:2960:29830":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:4889:15692":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:39189:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:358:2816":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4477:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:4644:22828":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"15:288:14976":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7895:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4897:13109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:45567:3277":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:11876:8478":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12184:19045":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3072:2894":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:4915:3126":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:922:2851":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6346:15984":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:11951:19030":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:7054:31269":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6792:16005":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6915:16010":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:43835:8518":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:8903:3180":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5010:13121":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:43881:8521":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:41405:3054":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14296:20350":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:727:20402":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12970:19568":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:7137:25570":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:12131:8511":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:5830:15967":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10478:16270":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:2359:15030":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:22:723":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:4985:2991":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4881:1056":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:2178:16218":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:2461:29370":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:45619:3288":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:46044:3255":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:261:31967":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12810:19559":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:41663:2844":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"8:0:2005":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11337:16385":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"13:110:30847":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12422:19536":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13710:20307":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:2550:258":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7621:16033":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:3303:3022":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:2810:15049":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4835:15686":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:12071:1601":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:44168:8985":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:20876:27525":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:1473:2846":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:10259:3147":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11407:16147":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4718:13087":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10609:8477":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3260:8568":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9711:31953":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:5634:15957":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:47938:8399":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1603:10504":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6076:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:2835:8418":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:4589:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:5613:8784":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:2887:8836":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:11389:22835":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1852:2865":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:9046:16017":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6513:15996":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:7249:2847":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:3204:2865":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8996:2798":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:3076:2895":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:21343:1996":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6583:16000":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11535:16152":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7283:2241":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:1044:2857":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10962:2921":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:8239:16056":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:47861:8396":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:40758:8774":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:574:31985":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:2035:2882":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9481:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:1012:2859":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:9445:16138":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:10802:22807":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"16:2526:15037":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8990:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9106:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:21475:3231":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10097:16178":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:42979:27674":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5760:15965":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6714:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1495:10491":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:42749:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:3185:23836":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:39917:8610":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6814:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:6616:3175":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:1503:2851":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:12051:446":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13244:19587":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"18:491:32005":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14013:20329":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7360:31282":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:589:2819":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6180:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:1595:10503":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10789:2969":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:11234:22915":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9933:16192":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6425:15991":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9026:23481":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7513:16025":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6753:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:5049:15732":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10916:16294":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5891:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4526:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:4452:8585":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13174:19582":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:14076:20335":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:531:20408":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46014:3249":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:45423:3275":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:21914:3223":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6376:15987":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:2180:30782":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:3669:29406":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:47762:8389":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:10502:8472":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:653:9659":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:8884:3182":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:6364:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9488:31952":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8016:3018":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:41655:2189":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:5743:15964":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10383:16216":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:6198:28053":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40371:8801":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:7587:8548":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40153:2950":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:8563:2190":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:8547:2188":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12554:19543":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8342:3131":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4417:15556":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:690:20400":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"13:226:30800":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12750:19555":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12496:19539":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5363:15950":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:97:30789":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:6983:8770":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:44180:8981":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5858:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:40303:8805":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:14042:20332":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43282:8451":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:47148:3279":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4640:13081":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5963:15971":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12473:16336":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:3191:25892":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:400:16119":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:14156:20344":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4986:13119":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:40173:8451":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:22266:26842":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8862:2189":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6879:16008":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:44402:3356":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:5578:3140":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:22758:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:43216:8460":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:43415:3005":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:41705:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12959:19567":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"10:36:30771":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3254:8569":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:4344:15507":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:14173:20346":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5845:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11137:16347":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:8765:16124":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11055:23000":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:564:20410":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9896:16172":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:681:20399":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"15:0:2011":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4742:13090":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40735:8772":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:10140:1996":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5137:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:853:2844":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9498:2173":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11547:16153":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:482:9598":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:2989:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6680:10621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13274:16159":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:8808:3141":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8916:3183":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:5632:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2942:8848":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:2049:2883":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12007:19033":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:40749:3166":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:14110:20339":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:11590:8943":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:21693:3228":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:2696:15044":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1702:3088":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11742:16161":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:3600:15062":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:42542:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4343:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40271:27350":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:4425:2807":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12911:19564":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10547:16277":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13422:20295":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:47823:8394":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:31972:3145":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"11:2194:30780":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:590:27821":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10494:16248":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10844:2975":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:39253:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10507:16246":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:7751:2920":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:7287:14587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13575:20301":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:4808:27975":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:3447:2977":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:1102:29845":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:5802:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41604:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1067:2859":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:1924:2143":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:12060:8487":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6139:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:8561:2162":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:4405:8584":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:40294:8796":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:6465:2847":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:22659:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:8134:16050":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:699:20401":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6485:15994":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:1506:10493":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:7920:23484":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"11:968:2857":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:9948:23002":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21698:3236":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"14:202:8528":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:45467:3276":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:6932:27987":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21266:3226":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13567:20300":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"11:836:2855":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6753:16004":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:4032:29406":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6053:30656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12063:791":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6332:15983":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:14401:20358":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:10834:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:5798:15966":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:7532:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:913:2849":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:9921:16198":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:4749:3077":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:4200:8440":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7318:16018":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:955:2856":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:42964:8972":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:8848:16127":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:3002:2878":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:3735:2883":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:636:31989":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"15:327:14981":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:43737:2821":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1690:10511":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13188:19583":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:7595:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:22205:27786":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14355:20356":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:10322:2844":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11617:16156":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:4641:15612":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12024:19034":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:39209:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4874:13107":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:41418:3045":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:8814:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4293:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:22791:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:2209:16243":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10603:16280":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:20889:27679":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6352:15985":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:43295:8452":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4508:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:41595:8929":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:7434:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11086:16377":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:7476:8439":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:1826:2847":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"20:0:1872":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"17:10628:16282":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7554:16029":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:14324:20353":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:2933:15054":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:22282:26859":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4520:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:45489:3281":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11381:16388":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13040:19573":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8465:2185":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12452:19538":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:7645:2818":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:1257:2857":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:285:30786":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:43533:8476":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7736:16039":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:39134:8850":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:7269:29810":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:1760:8873":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4391:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:1590:2866":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13071:19575":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:14420:20359":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:9172:27798":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10534:16247":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:47742:8387":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1482:2849":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:6437:3167":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:6549:3171":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12073:840":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:638:2824":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9912:16173":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:21080:3229":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:47751:8388":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43651:8505":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:7767:2921":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:30224:8825":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10672:16331":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:863:2241":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4545:13073":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:14378:20357":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:5760:3163":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:7381:20589":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:1649:10507":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:7872:2973":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:13202:19584":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9945:16188":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:1569:10500":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4820:13100":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11934:19029":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:2382:2961":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:3032:15056":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:40764:3032":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3581:2189":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:5858:2847":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4796:13097":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:7229:2241":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:11401:24197":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:1557:10499":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10814:2973":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:7567:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:44228:3215":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:42724:8634":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11557:3053":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4646:22830":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:41535:2844":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:62:9227":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"18:538:20409":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:4426:29453":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:6987:22946":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:11407:24099":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:32012:16056":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:364:2817":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2896:8842":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:22084:26470":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:6795:2249":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:4058:8417":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2832:15050":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9564:16140":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:5017:15724":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:40385:8802":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:4745:15668":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"15:306:14977":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:9485:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7438:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:434:15001":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:3049:15057":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:46112:3316":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11710:16159":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6017:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12724:19553":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:47686:3297":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43683:3002":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:926:2852":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:45535:3247":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5384:15951":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:4158:8589":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:1931:695":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"18:507:31985":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41939:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"13:0:2003":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:12934:19565":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11359:20442":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:5404:3134":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"18:609:32014":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4766:13093":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12765:19556":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10561:16242":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"14:165:14953":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:47400:3285":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:45668:3242":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:12056:1464":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:41276:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:2243:28376":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:5696:15961":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:1520:10495":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4430:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:5788:253":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13113:19578":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:1634:625":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6531:15997":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5988:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:12074:1658":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:1564:2847":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12531:19541":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14514:20366":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8557:2189":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8364:3079":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:39501:21163":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:5964:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:2562:3015":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1590:10502":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9121:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:9749:8632":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:8854:3144":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4306:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:3975:3064":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9372:16137":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:2186:30784":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:42499:26851":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10197:16236":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10292:16142":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:39929:26927":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:1517:14945":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:44061:8509":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10340:16223":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9003:16132":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:932:2853":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11845:16395":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:123:9282":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7284:2159":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12543:19542":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13816:20312":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6467:15993":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8488:2186":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:43245:8463":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:12286:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:8978:16131":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:256:31949":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13989:20327":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:14448:20361":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"14:40:19029":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:332:30774":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5082:13129":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43850:8519":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1663:10508":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:582:16121":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:7328:2241":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6189:31284":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2766:15047":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:39231:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5939:15970":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:43156:27829":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8149:3031":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13922:20322":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:554:9606":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:9502:2170":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:2305:15027":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13101:19577":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5929:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5053:13125":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12790:19558":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:44028:8527":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4919:13111":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10714:16332":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7722:16038":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2170:8863":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:22228:26799":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:35:2896":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:488:9599":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14316:20352":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4558:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:39902:2821":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42459:26934":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:2150:16259":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:5646:3177":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:474:9597":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6729:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:12643:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:45822:3219":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13148:19580":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:2844:3211":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:4074:2844":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:3348:3011":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:4396:8583":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:11226:16380":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:1751:26854":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4706:13086":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:4002:2847":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:8050:16046":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:22245:26941":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11066:22998":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4731:13089":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5673:15960":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:5631:8551":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:8281:16057":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:4497:15588":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13215:19585":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11872:16396":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"11:760:2848":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:40215:8782":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}