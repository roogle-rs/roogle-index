{"root":"0:0:1884","crate_version":"1.0.50","includes_private":false,"index":{"2:12462:28838":{"id":"2:12462:28838","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12105:8498","str::split":"2:12453:22722","prim@char":"1:12066:447","`DoubleEndedIterator`":"2:7517:125","str::rsplit_terminator":"2:12465:28839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43569:8518","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:28855":{"id":"2:12531:28855","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4570:28855"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43836:8510","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:1879":{"id":"0:74-20:0:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1879","glob":true}}},"2:12483:28840":{"id":"2:12483:28840","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12105:8498","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::matches":"2:12480:2124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43741:8516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:28852":{"id":"2:12518:28852","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:22732":{"id":"2:12474:22732","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:26488":{"id":"2:12429:26488","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43495:8504","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:22722":{"id":"2:12453:22722","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12105:8498","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split_whitespace":"2:12431:26562","str::rsplit":"2:12459:22726"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43519:3017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:26565":{"id":"2:12432:26565","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12431:26562"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43802:8500","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:28837":{"id":"2:12434:28837","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43783:8512","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12492:28843":{"id":"2:12492:28843","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:22630":{"id":"2:12524:22630","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39513:22623","Self::is_ascii":"2:12523:21983"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39513:22623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:29515":{"id":"5:5532:29515","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:24167":{"id":"2:12433:24167","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43773:3013","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:28851":{"id":"2:12515:28851","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:28848":{"id":"2:12500:28848","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12130:8493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:26562":{"id":"2:12431:26562","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12432:26565"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43793:8501","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:22734":{"id":"2:12436:22734","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1884":{"id":"0:0:1884","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[257,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.50\")]","#![allow(clippy :: module_name_repetitions, clippy :: needless_lifetimes,\nclippy :: return_self_not_must_use, clippy :: wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:1879"],"is_stripped":false}}},"2:12459:22726":{"id":"2:12459:22726","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12105:8498","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split":"2:12453:22722"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43537:8483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12456:22724":{"id":"2:12456:22724","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11921:8489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:29516":{"id":"5:5533:29516","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2214","`String`":"5:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2887","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29512":{"id":"5:5517:29512","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2887","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2214","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2887","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:21981":{"id":"5:5536:21981","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12527:21979"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12420:22690":{"id":"2:12420:22690","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:21979":{"id":"2:12527:21979","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:29512","5:5518:8833","5:5521:29513","5:5524:29514","5:5532:29515","5:5533:29516","5:5534:3040","5:5535:21982","5:5536:21981"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12449:2240":{"id":"2:12449:2240","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41559:194","prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12477:22733":{"id":"2:12477:22733","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:28845":{"id":"2:12496:28845","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:21983":{"id":"2:12523:21983","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12494:28844":{"id":"2:12494:28844","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12503:28849":{"id":"2:12503:28849","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:28850":{"id":"2:12512:28850","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12480:2124":{"id":"2:12480:2124","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12105:8498","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatches":"2:12483:28840"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43723:8515","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:22134":{"id":"2:12442:22134","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:8833":{"id":"5:5518:8833","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12406:28831":{"id":"2:12406:28831","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12422:22691":{"id":"2:12422:22691","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:22715":{"id":"2:12427:22715","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12426:22714"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:868":{"id":"2:12404:868","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12066:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:22688":{"id":"2:12416:22688","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41559:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12403":{"id":"2:12403","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12404:868","2:12405:2241","2:12406:28831","2:12407:28832","2:12409:28833","2:12412:21540","2:12413:28834","2:12414:339","2:12415:338","2:12416:22688","2:12418:22689","2:12420:22690","2:12422:22691","2:12424:28835","2:12425:28836","2:12426:22714","2:12427:22715","2:12428:26554","2:12429:26488","2:12430:20690","2:12431:26562","2:12432:26565","2:12433:24167","2:12434:28837","2:12435:26555","2:12436:22734","2:12439:22132","2:12442:22134","2:12445:2283","2:12449:2240","2:12453:22722","2:12456:22724","2:12459:22726","2:12462:28838","2:12465:28839","2:12468:22728","2:12471:22730","2:12474:22732","2:12477:22733","2:12480:2124","2:12483:28840","2:12486:28841","2:12489:28842","2:12492:28843","2:12494:28844","2:12496:28845","2:12498:28846","2:12499:28847","2:12500:28848","2:12503:28849","2:12506:2704","2:12509:22735","2:12512:28850","2:12515:28851","2:12518:28852","2:12521:28853","2:12523:21983","2:12524:22630","2:12525:21984","2:12526:21980","2:12527:21979","2:12528:28854","2:12530:2828","2:12531:28855"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12530:2828":{"id":"2:12530:2828","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4573:2828"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43827:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:28836":{"id":"2:12425:28836","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12072:1502","crate::ops::IndexMut":"2:3076:2903","str::slice_unchecked":"2:12424:28835"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:21982":{"id":"5:5535:21982","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12526:21980"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:3040":{"id":"5:5534:3040","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:28846":{"id":"2:12498:28846","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:338":{"id":"2:12415:338","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:22714":{"id":"2:12426:22714","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12427:22715"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:2283":{"id":"2:12445:2283","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41559:194","prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:2704":{"id":"2:12506:2704","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:21540":{"id":"2:12412:21540","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11665:8502"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12424:28835":{"id":"2:12424:28835","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12072:1502","str::slice_mut_unchecked":"2:12425:28836","crate::ops::Index":"2:3072:2902"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:21980":{"id":"2:12526:21980","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12465:28839":{"id":"2:12465:28839","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12105:8498","str::split":"2:12453:22722","prim@char":"1:12066:447","str::split_terminator":"2:12462:28838"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43587:8517","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:28832":{"id":"2:12407:28832","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:22132":{"id":"2:12439:22132","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12486:28841":{"id":"2:12486:28841","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12105:8498","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatch_indices":"2:12489:28842"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43669:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:20690":{"id":"2:12430:20690","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43505:3016","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12418:22689":{"id":"2:12418:22689","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41559:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12471:22730":{"id":"2:12471:22730","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12066:447","str::splitn":"2:12468:22728","self::pattern":"2:12105:8498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43641:8485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:21984":{"id":"2:12525:21984","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:22735":{"id":"2:12509:22735","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41557:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:28834":{"id":"2:12413:28834","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12521:28853":{"id":"2:12521:28853","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12066:131","`FromStr`":"2:12065:2200"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41702:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12065:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12065:2200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:339":{"id":"2:12414:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12415:338","`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:29513":{"id":"5:5521:29513","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:28847":{"id":"2:12499:28847","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:28854":{"id":"2:12528:28854","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4572:28854"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43818:8509","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12435:26555":{"id":"2:12435:26555","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43811:8499","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12468:22728":{"id":"2:12468:22728","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8498","str::rsplitn":"2:12471:22730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43623:8487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12489:28842":{"id":"2:12489:28842","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12105:8498","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::match_indices":"2:12486:28841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43687:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29514":{"id":"5:5524:29514","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:28833":{"id":"2:12409:28833","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12407:28832"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:2241":{"id":"2:12405:2241","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12428:26554":{"id":"2:12428:26554","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43489:8505","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:10511:26172":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"9:393:14839":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:2286:2867":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:4728:13102":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6030:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:21711:3247":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12237:19068":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:3033:2208":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:8765:16144":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6735:14224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1682:10522":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43954:8531":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:12130:8493":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:4800:416":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5322:15953":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:9505:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:9051:24339":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:580:9622":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:955:2864":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:7420:2942":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:40776:3043":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6279:16001":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:6216:27573":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:43489:8505":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5866:15988":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:7920:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7102:16036":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"14:215:14981":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:22869:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11205:21059":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8329:3102":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:1184:16213":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6687:16022":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12737:19573":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:4921:15720":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7249:2855":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"11:344:30811":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:14110:20358":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:10185:2002":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12196:19065":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8323:3111":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:42822:27211":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:1058:2866":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3358:3022":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6092:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2896:8853":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10468:16294":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:41625:2852":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11991:19051":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:44246:8995":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3581:2195":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4643:13095":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:5474:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13451:20315":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:389:30808":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:42029:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:483:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:12089:1664":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:39914:2829":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:736:20414":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9505:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:9312:2925":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"11:2487:30796":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:22704:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:39957:8620":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47936:8406":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:39319:8863":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:860:2863":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"9:52:14857":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46818:3267":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11389:16166":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:4669:13097":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:1562:14965":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6811:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:44250:8994":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8513:2192":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14448:20380":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:47832:8398":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:3594:2852":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:11665:8502":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4016:3077":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8996:3176":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:1482:2857":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7597:31142":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:3330:2856":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:7743:2837":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9207:16154":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:2150:16278":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:9233:25943":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:40561:8815":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10738:16353":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2472:15055":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40761:3177":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:44083:8535":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:41795:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:507:9614":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:40335:8796":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:878:2877":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2859:8843":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:0:2014":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12911:19583":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9136:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:11232:2991":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:2216:2960":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11490:16170":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10410:16257":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:574:32023":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:30196:2885":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12465:16357":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:676:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:5373:8456":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2085:2867":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13868:20335":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:638:2832":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5808:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4346:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11507:16171":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46582:3301":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13202:19603":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10397:16290":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:4032:28063":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:10420:16291":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:41951:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:14499:20384":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:40075:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:9184:3221":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4745:13104":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2497:2002":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10869:21065":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:22294:26971":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:22149:27029":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:2317:2195":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13055:19593":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2568:3026":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:6824:8564":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:3720:2890":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4529:13085":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5574:15974":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:12701:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12280:19071":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5712:15982":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:8134:16070":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:5599:3151":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:21193:3246":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:30800:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14056:20352":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:42549:27028":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:12065:2200":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2172:8875":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"7:31:14809":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:3232:15079":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:10507:16265":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:7934:2883":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40214:3014":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:7229:2246":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:45727:3305":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10023:16163":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:840:2195":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:1876:2873":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6622:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:42068:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:2321:15048":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:5808:3175":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:1067:2867":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1523:2889":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11488:20668":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8036:20744":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1734:10527":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:1075:16205":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:2744:15066":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14100:20357":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:4195:3106":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6043:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5696:15981":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2913:8852":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:12079:791":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:43818:8509":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:2131:2803":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:39221:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46010:3306":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7885:2980":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:7715:2811":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:12943:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:40009:8509":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:44019:8533":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:897:2855":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:693:2246":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11358:16406":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:11006:21064":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:10776:3141":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:8953:16150":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:21226:3241":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:10962:16311":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8206:2987":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:4320:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:5423:3145":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:14118:20359":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3201:21942":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8588:2196":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13914:20340":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:2170:8874":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:9780:16165":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:7287:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3288:8431":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:7237:2878":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2934:8857":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:32038:8593":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6531:16017":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:46324:27140":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:39265:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9607:16161":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:96:20401":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:40770:8785":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:4667:21211":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:39993:8510":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:43569:8518":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10193:21189":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10714:16351":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"9:330:14894":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47887:8403":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5963:15991":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13546:20317":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44293:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4943:3138":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:42577:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:9106:20731":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4721:13101":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1840:2925":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:6909:8800":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4394:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:6584:2246":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:3238:2874":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:2384:2970":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:22096:26535":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:3325:8434":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4960:13130":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4892:13122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:2501:3025":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2835:8429":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:2604:3018":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:21803:3228":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:3037:2209":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:1922:8435":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:1442:2246":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:6385:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6425:16011":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21488:3242":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2832:2207":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:21312:3231":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:12452:19557":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4523:13084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42869:27207":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22770:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:8050:16066":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:40035:8618":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46458:3289":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47380:3262":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:11390:20689":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9488:32004":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:30430:27110":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11473:16169":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:7220:2887":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:1672:29911":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:3429:2999":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:46378:27118":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:629:28305":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:6145:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11325:26220":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:13693:20313":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10084:16199":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:41458:27879":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:41753:2852":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:6624:3185":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:5156:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:548:9617":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:21927:3234":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4406:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5085:13143":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:43505:3016":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5782:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11448:16168":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13710:20326":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:7945:21816":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"11:122:30810":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:11810:9002":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8263:3061":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12024:19053":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:521:20423":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12983:19588":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14090:20356":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:2461:30801":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4631:13094":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:47568:3268":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:495:9612":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9762:31988":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2947:8860":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:12071:1470":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:10626:8487":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:3313:3033":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12698:19570":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2891:8849":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:932:2861":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:10668:8486":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:1573:2871":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8174:3042":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:21296:2002":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:2504:15056":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:6467:16013":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4690:13098":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4792:13110":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:3065:15078":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:599:32013":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:2526:15057":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:41873:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4548:13087":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1273:2867":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:1102:29823":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2844:3222":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4823:13114":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2339:15049":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:1671:1151":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:6726:14223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:44439:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:40092:27886":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11628:8416":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4573:13090":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10850:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:45865:3326":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:21279:3237":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:6023:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:30266:27013":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:22240:27128":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10830:2981":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"11:785:2855":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9959:16203":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:46612:3307":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:21055:2002":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:8582:2195":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:9242:16155":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:6588:10463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8928:3191":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2991:8432":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:42632:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:12723:28195":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:3514:2151":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"11:666:2195":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12496:19558":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7792:16062":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11048:16382":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6929:16031":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6839:3227":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:11227:8470":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:48028:8410":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8367:3142":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:2883:8848":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:10285:3158":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:22323:28032":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4769:13107":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11086:16396":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:6663:29911":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:40227:8793":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:7651:16054":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5970:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:2969:15075":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:261:31984":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13989:20346":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:20902:26492":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:796:2856":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:4008:3076":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:207:8438":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6818:16026":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:1051:14960":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14126:20360":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:4164:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:5588:15975":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12172:19063":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5079:24319":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5017:15744":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:2223:2962":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:3457:2985":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11573:16174":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:12091:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:41557:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13113:19597":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:45988:3300":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10929:16314":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:2074:2866":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:8895:16148":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:822:2876":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:5814:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:426:14840":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:4986:15737":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6613:14219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6663:10648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1496:10503":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"10:44:14948":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:42861:27170":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9531:31994":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10494:16267":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:636:32029":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:4157:25776":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:21925:2002":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4433:13073":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:3539:3008":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:43723:8515":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40803:8789":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:1895:2148":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:6924:26201":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:7479:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:1737:8885":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12645:19566":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12997:19589":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8895:3196":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:6835:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2305:15047":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:1850:2855":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4540:13086":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5844:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:21149:3245":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:5878:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:39177:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:1138:29821":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:41608:2245":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:12067:1624":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5994:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6346:16004":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:42851:2191":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:6820:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:690:20419":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:43925:8529":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10456:16264":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10646:16348":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:11847:9004":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:1570:10512":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11124:16367":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:4985:2999":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4333:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10097:16198":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:4067:8428":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:10840:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:39929:8621":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1596:10515":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46134:3266":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:7517:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:596:9624":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:41328:3054":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:7573:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:5727:15983":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11226:16399":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:40754:8783":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"16:2864:15071":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:11071:26218":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:42323:2178":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7006:16034":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:22737:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:2894:21808":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:40274:8804":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:6790:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7283:2246":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:45828:3271":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7792:2929":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7015:16035":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:8713:16143":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:563:9619":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:7476:8450":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2879:3225":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6720:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:256:32005":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:2058:2865":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:45912:3230":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:364:2825":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:9896:16192":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:9754:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:7475:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:40042:8619":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:44500:3368":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:5667:3188":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:44266:8991":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9886:16191":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4411:3103":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:7601:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:926:2860":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13632:20322":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:8599:2197":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:5798:15986":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:558:2809":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:14346:20374":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11845:16414":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4296:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10795:21194":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:10585:8484":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:22043:26522":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:11153:8477":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:5653:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11423:21323":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10982:21146":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:20861:8632":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:6211:28042":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:43903:8528":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11511:3063":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4621:13093":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:4:1075":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:4997:13134":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6082:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:44274:9010":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:8345:3112":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:261:29911":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:4557:15620":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40001:2829":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46104:3260":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6189:31253":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5020:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:47841:8399":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:7570:2212":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7544:16048":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7828:16063":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:11023:16316":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7284:2165":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:44318:3226":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5056:13139":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6893:31223":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:12998:2880":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:1639:10518":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:589:2827":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:44530:8422":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7342:31294":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9933:16212":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:7254:3166":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9372:16157":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:8887:2195":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:11815:16413":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:10392:3017":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:41990:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:7880:2979":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"10:36:30794":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:4074:2852":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11316:16393":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"11:2368:2855":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11111:16368":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:7387:2851":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:0:1494":{"crate_id":1,"path":["std"],"kind":"module"},"1:7769:2870":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4309:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:9146:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11062:16394":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:1842:2926":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:8205:16075":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:21378:3236":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:11179:3153":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"15:0:2017":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:646:2834":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4759:13106":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:817:2857":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7534:16047":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7503:16044":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9549:2177":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:40383:8812":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"9:486:14837":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:2473:30800":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:588:9623":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10440:16293":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:7953:3027":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7862:16064":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:41912:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:3233:8862":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:624:32033":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:7318:16038":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:47989:8409":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4501:13082":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11742:16181":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11586:16175":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12945:19585":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:6465:2855":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:14269:20367":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4373:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5897:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"7:78:14816":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:43802:8500":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:9823:16188":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:2303:14966":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12080:792":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2546:260":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:4949:15724":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:755:20422":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2881:15072":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11719:16180":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4835:15706":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13274:16179":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10512:8490":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:574:9621":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6386:16008":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:9071:16037":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:22605:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:9141:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11417:25775":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6759:14226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6174:3369":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5833:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5660:3187":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:703:2858":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14378:20376":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12084:1605":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:4066:3080":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:14076:20354":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:9998:16200":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:2359:15050":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11082:26214":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:5830:15987":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6083:15018":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:7438:8792":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:766:20415":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6186:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6865:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:21107:8874":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:41288:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5851:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4786:13109":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43669:8513":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9521:16159":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5982:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:4167:8600":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7587:8559":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3994:3075":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:40785:8786":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11269:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:23415:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:3800:2856":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:8183:3044":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:8794:16145":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:42109:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:1537:10509":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:44131:8519":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:40795:8787":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:4020:28068":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1781:2909":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:9541:2178":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:6672:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10520:16295":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:42559:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14013:20348":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:4719:15686":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:1924:2149":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6560:31297":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:10009:21173":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:47913:8405":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6583:16020":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12473:16355":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:21481:2002":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:9650:16162":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:7544:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:41633:2246":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:8605:2000":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:40165:2958":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:41481:3065":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:43306:8471":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41536:3058":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40306:8807":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:42605:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:15:2127":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:47692:3323":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10637:16302":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:6640:3142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:12906:3369":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5013:13135":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:3461:15081":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10570:3035":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:4821:27595":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9867:16190":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12484:16356":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:47861:8401":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5049:15752":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:4519:3114":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:14134:20361":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:11193:3154":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:4806:15701":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:47738:3274":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:8167:16072":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2450:15054":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22671:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:7590:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:44046:8534":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:0:2020":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11381:16407":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13611:20321":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:47872:8402":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:14033:20350":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:22205:3067":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"14:202:8539":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1044:2865":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:42839:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:44108:8537":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:9535:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:43346:8464":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:501:9613":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:7488:2213":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12252:19069":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12088:843":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:12119:8496":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21057:3238":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:3669:29911":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4770:3091":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:7259:2879":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12554:19562":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11886:19046":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:42330:2179":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:4639:8609":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:42309:2170":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:4344:15527":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:10547:16296":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43417:8480":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:400:16139":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13922:20341":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:4728:3139":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10698:16330":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10447:14956":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6633:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4805:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4913:13124":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3865:3064":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:3888:15143":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10366:16250":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:6458:3178":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:43971:8532":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:6318:16002":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2942:8859":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:12090:1211":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:4208:3107":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:12077:689":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:6190:26215":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:44492:3367":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46772:3261":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6960:16032":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:9063:20746":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:538:20428":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8318:3110":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:14522:20386":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:44262:8997":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:10640:8485":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:7269:29801":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:3254:8580":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12934:19584":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11137:16366":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:32020:20505":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:10343:2195":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:8281:16077":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43836:8510":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:21240:8874":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:12098:19058":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:25817:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11639:16177":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:2644:3028":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12513:19559":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:40061:8615":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:5999:3187":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6569:16019":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5816:30901":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:2223:29852":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4488:13080":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12293:19072":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3760:3063":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:1072:30819":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"14:160:14972":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8490:2191":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:358:2824":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:7566:21692":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12086:19057":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:7624:14793":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5864:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3518:2855":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:10359:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:8973:3195":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6879:16028":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6944:31033":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:80:20400":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2380:15051":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7512:8541":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11910:19047":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:3072:2902":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12225:19067":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:6511:29911":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4992:2157":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"11:772:2854":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13422:20314":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7796:20505":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"11:829:2861":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10135:24329":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:12775:8640":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:2887:8847":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:2494:2198":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13024:19591":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:564:20429":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:3763:3062":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:7011:21695":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:62:9238":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:40236:8794":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4461:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:31:14972":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"14:7:14972":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:2170:28399":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"11:427:30821":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44258:8996":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:2209:16263":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"3:0:472":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:7450:2940":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:719:20413":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1604:10516":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7897:2981":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:13174:19601":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12790:19577":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43587:8517":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:22935:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11710:16179":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13101:19596":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:2929:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:39060:8578":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:6002:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:7442:8791":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:1590:2874":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:47951:8407":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:7931:2199":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:40:19048":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:895:2195":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7128:16037":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1503:2859":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10616:16300":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13826:20332":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:483:9610":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:1514:10506":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:32031:27530":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:5661:15979":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:652:32023":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4592:13091":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4425:13072":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:12331:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13286:19608":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9537:2171":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:4731:3113":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6513:16016":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11235:16400":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:12078:794":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:46226:3328":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:4194:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:4734:13103":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:12037:2839":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:4849:3087":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9512:2980":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:45513:3286":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:7520:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:9746:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12437:19556":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:20874:28250":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:6808:2254":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"9:450:14838":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10661:16349":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:41311:3053":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39146:8861":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:7532:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4611:13092":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"11:822:2860":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:7561:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:1010:2866":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:30236:8836":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4385:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7660:16055":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:43073:8465":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4597:3130":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:9539:2170":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:10547:8483":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9921:16218":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4468:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:12110:8494":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:40185:8462":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:9574:31970":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6226:15998":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5892:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:7776:2928":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"5:4363:29916":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:9030:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6041:15995":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"13:226:30826":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4847:13117":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:21356:2002":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"9:0:2012":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:47852:8400":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:43537:8483":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:4056:3079":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2596:15060":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41345:3055":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:2243:28428":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11191:16177":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13890:20337":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10197:16256":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:7406:20745":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10576:3033":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9137:16128":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6580:9659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:7571:2856":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:2933:15074":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12074:19056":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:44449:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13040:19592":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:45657:3288":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:7782:16061":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2918:8854":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9912:16193":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6376:16007":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:4415:8595":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7621:16053":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:44555:28030":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8833:3152":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:44270:8992":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11687:16178":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:40326:8808":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"11:2260:2866":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:4978:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:7434:27886":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:11651:8956":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:7614:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9852:16189":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:9789:8642":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1564:2855":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:22638:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43495:8504":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:12073:1589":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5403:15972":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13778:16207":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:32132:8824":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41761:2246":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:10474:8476":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:2351:2246":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:10534:16266":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:9102:16127":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11951:19049":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:3183:29814":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:31984:3156":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:40297:8806":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10603:16299":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:12422:19555":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:43246:27915":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3274:3037":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:10573:3037":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"11:101:30820":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:5596:3149":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11375:20692":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:41702:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43372:8462":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:8244:3016":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4799:13111":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:4613:15628":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:47032:3256":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:4234:2195":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:22278:27137":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:5626:8795":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:2461:28442":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1561:2246":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:2238:2865":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:11337:16404":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4053:15260":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:9222:27162":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:3049:15077":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13685:20325":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:4136:8599":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:40747:27914":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:12688:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:12087:1604":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:1591:10514":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"11:357:30806":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:491:32014":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7523:16046":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:2927:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:4400:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6856:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44330:9011":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:2690:28439":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"0:0:1884":{"crate_id":0,"path":["thiserror"],"kind":"module"},"1:7606:26216":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:423:30825":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:4210:8451":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7492:16043":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:40205:2900":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:42614:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12671:19568":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13228:19605":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:434:15021":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:5788:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:45758:3253":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43427:8481":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:20904:26495":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11213:9010":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"11:1862:2871":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7768:16060":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:298:30816":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12305:19073":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:1764:654":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:10376:21810":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:22165:27155":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:46536:3295":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11617:16176":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3212:2871":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12154:19062":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:276:2214":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9328:3016":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12724:19572":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:7669:2002":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11000:16318":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8879:3155":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4877:13121":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:6703:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12959:19586":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9277:16156":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:1931:700":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:46180:3321":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:14478:20383":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:43315:8475":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13162:19600":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:7689:2812":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11173:16398":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13816:20331":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6499:16015":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:5419:15973":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5905:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:2797:2816":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:9131:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:4745:15688":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4775:13108":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:43325:8473":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43793:8501":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:3032:15076":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:5325:29911":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:10628:16301":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:39340:8575":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6037:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4867:13120":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:10978:2929":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:44097:8536":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13981:20345":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:8715:8494":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6268:31282":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:1632:10517":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:14173:20365":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:42148:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:6222:20753":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:21105:27297":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:5135:3171":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5648:15978":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:582:16141":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:9976:27570":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:39287:2845":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:5973:3171":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:39941:27016":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:507:32023":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"14:221:14982":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:9085:21056":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4968:13131":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10240:16208":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7708:16057":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:44542:8420":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:12082:789":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:1585:2873":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1525:14963":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:5384:15971":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"14:0:2016":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:41745:2195":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:9794:8643":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10771:16329":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12064:398":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:43297:8472":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:41694:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:21358:3233":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:41685:8940":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:47776:3308":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43783:8512":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2368:2706":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:14145:20362":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:4847:849":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:14335:20373":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:8926:16149":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:10008:26283":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:3830:15109":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13135:19598":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:43641:8485":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:9021:2806":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13667:20323":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:12576:19563":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:660:20416":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:2334:2852":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"14:187:14980":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:10195:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:6332:3371":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6456:16012":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8389:3090":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10616:2811":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:5121:15776":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:1302:2868":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6352:16005":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:7975:28051":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:4774:15693":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5774:3173":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7067:31086":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:8311:3056":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8274:3052":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:11186:8478":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:7310:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:3655:15083":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44242:8993":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:6205:8797":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14221:20366":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2366:2965":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:6604:9493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:7375:2198":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:4032:29911":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6415:16010":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4772:3092":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2854:8844":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10805:2977":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:8250:3017":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"12:0:2015":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9972:16202":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:1869:2872":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8422:2161":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6009:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3076:2903":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:582:8632":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:1779:2908":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3401:3043":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:45579:3292":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11367:16370":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:6915:16030":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:7194:3042":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:3797:15100":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5336:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:12125:8495":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:43741:8516":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:149:15024":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1528:10508":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13966:20343":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:3565:16335":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12876:19581":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:40080:2944":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6204:15997":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:1568:2856":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:2012:16244":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12123:19060":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"15:288:14996":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:119:9292":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:3195:20954":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:39099:8433":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:4700:13099":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6686:10633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10430:16292":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:14024:20349":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:40315:8816":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:4361:8593":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:43623:8487":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:40358:8810":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"7:0:1654":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2785:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:614:32027":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:8659:16122":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43811:8499":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:8097:16068":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10468:3152":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:2810:15069":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10588:16298":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:7961:2890":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4070:3081":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1697:10524":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:14355:20375":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:489:9611":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:7625:26209":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:32024:16076":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:5995:15993":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:43398:8479":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9015:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:5915:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8269:3060":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:9201:24333":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:10878:21034":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:21490:3236":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:39920:8582":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4753:13105":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13851:20334":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3234:3035":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12062:19055":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13071:19594":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:1817:2919":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:3764:15091":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:40397:8813":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:2722:15065":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12043:19054":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:943:2862":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8851:3153":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11547:16173":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1257:2865":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9058:20749":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:10126:16227":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:590:28044":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:555:9618":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5073:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13567:20319":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10012:16162":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:9660:32001":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:949:2863":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8941:3194":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6017:15994":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4494:13081":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:2409:2026":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:20921:26494":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:7764:2869":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:4406:8594":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13676:20324":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:907:2856":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:0:2018":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:47238:3290":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7694:16056":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:4179:3104":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9910:8967":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13973:20344":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9070:15972":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2550:259":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7884:16065":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:4002:2855":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:727:20421":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11098:16369":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14420:20378":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:21462:3232":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:7568:16050":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:863:2246":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:11151:16397":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10340:16243":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46202:3327":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:40537:3015":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:1635:30804":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11244:16176":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8572:2194":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:759:2853":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:7938:8790":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4451:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:30252:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:2394:2975":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8909:3193":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:1674:10521":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:22902:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11295:16402":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:1760:8884":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:21093:3240":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:40108:2943":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:3315:15080":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:1846:2246":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:41770:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:3735:2891":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7582:16051":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:29981:3066":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:9035:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:3043:2211":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:5858:2855":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13792:20329":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:39513:22623":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:7024:8781":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10316:16245":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40155:2959":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40016:8616":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:6849:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:8686:16142":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"8:0:2011":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:7758:2838":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12136:19061":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:46156:3272":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:40547:8814":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:2938:8858":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2840:8823":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9003:16152":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:40407:8798":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:8978:16151":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10139:16228":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:9445:16158":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:40367:8811":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11934:19048":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9701:16163":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8839:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:3958:3074":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:3204:2873":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:2284:15019":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:49852:3249":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:4665:21209":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:42654:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:6742:14990":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10991:3148":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4989:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7555:16141":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6485:16014":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14514:20385":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4922:13125":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:12778:19576":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:8607:2167":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:2865:8846":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:6027:8817":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:21364:3235":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:922:2859":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:12888:19582":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1650:10519":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:11886:9003":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:43477:8508":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4497:15608":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44238:8990":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12765:19575":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10575:16297":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:43407:8482":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:1036:2867":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14469:20382":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10672:16350":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:9223:25959":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:8181:16073":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:4462:8596":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:1842:2195":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:6098:2999":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:7041:31272":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11074:16395":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:45625:3258":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2783:8430":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12543:19561":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13739:20328":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4859:13119":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:1288:2866":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11647:15005":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"14:165:14973":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"9:237:2191":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12007:19052":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2160:631":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5982:15992":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10818:21053":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:3022:2886":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4441:13074":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5752:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4900:13123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12750:19574":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42830:8644":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2644:15062":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4653:3078":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:3948:2999":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:536:31210":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:9086:15973":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:14042:20351":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:3532:2986":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:654:9671":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"11:731:2859":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:1541:14964":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10726:16352":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11850:21970":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11348:3159":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:21815:28248":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:6981:29913":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:30828:8632":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:40255:8802":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40122:2945":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:1641:8771":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:20889:28250":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:4351:8592":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:7538:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:39981:8623":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8337:3061":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10227:16241":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:12750:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:43069:27219":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:11921:8489":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:45687:3293":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:527:9615":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:1492:2858":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12072:1502":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13244:19606":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:2574:15059":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:4862:15709":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:2382:2969":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5790:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:14460:20381":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:871:2853":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:2766:15067":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11024:3155":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:123:9293":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9172:16153":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13259:19607":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:1579:2872":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:40028:8617":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"13:110:30873":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:12076:687":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:7670:2826":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:43054:8983":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:5631:8562":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1710:10525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13487:20316":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12048:21051":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7090:31300":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:21706:3239":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5743:15984":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12711:19571":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:8072:16067":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4418:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13554:20318":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6901:16029":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:5528:3148":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:5459:3147":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8031:24360":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:47898:8404":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:22232:27116":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11535:16172":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:1411:2195":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11572:3064":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13148:19599":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:2178:16238":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11327:16403":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7360:31271":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2548:15058":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12065:995":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"18:531:20427":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:5409:3144":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:681:20418":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13949:20342":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:4585:15624":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4474:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:2479:30799":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11654:15005":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:44513:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:2141:29803":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:505:2803":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:3276:3038":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6600:16021":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8865:3154":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:22968:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:8957:3192":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:0:873":{"crate_id":6,"path":["libc"],"kind":"module"},"2:5568:8805":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3125:3045":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:9350:16124":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12267:19070":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:12066:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2924:8855":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5088:15767":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:4826:3093":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4943:13127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:9217:28053":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4187:3105":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12621:19565":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5063:13140":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12184:19064":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6401:16009":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:1776:2856":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:47966:8408":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14308:20370":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7722:16058":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9010:20740":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43827:2829":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6151:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7736:16059":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:12081:793":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9617:31965":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10186:16230":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"15:327:15001":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11306:16179":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:6795:8562":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:11635:8954":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8903:2246":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:47630:3302":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:1426:2852":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:868:2864":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:5853:2840":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:1557:2195":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40245:8801":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12111:19059":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1501:10504":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12810:19578":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:43773:3013":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:46277:26972":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6753:16024":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10265:16240":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2908:8851":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6059:30390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44457:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4561:13089":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:12830:19579":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10788:16354":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:11405:21052":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:12176:8522":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:6171:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8440:2190":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2875:3223":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:21457:2002":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:11162:16362":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46848:3273":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:5508:2999":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:43463:8511":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:11342:20736":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7613:16052":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:6325:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:1664:10520":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:9993:26204":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:2035:2890":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:7513:16045":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:483:26207":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:8115:16069":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11281:16392":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:4282:8584":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9051:16123":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:40348:8809":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:9547:2176":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6361:16006":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7462:16041":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11272:16401":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14324:20372":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:3040:2210":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:7694:2814":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:5420:2999":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:3964:3073":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:2782:2008":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:7436:16040":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:12070:336":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13085:19595":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2498:8636":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:1576:10513":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3217:29818":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:2394:2856":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:9711:31964":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4853:13118":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"15:394:15008":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:7487:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7299:28385":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:41517:3057":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9564:16160":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13010:19590":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:43940:8530":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:841:2862":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10860:2983":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:8237:3015":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:46058:3254":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11971:19050":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6261:16000":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:12015:20974":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:4889:15712":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1912:10690":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:4022:3078":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:680:2852":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:644:32023":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:1092:14961":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10214:16242":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2792:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:7555:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4954:13129":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4655:13096":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:12105:8498":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:6051:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7937:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:42814:8645":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:41675:2166":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5049:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:1127:14962":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:913:2857":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:992:2865":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"15:306:14997":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13906:20339":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:9543:2179":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12208:19066":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12598:19564":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:4339:3109":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:113:20402":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7501:8540":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:12685:19569":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10278:16239":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:5110:24319":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1011:29911":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:2618:15061":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:8257:3013":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:7269:31276":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:22181:27122":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:14156:20363":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13188:19602":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:542:2534":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:12032:20715":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:3232:16312":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4259:3108":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:2903:8850":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:8606:2168":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:10750:16309":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:5781:3174":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14282:20368":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8194:2983":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:2959:2306":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:43335:8474":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11351:16405":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:1687:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6883:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9165:2991":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:5634:15977":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:5994:9212":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10370:16237":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:884:2854":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:22356:3070":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11261:16391":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"11:1855:2856":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:9028:20551":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:10980:16162":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5363:15970":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:6638:3186":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10949:16310":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10685:16308":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:3315:3034":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44254:8998":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8041:3029":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12531:19560":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:10800:25948":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13723:20327":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:8195:16074":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:6098:26211":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7463:2941":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12658:19567":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:8239:16076":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13298:19609":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:45788:3259":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:5939:15990":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:12086:1607":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:39201:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:8594:16125":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:6568:3181":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:671:20417":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:40265:8803":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46882:3322":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:1521:10507":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5905:15989":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:42187:3172":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6696:14991":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:45810:3265":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:32045:8910":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:9530:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43519:3017":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:11870:9001":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10916:16313":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:45557:3287":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:5001:1101":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:10133:21812":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13758:20312":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:45533:3251":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6844:16027":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:7478:14764":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:622:2150":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"9:177:14943":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:22836:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:6912:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:515:20426":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13802:20330":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10036:16206":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:918:2858":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:4435:2815":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11661:16126":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:41642:2165":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8530:2193":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14163:20364":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46694:3255":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:4768:3088":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11761:16182":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:7579:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:2966:28820":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:3171:2195":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:3698:3059":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6332:16003":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:2582:26204":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"20:0:1879":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"6:569:9620":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:2049:2891":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:4393:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:1634:630":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:22217:27889":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:39326:8567":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5673:15980":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:9985:16201":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"11:324:30818":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:2670:15063":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9752:16164":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4555:13088":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14083:20355":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13575:20320":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:7320:2246":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:45847:3320":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:42589:27023":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11407:16167":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10112:16226":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5612:15976":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5935:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:11640:24346":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:3600:15082":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:641:2833":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2930:8856":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:3273:28247":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:10367:2852":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3523:20594":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6243:15999":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:0:2019":{"crate_id":17,"path":["object"],"kind":"module"},"2:43687:8514":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:4417:15576":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5435:31221":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:6571:3182":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:22803:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"9:357:14854":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4511:13083":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:6973:27910":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4884:1061":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7391:16039":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:12085:1606":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14068:20353":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6741:14225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:6956:29917":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10903:16315":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11788:16412":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:4278:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:45709:3299":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:7053:21652":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:4527:15614":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14316:20371":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:12069:1112":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12083:1608":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:1076:2868":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4709:13100":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1546:10510":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5820:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:10654:8488":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:11872:16415":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:782:2875":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11551:3062":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14401:20377":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:9487:2151":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:7526:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4078:3082":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43385:8463":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:7626:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:4287:8585":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:609:32040":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:481:20424":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:41834:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4379:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4934:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9790:31978":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6721:16023":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14536:20387":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:6454:3177":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:1691:10523":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:5443:3146":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:30324:27046":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"13:0:2009":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:1882:2874":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:4462:15597":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22330:3069":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:0:2010":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:39243:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4497:3113":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:3009:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5030:13137":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:22257:27112":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:3653:2246":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:44118:8538":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:4426:29916":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:533:9616":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:45958:3294":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:4348:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:8154:16071":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2696:15064":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7890:2977":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6545:16018":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:41617:2195":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:2165:14956":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:3475:2984":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:9545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:6277:3187":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"10:0:2013":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10114:2919":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:1703:3099":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:2960:28825":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10383:16236":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4815:13113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1558:10511":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:3243:256":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:30230:8558":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13897:20338":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:2219:2961":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"11:1145:2868":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10561:16262":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:4663:21207":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:22344:3068":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2907:15073":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9455:32003":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:7328:2246":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12846:19580":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6156:15996":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:2962:28822":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:39971:8622":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1718:10526":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8363:3140":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11201:16363":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14296:20369":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13838:20333":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:853:2852":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3198:21939":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6968:16033":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12373:19554":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6494:3184":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7554:16049":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:45603:3252":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7907:2978":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10478:16289":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2849:3224":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8227:3014":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:7293:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:39161:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:10435:8489":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:3441:16317":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"19:0:1092":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"18:699:20420":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8146:2982":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:1751:26980":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10292:16162":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:2970:28823":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9945:16208":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7265:9570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:5268:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:2788:15068":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:6015:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4949:13128":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:4829:13115":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6792:16025":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2786:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:4934:3137":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:41374:27138":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11215:16365":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5079:13142":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1473:2854":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:5760:15985":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:8825:16146":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:2467:27810":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11088:26203":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"9:507:14841":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:35:2904":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7054:31277":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2871:8845":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11250:21030":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:20919:26489":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3236:3036":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:8848:16147":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:5369:8455":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13215:19604":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:475:9609":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2406:15052":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:41494:3056":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4838:13116":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:12895:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:534:2807":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:1464:2853":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:4683:3072":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:2428:15053":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7474:16042":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:707:8496":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:3178:2872":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:9517:21811":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:12970:19587":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:44151:8520":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:4641:15632":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:504:16140":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7567:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10165:16229":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:1507:10505":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:3915:15146":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:46355:27119":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7162:25777":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:42316:2171":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13876:20336":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:1548:2999":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:47814:3329":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4480:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14434:20379":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:1118:28826":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:40283:26890":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:4044:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10059:16204":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2832:15070":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:47490:3296":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:6814:8563":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3260:8579":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:14001:20347":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2669:2005":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}