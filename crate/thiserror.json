{"root":"0:0:2140","crate_version":"1.0.59","includes_private":false,"index":{"2:13285:30142":{"id":"2:13285:30142","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12889:8951","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::rmatch_indices":"2:13288:30143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44043:8966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13317:30153":{"id":"2:13317:30153","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:24866":{"id":"2:13225:24866","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13224:24865"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:24178":{"id":"5:5635:24178","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13325:24181"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:24180":{"id":"2:13324:24180","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:24613":{"id":"2:13327:24613","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:36783"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:30146":{"id":"2:13295:30146","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:24880":{"id":"2:13238:24880","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:24881":{"id":"2:13241:24881","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:24837":{"id":"2:13216:24837","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13227:28552":{"id":"2:13227:28552","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43863:8958","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:30149":{"id":"2:13299:30149","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12915:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13270:24875":{"id":"2:13270:24875","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12336:471","str::splitn":"2:13267:24873","self::pattern":"2:12889:8951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44015:8938","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:2548":{"id":"2:13244:2548","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42003:191","prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13235:24879":{"id":"2:13235:24879","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:24867":{"id":"2:13252:24867","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12889:8951","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::split_whitespace":"2:13230:28284","str::rsplit":"2:13258:24871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43893:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:24795":{"id":"2:13208:24795","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12436:8955"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:2387":{"id":"2:13279:2387","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12889:8951","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::rmatches":"2:13282:30141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44097:8968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:30156":{"id":"2:13333:30156","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4955:30156"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44210:8963","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199":{"id":"2:13199","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13200:997","2:13201:2507","2:13202:30132","2:13203:30133","2:13205:30134","2:13208:24795","2:13209:30135","2:13210:336","2:13211:24839","2:13212:24835","2:13214:24836","2:13216:24837","2:13218:24838","2:13220:30136","2:13221:30137","2:13222:24861","2:13223:24862","2:13224:24865","2:13225:24866","2:13227:28552","2:13228:27853","2:13229:21771","2:13230:28284","2:13231:28364","2:13232:27030","2:13233:30138","2:13234:28553","2:13235:24879","2:13238:24880","2:13241:24881","2:13244:2548","2:13248:2506","2:13252:24867","2:13255:24869","2:13258:24871","2:13261:30139","2:13264:30140","2:13267:24873","2:13270:24875","2:13273:24877","2:13276:24878","2:13279:2387","2:13282:30141","2:13285:30142","2:13288:30143","2:13291:30144","2:13293:30145","2:13295:30146","2:13297:30147","2:13298:30148","2:13299:30149","2:13302:30150","2:13305:3120","2:13308:24882","2:13311:30151","2:13314:30152","2:13317:30153","2:13320:30154","2:13322:24176","2:13323:24610","2:13324:24180","2:13325:24181","2:13326:24182","2:13327:24613","2:13328:24614","2:13329:24615","2:13330:30155","2:13332:3250","2:13333:30156"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13210:336":{"id":"2:13210:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13211:24839","`u8`":"1:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:30152":{"id":"2:13314:30152","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:24610":{"id":"2:13323:24610","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39902:9090","Self::is_ascii":"2:13322:24176"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39902:9090","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:30850":{"id":"5:5617:30850","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2480","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2480","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:24179":{"id":"5:5636:24179","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13326:24182"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13200:997":{"id":"2:13200:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12336:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:24865":{"id":"2:13224:24865","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13225:24866"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13233:30138":{"id":"2:13233:30138","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44157:8965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:28553":{"id":"2:13234:28553","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44185:8952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13320:30154":{"id":"2:13320:30154","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12850:136","`FromStr`":"2:12849:2468"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12849:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12849:2468","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:30136":{"id":"2:13220:30136","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12342:1721","str::slice_mut_unchecked":"2:13221:30137","crate::ops::Index":"2:39547:3328"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13223:24862":{"id":"2:13223:24862","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13222:24861","str::split_at_mut_checked":"2:13225:24866"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13326:24182":{"id":"2:13326:24182","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:2506":{"id":"2:13248:2506","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42003:191","prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:30148":{"id":"2:13298:30148","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:24181":{"id":"2:13325:24181","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13328:24614":{"id":"2:13328:24614","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:36783"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13329:24615":{"id":"2:13329:24615","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:991:36783"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5633:30854":{"id":"5:5633:30854","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2480","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2480","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13201:2507":{"id":"2:13201:2507","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13311:30151":{"id":"2:13311:30151","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:30143":{"id":"2:13288:30143","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12889:8951","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::match_indices":"2:13285:30142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44061:8967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:30132":{"id":"2:13202:30132","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:24838":{"id":"2:13218:24838","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:24835":{"id":"2:13212:24835","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13267:24873":{"id":"2:13267:24873","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951","str::rsplitn":"2:13270:24875"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43997:8940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:24861":{"id":"2:13222:24861","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13224:24865","str::split_at_mut":"2:13223:24862"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:24839":{"id":"2:13211:24839","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13332:3250":{"id":"2:13332:3250","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4958:3250"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44201:3251","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13230:28284":{"id":"2:13230:28284","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13231:28364"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44167:8954","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5624:30852":{"id":"5:5624:30852","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:9292":{"id":"5:5618:9292","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:30141":{"id":"2:13282:30141","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12889:8951","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::matches":"2:13279:2387"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44115:8969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:24878":{"id":"2:13276:24878","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:3473":{"id":"5:5634:3473","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2140":{"id":"0:0:2140","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.59\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:2135"],"is_stripped":false}}},"2:13305:3120":{"id":"2:13305:3120","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:30850","5:5618:9292","5:5621:30851","5:5624:30852","5:5632:30853","5:5633:30854","5:5634:3473","5:5635:24178","5:5636:24179"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74-20:0:2135":{"id":"0:74-20:0:2135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[248,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:2135","glob":true}}},"2:13308:24882":{"id":"2:13308:24882","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:30155":{"id":"2:13330:30155","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4957:30155"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44192:8962","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:30144":{"id":"2:13291:30144","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13229:21771":{"id":"2:13229:21771","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43879:3448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:30853":{"id":"5:5632:30853","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:30134":{"id":"2:13205:30134","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13203:30133"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13232:27030":{"id":"2:13232:27030","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44147:3445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:30145":{"id":"2:13293:30145","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:30137":{"id":"2:13221:30137","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12342:1721","crate::ops::IndexMut":"2:3423:3329","str::slice_unchecked":"2:13220:30136"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13203:30133":{"id":"2:13203:30133","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13264:30140":{"id":"2:13264:30140","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12889:8951","str::split":"2:13252:24867","prim@char":"1:12336:471","str::split_terminator":"2:13261:30139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43961:8970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:24869":{"id":"2:13255:24869","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12704:8942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:30851":{"id":"5:5621:30851","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:27853":{"id":"2:13228:27853","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43869:8957","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13258:24871":{"id":"2:13258:24871","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12889:8951","`DoubleEndedIterator`":"2:8269:129","prim@char":"1:12336:471","str::split":"2:13252:24867"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43911:8936","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12910:8948","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:30135":{"id":"2:13209:30135","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:28364":{"id":"2:13231:28364","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13230:28284"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44176:8953","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13261:30139":{"id":"2:13261:30139","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12889:8951","str::split":"2:13252:24867","prim@char":"1:12336:471","`DoubleEndedIterator`":"2:8269:129","str::rsplit_terminator":"2:13264:30140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43943:8971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13302:30150":{"id":"2:13302:30150","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12336:471","self::pattern":"2:12889:8951"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:24176":{"id":"2:13322:24176","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:24836":{"id":"2:13214:24836","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:24877":{"id":"2:13273:24877","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12895:8947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:30147":{"id":"2:13297:30147","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:2768:16101":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:6902:9261":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:430:32570":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:45843:3720":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10959:21790":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:21842:2262":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:11328:8936":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:581:9085":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:23115:28561":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:4763:3577":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9260:3616":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:5995:17022":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:5982:2426":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7604:17084":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13173:17489":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:613:33853":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6650:14822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6670:14825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:41248:9251":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:5766:3591":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"15:394:16042":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13485:20176":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:15569:21480":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:5579:3586":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"14:165:16007":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:878:3277":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12353:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13832:20672":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:3046:30067":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4144:3521":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5636:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:10642:26908":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:7461:15248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6768:14837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:15176:21449":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10092:17194":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2735:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:43863:8958":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:746:3503":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:47104:8847":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:32224:9377":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:41223:9249":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:43467:9442":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:7385:2511":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:42301:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"13:0:2269":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42720:2440":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:47229:8856":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1570:3284":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10769:33831":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11324:17291":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5083:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:8594:3489":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:43778:8914":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:922:3280":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:6880:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:2529:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:43943:8971":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:15383:21468":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:2936:16108":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:38888:9319":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7306:33056":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5466:14100":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:5457:14099":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:10329:2439":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:9405:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:3475:16114":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11293:17265":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:2684:16097":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:22828:28384":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:9388:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:39902:9090":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6574:17049":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:10329:3345":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:13528:9096":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"2:10120:2437":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:5653:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:6657:14823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:8301:17111":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:45860:3725":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:481:21708":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3056:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13899:20676":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15646:21487":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8530:3448":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:11911:22134":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15778:21496":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2890:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:10320:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11616:21833":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5290:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:589:28288":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:545:10079":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11405:17274":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:10716:3470":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:6543:17047":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:15313:21461":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12358:1845":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"18:754:21706":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:8240:2478":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:9365:21901":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8549:3494":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11227:17234":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6811:14839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13946:20678":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:562:3227":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:6782:17057":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:8351:15826":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6738:14833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"9:447:15871":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:1971:9233":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:14436:20710":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:6433:3820":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:10893:3583":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:6173:3630":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:43961:8970":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:12008:8921":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:4478:3557":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3897:3495":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11898:17364":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:12666:9462":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:4002:2511":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4952:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:1590:3313":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:4743:16721":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:3251:2464":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4345:3555":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13089:17486":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:10952:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:5817:17015":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13797:20670":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14545:20718":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14212:20695":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:5934:3280":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43021:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:15206:21452":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:43810:8933":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7695:17089":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2066:9344":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:1855:3335":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4916:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:3226:8882":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:80:21684":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:2554:32554":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11228:9473":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:23192:28430":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:5260:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:4877:3560":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5244:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6620:17052":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:9886:17189":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:33460:3666":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:15944:20159":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:10713:3468":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:8073:17100":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9858:17188":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:16249:21672":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"9:357:15887":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:40841:9273":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2902:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14131:20691":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:5593:3587":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5489:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:22125:2262":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:21673:2262":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:9158:2464":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"8:0:2271":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:513:17185":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:9975:29890":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:5588:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:16165:21665":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:5470:8908":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14402:20708":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:7111:32862":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1025:3291":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15273:21457":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:46949:3701":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7061:17069":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7590:17083":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7741:17091":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:5277:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40693:9258":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5039:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:41929:3498":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5344:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:1628:10981":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15822:21499":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:9180:3636":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12289:17397":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4830:16739":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:23013:3501":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:38254:9317":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:5230:3612":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:7727:3281":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8857:2464":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:44615:9454":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:14489:20714":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11782:3496":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:11023:21785":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1493:3277":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:5506:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:5089:3579":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:1540:3279":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:6968:9017":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:40605:3384":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"11:1107:15994":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12225:17404":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"10:44:15981":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:47161:8852":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:12336:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10915:33834":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2713:26944":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:15301:21460":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44311:8983":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:14177:20693":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14147:20692":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2303:16052":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:5160:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4885:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14066:20687":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:980:3289":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:32976:9302":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"14:220:16016":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12516:17457":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:43839:8964":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:40662:3326":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:6612:31264":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:7314:10925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44192:8962":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:4786:9047":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43235:28524":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11634:17300":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:6786:3622":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11341:17277":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:11877:17344":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14575:17174":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:883:3299":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:3778:16124":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:718:21697":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6746:14834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:47115:8848":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6721:14831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:6678:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12318:17216":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:33188:9305":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43008:28393":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:45960:3738":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:43911:8936":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:0:2279":{"crate_id":17,"path":["object"],"kind":"module"},"1:9113:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:7939:26941":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2893:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12399:17436":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:3263:30020":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:32324:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:39709:9322":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"14:40:20160":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:1510:10970":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11677:22062":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:46266:3761":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:4552:3549":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:4385:29054":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:956:2464":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:44635:9450":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11567:17328":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:7727:17090":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46477:3688":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11899:8864":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:13774:17390":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:32235:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5385:17005":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7144:17070":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:3221:8881":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:497:10075":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:44043:8966":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:30622:9224":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:2203:17273":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7379:33070":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:7652:9079":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:42496:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:3388:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:666:3254":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1692:3545":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:43718:8928":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:47214:8855":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43046:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:43486:8916":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:40671:3446":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:4586:8903":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6706:14829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5423:14096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2548:16091":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:5107:16809":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:1619:3294":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:39547:3328":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:7561:15254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3832:3492":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14271:20699":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5581:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:5438:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:811:3281":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:5698:3590":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:47095:8846":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:8474:3477":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11574:15989":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:6908:28584":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:6385:17035":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9332:17071":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:523:10077":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"15:0:2277":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:1566:15996":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:8265:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6648:17054":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:12319:21832":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:9546:3351":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:22931:28321":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4870:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:12361:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2458:16087":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:563:21713":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11189:17240":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:41229:3476":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:6051:3612":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:14587:20720":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5306:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14012:20683":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7559:17080":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:4316:3552":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:44910:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:570:10083":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:45892:3691":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15368:21466":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11508:26912":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:957:3286":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11510:17271":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:42418:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6900:14868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9410:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:8259:17110":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13999:20682":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:42134:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:8216:17108":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:3820:3315":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:6364:26915":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:44210:8963":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13116:17487":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:479:10072":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12308:3261":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6756:14835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:22459:3808":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:14449:20711":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7366:3584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7755:17092":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12362:17435":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2699:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:689:21703":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4294:23683":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5006:16777":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"11:687:3277":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11621:17302":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:6396:22063":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:46041:3753":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:6775:14838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:42980:28392":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2896:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:3672:8886":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13375:20168":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9137:3596":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:22564:9334":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:7656:17087":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5557:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:15376:21467":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:6729:14832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"11:1923:3297":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:12287:22109":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11089:17239":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:22993:28441":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:11008:3590":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:47036:3707":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10622:33825":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"13:110:32621":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7633:32861":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:13511:29389":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:11799:17385":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:15655:21488":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10419:17160":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10997:17226":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"13:229:32572":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:21643:29166":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:41200:28435":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:6664:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:12362:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12264:17401":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11788:17384":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5307:16986":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:9793:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4206:3526":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10877:17206":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:21587:9085":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:800:3280":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:15092:21442":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1680:10986":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:42713:2439":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6278:17030":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:22511:9334":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:12849:2468":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:11967:8925":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:10348:22137":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"18:0:2280":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:5028:9060":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:12650:9460":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:4373:29163":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:22164:29164":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12808:17169":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14051:20686":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:3145:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:6414:3819":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4062:16293":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:40472:9068":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12175:17417":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12408:17427":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12900:17214":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:40731:9265":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:8317:14291":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2665:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:3614:16115":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:1853:3334":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:15608:21483":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11622:3601":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11583:17299":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:11663:21899":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:6958:9016":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:43765:8913":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:44623:9457":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12303:26780":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:14372:20706":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:46333:28373":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:44520:8973":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5445:14098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40615:3383":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12659:17445":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:9284:3226":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:8244:22094":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2612:16094":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46684:28397":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:46705:3689":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:42576:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:41238:9250":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11367:17244":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:43274:27879":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:1896:3281":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5546:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:538:21712":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:42126:3239":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46460:3740":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:6566:3280":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:43997:8940":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5236:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6634:17053":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:7465:29950":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:2249:29945":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5361:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:14111:20690":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15333:21463":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:947:3284":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5336:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:8053:3259":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4932:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:33728:9308":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12929:17215":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3050:30066":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:10416:3600":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:1964:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:3649:24365":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6562:14816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:710:3283":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:9209:3637":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13235:20160":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:44325:8984":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:521:21707":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:3191:3665":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:9401:3429":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11605:17324":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:669:3255":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:2878:16106":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:3601:3411":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44685:3669":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11715:17333":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:9224:3635":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46572:3706":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5834:3630":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:10325:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:12351:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:41941:3489":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:8183:9256":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:12704:8942":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11246:3417":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:11661:17301":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10068:17172":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2463:3122":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:3331:3468":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15931:20158":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:4891:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7497:17075":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7516:15251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:2974:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5472:14101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:1676:32563":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:8282:14286":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:8341:15825":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:3754:31264":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13497:20177":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:7540:2467":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:1888:3429":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:5052:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:9174:2511":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5415:32873":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:3394:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:32210:27811":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:7566:3238":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1891:3345":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:4739:9046":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:3601:9032":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:12354:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:8269:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:774:3278":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:6072:9673":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6231:17029":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11537:17292":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1496:10968":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:1997:2414":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:15281:21458":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:45907:3721":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"11:2542:29790":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:9738:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:749:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:7582:3367":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:46219:3705":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:4282:3429":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:32203:17110":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:7132:32907":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:7622:3369":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10912:21818":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:46904:3729":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11256:17263":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:4787:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10759:3231":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:11759:23677":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10942:3408":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:10490:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:11407:8940":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8769:2460":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:872:33054":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:32233:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11595:17329":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:39716:2718":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13526:20179":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13581:20183":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11812:17343":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"11:1087:32571":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11694:21786":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10719:3466":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:15616:21484":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:4352:16560":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:113:21686":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3410:3281":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:8288:14287":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:1887:2511":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:15266:21456":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:9312:22122":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4810:21765":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:11242:17262":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:4439:9034":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:40426:8962":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:8300:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:4685:3561":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3335:8884":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:4420:8877":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9319:22087":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:4641:16665":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:16105:21661":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:7425:3317":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:43728:8929":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:1671:10985":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12597:17453":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:15624:21485":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43264:2460":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13766:17392":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11000:3355":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:7006:17066":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43791:8932":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:2403:3277":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:40539:3365":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2004:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11075:17244":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12792:17168":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3366:3310":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:4117:31264":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:23137:28437":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:21655:29174":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:4771:16726":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:7999:3608":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2854:16105":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3894:3496":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:643:33850":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:43852:8961":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13046:17171":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8465:3475":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5225:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:3329:16113":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:1580:10977":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:7551:3274":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10905:17207":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:9788:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9150:3597":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13412:20171":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:5769:17012":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:42379:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:8211:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8543:3445":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14298:20701":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6079:17026":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:4882:16745":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:15836:21500":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:9197:3634":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:2461:3393":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:7014:17067":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:1663:10984":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:15596:21482":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7686:17088":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:1843:3281":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:6460:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5326:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:3026:2265":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:8601:3558":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:44502:8972":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:3810:16133":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:16121:21662":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:22609:3802":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:21597:29170":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:1204:30064":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:30367:3499":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:12346:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:8187:9255":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:13613:29728":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12572:17204":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:5644:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:7910:17099":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:21675:3679":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:7405:3280":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:5917:3429":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:4468:16630":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11418:3385":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:5102:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:14235:20696":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:30637:2436":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:8260:3314":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1739:31264":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:2220:29937":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3187:9283":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10818:17205":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11281:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:3842:16142":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7549:17079":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6160:16051":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:6629:14820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13387:20169":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:40587:3370":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5665:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6066:17025":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4965:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:15116:21444":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:32234:2268":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6636:14821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:44868:3815":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:5222:29370":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:21641:29172":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:680:30002":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:11449:8939":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6597:14817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:45995:3692":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:2592:16093":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5329:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:34046:9310":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:44643:9473":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12863:17212":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11196:3595":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:299:32546":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46522:3694":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:4252:3429":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1723:10990":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:42085:2431":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11085:26910":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:42615:3613":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:10791:28629":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:15734:21492":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8807:2462":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:38309:9318":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9464:3664":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9415:3625":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:12334:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46350:28562":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:7348:15244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:2704:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:42045:2511":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:44827:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:3590:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3661:2464":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2477:3397":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:44157:8965":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6480:17043":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:47124:8849":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9671:17161":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:674:3256":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:30648:28507":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:45813:3719":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6409:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:41907:28522":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:951:3285":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6621:14819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:22893:28566":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10710:17203":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:39503:8885":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13509:20178":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:3297:30015":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:12590:9461":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46655:28523":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:491:10074":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6948:17063":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:7473:23680":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:4560:16653":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:10544:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:13838:3814":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:8175:17105":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:6813:17058":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:23093:28396":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:11764:17337":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:10251:17195":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:44061:8967":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:21626:29176":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:608:33879":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:968:3287":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10612:17201":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:2231:15989":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:13795:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1610:3280":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:4663:3560":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6843:3628":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"11:0:2274":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:1503:10969":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:150:16057":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:328:32557":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:42096:2433":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:7546:15253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15992:21657":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"18:96:21685":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1324:3290":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13437:20173":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9721:24364":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:4322:2464":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:1160:3293":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2774:3461":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:22907:28533":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:39639:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8189:3408":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:44810:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:7339:15243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:3288:27411":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:7389:11111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:765:21699":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11419:17204":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:673:2464":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5382:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:7428:17073":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46365:3722":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:22722:28515":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:7799:17094":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:13146:17488":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12949:17216":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13877:20675":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:22637:3803":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:15521:21479":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:7939:3475":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:9324:22123":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:6494:17044":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6588:17050":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"15:306:16031":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12278:17432":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:9420:3626":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"11:883:3289":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:1369:3293":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:11649:21731":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:42037:3277":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:1614:3281":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:5320:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:3196:3667":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44805:28406":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:7107:31280":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:46056:3759":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:6379:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"9:482:15870":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:0:2278":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5376:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:3583:3412":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:974:3288":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:23126:28540":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:47252:8857":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:3196:16112":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6698:14828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:598:33860":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"14:187:16014":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:8188:17106":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:14855:21431":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:43282:27878":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6098:17027":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10170:17006":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11042:17229":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:1509:2511":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:578:10084":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10759:17204":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:46070:3673":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6524:14813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:14876:21433":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1517:10971":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:13875:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15463:21477":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:3058:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:16223:21670":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:44639:9451":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46410:3728":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:44889:29399":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:8523:3447":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:5841:3631":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"11:2569:2467":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:7984:10030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:10331:2447":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5436:14097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:40:3330":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:10222:22156":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:9716:3407":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:9107:3594":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:39467:9030":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:23159:28386":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:12388:17426":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:1593:10979":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12724:17209":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9393:3617":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:6427:17038":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:40361:28401":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:8259:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43243:3422":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:33527:3668":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:1069:3290":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:1066:15993":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:44835:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12371:17215":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:12356:1833":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8847:2463":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:21728:3674":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:21852:3676":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12478:17440":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40642:8913":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:46152:3687":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10399:3448":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42190:2511":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4959:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1565:10976":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5283:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:8733:29889":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10284:17196":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:3040:31659":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:219:8890":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:40855:9274":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:14503:20715":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:41741:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5515:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:44015:8938":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"14:31:16006":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:7485:2511":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14386:20707":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:938:3282":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3658:3413":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14560:20719":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:23148:28271":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:9356:2432":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2508:16089":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46137:3739":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:832:3282":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:1761:9202":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:5643:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:40793:9260":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:11421:8938":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:41795:3488":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:44607:9449":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:15769:21495":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:10276:2416":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:5914:32856":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:289:31264":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7920:26954":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:21726:2262":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:3520:3476":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:14414:20709":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22951:28440":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13674:20666":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5477:14102":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"0:0:2140":{"crate_id":0,"path":["thiserror"],"kind":"module"},"5:1559:3283":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:22152:3671":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:15168:21448":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:4729:9045":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:13551:9267":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:21609:29170":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:8271:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2808:16103":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6342:33073":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:2316:3390":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:3762:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:8002:3232":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46283:28378":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:40513:9070":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:3384:3470":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:8328:14292":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:8704:2425":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6532:17046":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:752:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:14311:20702":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5250:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13568:20182":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:14284:20700":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:40376:9071":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4332:3554":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:8118:17102":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:3925:16179":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11688:17297":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15102:21443":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:559:10081":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:40433:9067":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:11467:17278":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:2124:3290":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5367:17004":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:16187:21667":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:6027:3262":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:1917:3296":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:367:3246":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6802:16024":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10989:26542":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2899:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7473:17074":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9428:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:2748:16100":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:8555:3493":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:6668:3618":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:5122:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:4507:9051":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:39729:9027":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11443:17280":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11865:17388":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:13553:20181":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:465:10070":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:40712:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:12433:17174":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7321:2430":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7393:3301":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:538:10078":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:659:21700":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:2383:2464":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:4913:16753":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:44454:8988":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13064:17170":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:42054:2430":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44876:3816":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:8197:15789":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:2175:17313":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12584:17205":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"11:1910:3295":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:6672:3619":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7888:17098":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4916:3536":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22497:3811":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:15410:21471":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:888:2511":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9166:3639":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7610:3368":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2001:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:2116:3315":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:351:32560":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:11583:22067":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:5260:3478":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:3371:8871":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"18:680:21702":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10018:17165":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:16269:20171":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:437:16054":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:4718:16719":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5528:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:573:33850":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12127:17353":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12043:17348":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8088:3355":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3276:9312":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:3635:8883":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5174:3544":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:8536:3449":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:40521:9066":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11547:17326":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:11255:8931":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:41963:3490":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:12910:8948":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:10671:33833":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:1603:15998":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:485:10073":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:4202:3525":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:6451:3630":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:4324:3553":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:1007:3290":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:1968:2413":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:3674:3277":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:23170:28404":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:16212:21669":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:22882:3500":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3999:3497":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:1916:3352":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:7397:26481":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:47135:8850":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:494:26947":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11497:17272":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:6090:9266":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1636:3297":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:42734:2448":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:40399:9074":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15010:21439":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:2489:3403":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5960:17021":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6763:14836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12238:17403":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8513:3446":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:542:33012":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:1051:3292":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7539:17078":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:14079:20688":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7570:17081":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:4397:3556":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:14356:20705":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:5046:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:15582:21481":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:553:10080":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6976:17065":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11755:17336":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:7537:15252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4864:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:8253:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:12993:17217":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:46012:3698":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13594:20184":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8236:3275":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:15289:21459":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2355:16082":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:3258:3295":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:2478:16088":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:6562:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:44627:9455":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47078:3762":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:12436:8955":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:43639:29388":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:45875:3685":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11103:26951":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12340:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7580:17082":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:6775:31264":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:2906:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2699:3459":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:7575:15255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:7435:29935":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:41763:3486":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15190:21450":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:41014:9276":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:39659:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2276:8887":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6940:32673":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:909:3279":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6788:32025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:396:32549":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:16138:21663":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:16235:21671":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:7602:15257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:3477:3453":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:5846:17017":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4897:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:4424:16609":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:5897:17019":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:46589:3755":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2788:16102":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5617:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43067:2438":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4876:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:6491:14767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13272:20162":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11773:17383":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6317:17032":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10439:17199":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:46859:3695":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:15126:21445":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:42457:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:42117:9399":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:46251:3760":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:531:21711":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7595:9386":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8252:3460":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:5400:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6665:17055":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:9124:3595":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12328:17398":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:32293:9284":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:7584:15256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:16259:20169":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13922:20677":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5031:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:3291:24103":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12494:17405":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:10969:2262":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:304:2480":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:932:3281":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:46181:3693":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:2543:9334":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"9:502:15874":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:7743:9012":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1531:3278":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12150:17351":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:40763:9268":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:1475:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:1490:10967":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:532:2939":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46202:3699":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9737:17159":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12443:17428":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:44167:8954":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:1092:3292":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:6398:17036":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2443:3280":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:22550:3812":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:8006:15626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:5280:22057":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11209:3596":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:4802:16734":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:670:21701":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:23181:28329":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:700:2511":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:22509:29697":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:473:10071":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12621:17451":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:1603:2464":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:102:32541":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"11:2151:3292":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40550:9386":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15324:21462":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:10339:2446":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:10979:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9345:21856":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44813:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13972:20680":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:40389:9073":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7823:17096":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:43893:3449":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:12627:9463":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:47007:3756":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:787:3279":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:3039:2572":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7618:17085":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:5077:3429":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:3264:17347":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:42223:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:40684:9257":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:7813:17095":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:16176:21666":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:3580:9321":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:3597:17370":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:33873:9309":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:5955:3615":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:2985:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:7467:15249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:43252:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:4976:16770":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"11:2140:3291":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:4094:3519":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13344:20166":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:865:2464":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1184:30104":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:2352:3292":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:6713:9278":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13455:20174":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:21746:3675":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:30584:3309":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1101:3293":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:42340:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12454:17438":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:7412:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:12895:8947":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15426:21473":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:1547:10974":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:45828:3684":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11051:17254":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:12915:8946":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:10971:3410":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:43482:28527":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:42199:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11605:21842":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:11026:17228":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:2469:3281":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"11:2423:2511":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:42992:28371":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:44147:3445":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8483:3410":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:7493:2511":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2312:3389":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10137:17158":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1478:2464":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2089:2610":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4914:3533":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10982:17225":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7355:17072":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5700:17008":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:12347:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:22595:2262":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:12887:17213":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:12683:17450":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11674:17331":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:44489:8991":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:635:33866":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10887:33832":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"14:0:2276":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:23045:2262":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:15197:21451":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"9:238:2460":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11730:17334":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:896:3278":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:3023:22037":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:15748:21493":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:30995:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3294:24104":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:1535:10973":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22642:3801":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:2548:32559":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:6272:26957":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:14847:21430":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:31022:9085":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:23000:3502":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11269:17264":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:8377:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13814:20671":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:856:3287":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:10327:2440":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:8689:3307":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:3292:3294":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14723:21427":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6915:14869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6471:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5624:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:5927:17020":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:11843:3497":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7397:33064":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:7634:8902":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:3620:29794":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12422:17437":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:10917:21808":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10980:26544":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:6857:3629":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:10333:2448":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:5159:2421":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:6417:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:42262:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11354:17276":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:2562:32551":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5863:17018":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12352:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:22775:28541":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:586:3229":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:22130:3681":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:5781:17013":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11102:17238":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2374:16083":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11016:17227":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4811:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:3899:16176":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:6435:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:46610:28543":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:5598:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:32199:2717":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"14:214:16015":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5314:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:15151:21447":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11392:17275":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2068:9345":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:261:33054":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"17:10828:33838":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:10759:29208":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:15635:21486":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:15473:21478":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:6895:17061":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10599:3594":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:14933:21435":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:11216:8942":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12213:17431":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:44619:9453":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6478:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:13665:9094":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:3014:16110":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:14968:21436":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:617:3249":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:8695:9254":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40784:9269":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:2636:16095":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:30616:9011":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:7767:9245":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:517:10076":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2155:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:5075:16800":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:4856:16742":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40565:3366":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:11366:8937":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43029:2436":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:6348:3817":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:36268:9314":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:4296:3429":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:3180:9281":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:10317:17197":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:14977:21437":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5134:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:943:3283":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5181:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:8202:17107":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:22483:2262":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:47057:3741":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10218:17164":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1607:2511":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2838:16104":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10933:21817":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:8177:3407":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6263:32893":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:3550:3429":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3607:9031":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5020:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:6962:17064":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12969:17162":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"7:79:15849":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:10693:9426":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:8294:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12768:17166":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:2545:9335":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:44468:8989":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"14:202:8992":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10185:17163":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10155:17005":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:44417:8987":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5536:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:12963:8975":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7168:17071":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:42537:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:7052:17068":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:8073:3354":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"10:36:32539":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:8093:17101":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:6934:9015":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:7376:3311":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:3353:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:14599:20721":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:515:21710":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:1891:3280":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:4152:3522":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:9916:17190":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:6912:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:40577:3448":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:12089:17346":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1653:10983":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4812:21767":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:12056:17349":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:15957:21656":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:2629:3458":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:1077:31264":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7429:11094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:8220:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1340:3292":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:42182:3277":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:15138:21446":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7769:17093":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:4451:31271":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13308:20164":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5146:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:5827:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:7983:2262":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14529:20717":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6456:17041":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:7330:9952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:1168:30063":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:5769:3593":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46439:3734":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42963:2436":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:9239:3638":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:44926:8870":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8863:2465":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"14:160:16006":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5756:17011":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:843:3298":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:1526:10972":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:14341:20704":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:7452:15247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:14189:20694":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:11124:2464":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:38199:9316":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11841:17386":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:4972:3538":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:32322:8878":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6447:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:4808:21763":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:7132:31284":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:7140:3670":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:3029:16111":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12251:17402":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11220:26547":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8231:3276":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:9291:21857":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2479:3398":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:39679:3268":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:3206:9304":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2070:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12695:17449":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:6708:3627":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:867:33082":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:2127:3316":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:11166:17242":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:15814:21498":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14325:20703":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43879:3448":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15249:21455":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11214:17235":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:7354:27746":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:40410:8963":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44661:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:2304:3290":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:8007:3234":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:5613:3588":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7857:17097":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13606:20185":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11040:3597":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:3517:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:43800:8935":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5565:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5677:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13024:17218":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:11934:8924":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:1083:3291":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11313:17266":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14994:21426":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:14475:20713":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:39579:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:8199:3406":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:2307:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:16198:21668":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:13211:20159":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:3805:3314":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7098:32870":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:15078:17243":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:4986:17458":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:4515:31271":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:364:32544":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3218:8880":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:5729:9015":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:23203:28529":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:2226:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5630:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:6013:3429":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:4614:16661":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6991:32666":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4397:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11142:17204":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:44201:3251":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:123:32540":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:41256:9253":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:22283:2262":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:42953:28296":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:1142:15995":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:39601:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14038:20685":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6689:14827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:40635:3409":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:44696:9474":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:875:3288":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12076:17345":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:2234:17298":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:42020:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:4940:16757":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:15039:21441":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:42095:2260":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:3284:3296":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7528:17077":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1549:3282":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:12350:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2067:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:7716:27812":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12107:17204":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:47150:8851":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:10776:26944":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:44949:28377":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:4665:9038":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:32217:9046":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:33594:9307":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5347:17003":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:13986:20681":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:4538:3236":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:4192:3524":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11153:17205":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:1559:10975":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:40314:3251":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6120:17028":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:7718:26795":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:40772:9277":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:11293:8943":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:3429:3467":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44176:8953":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:16079:21659":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:2572:16092":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:3640:2416":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4985:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:11173:3449":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:9467:8947":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:7415:3302":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:2741:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4992:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2735:3450":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8493:3414":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:15:2390":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:42001:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13015:17174":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:38144:9315":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44185:8952":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:3669:16116":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6335:17033":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:8322:2477":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:15400:21470":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:22377:3806":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:15720:21491":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:21624:29179":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:1838:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:2438:16086":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:6505:14768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"9:178:15976":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1485:10966":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9984:17192":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4837:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6047:17024":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5831:17016":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"7:32:15842":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46782:3723":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"15:327:16035":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4942:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:40350:9072":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:10579:3419":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11647:17330":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:10507:24363":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:40806:9270":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:45928:3726":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8874:2466":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:3473:17352":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6714:14830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:4100:3518":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:10294:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:4821:17452":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:5802:17014":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12824:17210":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:42174:2464":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4158:3523":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13424:20172":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:9278:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:12363:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5352:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8225:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:14516:20716":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:2660:16096":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2870:9089":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15701:21490":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8067:3260":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:40320:9035":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:22843:28547":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:507:33850":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8620:3494":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:22285:3677":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3333:3469":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12530:17448":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:2770:29981":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:44275:8981":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:16093:21660":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:13125:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8612:3548":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8626:3551":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:46978:3735":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:8671:3535":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:7306:10122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4995:3532":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:8686:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12353:17434":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:5302:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"9:53:15890":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4824:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:15356:21465":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5219:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:3423:3329":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:15418:21472":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:742:3284":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:7870:17186":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:860:33049":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:13473:20175":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4924:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:5671:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:1883:2464":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:2102:3314":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:939:3300":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:12404:9414":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8334:22079":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:43699:8926":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8792:2461":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14091:20689":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:256:33082":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13252:20161":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:2322:29979":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13959:20679":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"14:7:16006":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4660:9037":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:13640:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:5170:1300":{"crate_id":1,"path":["std","path"],"kind":"module"},"6:1621:10980":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:14788:21429":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13785:17391":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6821:14840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:12343:1811":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:3885:3281":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:706:8949":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2728:16099":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:2338:16081":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:7449:2511":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:8136:17103":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:22859:28323":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:12420:9416":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"12:0:2275":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11926:16039":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:726:21705":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:8339:22092":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46099:3727":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:12337:1873":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"9:392:15872":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:7984:3248":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6872:17060":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:7668:8994":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8645:3582":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5212:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:5502:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:4531:16647":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13292:20163":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14260:20698":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14986:21438":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:403:17184":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:12357:1839":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:8306:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:7485:15250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6560:17048":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:4817:3237":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:434:32566":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:2535:2286":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:9807:17173":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:586:10085":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:42727:2447":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5415:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:15342:21464":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:10335:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"9:424:15873":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:44390:8986":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:8155:17104":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:15390:21469":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:1914:3351":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11853:17387":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:4502:16641":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:12360:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:2646:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:6176:3429":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11743:17335":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:14025:20684":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:0:2270":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:844:3286":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"15:288:16030":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"10:0:2273":{"crate_id":10,"path":["adler"],"kind":"module"},"5:4087:3280":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:5249:22057":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11688:21770":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:521:3222":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11825:17365":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:44479:8990":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:40990:3447":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:7651:9078":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:10524:17200":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12543:17447":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:41779:3487":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:2369:15999":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:5742:17010":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:46120:3733":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:40506:9069":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12030:17350":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:735:21698":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:6189:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:41981:3491":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:7658:8993":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:3318:3297":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7509:17076":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:32764:9303":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:41000:9275":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43820:8934":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:3869:3280":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:5466:8907":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:47176:8853":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:0:1713":{"crate_id":1,"path":["std"],"kind":"module"},"18:698:21704":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11822:3495":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:4918:3537":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11524:17325":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13723:20667":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"9:330:15927":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10661:17202":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5191:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5370:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10720:33845":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3668:3440":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:43708:8930":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:42029:2464":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8649:3584":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4214:3527":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:1639:10982":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13738:20668":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:1903:3294":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:23082:28528":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:14752:21428":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8606:3559":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:5390:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"9:0:2272":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8172:2609":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:6913:28293":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:12485:17441":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:15222:21454":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3427:3466":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:15678:21489":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:16050:20162":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12189:17429":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:6606:17051":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:7085:32882":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:12335:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9709:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:11355:3386":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:14246:20697":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:32292:2479":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:2394:16084":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5722:17009":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2869:2262":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:16032:20161":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:5201:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12464:17439":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:7880:22098":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:8721:2459":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:23655:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6758:16025":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:8012:15627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15434:21474":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:11435:8941":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:41214:3618":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:1582:15997":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10044:17193":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:8226:17109":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:10536:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:10954:17224":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6927:17062":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8560:3485":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7648:17086":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:15799:21497":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4874:3581":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1355:3291":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40534:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:373:3247":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:2998:16109":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:47199:8854":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4909:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:41207:9247":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6466:17042":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:2302:29985":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:426:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12557:17244":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:34392:9313":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:39619:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46234:3754":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:8029:15628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:4587:16657":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12508:17442":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:837:3285":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2309:3388":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13844:20673":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10573:33846":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13855:20674":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:1585:10978":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:1631:3296":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13187:20158":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:1707:10989":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:6499:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:2539:29966":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:4848:9049":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:3138:8879":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:33661:9306":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44296:8982":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3391:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1625:3295":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13538:20180":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6300:17031":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:15760:21494":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:12348:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:44097:8968":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11915:17389":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11702:17332":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:4656:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:12122:24608":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10922:3405":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:7446:15246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3595:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2080:28273":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:13818:3817":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11063:17248":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:3042:29946":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12201:17430":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:651:33850":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:10584:3421":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:34219:9311":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6519:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40754:9267":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4162:3277":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:4481:3429":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:41823:28511":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43739:8915":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12355:1851":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:2326:3291":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:43869:8957":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:40702:9263":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:21734:3678":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:22421:3807":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:9938:17191":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2528:16090":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:5080:3578":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13399:20170":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12647:17446":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:26055:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:6204:9259":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:15023:21440":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:491:33884":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5296:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:12342:1721":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:8247:14281":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:13930:3303":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:5422:31264":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:21854:3675":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:40740:28374":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:2902:16107":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6353:17034":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:40816:9271":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40418:3251":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:39564:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:5400:17006":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:1207:17249":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14463:20712":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12342:17400":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:8231:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11311:21777":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:5948:3614":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6542:14815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12300:17433":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:39551:9320":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15456:21476":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12359:1827":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10350:17198":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:12341:1687":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:15214:21453":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:7546:2519":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6433:17039":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:2418:16085":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9755:17157":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:564:10082":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:44937:8868":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3382:2476":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12671:17481":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:45974:3686":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6749:17056":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4979:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15058:21425":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11493:17285":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8025:3231":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:6693:2511":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:9273:22141":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11128:17236":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:45945:3732":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14868:21432":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11115:17237":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:46027:3704":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:1686:10987":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5200:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:1098:17241":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:12349:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:5686:17007":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:4130:3520":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:43227:3420":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:40825:9272":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5002:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:3150:2614":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:597:17186":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:5103:3580":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:23104:28432":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:12889:8951":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:16069:21658":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:44342:8985":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:32157:3598":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46312:28513":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6442:17040":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:44900:3813":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:44631:9456":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6026:17023":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:10350:22108":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12707:17208":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:3386:3471":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6849:17059":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13753:20669":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:2210:3222":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:11148:3277":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11097:26943":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:44817:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:2643:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:12904:8949":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:44115:8969":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6412:17037":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:9781:17187":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:7325:26949":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:8182:3405":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14912:21434":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:1699:10988":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:2536:32555":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:44611:9452":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:22915:28578":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:11263:21824":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:12339:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:15445:21475":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:40722:9264":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6504:17045":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12851:17211":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:650:2415":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5014:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:3140:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:6874:14867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5629:3589":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:6789:3623":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:10534:33844":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:2323:16080":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:43690:8927":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11557:17327":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:4971:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"20:0:2135":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"6:6609:14818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11918:16039":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4795:9048":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:5037:16785":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:8344:3462":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:2708:16098":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:16151:21664":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:9446:3417":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:13363:20167":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:7359:15245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46551:3700":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:23024:3516":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5266:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:22966:28434":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5112:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5483:14103":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:10337:2445":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40865:9262":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:9980:29875":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:623:33863":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4798:3523":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:47291:8858":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4800:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:2037:17279":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13325:20165":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6532:14814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}