{"root":"0:0:1717","crate_version":"1.0.38","includes_private":false,"index":{"0:65:1820":{"id":"0:65:1820","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:3:1708","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:7735:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5122:2461":{"id":"5:5122:2461","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:59083":{"id":"2:11405:59083","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5112:59732":{"id":"5:5112:59732","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:59080":{"id":"2:11365:59080","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50286:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:52059":{"id":"2:11455:52059","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:54782":{"id":"2:11343:54782","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10604:3253"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:59085":{"id":"2:11414:59085","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:120","self::pattern":"2:11036:2822","prim@char":"1:12300:408","str::matches":"2:11411:1946"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50244:3100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11411:1946":{"id":"2:11411:1946","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11036:2822","str::matches":"2:11411:1946","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50226:3099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11337:5402":{"id":"2:11337:5402","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:37:1709","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1822"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11460:2167":{"id":"2:11460:2167","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:2167"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50330:2168","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5124:52058":{"id":"5:5124:52058","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11457:52061"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:52060":{"id":"2:11456:52060","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:59078":{"id":"2:11355:59078","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12306:1352","str::slice_mut_unchecked":"2:11356:59079","crate::ops::Index":"2:2987:2286"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11356:59079":{"id":"2:11356:59079","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11355:59078","`str`":"1:12306:1352","crate::ops::IndexMut":"2:2991:2287"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:309":{"id":"2:11345:309","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11346:54901","`u8`":"1:12317:1448"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11402:54935":{"id":"2:11402:54935","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408","str::splitn":"2:11399:54933"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50144:2386","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:2853":{"id":"2:11360:2853","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49998:3088","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:59096":{"id":"2:11446:59096","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1717":{"id":"0:0:1717","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[254,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:68"],"is_stripped":false}},"0:21:1821":{"id":"0:21:1821","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11423:59088":{"id":"2:11423:59088","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,29],"end":[251,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::DisplayAsDisplay","name":"DisplayAsDisplay","id":"0:43:1714","glob":false}},"0:8:1821":{"id":"0:8:1821","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,4],"end":[250,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::aserror::AsDynError","name":"AsDynError","id":"0:6:1713","glob":false}},"0:44:1822":{"id":"0:44:1822","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11359:3124":{"id":"2:11359:3124","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49992:3087","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:4962":{"id":"2:11437:4962","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11036:2822"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11335:789":{"id":"2:11335:789","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12300:408"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:54928":{"id":"2:11384:54928","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","self::pattern":"2:11036:2822","str::split_whitespace":"2:11362:5623","str::rsplit":"2:11390:54931"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50022:2375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5120:59733":{"id":"5:5120:59733","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:37:1709","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5506:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1822"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5105:59730":{"id":"5:5105:59730","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2071","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6739:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2071","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6739:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:59095":{"id":"2:11443:59095","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:54901":{"id":"2:11346:54901","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12317:1448"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:5336":{"id":"2:11366:5336","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50314:3104","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11357:54920":{"id":"2:11357:54920","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11358:54921"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1822":{"id":"0:51:1822","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1825":{"id":"0:59:1825","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:1823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11370:54938":{"id":"2:11370:54938","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:59731":{"id":"5:5109:59731","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1821":{"id":"0:18:1821","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:3:1708","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11390:54931":{"id":"2:11390:54931","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:120","str::split":"2:11384:54928","self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50040:2384","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:54:1710","path":"::provide"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3370:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1716","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:63:1825"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11457:52061":{"id":"2:11457:52061","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334":{"id":"2:11334","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10599:1352","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11335:789","2:11336:2088","2:11337:5402","2:11338:59075","2:11340:59076","2:11343:54782","2:11344:59077","2:11345:309","2:11346:54901","2:11347:54897","2:11349:54898","2:11351:54899","2:11353:54900","2:11355:59078","2:11356:59079","2:11357:54920","2:11358:54921","2:11359:3124","2:11360:2853","2:11361:3350","2:11362:5623","2:11363:5621","2:11364:3665","2:11365:59080","2:11366:5336","2:11367:54937","2:11370:54938","2:11373:54939","2:11376:2129","2:11380:2087","2:11384:54928","2:11387:5622","2:11390:54931","2:11393:59081","2:11396:59082","2:11399:54933","2:11402:54935","2:11405:59083","2:11408:59084","2:11411:1946","2:11414:59085","2:11417:59086","2:11420:59087","2:11423:59088","2:11425:59089","2:11427:59090","2:11429:59091","2:11430:59092","2:11431:59093","2:11434:59094","2:11437:4962","2:11440:54940","2:11443:59095","2:11446:59096","2:11449:59097","2:11452:2941","2:11454:3296","2:11455:52059","2:11456:52060","2:11457:52061","2:11458:59098","2:11460:2167","2:11461:59099"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11347:54897":{"id":"2:11347:54897","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48056:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:59099":{"id":"2:11461:59099","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:59099"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50339:3106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1713":{"id":"0:6:1713","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:8:1821"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:9","0:13","0:16","0:19","0:22"]}},"0:43:1714":{"id":"0:43:1714","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1822"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"2:11393:59081":{"id":"2:11393:59081","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11036:2822","`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","str::split":"2:11384:54928","str::rsplit_terminator":"2:11396:59082"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50072:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1822":{"id":"0:47:1822","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104":{"id":"5:5104","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5015:1352","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5105:59730","5:5106:2440","5:5109:59731","5:5112:59732","5:5120:59733","5:5121:59734","5:5122:2461","5:5123:52057","5:5124:52058"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11434:59094":{"id":"2:11434:59094","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11449:59097":{"id":"2:11449:59097","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[253,4],"end":[253,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(provide_any)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::provide::ThiserrorProvide","name":"ThiserrorProvide","id":"0:58:1716","glob":false}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:3:1708","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:37:1709","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5394:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1822"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:49:1822":{"id":"0:49:1822","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11349:54898":{"id":"2:11349:54898","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48056:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:54940":{"id":"2:11440:54940","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5106:2440":{"id":"5:5106:2440","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":{"restricted":{"parent":"0:3:1708","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11362:5623":{"id":"2:11362:5623","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11363:5621"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50296:3102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:59077":{"id":"2:11344:59077","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1821":{"id":"0:24:1821","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11452:2941":{"id":"2:11452:2941","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10997:2043","FromStr::Err":"2:10998:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48198:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10997:2043","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10997:2043","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1821":{"id":"0:12:1821","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:59076":{"id":"2:11340:59076","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11338:59075"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:5622":{"id":"2:11387:5622","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10860:2390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:5621":{"id":"2:11363:5621","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11362:5623"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50305:3103","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:2088":{"id":"2:11336:2088","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11376:2129":{"id":"2:11376:2129","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48056:176","self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:3350":{"id":"2:11361:3350","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50008:2437","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:3296":{"id":"2:11454:3296","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1825":{"id":"0:63:1825","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:1823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:59084":{"id":"2:11408:59084","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11420:59087":{"id":"2:11420:59087","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408","str::match_indices":"2:11417:59086","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50190:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11427:59090":{"id":"2:11427:59090","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1820":{"id":"0:25:1820","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11431:59093":{"id":"2:11431:59093","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11036:2822"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11061:2826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338:59075":{"id":"2:11338:59075","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11380:2087":{"id":"2:11380:2087","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11036:2822","`None`":"2:48056:176","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5121:59734":{"id":"5:5121:59734","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6994:221","`Box<str>`":"5:286:2071"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2071","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6739:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:54921":{"id":"2:11358:54921","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11357:54920"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:54937":{"id":"2:11367:54937","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11036:2822","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:54899":{"id":"2:11351:54899","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:59092":{"id":"2:11430:59092","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1711","glob":true}},"2:11353:54900":{"id":"2:11353:54900","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1821":{"id":"0:15:1821","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11458:59098":{"id":"2:11458:59098","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:59098"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50321:3105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:54933":{"id":"2:11399:54933","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11402:54935","prim@char":"1:12300:408","self::pattern":"2:11036:2822"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50126:2388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11373:54939":{"id":"2:11373:54939","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11036:2822"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:59082":{"id":"2:11396:59082","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11393:59081","str::split":"2:11384:54928","prim@char":"1:12300:408","self::pattern":"2:11036:2822"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50090:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:2825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1715":{"id":"0:48:1715","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1822"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}},"2:11429:59091":{"id":"2:11429:59091","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":{"restricted":{"parent":"0:3:1708","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:12:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11417:59086":{"id":"2:11417:59086","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","self::pattern":"2:11036:2822","str::rmatch_indices":"2:11420:59087"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50172:3096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:2821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11364:3665":{"id":"2:11364:3665","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50276:2439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1822":{"id":"0:53:1822","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,47],"end":[251,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::PathAsDisplay","name":"PathAsDisplay","id":"0:48:1715","glob":false}},"2:11425:59089":{"id":"2:11425:59089","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5123:52057":{"id":"5:5123:52057","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11456:52060"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1716":{"id":"0:58:1716","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:59:1825"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}}},"paths":{"12:2178:60828":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10270:45474":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:5525:3744":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4346:40907":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:20023:58531":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:5510:3743":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2930:3771":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6676:3839":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2928:2065":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10182:45387":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4810:40954":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10385:4164":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:0:1837":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6161:3885":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:7805:56453":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7847:3910":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:5562:3368":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11247:45917":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"12:2080:2574":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:7870:2642":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:20261:2880":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:135:37329":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:53222:3006":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:1615:2209":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:29583:3172":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:9193:61355":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:2749:4008":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:534:3757":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:47243:2506":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12874:50847":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"12:274:60814":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11099:2245":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:46546:3711":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:4317:40904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10350:4064":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:49385:57229":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:973:2567":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:6852:2714":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:1387:2562":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:8329:3074":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4206:40736":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"7:79:42661":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"9:19:3542":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:8014:3711":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:10786:3094":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4778:40951":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:48105:2092":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12860:50845":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8448:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:1828:9561":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7737:45184":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:21838:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:1611:2208":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:21772:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:53966:3021":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:6958:3393":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:49802:2371":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:47098:2216":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:9213:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:49811:2370":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11054:45814":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:21163:56989":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"9:800:42811":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:51769:3010":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:8687:2173":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:50439:2830":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:50172:3096":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4274:40898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"12:815:2567":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:6538:41999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:12266:54454":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:51029:2228":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12322:50225":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5727:41578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:5861:41610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:5695:2317":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8639:2719":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:10809:3095":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2253:2676":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:50226:3099":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8217:2605":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3269:2454":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4575:40928":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9691:4151":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2676:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:545:37647":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:12271:8567":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:8991:61157":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8763:2349":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12008:50137":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"3:0:432":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5510:41562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5541:3745":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2509:4014":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:6284:3844":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:11893:50129":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12060:50141":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4312:2238":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2932:2066":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"12:725:2562":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"12:1866:2212":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:1212:2574":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:9239:2322":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12301:1464":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:8796:4072":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9515:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2487:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:49922:2381":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9488:4085":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6241:3888":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:49932:2382":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10796:4185":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3184:2898":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7044:3690":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11536:45416":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12748:50753":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6509:41997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:6269:37562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11763:2532":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4329:40905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9407:52566":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:8546:1972":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:20339:2878":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5826:2326":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:495:37641":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:7214:41078":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:46865:3273":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:4200:3034":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:5949:3765":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2839:2195":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"12:353:3620":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:661:1971":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:6430:2101":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:624:61779":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"12:2198:60826":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:21267:57222":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:4072:2425":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:10455:4223":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4096:40881":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13518:51412":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8554:2774":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:3086:2466":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:50944:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9108:45196":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6200:3886":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:900:2379":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:1864:9572":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4403:2778":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5595:41568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"12:98:3619":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:4949:2352":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:944:2208":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:5178:2525":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:3382:1823":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:48557:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1405:2564":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5699:41575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:6801:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11289:52538":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:6465:59984":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2792:2280":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7860:53199":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:1085:3617":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:131:37328":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:50936:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:11094:54416":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:50022:2375":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10708:4187":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:19989:58477":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:53008:2997":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:554:4797":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:11384:56452":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12304:307":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13039:51280":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:10860:2390":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:628:2165":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:6759:2463":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:7016:3346":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12948:50915":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5692:41574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13184:51321":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"9:863:3451":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:47569:32480":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8864:2030":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:6911:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:20249:1820":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:52200:3019":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"14:202:3348":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:11652:57184":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:21706:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:1751:58035":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:600:37654":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:11915:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:9207:2319":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12964:51247":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7278:3902":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:21365:3224":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:49577:3294":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:21805:2666":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47521:32476":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4653:40938":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:47550:2464":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:50040:2384":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6171:59960":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:7102:2069":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9738:4154":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:719:8566":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:2960:3338":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6903:3689":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:247:61541":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:46925:3277":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:1091:2572":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6528:3895":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:4126:2301":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:49170:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3350:2034":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:6333:3323":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:10921:45631":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4698:40943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1541:38533":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:50190:3097":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:2389:3702":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7511:3710":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:47210:2503":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:50792:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:3479:2335":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:29547:2973":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:11070:2350":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:5772:41581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:53758:2998":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:9395:2662":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:9411:2376":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11271:46029":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12307:50224":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11800:50123":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9250:45246":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:632:2034":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12896:50911":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:21:665":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:9155:45197":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:9574:2612":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:22402:2806":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9857:4136":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10949:45639":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:4904:52246":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:2683:4005":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7469:3842":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9274:45248":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5534:41564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3908:2425":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:48114:2034":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:599:61767":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7603:3858":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4286:40900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:8324:3073":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9526:4084":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:9446:45265":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:4749:44161":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:1678:38545":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11496:2611":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12972:51248":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:6421:240":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:12310:629":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:6928:3392":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13100:51288":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2817:2180":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:286:2071":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:49066:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:21970:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9700:4150":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:3461:1972":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:1044:58648":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:1500:38527":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4611:40933":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6953:37599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:21057:3144":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1550:38534":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12781:50798":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:10445:4188":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:4357:44057":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1562:38535":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:8615:2009":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:20021:58535":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:6668:4034":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:6709:2585":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:6023:59960":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:6829:4037":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:1938:1969":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:52802:3020":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:3314:2445":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:21240:2943":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:50144:2386":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:2190:60825":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13279:51332":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:6409:56449":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12087:50143":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:51703:57259":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:7156:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:487:37640":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10233:45497":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13231:51331":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13374:51371":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:8131:2697":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:20966:2879":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12934:50914":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:9536:2551":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"12:659:2093":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:36:60813":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:2771:4009":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5981:3767":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:3485:3387":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:2955:2211":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12265:50216":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:9475:4086":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7557:3836":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11144:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13214:51329":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4294:40901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:870:2034":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:9805:4208":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:1021:4206":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:52018:57300":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"9:33:3543":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11514:52045":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:8212:4186":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46835:3278":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13126:51293":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:5660:2315":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:2842:3769":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"13:220:60829":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:1672:1055":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:3347:2464":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:5887:2541":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:3154:2703":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4475:40918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:9138:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:50607:2839":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:25212:2820":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"12:1138:2575":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:4262:44034":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:6316:56440":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:9183:45198":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:1836:2093":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10520:45505":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:8370:2465":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:48633:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:50926:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"12:1845:2209":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:7659:3830":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11974:50135":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:11036:2822":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:21358:58177":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10088:45385":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"12:60:60820":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:6323:3322":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"12:387:60821":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2515:2448":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12768:50797":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:46377:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:931:2563":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12291:50223":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:50761:3119":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:3363:2379":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:50314:3104":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:2433:3703":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:519:37645":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9824:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"7:32:42654":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10546:45199":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3968:2957":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:12306:1352":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11761:50120":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:21252:2944":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:738:2563":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:7433:2559":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46519:2899":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8391:2434":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:1944:2658":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10434:45500":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:2825:4010":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:2991:2287":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8093:2246":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:49903:2380":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:8873:2176":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5587:41567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:12282:53022":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4191:40889":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:8076:2245":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6330:3890":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:5634:2425":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:5996:3881":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6298:3859":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8796:1980":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:2822:2187":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:9577:2386":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:6782:2754":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2657:4015":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:49084:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:62:37262":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:4246:2233":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:7237:41081":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6352:38495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9658:45305":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:6681:2758":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:9831:2673":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11873:50128":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:12142:56336":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:4766:2400":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"15:214:3642":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4300:40902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"12:762:2209":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:7001:2500":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:0:794":{"crate_id":6,"path":["libc"],"kind":"module"},"2:46553:57301":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:2662:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:6472:3635":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:47559:32479":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:47335:2501":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1686:38546":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11134:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:5235:61026":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:1903:45293":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1695:38547":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"12:822:2568":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:50650:3193":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10822:45201":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:5411:3735":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:38124:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:918:2562":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4268:2236":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5749:60657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:52055:57246":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12836:50842":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11368:46056":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1241:2575":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:8887:2031":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7237:3698":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:10123:2378":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:1426:2566":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10310:45499":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4559:40926":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:7289:42560":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:2578:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11125:45824":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7539:54458":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:48198:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:9339:4203":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6593:3896":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:6137:56440":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"16:6781:3852":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2753:2264":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"9:920:3450":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2935:2067":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:678:8562":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"7:0:1491":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6865:4039":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:46299:2804":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:6779:58606":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3953:2527":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:12298:366":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10245:45498":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11748:50119":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:4672:8568":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:5472:3739":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:47089:2486":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12550:50689":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:4838:2617":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:56589:3134":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13024:51278":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2367:4001":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:7005:3345":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:2856:2204":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:7038:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:5709:2318":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:2444:1820":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:4606:44138":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:9722:45304":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:20858:2627":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:2383:2679":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:5011:2255":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4816:40955":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:49346:2177":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:2796:2282":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11235:45916":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:5472:41558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:5203:43515":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7872:3849":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:48793:2001":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:47181:2494":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12756:50795":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:50737:3112":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:2250:2674":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4454:2784":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:4027:241":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10075:45384":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8139:2450":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3805:2379":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11288:46036":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1714:38549":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:8412:2216":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:50321:3105":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10894:4130":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:10426:9572":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7329:3907":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:51723:57304":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:2989:2210":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:6816:4036":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2493:234":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:10668:52980":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:3188:43519":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4280:40899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"12:810:2564":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13059:51284":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:49912:2383":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12278:50217":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10403:4066":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:9283:45264":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:49851:2362":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:9484:2384":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7978:9574":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2904:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:8596:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9485:53019":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:48481:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11594:49992":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46537:2054":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11997:50136":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:11137:45825":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:1636:576":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12514:50688":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:50596:2838":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:51978:2991":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:20418:1820":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:0:1829":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:5001:59966":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"16:7825:3909":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6719:4032":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:47294:2510":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2784:2263":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:8601:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10625:4073":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10854:4148":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:52392:2984":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:9681:45306":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:56985:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6376:3892":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:48519:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8066:2635":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:50630:3192":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11684:50057":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:20236:3029":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:50453:2833":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5737:3755":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:11373:56455":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:7288:3903":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:8110:45178":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:3194:2457":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:47577:32482":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:10604:3253":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:50090:3093":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:49338:57319":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:7875:2661":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12033:50139":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:2557:4004":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10774:4064":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:7736:1990":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8904:2032":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8147:2452":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:6490:59982":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4797:40952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:7093:3691":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:10863:2454":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"12:320:3621":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:11041:2821":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12674:50746":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:586:37652":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13413:51377":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:49118:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:48249:2379":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11500:49939":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11585:56442":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:46845:3279":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"14:160:43439":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:644:61776":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:11154:2328":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:7279:42559":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7309:3905":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12316:718":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:6392:38472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:12321:1444":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:48814:2011":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8227:2453":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:5845:2498":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:3125:45388":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5841:40796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46821:2872":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:10090:2377":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12695:50747":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5504:41561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:2050:3414":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:9563:2388":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11264:9574":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:48257:2093":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:10749:3091":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:3174:2894":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:9384:52553":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12739:50752":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:54126:19247":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6070:3773":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13141:51295":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2490:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:21184:2948":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9303:4096":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46443:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9450:3689":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:29507:2972":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:1954:3341":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:9422:45260":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46260:2260":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:4117:2725":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5498:41560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:4545:44125":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"14:0:1835":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1446:3410":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:1227:2573":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:1636:38541":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46958:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5782:41582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:7426:2042":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:3157:230":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:50765:3113":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:9522:2385":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:4786:44174":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:7266:41085":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11124:2675":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:3594:2407":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:6942:3183":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2674:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:12325:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11515:49940":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:4346:2305":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46904:3105":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:51000:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11436:49937":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1595:38538":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:990:2569":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4014:2717":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:7396:3908":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"10:0:1832":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5894:2542":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12198:50211":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:46805:2870":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:0:1838":{"crate_id":17,"path":["object"],"kind":"module"},"17:8055:4062":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:686:8565":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11951:50134":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:21110:3146":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:57011:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5596:3748":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:8666:45190":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:7841:2821":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:52324:2996":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1722:38550":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:6921:52576":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4768:40950":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:47233:2505":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:2705:4006":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"12:1044:3615":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7567:3861":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:36:3316":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1359:2379":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11847:2725":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7748:52582":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:49581:2363":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:9370:2753":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11330:46041":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:46361:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5733:41579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10257:45475":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11853:50127":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10296:45472":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:590:57316":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"9:977:3454":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6479:41995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7117:3694":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4257:40896":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:853:3379":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:8871:45192":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5625:41570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:9449:2391":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:592:37653":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:4817:44181":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:50296:3102":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:9531:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11307:2323":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:4894:2236":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10721:45200":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4683:40942":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:49377:57236":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:7945:2219":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:4574:44130":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:46857:3106":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11259:46026":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:2069:2573":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:48291:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6123:3831":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9764:45308":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8435:2375":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10581:2331":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:12884:50909":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:8393:4120":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:9389:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"12:0:1834":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:13594:51456":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4367:40910":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3956:2956":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:48595:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"15:193:3638":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12485:50687":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10394:4165":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5876:41611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:6610:2560":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:954:2209":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:11034:45754":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:4059:3031":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:6277:38468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:48405:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13557:51415":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2780:2275":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13007:51277":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:1120:3618":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:9791:45309":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:58320:57302":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10973:45640":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:8241:4190":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5582:41566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:52037:2980":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:20042:58536":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"14:215:43441":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3486:2334":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:967:45262":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:47068:2360":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:2843:2197":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:6771:3381":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:11661:50056":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:52467:57303":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4307:40903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6210:3887":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2917:2441":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:51815:2990":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:507:61776":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6971:3394":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46944:2874":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:4316:2232":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1654:38543":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12022:50138":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9442:52602":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11356:46055":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:12315:722":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:4247:40895":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:47120:2489":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:4744:2348":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"9:188:3518":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:20423:13687":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:2579:4055":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:4369:2304":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:5680:2316":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1511:38529":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:4262:3039":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:7962:9567":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:11277:2320":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:5013:2257":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:5380:2495":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:11970:2225":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:9637:6078":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:3404:2252":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10608:4071":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:153:3701":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:12118:50145":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:6763:2208":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:29747:3174":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:5823:2324":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"12:834:2569":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9128:1820":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7956:3845":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4659:40939":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:50745:3117":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:10322:2732":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:7982:3421":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:49998:3088":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:3263:43520":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:6994:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:8339:45187":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:6838:2713":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:2993:4013":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:50286:3101":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:50753:3120":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:6516:2487":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"13:108:60873":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:2916:4125":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13393:51373":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7849:2651":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12148:50147":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:646:37684":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7357:3854":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:21391:3162":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:1771:4088":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:7057:2625":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4413:44065":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2385:2680":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:699:4245":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"14:31:43439":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11174:45862":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:20044:58533":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8505:2405":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10490:45503":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:2673:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5541:41565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:861:2571":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:6563:2816":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9302:2544":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21379:3163":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:3599:43539":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:1396:2563":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12103:50144":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6017:3882":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:50617:2840":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:2411:4020":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:7848:1820":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:1760:3228":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2833:2192":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:960:2564":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:8814:2020":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:6809:3342":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:6883:2041":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:8868:2175":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:49355:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:9820:4209":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:10825:3098":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13082:51286":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:979:2568":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46560:2302":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:2894:4017":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:11631:30662":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5664:3751":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:2578:2449":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2588:56461":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:8699:2782":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6554:42001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7298:3904":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2788:2278":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"8:0:1830":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:9371:45196":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6517:3634":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12320:1447":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:48367:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11704:52574":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:6842:60998":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4267:40897":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:11618:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:9293:4205":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:50545:2836":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:359:2638":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:2994:3339":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:386:45182":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:8752:2437":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:12300:408":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:1626:2211":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4239:40894":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:21673:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"14:40:45641":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4449:40916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:9605:2387":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:521:4251":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:6604:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:47528:57006":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:6304:3321":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:8071:2673":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:6017:2747":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:545:2658":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2445:2418":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:4908:52250":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12361:50291":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:47190:2502":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:1643:2970":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4515:40921":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5684:41573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:4042:59967":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1982:3415":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10997:45641":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:481:4252":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:10857:2456":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:12609:50690":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:53428:3026":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:6785:2599":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2399:2684":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:782:3378":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"15:0:1836":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:2465:4025":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13221:51330":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:10682:4192":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:1637:2213":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:46465:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1668:38544":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:2763:2267":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:46784:30106":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5236:1008":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:50773:3203":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:5793:3759":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:719:4246":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:2535:4003":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13168:51319":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:614:61773":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4144:43964":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:2652:2451":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:47320:2511":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:48800:2002":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:3734:2208":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"11:44:3605":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:8645:2720":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:2948:2034":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:53928:3001":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:6441:52518":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:11847:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"12:751:2208":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:501:37642":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:8981:45194":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5443:41502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"14:165:43440":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4326:2303":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12630:50743":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:4987:59981":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"18:609:61783":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11682:54377":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:29641:3173":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:50757:3118":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:50008:2437":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1887:38687":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4437:40915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:487:45183":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11786:2717":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:4195:3033":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:592:3493":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:49820:2374":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:671:4242":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:2739:58638":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:8137:45185":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6109:3728":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:2341:4019":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:12318:1445":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11813:50124":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46911:3275":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4598:40931":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:6748:2093":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:20449:2978":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:7896:2644":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"12:697:2566":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:8596:45188":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:2670:2410":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4621:40934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:5374:3832":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4665:40940":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:7735:1818":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13572:51420":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:9553:4098":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:3107:2209":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:3402:43521":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:3561:59960":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:630:58605":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:8694:2779":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:8418:4133":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8429:2437":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"20:0:1711":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:3147:3177":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8471:2403":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"9:622:3494":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:2938:2068":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:50402:2823":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:4217:44013":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:8272:4193":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13158:51318":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"9:382:3446":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:19976:2157":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1707:2731":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10642:4194":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11954:3646":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:11050:2824":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11315:46040":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:1852:2210":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10332:4228":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12638:50745":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:46975:3183":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50741:3115":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13148:51296":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6424:41992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:56946:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:20173:2875":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:6448:41994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:8881:61379":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:39334:3421":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:46991:3184":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5433:3736":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11947:3646":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:22003:3149":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:49992:3087":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:1643:38542":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:5348:52568":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7955:2576":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11547:45417":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11688:54375":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:5624:58507":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:9947:45415":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:53680:3014":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:4327:44051":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:47269:2508":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:52178:3016":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6704:3853":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13327:51333":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:3764:59960":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:11061:2826":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4361:40909":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:50244:3100":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:47048:10080":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:11390:56445":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:21329:57235":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:9501:4096":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:56959:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5713:41576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:11679:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:5227:1979":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5460:3738":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:20298:2628":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:8951:61579":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13492:51405":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4906:52248":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6500:41996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11841:50126":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:1505:38528":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:2743:58637":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:21871:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12337:4188":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:53882:2983":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10902:2644":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:8609:2011":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7980:3712":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:7249:41083":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:12305:1322":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:4:983":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:766:4250":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:1737:3229":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:507:37643":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5317:52568":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13478:51387":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:58299:57330":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:49096:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:8441:4189":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:1574:38536":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6619:3897":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:21313:57262":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:3271:2455":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:10200:57340":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:49367:2030":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:50072:3092":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:51793:3002":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:8556:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:567:37649":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"9:0:1831":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6735:3855":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:12324:1091":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4527:40922":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10466:45501":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:574:2663":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:6793:2093":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4581:40929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8719:2740":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11826:2718":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12816:50801":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12225:50213":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:6988:58647":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:11606:50048":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:47038:10081":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8741:11884":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6293:37521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6359:3891":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"12:1065:3616":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:3430:59960":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:1872:2213":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2497:233":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1887:6078":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12251:50215":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10670:4191":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7388:3856":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:4972:2348":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:1604:2034":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:12323:1501":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9317:4201":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5835:41609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:1349:2034":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:9712:45307":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:491:61784":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:12322:767":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:4519:44123":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:52772:3017":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:8833:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8650:2721":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9401:45261":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4605:40932":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:4317:3040":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:7243:41082":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:8363:2463":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:7737:1989":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:353:2637":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4745:40948":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4489:2739":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6302:41987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:5457:2496":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:50424:2827":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3616:2093":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:21200:57819":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:11889:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:7208:41077":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4716:40945":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:54156:19249":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11485:49938":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:2805:2182":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8577:2775":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:12926:50913":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:7300:54378":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:20701:2881":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:242:61597":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:2727:4007":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:4216:2615":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6146:3877":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:48181:36891":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12134:50146":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:6311:41988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6270:3834":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9223:45245":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12317:1448":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11576:49948":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5605:41569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:6640:52576":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:2747:58639":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:52416:2985":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1525:38531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:11828:50125":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:2737:2152":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:49877:2360":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:52000:2995":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4737:40947":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1123:2575":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9382:45263":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:47149:2492":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11469:54760":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:2612:2442":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:46963:3182":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:29328:3219":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9873:45412":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:52514:57305":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:9430:52556":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4152:40886":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7637:3847":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7150:52899":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:9555:2611":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11164:54763":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"12:2184:57133":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13436:51378":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"9:586:3491":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:11704:30663":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"15:175:3637":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:7939:8563":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:1701:38548":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:47158:2493":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11106:45823":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8330:2467":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:3026:43518":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:965:2565":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10207:45487":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10139:4098":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:10756:2319":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4425:2780":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:5009:2248":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:8613:2008":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11300:46037":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:5494:3740":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4200:40890":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:54031:19240":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:2847:2199":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:7005:2499":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:10574:3290":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"19:0:999":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:56998:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8590:2173":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"5:2981:2212":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8222:2606":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:5447:3737":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:3542:2209":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:9464:52580":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:51917:57321":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:9225:2321":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:4662:44146":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:54062:19243":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12617:50691":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:46346:2955":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"18:660:4241":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11939:50133":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12797:50799":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9458:4061":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:6496:2541":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:29569:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:564:4257":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:4657:2737":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:11107:2829":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:39298:2327":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:12012:2159":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"6:1532:38532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4210:2616":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6545:42000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4804:40953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:3911:2034":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:48671:3187":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8442:2439":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4231:40893":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:7255:41084":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:10997:2043":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:6819:2588":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8379:2328":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6171:3878":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:4693:57513":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9885:45413":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10062:45386":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:6998:42372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9601:4087":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4506:40920":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:56972:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2869:2608":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:5437:2208":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:3084:3176":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7372:4043":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:5163:3772":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9362:4098":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:20210:2975":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:5523:41563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:4748:3356":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13114:51290":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11268:2593":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:11477:3203":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:1060:3412":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:5878:3762":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:1628:60822":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:6010:2745":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:54051:19242":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:4441:2783":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:4272:2302":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:12314:721":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:48172:1988":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6329:11884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:524:56459":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:9671:4121":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7426:3857":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6409:41990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:9350:4204":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:7267:3901":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13459:51381":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:20964:1820":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:2401:2685":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:10590:3292":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:8162:4134":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:5977:2208":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10476:45502":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11559:49945":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11217:45865":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11734:50118":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:6754:3380":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:49154:2292":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:7429:2557":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:1002:2571":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:48190:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4185:40888":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:9631:4081":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4585:2736":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13176:51320":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12211:50212":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9644:4080":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4427:40914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13404:51374":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:4003:2631":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11161:45861":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9577:4089":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"12:2205:2041":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:575:37650":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7166:3696":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6375:38469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10506:45476":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:49830:2372":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11457:2322":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:9280:2034":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2672:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:0:1833":{"crate_id":11,"path":["adler"],"kind":"module"},"6:539:37646":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:21739:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:4532:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4379:40911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9261:2034":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6186:3833":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:5546:3356":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:48054:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:562:45184":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:2774:2272":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4224:40892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:46882:2168":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:9778:4153":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:51847:3023":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6137:3829":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4761:40949":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10651:2318":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:969:2566":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:1552:2425":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:608:37655":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:20706:13705":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11149:45860":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:54077:19244":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:531:4255":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:8123:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:3470:56605":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:1967:1970":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11617:50049":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:47219:2504":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13354:51335":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:3422:2329":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:52148:3012":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:2257:2433":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7319:3906":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:6677:2587":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7942:3912":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5672:41572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:3473:2452":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12909:50912":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:4433:2781":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:52346:2999":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4635:40936":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:4849:44189":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:2411:2690":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:9437:52520":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"9:111:3510":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:11087:45822":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:755:4249":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:1811:597":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:690:4244":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8956:2034":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:1826:9560":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:7343:3841":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:47199:2497":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:8613:2529":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["core"],"kind":"module"},"17:9433:45259":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:9021:45195":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11014:45753":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:9347:2547":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8962:2036":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2154:577":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:0:1839":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:581:37651":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:515:4254":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11343:46042":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:12303:1017":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:5558:3746":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:11640:52056":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:50126:2388":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6544:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:950:59960":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:1370:2093":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9269:2540":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5646:2314":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:2800:2284":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:53820:3018":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:1600:38539":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4565:40927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:3370:1824":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:52370:2981":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:887:2034":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2969:2803":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:51747:3022":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4901:59960":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:8526:4167":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21937:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9328:4202":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:5064:2258":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"12:777:3607":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:47252:2507":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8946:2033":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:5371:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:50305:3103":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:52648:3025":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:52248:3004":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7543:3835":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:513:37644":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:560:37648":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8488:2404":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:12307:1430":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:49980:2591":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9031:61652":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9751:4152":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:54042:19241":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:2320:3705":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:46605:2887":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9165:61638":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5741:41580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:48241:2034":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:21275:57306":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:6034:3883":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:8611:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:51948:3003":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:8737:2347":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13047:51283":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:52884:3005":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3232:2459":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:3015:2213":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11774:50121":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5815:3760":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:5212:3321":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:54022:19239":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:10799:56446":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:4689:44149":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8083:2675":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"18:707:2824":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:1962:4149":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12176:50162":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:47167:57007":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10528:4184":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4644:40937":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:50470:2834":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"12:853:2570":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:3632:43548":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"12:1840:2208":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7483:3843":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4629:40935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:48130:2093":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:48139:1987":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:6830:2093":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13203:51323":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:8561:4147":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13580:51422":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:12312:723":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8534:53194":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:46888:3274":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"9:649:3495":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:7924:8560":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:1632:2212":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1738:38551":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12046:50140":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:6096:2093":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4102:40882":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:6895:2579":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10283:45473":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:51877:3011":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:39338:2344":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:8941:45193":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"12:1555:3630":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13134:51294":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:3249:4137":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"12:1518:3628":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7435:3873":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:9315:2545":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:4139:40885":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4398:40912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:4086:3032":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:3566:43530":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:8475:4075":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:8295:45186":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5703:3752":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:7226:41080":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:7220:41079":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2812:2184":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46401:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:48122:2379":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:6836:2093":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10108:4128":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"12:1003:2573":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6463:3893":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"13:0:1828":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:2681:2307":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:8599:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:21640:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:54088:19245":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:636:61780":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:10121:4129":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13382:51372":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:8822:61423":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:6252:3889":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:53570:2994":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11070:45815":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9263:45247":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:996:2570":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"12:985:2572":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6052:3884":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:46918:3276":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9283:2543":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:47535:2587":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:4385:44061":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10752:4066":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2851:2201":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1580:38537":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2669:1827":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:4719:773":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4592:40930":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:3236:2910":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:7786:56457":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:8605:2001":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11528:45418":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:12313:720":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:47284:2509":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4017:2718":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6322:41989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2793:4011":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:7166:42531":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"14:7:43439":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:2261:3729":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:21216:57332":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4673:40941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5480:41559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:3716:43584":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:3160:2705":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:5780:3758":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2282:3704":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7059:1987":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:52294:2992":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12073:50142":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11655:52036":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"12:1832:2034":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:1825:2231":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4297:44045":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:50330:2168":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"12:393:60817":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6316:3860":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"0:0:1717":{"crate_id":0,"path":["thiserror"],"kind":"module"},"2:9304:2379":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:50749:3116":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:11858:3129":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2827:2189":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:50813:2614":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:4921:44213":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:80:51805":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:4530:3270":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8973:2037":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:49890:2361":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:96:51806":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9061:4098":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10321:4220":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11639:50050":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:3854:43698":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"14:221:43447":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6877:3688":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:736:4248":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4461:40917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:1595:59960":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10159:45389":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"9:709:2030":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5568:41532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:727:4247":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:9591:2389":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6743:3899":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:538:4256":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:11262:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:57024:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1859:2211":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:50582:2837":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5761:3756":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:11056:2825":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:3010:4012":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:484:52574":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:2987:2286":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:52545:57324":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:9277:2093":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13366:51370":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:7051:2070":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:3168:2484":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4335:40906":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:6430:41993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13091:51287":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1608:38540":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11787:50122":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:5909:59984":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:4690:973":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:3199:2911":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:49051:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"5:2477:3417":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:7929:3911":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:50769:3114":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46778:2168":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:48443:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13192:51322":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"12:1534:3629":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8422:2436":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:52568:57296":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:1518:38530":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:9253:2323":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:8368:4065":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6393:3129":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:12311:630":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13536:51414":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:54218:19251":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:5219:43514":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6524:41998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2868:3770":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:50979:3127":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:4105:59967":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:3689:43581":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:50987:3128":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5660:41571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:9372:2390":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9831:4211":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:54103:19246":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4505:2727":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:1608:2093":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11199:45864":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:1889:9579":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:4262:2235":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:582:2157":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:5763:2320":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:11903:27758":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:47305:2436":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:5388:3734":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7497:3838":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:50518:2835":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7890:3848":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5122:44390":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:6572:42002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:20451:2878":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12850:50844":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:2487:4002":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:48807:2010":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:50339:3106":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9539:4083":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12730:50751":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:5169:2170":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4551:40925":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:8494:43515":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1415:2565":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:2030:58707":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:113:51807":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12237:50214":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7970:3846":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:46487:3175":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10360:4221":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:3157:2704":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:1105:2573":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:53072:2982":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"9:676:3540":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:4540:40924":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:2739:2414":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:4888:44204":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:6975:42370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:574:61776":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:38141:2157":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:3457:43522":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11112:52261":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:49057:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:10221:45496":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:29541:2586":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:2255:3418":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:8607:2010":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4706:40944":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12980:51275":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:49033:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:681:8564":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:7088:3317":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11708:50116":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1196:2572":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2758:2217":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:9071:61500":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:14:1949":{"crate_id":2,"path":["core","write"],"kind":"macro"},"9:956:3449":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:9331:2546":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:48329:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6059:4000":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:47544:32478":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7135:3695":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"9:505:3441":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:6739:2359":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:1931:4082":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5554:41531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13071:51285":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:47129:2490":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11670:51992":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"14:187:43448":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:2564:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:5614:3749":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:4254:2234":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:119:3623":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:2053:2572":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11607:2333":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:8603:2002":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10374:4163":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:2768:2269":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:52102:3024":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"12:646:2379":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:6043:2748":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:4441:44069":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:5087:2247":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:50276:2439":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:8056:3709":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:46421:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:39347:2413":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:20290:1820":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:20004:58477":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:49330:2178":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:52726:3013":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10583:4068":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:6981:42371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:7042:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9844:4212":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:8911:61717":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:21904:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:47111:2488":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:50825:3205":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:7071:2209":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9627:4094":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4115:40883":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4126:40884":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:8774:4063":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:2738:58645":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8713:2719":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:0:282":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:1691:2209":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:6654:3898":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9930:45399":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:1029:2574":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"9:896:3453":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:11756:57181":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:9329:2375":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:49966:3188":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5628:3750":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:4354:40908":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9118:61158":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:4627:2425":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4212:40891":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4534:40923":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:271:59960":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:8631:45189":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:54141:19248":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10445:52983":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:47139:2491":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6415:41991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:4191:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:8749:57331":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:10875:4131":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4417:40913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:54179:19250":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:8819:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:1114:2574":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:420:3774":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4726:40946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1620:2210":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6690:3840":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10845:4188":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:20292:2626":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11921:53189":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:4945:2354":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9909:45383":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:6886:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:52962:2993":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11721:50117":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:54004:2986":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:1919:2632":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3377:2425":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:4969:2346":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"9:827:3448":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:10860:2458":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7249:3699":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:53038:3000":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9897:45414":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:21292:57251":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7909:3850":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:49840:2373":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12299:912":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9526:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:51899:3015":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:20442:1820":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:300:3622":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:598:2620":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:11601:52562":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3192:2456":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6567:3851":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8625:2530":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2605:4056":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:652:61776":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:8106:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:3162:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13340:51334":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:910:2093":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:48266:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13506:51411":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6345:3837":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:2631:4016":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13527:51413":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4179:40887":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4721:44157":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10420:4222":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:6079:2757":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"16:6496:3894":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:5184:43517":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:8701:45191":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10497:45504":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11186:45863":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:12319:1446":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:3230:2458":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:7079:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:5839:3761":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:51017:2230":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5720:41577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4302:2237":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2300:4026":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11533:2551":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:20870:58480":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11909:50130":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:8510:43514":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:681:4243":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:49751:3086":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12349:50288":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:5526:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2726:2064":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:5823:13899":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:6217:2541":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:217:3376":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11445:2321":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12164:50148":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7192:56337":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1078:3413":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12955:50927":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10495:2594":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7211:3697":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9836:52982":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"12:669:2565":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6790:3900":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4324:2240":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:4635:44143":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11089:52233":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4496:40919":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:46793:2869":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13031:51279":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8705:2730":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"thiserror_impl","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}