{"root":"0:0:1776","crate_version":"1.0.40","includes_private":false,"index":{"2:12153:2012":{"id":"2:12153:2012","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:3528","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:2012"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43708:9473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:32626":{"id":"5:5443:32626","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2108","`String`":"5:7282:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2108","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:3838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:22310":{"id":"2:12197:22310","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39574:22446","Self::is_ascii":"2:12196:22171"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39574:22446","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1892":{"id":"0:63:1892","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:1890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1889":{"id":"0:51:1889","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5270:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:22171":{"id":"2:12196:22171","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1889":{"id":"0:44:1889","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:18:1888":{"id":"0:18:1888","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:31963":{"id":"2:12171:31963","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:31970":{"id":"2:12194:31970","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:2086"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:31958":{"id":"2:12159:31958","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:3528","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12162:31959"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43654:9471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:31951":{"id":"2:12098:31951","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1402","crate::ops::IndexMut":"2:2984:3857","str::slice_unchecked":"2:12097:31950"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:815","2:12078:2130","2:12079:3407","2:12080:31947","2:12082:31948","2:12085:23700","2:12086:31949","2:12087:314","2:12088:22518","2:12089:22514","2:12091:22515","2:12093:22516","2:12095:22517","2:12097:31950","2:12098:31951","2:12099:22538","2:12100:22539","2:12101:29319","2:12102:29273","2:12103:21377","2:12104:3641","2:12105:3639","2:12106:24319","2:12107:31952","2:12108:3324","2:12109:22555","2:12112:22556","2:12115:22557","2:12118:2171","2:12122:2129","2:12126:22546","2:12129:3640","2:12132:22549","2:12135:31953","2:12138:31954","2:12141:22551","2:12144:22553","2:12147:31955","2:12150:31956","2:12153:2012","2:12156:31957","2:12159:31958","2:12162:31959","2:12165:31960","2:12167:31961","2:12169:31962","2:12171:31963","2:12172:31964","2:12173:31965","2:12176:31966","2:12179:2941","2:12182:22558","2:12185:31967","2:12188:31968","2:12191:31969","2:12194:31970","2:12196:22171","2:12197:22310","2:12198:22172","2:12199:22168","2:12200:22167","2:12201:31971","2:12203:3780","2:12204:31972"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12091:22515":{"id":"2:12091:22515","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1775":{"id":"0:58:1775","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:59:1892"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}}},"5:5428:9779":{"id":"5:5428:9779","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:8315:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:65:1887":{"id":"0:65:1887","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:68-20:0:1770":{"id":"0:68-20:0:1770","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1770","glob":true}}},"2:12085:23700":{"id":"2:12085:23700","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:9460"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"generic":"T"},"items":["0:12:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12088:22518":{"id":"2:12088:22518","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:3324":{"id":"2:12108:3324","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43796:9457","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:3640":{"id":"2:12129:3640","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:9448","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12144:22553":{"id":"2:12144:22553","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12141:22551","self::pattern":"2:11778:3528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43626:9444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:31957":{"id":"2:12156:31957","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:3528","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::matches":"2:12153:2012"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43726:9474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1887":{"id":"0:25:1887","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:21:1888":{"id":"0:21:1888","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:22516":{"id":"2:12093:22516","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:1888":{"id":"0:12:1888","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:31954":{"id":"2:12138:31954","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:3528","str::split":"2:12126:22546","prim@char":"1:11917:418","str::split_terminator":"2:12135:31953"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43572:9475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12191:31969":{"id":"2:12191:31969","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:31961":{"id":"2:12167:31961","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427:32622":{"id":"5:5427:32622","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2108","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:3838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2108","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:3838","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:21377":{"id":"2:12103:21377","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43490:3966","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12188:31968":{"id":"2:12188:31968","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:1889":{"id":"0:47:1889","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:31947":{"id":"2:12080:31947","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:31950":{"id":"2:12097:31950","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1402","str::slice_mut_unchecked":"2:12098:31951","crate::ops::Index":"2:2980:3856"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:22518","`u8`":"1:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:31956":{"id":"2:12150:31956","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:22168":{"id":"2:12199:22168","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1889":{"id":"0:53:1889","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5270:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1776":{"id":"0:0:1776","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[255,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.40\")]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:68-20:0:1770"],"is_stripped":false}}},"2:12099:22538":{"id":"2:12099:22538","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12100:22539"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:22557":{"id":"2:12115:22557","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:31959":{"id":"2:12162:31959","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:3528","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::match_indices":"2:12159:31958"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43672:9472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:31949":{"id":"2:12086:31949","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:22555":{"id":"2:12109:22555","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1889":{"id":"0:49:1889","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5270:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12118:2171":{"id":"2:12118:2171","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:22558":{"id":"2:12182:22558","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:22172":{"id":"2:12198:22172","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:31948":{"id":"2:12082:31948","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12080:31947"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12185:31967":{"id":"2:12185:31967","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:1772":{"id":"0:6:1772","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:8:1888"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1887","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:22","0:9","0:13","0:19","0:16"]}}},"2:12141:22551":{"id":"2:12141:22551","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528","str::rsplitn":"2:12144:22553"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43608:9446","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1888":{"id":"0:8:1888","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3373:1891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:63:1892"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12077:815":{"id":"2:12077:815","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:3407":{"id":"2:12079:3407","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:3641":{"id":"2:12104:3641","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:3639"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43778:9459","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:22167":{"id":"2:12200:22167","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:31971":{"id":"2:12201:31971","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:31971"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43803:9467","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:31962":{"id":"2:12169:31962","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:24319":{"id":"2:12106:24319","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43758:3963","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:31960":{"id":"2:12165:31960","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:3780":{"id":"2:12203:3780","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:3780"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43812:3781","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:31972":{"id":"2:12204:31972","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:31972"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43821:9468","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5434:32624":{"id":"5:5434:32624","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:22549":{"id":"2:12132:22549","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:3528","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split":"2:12126:22546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43522:9442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1888":{"id":"0:24:1888","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:31965":{"id":"2:12173:31965","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:9452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1892":{"id":"0:59:1892","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:1890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12107:31952":{"id":"2:12107:31952","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43768:9470","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:3990":{"id":"5:5444:3990","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:22170":{"id":"5:5445:22170","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:22168"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:29273":{"id":"2:12102:29273","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43480:9462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:22556":{"id":"2:12112:22556","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"PathBuf","id":"1:5090:191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1889"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"items":["0:47:1889"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43:1773":{"id":"0:43:1773","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:44:1889"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Path","id":"1:5202:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1889"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12135:31953":{"id":"2:12135:31953","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:3528","str::split":"2:12126:22546","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:31954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43554:9476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:31964":{"id":"2:12172:31964","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1774":{"id":"0:48:1774","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:49:1889"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}}},"2:12179:2941":{"id":"2:12179:2941","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426":{"id":"5:5426","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5427:32622","5:5428:9779","5:5431:32623","5:5434:32624","5:5442:32625","5:5443:32626","5:5444:3990","5:5445:22170","5:5446:22169"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12122:2129":{"id":"2:12122:2129","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41537:179","prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:9454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:22514":{"id":"2:12089:22514","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:32625":{"id":"5:5442:32625","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:29319":{"id":"2:12101:29319","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43474:9463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:3639":{"id":"2:12105:3639","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:3641"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43787:9458","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15:1888":{"id":"0:15:1888","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1888"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12100:22539":{"id":"2:12100:22539","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12099:22538"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147:31955":{"id":"2:12147:31955","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:2130":{"id":"2:12078:2130","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:31966":{"id":"2:12176:31966","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11778:3528"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5431:32623":{"id":"5:5431:32623","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:22546":{"id":"2:12126:22546","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:3528","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11917:418","str::split_whitespace":"2:12104:3641","str::rsplit":"2:12132:22549"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43504:3967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:9453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:22169":{"id":"5:5446:22169","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:22167"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:22517":{"id":"2:12095:22517","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:43490:3966":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:21844:28719":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7635:16956":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:41653:2051":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:46183:4288":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12461:20376":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:44511:9383":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:7810:2217":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:8718:17029":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13689:21150":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:1611:34105":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8514:2082":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7619:3764":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:5774:14706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13194:21110":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:8420:17047":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7317:34618":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:8047:16968":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4728:16592":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13367:21125":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:1101:33130":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13659:21147":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1574:11444":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8153:3964":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:11803:9452":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:1121:3819":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:1755:2218":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12259:20362":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"14:215:15892":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:6170:14758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:4599:25245":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:1695:11455":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8293:4095":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:80:21175":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10823:17070":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43480:9462":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:6780:4187":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:47611:4263":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9907:17173":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:4037:16165":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:660:21191":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:41535:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:3569:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:21410:4207":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:8076:3935":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:10104:17182":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:7378:9517":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13865:21162":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10798:17069":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:4926:2042":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6506:16918":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2742:15972":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:9675:28645":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:41521:4008":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:6572:11394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12536:20381":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4531:4083":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1103:15874":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:43925:9488":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:515:21201":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4517:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:1544:11441":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:40337:9752":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12331:20367":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:44243:9929":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7115:2135":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2879:15978":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:7294:15521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:42639:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"14:221:15893":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8788:17055":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13612:21143":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1556:11442":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"14:31:15883":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11936:1503":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:4845:16613":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4596:16532":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4832:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9488:17109":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:4818:16610":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6564:10591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9886:17145":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13309:21119":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2850:9805":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13821:21159":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11770:20334":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8899:4149":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:2426:15959":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:21973:28695":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:4587:4031":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:7249:10502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:9149:25214":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:6179:16898":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7449:16943":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4684:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:8360:17045":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:1373:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9512:17104":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:3141:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:41586:2134":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:41509:4007":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:5616:16878":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10465:17241":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6236:16901":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:21952:28691":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:5630:16879":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11924:20342":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:10352:9445":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:671:21192":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46439:4250":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4649:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:22300:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:4335:9547":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:8200:4002":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4763:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10635:17265":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:20669:30201":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:39241:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6767:16926":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:5531:9753":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:609:35331":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:9822:17131":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2219:3916":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:10855:24642":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:7277:15520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:6558:16921":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:8214:16977":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:11928:644":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:22531:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:10840:17071":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10238:4101":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:46359:29081":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:47879:9365":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11266:25696":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:41473:4015":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:361:3777":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"14:160:15883":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4728:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:7077:16937":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:6834:9730":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:5779:16887":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8977:25630":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:40277:3964":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46085:4221":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:45494:4247":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3700:4013":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6336:16907":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13721:21152":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:44235:9927":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:21791:28852":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7509:16948":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:11315:9887":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5811:16888":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:10051:3803":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:9225:2062":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12006:20346":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:4113:9552":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8163:3965":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13181:21109":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:7123:2135":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:502:15757":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6076:14729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:2180:34119":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:749:3806":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:5950:3952":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12894:21091":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:11920:1053":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:13857:21161":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11484:19840":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:1535:11440":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7859:16966":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9853:17171":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1502:3810":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10452:17242":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:888:3805":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:21504:4188":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6717:15898":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5050:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:9534:17102":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"9:52:15773":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:1472:3805":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:20995:1887":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:7600:3778":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4847:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:9219:2064":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6696:16924":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:44223:9923":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5024:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7516:14229":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:3378:3952":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2748:9771":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:7697:16959":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5073:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:44259:9943":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2783:4183":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6431:16913":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12194:20359":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:4662:4092":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:10448:3987":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6164:34546":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4419:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4314:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:7170:2084":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:39201:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:332:34111":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:40834:9734":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5522:4103":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:7537:28656":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4637:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5886:16890":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10936:17076":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:8753:17054":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:643:3786":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:1838:3822":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:1543:3952":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:10026:17223":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:3446:15987":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4809:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2319:15954":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43331:9424":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7803:16964":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2821:9798":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:8256:17023":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6868:34358":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7411:16941":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11109:17083":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:42544:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:43796:9457":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:30861:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10505:17270":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:2791:9794":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4793:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4780:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4948:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12372:20370":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9110:4181":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:1787:17125":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:1572:3807":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:8984:25586":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:46863:4283":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7271:15519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:2558:28645":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:2404:15958":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:11490:9935":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5963:16893":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:21516:30006":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13803:21157":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:10923:17075":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:47853:9363":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4983:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:1826:3806":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:501:3755":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:1425:3803":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10977:28660":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:3078:3858":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:8315:1885":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:7673:3788":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10000:17221":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:7024:2135":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"9:481:15753":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:39359:9809":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:1594:3825":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:5920:16891":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:1568:3806":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:311:34120":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:10491:17239":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11422:4014":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40155:28726":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40360:9754":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:6788:31672":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:40004:28801":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:3182:32816":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9973:17147":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10686:3931":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:2787:4185":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:644:3803":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11282:19827":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:4195:3952":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"9:234:2077":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:3030:15982":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:20815:4202":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"17:13678:21149":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:10076:3967":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2799:9795":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11821:17228":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:42052:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:21189:4196":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:6396:4131":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:3962:4031":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:420:15928":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2855:24728":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:204:9398":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6704:15138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:4263:9541":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:4868:4090":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:8521:17050":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:1012:3818":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:7522:14230":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:482:10542":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13879:21163":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:8109:16971":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11191:25602":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:7499:24638":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:10837:9436":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"0:0:1776":{"crate_id":0,"path":["thiserror"],"kind":"module"},"6:4394:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:8180:16976":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:4165:3952":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2855:9806":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11037:17079":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:4364:31627":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11923:1402":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:4969:16641":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10857:17072":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"15:0:1903":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:12576:20384":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12923:21094":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10377:17189":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1716:11457":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:9592:9900":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7259:2050":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:8909:3966":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:44311:9944":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:41972:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:1272:3818":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4605:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4409:3767":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11446:19837":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2830:15976":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3934:4028":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7244:34567":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:3934:3952":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:667:3809":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:4436:9550":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9683:17122":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:1671:31619":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5993:14722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:21077:4196":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:1048:3816":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9796:17124":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:8025:16967":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:9148:35284":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5919:14717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"11:1858:3825":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2779:9791":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:12396:30559":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11933:742":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5655:16881":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:9409:17090":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12138:20356":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"13:0:1895":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10580:17272":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13101:21087":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:1919:17159":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:9091:3944":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"18:719:21188":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10967:17077":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:42172:4126":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2832:9801":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13499:21139":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:5346:16874":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7498:16947":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:6935:21380":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5889:14715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:7064:32801":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12345:20368":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:44473:4328":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:9917:17170":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:494:10544":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:43654:9471":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:6272:3806":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:5686:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:22630:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4937:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:43448:9469":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:2348:3919":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11355:19831":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11937:1504":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:8823:17056":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:1845:3823":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3168:9535":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11628:19850":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:9658:29229":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:46039:4215":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:5589:9744":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7478:16945":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6662:16923":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:44031:9492":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:8389:17046":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10257:17188":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:875:3804":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:9068:35294":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:0:1896":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11254:22090":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9734:17120":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13506:21140":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:11331:9889":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:4075:3803":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2764:15973":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:844:3815":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12563:20383":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"9:352:15770":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:4010:29215":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:47673:4284":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:4704:4044":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9876:17172":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4715:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12770:21088":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:532:10548":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:9566:17064":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:7891:3841":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:43910:9487":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:41852:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1630:11448":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5804:14709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3385:1890":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:41738:2135":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:21180:1887":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:5471:3952":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:13316:21120":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:6597:15135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:39401:9531":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:676:3787":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:12059:20350":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4290:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:2931:15980":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:47833:9361":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6710:15139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:39305:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12085:20352":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:47822:9360":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:96:21176":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:1910:11621":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:1481:3808":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4542:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:42012:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:4380:9548":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5797:34479":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"9:325:15809":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10885:17073":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9275:35285":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:6156:25612":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:11345:9460":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40378:9764":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:42836:2077":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:43821:9468":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:1513:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11083:3944":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:21900:4019":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5848:14671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:32172:9772":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:7827:3934":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:43412:9440":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7683:16958":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:3329:3807":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:39100:9534":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:399:34127":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10615:17264":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:3703:4012":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10478:17240":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4722:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:8244:4063":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:10029:24726":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:9011:24229":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40056:9468":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6201:16899":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:46161:4282":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:10491:3763":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:7086:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:32045:4110":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:1583:3823":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6687:11562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:699:21195":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12449:20375":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"15:219:15906":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:2357:15956":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:1491:3809":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4303:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5064:4125":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:3315:3972":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:47219:4251":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:10428:17268":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13233:21113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3233:3988":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13292:21118":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:47757:4269":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7103:16938":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4677:4025":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:4127:4058":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12607:20386":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:1648:11450":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8366:2076":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13433:21132":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:4597:25243":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:21:683":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:1732:11458":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"14:0:1902":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:1010:31619":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:13169:21108":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:599:35304":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:5000:16648":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:46517:4256":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:40867:9738":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4706:4045":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:8443:17048":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11879:20339":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:488:10543":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1589:11445":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2984:3857":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:684:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46753:4222":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:6355:25569":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:6670:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:40430:9759":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4468:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:10270:17186":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:41747:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:4394:3952":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:6392:3791":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:7462:15680":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:1301:3819":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:9215:2056":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:8947:3758":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:4789:16605":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:3488:3961":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:3904:4026":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"10:36:34104":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:2212:3914":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43402:9439":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:930:3811":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:40034:9574":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6819:16928":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10125:17202":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10334:17063":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2705:2222":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10569:17238":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:11883:28208":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:20952:9820":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:7837:3932":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"10:44:15862":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:1775:3807":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4523:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:42617:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:1577:3822":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:4235:2081":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5079:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2616:15967":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7711:16960":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:11849:9480":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7688:3789":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:10158:9435":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:21935:28727":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:12671:3831":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11930:744":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"11:1831:3807":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:45809:4232":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11891:20340":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:7585:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5741:16886":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:43231:30132":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:2194:34116":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:2222:32845":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:3162:9536":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11520:19842":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:7698:28678":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:3647:2135":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:8283:17043":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2642:15968":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44420:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:568:10552":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12126:20355":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10735:17280":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:11922:1372":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42846:29300":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:43383:9438":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:6508:4135":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12403:20372":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8867:4148":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6943:16934":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:5044:25619":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13791:21156":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8936:25589":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:41722:2081":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:32085:9847":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:5792:14707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:12579:4330":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:7556:28635":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:10870:9437":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4373:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:42294:2055":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:22039:4020":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6066:14728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12522:20380":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:6644:25569":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11193:17287":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:7574:14237":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:7044:3806":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:44231:9928":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:5386:15922":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"20:0:1770":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"1:8997:16938":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11337:24718":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:6919:34446":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8525:2083":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10960:28648":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43608:9446":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8989:25627":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5899:14716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13053:21101":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:21927:29296":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5954:14718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:21860:29312":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:7588:16953":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:10681:25688":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:41603:3803":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9478:17111":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3481:3939":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:21634:4194":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:3237:3825":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:40614:9762":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:10269:9443":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:2460:32706":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9895:17144":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10721:17243":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:1637:11449":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13257:21116":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:3272:3984":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"11:760:3807":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40369:9755":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:46305:29079":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:1048:34126":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3155:21987":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4455:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4327:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:541:2775":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7529:16950":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:4783:4040":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:5383:3952":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:1594:11446":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:535:34219":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46593:4268":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2808:15975":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:41772:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4006:4033":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5766:14705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10010:3874":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:10343:4106":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:6983:3992":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:618:2037":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:62:10171":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:46258:29080":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:6124:28655":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:6804:15145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13332:21122":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:40849:9735":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11372:19832":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4474:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11888:3790":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10743:17067":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:2862:15977":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:507:35299":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8805:4109":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:7362:3807":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:43888:9486":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5007:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:119:10225":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:5944:16892":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9696:17108":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:10897:17074":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:9670:17123":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6155:14757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:40268:3854":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:4510:16518":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:9028:17059":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:4427:31627":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7065:34540":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:1494:11434":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:42092:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12158:20357":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"14:202:9497":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:0:1906":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40421:9758":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5043:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:258:31619":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:6671:15899":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:4349:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3998:29239":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6743:15142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:41671:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:47947:9369":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:7545:14233":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7335:34557":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4615:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:8142:16973":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:1568:11443":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12622:17080":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:968:3816":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:530:3759":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9748:17063":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11064:9943":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"18:624:35321":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:821:3827":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:1068:15873":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:39574:22446":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6990:16936":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2786:15974":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:547:10549":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:10705:17278":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:675:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:6631:9522":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:11899:24225":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:40098:9570":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:844:2081":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:8316:2053":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:45638:4249":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6293:16903":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:22465:3768":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:3782:16006":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6460:16915":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11299:19828":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11946:20343":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:40171:9865":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:8651:15922":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:506:10546":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2773:9792":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8821:4150":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:47361:4223":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:39977:3781":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:42301:2056":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:9946:17146":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5586:4141":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11434:19836":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:5876:10145":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:11792:9455":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:40811:9732":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:10119:9448":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:43370:9423":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9108:35277":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:736:3805":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"9:0:1898":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:9453:17093":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:7504:14227":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:43357:9422":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:4351:4056":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13211:21111":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2690:1894":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:9933:17148":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:8195:17025":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"11:805:3812":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:9098:17060":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:2049:3817":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:1947:17119":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6135:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13399:21128":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:2980:3856":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11932:746":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:45969:4261":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"9:445:15754":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2842:9803":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11600:19848":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5798:14708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:21055:1887":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:46563:4262":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:1034:17110":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:657:2135":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:41344:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:11601:9448":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12592:20385":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4388:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6390:16911":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6376:16910":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:39261:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7722:3884":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:8854:4145":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6321:16905":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:3898:4027":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:45584:4213":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9265:17064":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3638:4009":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:3047:15983":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"9:421:15756":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:5343:4097":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11585:19847":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:20622:30003":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:45893:4190":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11902:20341":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7029:34558":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3181:30219":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:8289:4093":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:47917:9367":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:45708:4266":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9959:17174":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:7661:9739":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:44116:9477":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11339:19830":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:7258:3896":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:3640:15989":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4962:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2160:9820":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:48009:9371":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1505:11436":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:7043:4120":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11522:15910":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12098:20353":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:6865:28650":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:43768:9470":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13324:21121":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:11527:9937":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:6893:24625":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10598:17077":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11721:20333":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40460:9761":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4010:4034":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6474:16916":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40470:9746":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:40328:9751":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:8490:17049":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:42854:29294":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:7329:2106":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:9380:17089":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:42599:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:5529:9520":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4972:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:487:17041":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:43672:9472":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7624:3766":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:42574:29283":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:5367:15924":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"7:79:15732":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:1666:1091":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:7282:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:7598:15708":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"2:20802:4201":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:2962:9394":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:11738:2086":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:7296:9498":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2620:3978":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:9217:2055":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:8904:28680":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:5408:4101":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:44536:29324":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40105:9571":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"11:695:3810":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:9218:17063":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5643:16880":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11258:19826":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5976:16894":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:766:21190":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:45791:4226":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:47795:4290":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:6867:15150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6307:16904":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:39394:9547":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:11798:9454":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:723:3804":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:12550:20382":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:595:10556":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:644:35299":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4459:4067":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:44093:9495":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:30491:28797":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6624:4095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8508:2081":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:7706:3883":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:10851:3884":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:11918:1521":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:480:28658":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2524:15963":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6935:16933":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40411:9757":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5862:14672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:1978:17143":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:614:35317":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:3270:3983":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:986:3817":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:926:3810":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:7528:14231":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:959:3815":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:44523:9381":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:585:3779":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:3721:3841":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:4186:9411":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9340:17066":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:5594:16877":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:9228:35278":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4991:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:3063:15984":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13024:21098":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:1441:2135":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:3801:3807":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6544:16920":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:4033:31619":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:5283:9416":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:953:3814":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"14:7:15883":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13469:21136":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8315:4043":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6617:15137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:6535:34212":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:1895:2035":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5828:14711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2691:9391":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:11272:25640":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:4199:4061":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6022:16896":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:6391:2135":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5998:16895":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:45514:4212":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:1783:3863":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:43504:3967":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:154:15931":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:10741:3936":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:6575:16922":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2846:9804":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:21989:28723":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4877:4091":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41892:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:7699:3821":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:6793:16927":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:554:3761":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5709:4127":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:2168:34118":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:2965:32712":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:10196:9449":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:6561:4139":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:42807:29267":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4427:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:3956:4030":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:44255:9925":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:30297:9782":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2350:2943":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6351:16908":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8237:4006":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:2961:32716":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2743:9390":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:22025:4021":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5557:16875":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:4258:9540":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5835:14712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:45538:4248":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:22597:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4904:16624":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:30257:3836":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12959:21095":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:11224:21827":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1117:32711":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:9072:4151":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:5847:16889":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8348:2046":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:3141:9808":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:975:17106":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:7654:2085":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:47868:9364":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:9221:2065":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12634:20387":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11573:19846":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:3373:1891":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:44278:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:635:3784":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13419:21130":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2162:9821":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:47813:9359":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4625:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:25920:4017":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1027:15872":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6520:16919":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:7488:17042":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:1846:3881":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:2468:1887":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:355:3776":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:2811:9796":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:11478:9377":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7519:16949":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5071:16671":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9653:17137":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10231:9442":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:43778:9459":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:8909:29839":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:3815:16015":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:45560:4253":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:2931:2105":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"7:32:15725":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:21161:4192":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:1821:3874":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10589:17273":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:7557:14235":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4747:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"9:388:15755":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4148:4060":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:8255:4055":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2694:15970":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:8129:16972":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11011:17027":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2804:9799":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:44227:9926":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5724:16885":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12178:20358":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7557:16952":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:4445:16501":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5402:15920":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9641:17112":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8132:3940":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44251:9924":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:10255:24727":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9312:17065":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:3996:4032":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:2757:4184":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10015:17222":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:22564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:0:1900":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:20982:4206":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:11941:1131":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10516:17235":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8416:2077":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:30066:4018":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:5593:4142":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:3749:15997":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:1672:11452":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:4605:9562":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7094:31748":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:11391:19833":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:41367:4003":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4928:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:44136:9478":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3203:3824":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:10310:9446":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:877:3828":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:97:34125":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:23110:4016":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:521:21198":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:3266:17208":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:7043:27516":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13376:21126":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7572:34440":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11832:17229":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:6795:15144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:21405:4197":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:40299:9743":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43320:9433":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12799:21089":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:4847:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2925:2103":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:22498:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12293:20364":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9424:17091":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:1822:2135":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:538:21203":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4437:4066":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4567:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40072:9467":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:46207:4289":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:5057:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:1463:3804":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12019:20347":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:2469:9585":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:42308:2064":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:42132:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40290:9742":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:40020:9572":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:901:3806":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:40044:9575":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6035:14727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4786:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:3872:16048":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:6108:4330":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11056:25263":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:40248:9422":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12113:20354":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:9471:9591":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:7467:16944":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:45739:4214":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6400:16912":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:10027:2081":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:0:1904":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:3233:9393":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:44068:9493":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6854:16929":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:531:21202":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:41384:4004":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12224:20360":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:41812:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11120:4151":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10691:17277":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:579:10554":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:5933:4141":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9138:17061":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11459:19838":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:2958:2194":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:10676:25230":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:47842:9362":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12388:20371":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4482:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:39283:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:2337:15955":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:13135:21105":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2795:9793":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:798:3811":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9032:21428":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:21057:4193":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7971:3979":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:2959:32713":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:46336:29084":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11471:19839":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:4327:16431":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11931:745":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11615:19849":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:781:3826":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:39186:9807":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:3191:3985":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:2502:15962":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:35:3859":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:1915:3846":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2826:9800":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5736:14643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13411:21129":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:365:34107":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3083:3995":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"8:0:1897":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:8256:16978":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11940:1559":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:30385:28823":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:45769:4220":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10660:17080":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:681:21193":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9038:35292":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:44438:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:5840:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9127:25600":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:10876:24265":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11220:17288":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:3736:3842":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1522:3840":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"14:40:19827":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10068:17224":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6211:4141":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:11401:4012":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:628:31692":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:8632:17024":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5716:4128":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:8195:4010":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:6505:4134":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:1636:9721":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40218:3913":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4861:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13698:21151":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:9213:3880":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:13516:21141":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13015:21097":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45991:4267":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:5742:4129":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10142:17227":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:6602:9520":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7599:1887":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5014:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10324:9444":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12358:20369":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5881:14714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:707:9455":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2967:15981":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:5393:4100":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7596:16954":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13477:21137":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4555:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8189:4011":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:6243:34589":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8954:21276":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:21156:1887":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:386:17040":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41679:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:11778:3528":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:4760:4046":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13265:21117":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12307:20365":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:6719:15140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11422:19835":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:653:10603":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:9690:29223":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"18:736:21189":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:46115:4227":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:20609:9581":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:13812:21158":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9826:17118":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4753:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7563:14236":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40818:29290":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6725:15141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:5571:16876":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:1820:3845":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:4702:16590":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8777:4107":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:3595:3803":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:7277:2107":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13842:21160":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5876:14713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:836:3814":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:917:3808":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4495:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:41595:2081":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:285:34122":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:9361:30131":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:1526:11439":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:4389:9549":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:22366:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:1844:3880":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:42815:9593":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:39139:9395":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:44247:9930":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11969:20344":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:4:1018":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:1689:11454":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13461:21135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:40859:9736":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:40185:3899":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"16:5708:16884":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:8667:15920":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7366:16940":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:5013:25619":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4894:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40079:9568":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:4045:9389":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:1818:2081":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:39366:2099":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:40318:9750":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:43787:9458":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11934:1505":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:40228:3912":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2740:2101":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:6621:9521":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11502:19841":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:40124:9567":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:11360:4013":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9523:17103":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7961:25588":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:9322:35279":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13625:21144":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:6032:28637":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:119:34110":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:41611:2135":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:9906:21476":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:44103:9496":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11060:17080":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9350:35290":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:12902:21092":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21876:28713":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4462:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3158:21990":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:41662:9874":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8813:2081":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13443:21133":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11785:20335":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:40840:3993":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:638:3785":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5817:14710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8922:4130":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7757:16962":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:13777:21155":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10670:17266":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:40346:29302":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1602:11447":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:4841:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10303:17183":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:40064:3781":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:40308:9749":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:44299:4186":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:43058:9425":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:10864:4102":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:6719:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:7271:9410":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:9596:17105":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8170:3966":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:10711:3934":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:22333:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:481:21199":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:21011:4191":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:2572:15965":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"14:187:15891":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:2201:2084":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:564:21204":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13219:21112":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5966:14719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:3216:32811":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:32081:2322":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:6442:16914":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:9545:17101":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:10167:4112":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:7875:21982":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:2364:3923":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4505:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:8598:17053":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:8858:17057":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7437:16942":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:13344:21123":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:3899:16051":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"9:174:15857":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8120:3936":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:21063:4195":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3211:3822":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10649:17275":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:39983:9538":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10989:17078":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41486:4006":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:2594:15966":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:8979:35293":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"11:403:34128":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:3406:3938":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:40628:9763":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4871:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:13041:21100":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:1924:2036":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:41430:29326":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43708:9473":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9410:3933":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"15:180:15901":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:47549:4229":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10079:24641":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11532:19843":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10080:17225":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10052:17203":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:42590:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:46137:4233":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7669:16957":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"1:6432:4138":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:1565:2135":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43522:9442":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7293:16939":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8271:4065":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11844:20337":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1501:15875":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:44430:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:40446:9760":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:43812:3781":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:41401:4005":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:2378:15957":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6890:16931":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13453:21134":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3152:27800":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:5377:4099":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:3170:2081":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4549:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:44239:9931":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11861:20338":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:7726:2322":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9577:17107":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8791:4108":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:45690:4260":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10316:17184":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13426:21131":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11497:25220":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5978:14720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:11929:747":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10527:17271":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:573:10553":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4119:4057":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:7078:2135":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11800:20336":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:1062:3817":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6014:14724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:2376:3929":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:2720:15971":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13564:21142":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8263:4011":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:2391:1912":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:1662:11451":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2366:3924":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:5990:9765":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4379:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:2034:3841":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:42799:9594":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12980:21096":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13639:21145":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1680:11453":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43054:29305":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:7608:15709":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:1517:15876":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:652:35299":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4445:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9173:2038":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:936:3812":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:13033:21099":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12282:20363":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:8548:17051":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:8835:4147":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3193:3986":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12433:20374":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:39217:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:7539:14232":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:44004:9491":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:22432:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:1701:4052":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:474:10541":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:43758:3963":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10681:17276":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:857:3803":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4916:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:582:9581":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10894:4109":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:6139:4332":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:10451:3983":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:8456:2079":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:45846:4287":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:8249:4064":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:3585:15988":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:6651:2143":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:21912:28697":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:7645:3763":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:14:2015":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4739:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:5305:16857":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4144:9553":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9721:17121":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7626:16955":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4935:1044":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:1746:29275":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12483:20377":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4703:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:1071:3818":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:43803:9467":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:55:15921":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:8953:17058":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:7182:3802":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8183:3963":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:2580:3968":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:43572:9475":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4817:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10039:17181":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:3948:4029":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11938:1501":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:5756:3806":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:2933:17185":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:7510:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:10386:28640":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"11:817:3813":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11717:24138":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9772:17126":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8104:3992":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:4568:16528":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13651:21146":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:43310:9432":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43726:9474":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:20843:9820":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:587:10555":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:7231:9740":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:5986:14721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4367:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40091:9569":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4694:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:8090:16970":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11813:17230":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6327:16906":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:2169:32836":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12496:20378":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:7198:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:7229:28726":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"10:0:1899":{"crate_id":10,"path":["adler"],"kind":"module"},"17:9839:17117":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:4480:16512":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11490:25624":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:6361:16909":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:22018:29292":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:7820:3931":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:40600:3965":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:7285:28195":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11174:28652":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:47471:4257":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47719:4235":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10440:17269":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7543:16951":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4097:27513":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4757:16597":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:40143:3898":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:630:2081":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"12:0:1901":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2762:9790":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:4872:16616":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7215:3897":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:894:2081":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3513:3806":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:5525:4105":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10751:25351":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:20914:4205":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:5860:4125":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7307:9499":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8176:3967":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:30291:9516":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:9557:17063":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:755:21197":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:11566:9936":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6819:15146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5787:4137":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7743:16961":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4412:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22399:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:6575:4140":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:636:35322":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:2174:30141":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:7657:3834":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:10338:9447":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:3300:15986":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:500:10545":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:4785:29339":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:11783:9453":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9628:17099":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5032:16656":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:4325:9546":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:6774:15143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10354:17191":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10626:17274":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:2448:15960":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:3348:3993":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2816:9797":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:42824:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13249:21115":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:526:10547":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:6787:30147":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1499:11435":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:8422:9453":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6981:16935":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:4279:4062":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:49815:4210":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4823:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:7032:3829":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:20652:30203":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12318:20366":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6218:16900":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:2242:32838":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:6763:31651":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:3225:15985":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:41620:2050":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4702:4041":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5104:16680":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"15:198:15902":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:5235:31619":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8759:4106":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:20833:4198":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:4586:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:5279:9415":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6061:15925":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:43462:9466":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:44494:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10402:17255":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10761:17068":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"18:727:21196":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:39387:30129":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:9866:17138":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:13488:21138":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4435:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10712:17279":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11069:17081":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13082:21103":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2838:9802":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13121:21104":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:40389:9756":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:2546:15964":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:562:10551":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:6588:10426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:45939:4255":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:5693:16883":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12915:21093":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:7227:9741":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:43939:9489":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:4003:3806":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10699:24271":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:9415:24722":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:2752:4182":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13145:21106":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12236:20361":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:9869:1887":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:4018:4035":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12046:20349":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:574:35299":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:247:35289":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:46829:4234":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:2767:9789":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6027:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12033:20348":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:43282:9431":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10445:3985":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:41450:28712":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6132:16897":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7042:34493":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12419:20373":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:42315:2065":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3805:4014":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:45828:4281":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:1589:3824":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:8573:17052":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2544:3976":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10283:17187":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5067:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4624:16536":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:1256:3816":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:20841:30313":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:7488:16946":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11866:24274":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:3177:3823":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:21632:1887":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1512:11437":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2470:15961":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11239:21376":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2668:15969":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:9476:9592":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:7815:3933":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11641:19851":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11163:17286":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:590:29274":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:2033:3816":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7837:16965":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7016:34610":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:10971:28498":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:6318:31619":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:554:10550":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1708:11456":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:8317:2052":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:1732:9829":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10545:17078":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6728:16925":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9498:17108":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:20650:30206":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:39380:16977":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:2048:3842":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6833:15147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9617:17100":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:4932:16628":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:20877:4204":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:43474:9463":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"14:165:15884":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:1538:15877":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11032:4107":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:922:3809":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7767:16963":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4853:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6840:15148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:0:1549":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11924:1486":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:6849:15149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:1785:3864":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:242:35287":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:43039:9916":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:13159:21107":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13763:21154":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2298:15926":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:9986:17175":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13667:21148":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:867:2135":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8439:2078":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:21187:4200":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:13240:21114":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22663:4022":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:22051:4023":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6254:16902":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:5357:4098":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4663:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12072:20351":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:562:17042":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:4811:798":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:20942:4199":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:7245:3895":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:7966:25611":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:4601:25247":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:44481:4329":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1519:11438":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:46799:4228":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4540:16524":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:11550:9934":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4799:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11556:19845":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11136:17285":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11101:22131":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4954:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6129:14756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:8072:16969":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:2140:32817":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:30889:9581":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"18:491:35310":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:3231:3987":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:690:21194":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40398:9745":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:2928:2104":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:47013:4217":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:12448:9589":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6007:14723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13744:21153":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:11935:1502":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"13:110:34180":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41730:3803":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:6647:11579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12646:20388":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9469:17094":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:8931:17026":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13356:21124":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:11529:15910":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:47970:9370":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:0:1394":{"crate_id":1,"path":["std"],"kind":"module"},"16:8170:16975":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:2969:32714":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4488:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8883:4146":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11939:792":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4907:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6876:16930":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:39992:9573":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7054:3830":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:43956:9490":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:30327:28810":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"11:793:3808":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:43554:9476":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:2130:3755":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:1931:655":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"11:2186:34115":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:3196:9392":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4665:4066":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4943:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:40825:3791":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4400:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:39327:3796":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12510:20379":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6021:14725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:9227:2063":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1287:3817":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:8156:16974":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:9443:17092":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:1561:2081":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:42562:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:4135:4059":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10657:4094":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:3670:31619":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3424:3937":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11653:19852":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:47932:9368":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:2910:3837":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10092:17226":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10555:17236":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:113:21177":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7015:3838":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7883:3977":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2921:2102":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:3142:17190":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:20667:30205":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:4400:16480":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:3472:27973":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44082:9494":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2905:15979":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:8683:17028":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:2060:3818":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40138:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"13:226:34133":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11234:19825":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6488:16917":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:2689:32731":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13066:21102":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8111:3994":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:6740:9748":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:6470:31619":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13385:21127":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:5418:34456":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:30313:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4534:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:1080:3819":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:1410:2081":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:7551:14234":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3582:2081":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4886:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:0:1905":{"crate_id":17,"path":["object"],"kind":"module"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:947:3813":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:20637:30003":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:21738:28857":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:7694:3820":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6904:16932":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:11410:19834":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11197:4113":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:8310:17044":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:273:2108":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3463:2038":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:123:10226":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9188:35291":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:43300:9434":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:4943:3952":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8498:2080":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:47894:9366":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:5462:4102":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:45606:4219":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:45668:4254":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:1852:3824":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11993:20345":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6043:33292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11544:19844":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6606:15136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:43291:9430":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2215:3915":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4340:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:2481:3975":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11319:19829":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5677:16882":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11916:940":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8829:2135":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:1137:33131":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43392:9441":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46675:4216":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4769:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:911:3807":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:43626:9444":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11927:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41932:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12835:21090":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10416:17267":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:42534:29266":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:9178:17062":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11044:4108":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11090:17082":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}