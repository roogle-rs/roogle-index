{"root":"0:0:2452","crate_version":"1.0.61","includes_private":false,"index":{"2:13374:30484":{"id":"2:13374:30484","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12986:9276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13401:23476":{"id":"2:13401:23476","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13383:22263":{"id":"2:13383:22263","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:30469":{"id":"2:13276:30469","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13274:30468"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13404:23480":{"id":"2:13404:23480","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:37074"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:30488":{"id":"2:13392:30488","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:336":{"id":"2:13281:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13282:22219","`u8`":"1:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:22246":{"id":"2:13295:22246","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13296:22247"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5700:31187":{"id":"5:5700:31187","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:30471":{"id":"2:13291:30471","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12371:1726","str::slice_mut_unchecked":"2:13292:30472","crate::ops::Index":"2:39714:3651"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:31186":{"id":"5:5692:31186","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13370:30481":{"id":"2:13370:30481","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13409:30491":{"id":"2:13409:30491","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5020:30491"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44366:9293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:30470":{"id":"2:13280:30470","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13360:30477":{"id":"2:13360:30477","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12960:9281","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::rmatch_indices":"2:13363:30478"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44199:9296","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:3796":{"id":"5:5702:3796","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:30468":{"id":"2:13274:30468","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:22218":{"id":"2:13289:22218","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13400:23475":{"id":"2:13400:23475","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13402:23478":{"id":"2:13402:23478","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:37074"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:1000":{"id":"2:13271:1000","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12365:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13283:22215":{"id":"2:13283:22215","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13306:24866":{"id":"2:13306:24866","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44303:3768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13373:30483":{"id":"2:13373:30483","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13279:23673":{"id":"2:13279:23673","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12507:9285"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13408:3573":{"id":"2:13408:3573","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5023:3573"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44357:3574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:30467":{"id":"2:13273:30467","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:30482":{"id":"2:13372:30482","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:22248":{"id":"2:13327:22248","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12960:9281","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::split_whitespace":"2:13301:28436","str::rsplit":"2:13333:22252"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44049:3772","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:22243":{"id":"2:13294:22243","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13293:22242","str::split_at_mut_checked":"2:13296:22247"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:30485":{"id":"2:13377:30485","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:22250":{"id":"2:13330:22250","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12775:9272","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:30489":{"id":"2:13395:30489","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12921:136","`FromStr`":"2:12920:2792"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42301:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12920:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12920:2792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:28796":{"id":"2:13299:28796","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44025:9287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13403:23479":{"id":"2:13403:23479","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:37074"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:22217":{"id":"2:13287:22217","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13303:28434":{"id":"2:13303:28434","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13301:28436"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44332:9283","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:30473":{"id":"2:13308:30473","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44313:9295","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:22259":{"id":"2:13351:22259","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13296:22247":{"id":"2:13296:22247","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13295:22246"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:22258":{"id":"2:13348:22258","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:23677":{"id":"5:5704:23677","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13401:23476"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:28436":{"id":"2:13301:28436","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13303:28434"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44323:9284","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13316:22262":{"id":"2:13316:22262","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:3444":{"id":"2:13380:3444","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:2830":{"id":"2:13272:2830","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13397:23471":{"id":"2:13397:23471","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:2871":{"id":"2:13319:2871","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42170:191","prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:22219":{"id":"2:13282:22219","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12384:1856"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:23474":{"id":"2:13399:23474","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:2447":{"id":"0:74-20:0:2447","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[248,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:2447","glob":true}}},"5:5701:31188":{"id":"5:5701:31188","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2803","`String`":"5:7744:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2803","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:23676":{"id":"5:5703:23676","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13400:23475"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13309:28938":{"id":"2:13309:28938","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44341:9282","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:30472":{"id":"2:13292:30472","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12371:1726","crate::ops::IndexMut":"2:3492:3652","str::slice_unchecked":"2:13291:30471"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:30478":{"id":"2:13363:30478","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12960:9281","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::match_indices":"2:13360:30477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44217:9297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:22242":{"id":"2:13293:22242","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13295:22246","str::split_at_mut":"2:13294:22243"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:22252":{"id":"2:13333:22252","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12960:9281","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::split":"2:13327:22248"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44067:9266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5686:9617":{"id":"5:5686:9617","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:30486":{"id":"2:13386:30486","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13270":{"id":"2:13270","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13271:1000","2:13272:2830","2:13273:30467","2:13274:30468","2:13276:30469","2:13279:23673","2:13280:30470","2:13281:336","2:13282:22219","2:13283:22215","2:13285:22216","2:13287:22217","2:13289:22218","2:13291:30471","2:13292:30472","2:13293:22242","2:13294:22243","2:13295:22246","2:13296:22247","2:13298:28937","2:13299:28796","2:13300:22140","2:13301:28436","2:13303:28434","2:13306:24866","2:13308:30473","2:13309:28938","2:13310:22260","2:13313:22261","2:13316:22262","2:13319:2871","2:13323:2829","2:13327:22248","2:13330:22250","2:13333:22252","2:13336:30474","2:13339:30475","2:13342:22254","2:13345:22256","2:13348:22258","2:13351:22259","2:13354:2700","2:13357:30476","2:13360:30477","2:13363:30478","2:13366:30479","2:13368:30480","2:13370:30481","2:13372:30482","2:13373:30483","2:13374:30484","2:13377:30485","2:13380:3444","2:13383:22263","2:13386:30486","2:13389:30487","2:13392:30488","2:13395:30489","2:13397:23471","2:13398:23472","2:13399:23474","2:13400:23475","2:13401:23476","2:13402:23478","2:13403:23479","2:13404:23480","2:13405:30490","2:13408:3573","2:13409:30491"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13357:30476":{"id":"2:13357:30476","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12960:9281","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::matches":"2:13354:2700"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44271:9299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:23472":{"id":"2:13398:23472","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40069:9415","Self::is_ascii":"2:13397:23471"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40069:9415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13405:30490":{"id":"2:13405:30490","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5022:30490"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44348:9292","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13313:22261":{"id":"2:13313:22261","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:22256":{"id":"2:13345:22256","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12365:471","str::splitn":"2:13342:22254","self::pattern":"2:12960:9281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44171:9268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13339:30475":{"id":"2:13339:30475","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12960:9281","str::split":"2:13327:22248","prim@char":"1:12365:471","str::split_terminator":"2:13336:30474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44117:9300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:30480":{"id":"2:13368:30480","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13366:30479":{"id":"2:13366:30479","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:2700":{"id":"2:13354:2700","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12960:9281","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12365:471","str::rmatches":"2:13357:30476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44253:9298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:22216":{"id":"2:13285:22216","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42170:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11048:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2452":{"id":"0:0:2452","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use core::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use core::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.61\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:2447"],"is_stripped":false}}},"5:5689:31185":{"id":"5:5689:31185","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7744:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7744:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:30474":{"id":"2:13336:30474","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12960:9281","str::split":"2:13327:22248","prim@char":"1:12365:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13339:30475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44099:9301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:30487":{"id":"2:13389:30487","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:22254":{"id":"2:13342:22254","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281","str::rsplitn":"2:13345:22256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44153:9270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:28937":{"id":"2:13298:28937","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12365:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44019:9288","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:22140":{"id":"2:13300:22140","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44035:3771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5685:31184":{"id":"5:5685:31184","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2803","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2803","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13323:2829":{"id":"2:13323:2829","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42170:191","prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42168:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12981:9278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5684":{"id":"5:5684","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5685:31184","5:5686:9617","5:5689:31185","5:5692:31186","5:5700:31187","5:5701:31188","5:5702:3796","5:5703:23676","5:5704:23677"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13310:22260":{"id":"2:13310:22260","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12365:471","self::pattern":"2:12960:9281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12966:9277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5007:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11075:17557":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13235:20473":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12289:17710":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:42148:3814":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:16249:21985":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11242:17575":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:47096:4073":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:46159:4065":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:44645:9321":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10982:17538":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:12721:9771":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:6796:3954":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:15814:21811":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:23186:28302":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:2224:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:40851:9582":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4062:16607":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:15678:21802":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"14:7:16320":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10044:17506":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:3094:2895":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4829:14350":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:12824:17523":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:3306:2788":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12300:17746":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:299:32866":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:6659:15137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3906:3818":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:44481:9314":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:42349:3600":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:12371:1726":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:14912:21747":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5057:14375":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3656:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13814:20984":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10018:17478":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:592:3553":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:7998:3556":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:2304:31857":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:4167:3846":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:22245:4003":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:11947:16353":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:894:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:10905:17520":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:40782:3706":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11647:17643":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:8273:14602":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9731:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:41181:9601":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:14189:21007":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:2780:3784":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:42293:3562":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4921:14358":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2508:16403":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:4560:16967":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:9531:9277":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:1907:3618":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:40:3653":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12584:17518":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:44498:9315":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6813:15153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:1884:2834":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:1674:32882":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:3661:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11202:3928":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:772:3601":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11405:17587":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:43921:9243":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14503:21028":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:123:32881":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:7813:17409":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:4860:2762":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:12332:28067":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15222:21767":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7306:33344":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:44949:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11915:17702":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5593:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7888:17412":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:3275:9629":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"11:2400:3600":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:46351:28159":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:14012:20996":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:4506:31635":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"15:306:16345":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:1496:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:4614:16975":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14752:21741":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:3214:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:9279:3550":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5400:17320":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7570:17395":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:16151:21977":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:2612:9659":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:13526:20492":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13046:17484":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:2157:3637":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:680:22014":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:15760:21807":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5375:14407":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10887:34104":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7231:31613":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:5798:9345":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:2148:3615":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:3875:3638":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:568:3551":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6419:15119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:16121:21975":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:5089:3901":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:16138:21976":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"0:0:2452":{"crate_id":0,"path":["thiserror"],"kind":"module"},"1:11189:3927":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:15701:21803":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9145:3929":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:6672:15139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:22815:28372":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:8759:9579":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12043:17661":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:43213:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"14:187:16328":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:949:3606":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:39731:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:14111:21003":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:9340:22156":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:1859:3657":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5817:17329":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:14977:21750":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:623:34145":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46273:4086":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:1563:11292":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:11048:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:491:10388":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3342:3792":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"9:0:2585":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:2741:3773":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:1609:2788":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:2572:16406":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13774:17703":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:42901:2751":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:3492:3652":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:1140:16309":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:7497:17389":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:3778:16438":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:5534:9237":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11078:25089":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:13618:9421":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:1597:11296":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15376:21780":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2734:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:3729:3600":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:11038:2575":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:6534:15128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5676:14439":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:14876:21746":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:7397:24273":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4333:3876":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:43966:9263":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:8175:17419":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3842:16456":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7014:17381":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:221:9221":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:3436:3789":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4914:14357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:30526:3822":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5019:14370":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4109:3841":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:8301:17425":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1711:11306":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10573:34123":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:5093:9387":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:994:3623":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:7548:2834":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:7487:15564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:12507:9285":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:3347:3617":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:8343:16139":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:32402:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:8479:3733":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7590:17397":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:23093:3825":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:45999:4070":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:14025:20997":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9858:17501":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:8319:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:0:2593":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:44976:9199":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12768:17479":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:46694:28300":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:30802:2758":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:7484:2834":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:2962:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4842:14351":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:22702:4134":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5366:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:9807:17486":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:379:3570":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:14021:3626":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:1637:3619":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15190:21763":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:8308:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6731:15146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:23138:2575":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:7639:2791":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:46258:4037":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:5168:3909":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10251:17508":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:11520:9269":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12264:17714":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:8259:17424":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:437:16368":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:31187:9410":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5282:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:3404:9215":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:3303:27790":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"14:160:16320":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7006:17380":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11051:17567":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:21945:4008":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:7681:3690":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12543:17760":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:3457:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8084:3678":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2712:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3352:31758":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3054:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:11666:25941":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6991:33127":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13999:20995":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:43431:2784":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:7414:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:8842:2787":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12887:17526":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:13886:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13024:17531":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:7919:25038":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6758:15149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:9383:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10877:17519":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:8093:17415":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10612:17514":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:9153:2788":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"11:1893:3604":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:40593:9292":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12278:17745":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:41930:3809":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15010:21752":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:21680:9410":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:481:22020":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:47046:4088":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:785:3602":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2938:2575":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11661:17614":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:44025:9287":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:2338:16395":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:11773:17696":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:12384:1856":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:11506:9271":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8340:3785":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:23748:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:4821:17765":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:44431:9311":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13473:20488":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:7463:15562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5682:14440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:13785:17704":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:9108:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:15273:21770":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:13497:20490":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:513:17498":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13606:20498":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13877:20988":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5462:14416":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:33355:9630":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:4502:16955":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:46404:4054":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:8601:3882":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6872:17374":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2485:3721":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:22576:2575":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:40754:3693":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:5298:3944":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6765:15150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:4957:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:1604:3605":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:2171:3638":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11026:17541":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11825:17678":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:1794:31602":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:5385:17319":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:7341:15557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1089:3614":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:1207:17562":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14788:21742":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:11090:25092":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:40600:9394":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14066:21000":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11033:3929":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4929:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:708:3606":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6652:15136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3340:3791":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6263:32957":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6427:17352":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:9415:3958":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:7721:3692":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12370:1692":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11655:2784":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"17:14436:21023":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"11:1920:3620":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:42357:2834":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5069:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:4771:17040":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:3029:16425":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6449:15122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:32491:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:10915:34107":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:44610:9318":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:12661:9772":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6782:17371":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:3196:16426":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7472:27349":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6066:17339":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3095:2578":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:8240:25990":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:2357:31822":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7559:17394":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:670:22013":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:4172:31602":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:4307:3752":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:5846:17331":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:4913:2763":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11153:17518":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8508:3769":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10155:17319":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:563:22025":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3318:31748":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12150:17664":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:15400:21783":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:22921:28081":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:8330:25936":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:675:3578":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3297:25294":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:2349:3615":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:9781:17500":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:2825:30234":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12368:1317":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:5117:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:46220:4025":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:13601:29555":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:8544:3817":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:559:10395":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"11:2566:2791":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:9709:3730":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:21947:4007":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5217:14387":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:2203:17586":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5415:33197":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13509:20491":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21768:4011":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:30787:9549":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:23106:3824":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4923:3856":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6098:17341":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4587:16971":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:3738:9217":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"7:32:16156":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:2594:30237":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:6090:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11583:17612":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10945:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:23008:28101":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:9234:3970":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5756:17325":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:3646:9646":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12363:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:44366:9293":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11877:17657":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14968:21749":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13753:20982":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:835:3608":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:7665:3561":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:538:10392":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43130:2758":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:7580:17396":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15473:21791":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:6718:3959":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11354:17589":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:41022:9599":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11221:9784":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:2394:16398":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:40992:9597":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46744:4021":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:40585:3574":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7168:17385":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5586:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7057:9346":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15356:21778":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:15596:21795":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:9273:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3529:3799":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:7577:15569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7431:11411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:5366:980":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5044:14373":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:12385:1838":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:44019:9288":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:40732:3689":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:12005:9254":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:13730:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:38311:9640":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44217:9297":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15822:21812":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:12966:9277":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7767:9324":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2039:9558":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:12698:9774":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:40802:3732":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:5708:3922":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:23263:28227":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:12089:17659":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12076:17658":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15748:21806":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:44988:28934":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8168:2932":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:7308:10436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:8155:17418":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8063:3583":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:10712:3789":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:3014:16424":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:6461:3962":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44008:9291":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"9:480:16184":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:7709:3691":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:15151:21760":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:7986:10344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10769:34112":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5863:17332":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:6077:3752":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12399:17749":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14356:21018":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15569:21793":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:10397:2751":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:0:1005":{"crate_id":6,"path":["libc"],"kind":"module"},"6:7448:15560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2069:1361":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:11811:3819":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6398:17350":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5477:14418":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:14298:21014":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12929:17528":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:403:17497":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:1625:11297":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15138:21759":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:581:9410":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:16235:21984":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:5700:17322":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:12391:1422":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:43864:9260":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4303:27348":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:30781:9341":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"9:176:16290":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:42624:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6849:17373":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2345:9218":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11239:3740":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:5831:17330":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:46138:4059":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:113:21999":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6634:17367":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:7361:15559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5603:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:8302:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13089:17799":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11872:3820":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:564:10396":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13173:17802":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:15720:21804":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5107:17123":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6412:17351":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1:2483:3720":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12863:17525":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:12383:887":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:5635:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14463:21025":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:21766:2575":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:11692:22172":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8531:3772":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"19:0:1294":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12318:17529":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:4572:9378":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:5286:29826":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:22552:4140":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:12390:1916":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:6507:15085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2728:16413":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:545:10393":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:4856:17056":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10818:17518":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3032:25097":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6335:17347":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15078:17556":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:14131:21004":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3935:3603":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:33895:9633":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:8753:3630":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:22602:28458":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:2971:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:11841:17699":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:3451:2799":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9307:25962":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:12348:22048":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:32459:2802":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8256:3637":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:902:3601":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14994:21739":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:4142:3603":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10317:17510":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:3559:3752":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:5186:14384":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:6406:25956":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:13034:9305":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:43956:9265":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5334:14402":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:1075:3613":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6411:15118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9938:17504":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:10322:3668":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:6047:17338":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:45984:4064":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:15206:21765":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6342:33336":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:608:34162":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9405:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:15434:21787":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:5779:3925":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12969:17475":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:42663:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:10391:2748":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:7780:28861":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3677:3763":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:3295:9213":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:33761:9632":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"8:0:2584":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3667:9362":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:1620:3604":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:21734:29467":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:491:34160":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:6143:9984":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:1521:11288":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:5602:3919":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:2377:31812":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:521:22019":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10720:34113":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:40898:9590":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:680:3579":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8589:3812":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8525:3771":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:22514:4139":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15778:21809":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:23252:28210":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:4937:14360":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:14352":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4976:14365":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:2322:3713":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:12900:17527":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12376:740":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:3669:16430":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15301:21773":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:45882:4052":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6666:15138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:40487:9365":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40673:9396":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7648:17400":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:532:3261":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"14:214:16329":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:2420:2834":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:11567:17641":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:40543:9398":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44117:9300":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:1580:16311":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:473:10385":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:2275:31753":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8518:3770":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:1625:3617":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:9219:3967":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:8858:2789":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:10952:25940":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:928:3603":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:957:3608":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:1613:2834":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6456:17355":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3219:2766":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12659:17758":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:364:32868":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3435:3633":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:7454:15561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:8290:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7355:17386":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2788:16416":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5769:17326":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:22:819":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:4821:25747":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:46176:4071":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8335:25964":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:15214:21766":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5075:17114":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5224:14388":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8852:2788":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:15333:21776":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:1107:3616":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:6282:25077":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:8003:3798":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:4802:17048":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:7548:15567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40744:3771":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:41167:9600":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9544:3674":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:10993:3678":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:4964:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:43402:28533":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"15:394:16356":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:11557:17640":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6493:15084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7604:17398":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8640:3905":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11524:17638":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13437:20486":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:14868:21745":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:6799:3955":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15944:20472":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:46561:4026":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:1974:2741":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:44928:29868":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:42187:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13538:20493":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9102:3926":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:16032:20474":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:42894:2750":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:14449:21024":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:3207:9210":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5036:14372":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5520:14423":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:5241:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:485:10387":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:6183:3962":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:479:10386":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2528:16404":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:44099:9301":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5488:14420":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:47268:9187":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"9:445:16185":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15390:21782":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:21717:29466":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:10393:2749":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46372:28135":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10137:17471":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11256:17576":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:14051:20999":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:527:3546":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13946:20991":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6882:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:5992:3914":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:23296:28202":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:14575:17487":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14545:21031":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:10340:2744":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:963:3609":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:80:21997":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:4008:3820":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:2533:32875":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:8304:2801":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:430:32886":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3440:9202":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:3940:3604":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:22378:4009":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3841:3815":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:1584:11294":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13272:20475":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:47174:9181":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:8330:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:5851:3963":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:3686:29066":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:21935:2575":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:12737:9773":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:23230:28158":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:7397:33352":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:1105:16308":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:7144:17384":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:5742:17324":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5670:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9255:3948":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5482:14419":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:1489:11283":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:6924:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:2705:3782":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2438:16400":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13424:20485":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:1005:3613":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:41962:3811":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11016:17540":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:3438:3790":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:3277:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:8267:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:12597:17766":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:11096:25095":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44303:3768":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:40566:9401":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:10828:34108":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9916:17503":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1880:2788":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13553:20494":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10170:17320":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:11940:25948":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15383:21781":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:974:3610":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46080:4085":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:659:22012":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11723:27345":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:21690:29459":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11115:17550":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:3260:3997":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10997:17539":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:7733:9233":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:1829:9527":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:9286:22166":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:47330:9189":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2612:16408":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:5965:3947":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6948:17377":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:4438:28630":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:41157:3770":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:7757:9323":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7061:17383":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:5412:1246":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4875:14353":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2660:16410":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:306:2803":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10185:17476":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:1259:31785":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4883:3904":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12724:17522":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:2965:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:11244:3772":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:1643:11299":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:6977:28906":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:613:34150":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:7518:15565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5301:14398":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:3473:17665":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:3264:17660":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:9410:3957":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:2182:3639":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:41908:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:9132:3928":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"10:36:32859":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:47253:9186":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:12381:900":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:4913:17067":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:6966:9586":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:12387:1850":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:842:3609":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:40930:9593":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:3860:3637":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:7842:9342":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:2355:16396":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:45946:4053":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:42341:2788":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7910:17413":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5311:14399":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13594:20497":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:12316:22082":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:6777:9603":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:854:3610":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5037:17099":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2157:2933":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2768:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14246:21010":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8185:3731":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:8003:3558":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:672:3577":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5570:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:39055:9644":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:15116:21757":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:102:32874":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:7869:17499":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2010:787":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:9714:25076":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:2121:3613":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11256:22063":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:13252:20474":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"10:0:2586":{"crate_id":10,"path":["adler"],"kind":"module"},"2:22657:9659":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:8049:3582":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8596:3881":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:2234:17611":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:11928:9195":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:4450:28610":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:22376:2575":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:44724:4001":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10350:17511":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:6532:17360":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:9737:17472":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5295:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6079:17340":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6740:15147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:12388:17739":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"9:355:16201":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"14:165:16321":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:1645:3636":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11799:17698":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7132:33128":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:8470:3800":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4984:14366":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"7:79:16163":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:6300:17345":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:13292:20476":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11547:17639":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:1023:3614":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11717:27344":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:7755:17406":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"11:328:32865":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:33828:9631":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:497:10389":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:867:33359":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:22952:28306":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6560:17362":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11493:17598":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:1703:11305":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13738:20981":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:3583:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8621:3874":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:32324:3930":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15313:21774":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:2959:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22975:3823":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:6658:3603":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5494:14421":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:10068:17485":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:4804:2761":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:7492:3624":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13485:20489":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:9755:17470":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3673:9361":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:8249:14598":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47291:9188":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:10645:3742":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11955:16353":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4531:16961":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:33143:9627":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:44348:9292":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:4161:3845":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:44700:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:14311:21015":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12225:17717":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:43159:28886":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:11399:9266":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11605:17637":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43895:9245":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6802:16338":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:44907:4147":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5541:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:7983:3571":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:7350:15558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:8284:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11293:17578":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:5776:3923":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:30813:28299":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:1098:3615":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12508:17755":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:47238:9185":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12386:1844":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:2418:16399":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11678:22159":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:1507:11286":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14284:21013":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:41423:9578":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:47215:9184":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:16105:21974":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:47163:9180":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40960:9585":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:3463:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:11764:17650":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:12671:17794":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:13723:20980":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11001:3922":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:7938:25072":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12201:17743":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4886:3883":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1569:11293":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:12375:737":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:5588:3918":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"9:53:16204":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8787:2785":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:10610:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14038:20998":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7158:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5781:17327":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15039:21754":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:32391:9696":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44153:9270":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6940:33122":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:14529:21030":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12949:17529":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:2003:2742":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:6874:31602":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:7556:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:43120:28895":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:5179:1303":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:40829:3649":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5319:14400":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5004:3855":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2467:3716":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:44844:28877":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"11:1158:3616":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7052:17382":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:46191:4019":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11313:17579":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:47117:4094":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:22936:28505":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14475:21026":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:4406:3879":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13455:20487":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6895:17375":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:1049:3615":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7694:9705":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8461:3798":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:36435:9639":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14855:21744":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:15:2703":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11595:17642":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:4730:9368":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6716:15144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:5258:25953":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:8008:15940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13116:17800":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:44546:9316":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:12392:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12107:17517":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6723:15145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:41008:9598":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:14341:21017":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5387:14409":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44866:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10602:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:14147:21005":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1539:11290":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:43976:9264":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:150:16371":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13959:20992":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:40951:9594":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15266:21769":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2998:16423":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:871:2788":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:4976:17084":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13146:17801":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:4794:9375":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:6381:15056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:3614:16429":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:14235:21009":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7592:2834":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11042:17542":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:7564:30229":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:14933:21748":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7741:17405":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:46051:4030":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:39883:3040":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6480:17357":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:4424:16923":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11898:17677":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:22688:2575":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:7316:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11128:17549":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:1900:3617":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12647:17759":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:1223:31784":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6648:17368":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:16187:21980":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:12530:17761":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"16:5897:17333":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:4817:25743":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:7524:3640":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"18:718:22009":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11443:17593":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5325:14401":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7823:17410":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:4536:3752":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15624:21798":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:915:3602":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:34559:9638":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:1657:11300":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6278:17344":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:16165:21978":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:9441:3740":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6588:17364":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10439:17512":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:16212:21982":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:12377:756":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:15281:21771":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:45914:4017":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:256:33359":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:13966:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:4725:9367":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:643:34137":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5638:3921":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"14:220:16330":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:9420:2738":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46821:4055":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:42284:9716":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2708:16412":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:5151:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15168:21761":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:15418:21785":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4947:14361":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:43196:2758":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:1956:3752":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:12775:9272":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43419:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:44635:9320":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:13703:29559":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:5686:17321":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40481:3574":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:7428:17387":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:23219:28218":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:11672:3933":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2808:16417":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6748:15148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:15655:21801":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8538:3768":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11730:17647":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:14414:21022":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10622:34097":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15769:21808":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:46988:4033":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7618:17399":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:2469:3446":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:7715:9404":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5357:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:8251:9580":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:7650:3597":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:6466:17356":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:44856:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10592:3926":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:5205:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5960:17335":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:5648:14436":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:3597:17683":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:2265:3546":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:2804:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:4201:3847":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12056:17662":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:23059:28166":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7111:33004":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:8226:17423":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2032:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:7716:9405":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13387:20482":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:4352:16874":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:706:9279":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:41415:9576":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5622:14432":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11688:17610":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7098:33089":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:7332:10266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:44915:4148":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:10500:25916":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6606:17365":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44253:9298":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15582:21794":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8021:3555":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:10215:24299":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:6678:3950":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"18:573:34137":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13581:20496":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:3256:9608":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5658:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:3610:3734":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46389:28161":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6462:15123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:3810:16447":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:5349:14404":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"13:0:2582":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:15445:21788":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:40701:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14986:21751":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:32384:2761":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:8063:3940":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:47189:9182":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2458:16401":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:44341:9282":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:44939:4145":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:11537:17605":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:40879:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:4851:9376":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:515:22022":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:698:22016":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:6867:3961":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:3313:3618":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11497:17585":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:40860:9583":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:860:33327":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:32931:9628":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:21736:29461":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6665:17369":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:671:2788":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5381:14408":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:22223:4013":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:3393:3793":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13412:20484":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11392:17588":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5006:17091":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10935:3731":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:12557:17557":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:16269:20484":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:2838:16418":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6480:15125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:12920:2792":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10905:25730":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:9192:3966":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:2854:16419":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46449:4060":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:2636:16409":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:8136:17417":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:42782:3945":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:31160:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10284:17509":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10044:28568":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:4362:3752":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:2037:17592":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:4570:31635":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:11437:9267":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3287:9211":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:46241:4031":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9886:17502":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:8221:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:4986:17771":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:2380:2788":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:12388:1832":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:26148:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:11213:22075":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:32401:2581":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:4807:3846":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40577:9293":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9360:22057":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5395:14410":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:538:22024":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6638:15135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10341:25920":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:12975:9279":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:44573:9317":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:4153:3844":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40556:9400":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3249:9606":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11743:17648":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:872:33340":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:3101:31282":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6876:15181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:16176:21979":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:1642:3620":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:44067:9266":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:11016:22171":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:10709:3793":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:1011:2788":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:5289:25953":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47075:4039":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10343:25993":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6749:17370":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:2614:9660":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:5127:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4997:14368":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6708:15143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:7325:25093":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:12475:9725":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:39846:3591":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:5324:3801":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:12372:1816":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13832:20985":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:14516:21029":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:47154:9179":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:15023:21753":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7826:3604":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:22730:4135":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:42507:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9319:25974":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:11214:17548":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:3043:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6504:17359":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9671:17474":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:15126:21758":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13568:20495":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:523:10391":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3903:3819":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:43234:2759":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:9423:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:5802:17328":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:10184:2772":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:44676:9303":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46628:4087":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6521:15126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3486:3776":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12382:906":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7769:17407":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:11326:9261":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15092:21755":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:894:2834":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13855:20987":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"11:1564:16310":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6599:15131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:10844:25065":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:13797:20983":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:10401:2752":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6770:15151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"9:422:16187":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14177:21006":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:15521:21792":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:32377:28591":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:15058:21738":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13844:20986":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:9984:17505":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44035:3771":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:3339:3619":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1861:3658":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:10926:22152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:5196:14385":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:14374":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:7354:25347":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:6623:15133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:2773:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:9268:25937":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:1632:11298":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:46066:4036":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:15734:21805":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:7152:4002":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6437:15120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5025:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:16259:20482":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:7033:9345":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:0:2591":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:10650:3744":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3290:9212":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15426:21786":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:9702:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:7799:17408":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7475:3634":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:43175:28896":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:11853:17700":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:6777:15152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:15142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:5722:17323":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10092:17507":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:2635:3781":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:12389:969":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:1631:3618":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:15646:21800":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:32400:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2136:9670":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:10915:3728":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:42252:2737":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:4882:2764":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:7584:2834":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:5490:31602":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:40528:28208":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:9388:3949":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:7695:17403":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:898:3621":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:4940:17071":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:7391:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:43634:9753":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12808:17482":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2374:16397":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13015:17487":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:8188:17420":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:22470:4138":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:12328:17711":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:40907:28415":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:7539:15566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:809:3604":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:2137:3614":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:11364:9273":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10419:17473":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:4830:17053":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:2323:16394":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"11:1914:3619":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12494:17718":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:16069:21971":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:1548:3600":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:40838:3769":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44658:9302":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11341:17590":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:396:32870":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6526:15127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:4468:16944":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12621:17764":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:2598:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12792:17481":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12572:17517":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:7528:17391":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:40921:9592":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:8031:15942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:2975:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:8296:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:45899:4057":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:30749:3632":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:44852:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46290:4092":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:7368:3907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:6443:15121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43995:9294":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:42074:28216":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13766:17705":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:6564:15130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:45967:4058":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"14:202:9322":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:8255:14599":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:39714:3651":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:1625:3607":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3701:9214":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6976:17379":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:42880:2749":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1898:3604":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:4068:2834":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2495:3726":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:4:1259":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:553:10394":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40939:9602":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:9204:3969":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:5538:9238":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:10403:2753":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:44271:9299":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7085:32944":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12422:17750":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"20:0:2447":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:2968:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:884:3600":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:39826:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14079:21001":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5441:14414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14271:21012":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5107:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5265:14393":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:40973:9595":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:11219:3600":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:8073:17414":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:46095:4091":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:22986:28317":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:44624:9319":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:14847:21743":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:3265:3999":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:15456:21789":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:4694:3884":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:589:28899":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:6682:3951":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22604:9659":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:12189:17742":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:3592:3735":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41374:9572":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:46305:4093":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15799:21810":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47143:9178":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:23000:28960":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10399:3771":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:4603:3560":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40869:9588":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1595:3602":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:6506:4151":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:4925:3859":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:7744:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:1667:11301":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2134:9669":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10534:34111":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:23175:28225":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:45852:4051":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:698:2834":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:0:2592":{"crate_id":17,"path":["object"],"kind":"module"},"1:12364:1177":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8178:3728":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11674:17644":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13363:20480":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6494:17358":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:6374:25096":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:11865:17701":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6433:17353":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:598:34156":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10635:25074":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:6620:17366":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:5098:3902":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:23208:28132":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5088:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:22643:4144":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:23117:3839":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8716:2783":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:5112:3903":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:12485:17754":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44874:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:12986:9276":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:2466:3604":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5271:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13064:17483":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:7831:9570":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6120:17342":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:15957:21969":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:32460:9609":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10671:34120":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:42468:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:44452:9312":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:15836:21813":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:953:3607":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:261:33340":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11227:17547":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12238:17716":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8173:3730":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:43188:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12369:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:13929:4146":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:586:10399":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11411:3708":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:5405:14411":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:21821:4006":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:10039:28791":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7879:25348":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:44965:9201":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:44332:9283":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13344:20479":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:15635:21799":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5165:14383":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:1922:3675":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:5844:3962":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:3373:3620":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:465:10384":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14489:21027":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5307:17300":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:3925:16493":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:46723:28167":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"16:7379:33353":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3300:27787":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:42108:3812":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12362:17748":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4890:14355":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:15102:21756":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:8247:9581":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14386:21020":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:4651:2760":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:1379:3613":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:43874:9258":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:5622:3920":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:41990:28558":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:5347:17317":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4816:14349":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46649:28315":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:21819:2575":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:8118:17416":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:21748:29455":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:12365:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11788:17697":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:10973:22054":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:2559:32879":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:4882:17059":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1614:3606":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6611:15132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6353:17348":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:735:31312":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:12378:735":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"17:11189:17553":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:4561:3872":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7857:17411":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10218:17477":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:500:16188":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8764:2784":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:373:3569":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:39876:9647":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2748:16414":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:1085:32891":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:1690:11304":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46013:4018":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43147:28887":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:351:32860":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:23086:28910":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:43795:29872":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:8488:3737":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12213:17744":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:754:22018":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15992:21970":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:8216:17422":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2548:16405":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:23274:28201":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:8666:3858":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:500:25087":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:14402:21021":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11788:25069":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:938:3622":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:41405:9575":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5420:14412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:44735:9785":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5507:14422":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:15176:21762":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:8199:16103":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:39670:9216":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:10661:17515":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:765:22011":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11063:17561":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40983:9596":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12683:17763":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:12443:17741":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:8248:3783":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11755:17649":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:2303:16366":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:5551:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:43410:3745":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9400:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:11287:9272":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:635:34161":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"14:31:16320":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14212:21008":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:986:3612":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"15:327:16349":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13399:20483":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11574:16303":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11324:17604":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:7206:31603":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43947:9262":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:2539:30207":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:38366:9641":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9175:3968":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:7067:9347":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:2719:25065":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3828:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:43394:3743":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13375:20481":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:8227:3599":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2592:16407":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:8261:14600":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:9119:3927":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:21702:29459":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:1551:11291":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6823:15154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:4721:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:10982:22147":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:42390:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:16198:21981":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13986:20994":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:3475:16428":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4805:14348":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:2175:17626":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6473:15124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5641:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7321:2736":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:33694:4000":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:42204:3600":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:6790:32041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1727:11307":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5139:14381":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:41367:28909":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6813:17372":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41381:3950":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:16079:21972":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:11702:17645":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:8014:15941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:9169:2834":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6442:17354":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5367:17318":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11166:17555":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:7563:15568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2810:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:22868:28373":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11501:25081":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:40772:3707":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:15289:21772":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:10910:27557":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:4995:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6544:15129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:8797:28790":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:8069:3677":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5450:14415":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:4772:3900":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12251:17715":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:12366:1878":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:11195:2788":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3345:9637":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:42168:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11706:22139":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:14587:21033":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:881:3612":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8555:3808":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13308:20477":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:46516:4020":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:1064:16307":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1684:11303":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5428:14413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11812:17656":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:23285:28137":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:4215:3849":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:11274:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:4970:14364":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11269:17577":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:13755:9419":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3209:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5533:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:22590:4143":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:2301:3613":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:4139:3843":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"9:236:2784":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:542:33044":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:10886:3906":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:5914:33199":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:6704:31602":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42887:2748":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5255:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:5935:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:6972:28939":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:3658:27867":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:740:3607":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:39768:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:40517:9399":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:7604:15571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:1098:17554":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4354:3878":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3716:2788":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11367:17557":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:39896:9357":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:390:16186":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15463:21790":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"18:96:21998":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:9396:3752":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:8386:2800":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:938:3604":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:15931:20471":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:12353:17747":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:623:3572":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43855:9256":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12342:17713":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:578:10398":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11851:3818":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:33627:3998":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:42096:3821":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:2902:16421":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:6785:2834":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:44682:9784":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42546:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:10761:9737":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:7610:2842":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10706:3791":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13674:20979":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11510:17584":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:6525:4152":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"15:288:16344":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6962:17378":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6680:15140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:12079:9251":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"7:0:1906":{"crate_id":7,"path":["unwind"],"kind":"module"},"18:507:34137":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12337:3584":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46478:4066":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10395:2750":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"11:685:3600":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:13641:9592":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:12851:17524":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:3667:3736":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:3095:31741":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:2545:32872":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:23241:28160":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:45931:4023":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14723:21740":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4981:3861":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:12151:22186":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:46590:4032":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46898:4027":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8802:2786":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2148:28932":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:44849:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:0:1718":{"crate_id":1,"path":["std"],"kind":"module"},"1:10483:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:4103:3842":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8550:3816":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1888:3603":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:42585:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:6154:9591":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:1530:11289":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4487:3880":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:3105:31284":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4902:14356":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:5958:3946":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:15342:21777":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12379:912":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:944:3605":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:9327:17385":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:7717:28066":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:46034:4024":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12380:894":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:291:31602":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:1696:3868":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:32366:3039":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:7504:3603":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6231:17343":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14260:21011":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:1586:3601":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46322:28083":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:12981:9278":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:7727:17404":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:16093:21973":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:5179:3867":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:4211:3848":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:46499:4072":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:47200:9183":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:597:17499":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14325:21016":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:41032:9587":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1616:3603":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6631:15134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:11634:17613":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5249:14391":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:44357:3574":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:2366:16313":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:4223:3850":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6927:17376":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:8232:3598":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"13:110:32901":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:22257:29452":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:41390:9574":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15197:21764":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44313:9295":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:15410:21784":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6317:17346":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5629:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:22218:2575":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:5471:14417":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14372:21019":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:1239:31737":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11467:17591":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12516:17770":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:41946:3810":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:3329:16427":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:8207:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43449:28563":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:13909:4149":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9459:3996":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:1920:3674":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:13196:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:2440:3603":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:32489:9209":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:2936:16422":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:7514:3625":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:0:2583":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13325:20478":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:42262:2572":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:15368:21779":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1675:11302":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7586:15570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:434:32887":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:6005:3603":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40809:9243":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43884:9259":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:10859:29175":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:39786:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:23044:28224":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4718:17033":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"13:229:32892":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:7534:31759":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:40717:9705":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:44323:9284":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:47134:9177":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1494:11284":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:11478:9270":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:4341:3877":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:41396:3799":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1514:11287":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7686:17402":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:40069:9415":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6758:16339":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:32370:17424":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12993:17530":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:12960:9281":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:11492:9268":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:1533:2788":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8644:3907":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10954:17537":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:38476:9643":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6917:15183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:21839:4007":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15249:21768":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:726:22017":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:12038:9255":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:980:3611":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:3465:3604":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1564:2834":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:8353:16140":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:7469:15563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:39634:9360":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:42743:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12464:17752":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:2228:16303":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6902:15182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8615:3817":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10710:17516":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:34040:9634":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:42704:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42130:3813":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:40688:9393":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:689:22015":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:798:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12695:17762":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:22735:4133":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:6268:9584":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:23197:28138":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:13899:20989":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15608:21796":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:4377:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:8202:17421":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:3649:2744":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:5981:3752":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:816:3826":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:4881:14354":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2318:3712":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10752:3555":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:39806:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:735:22010":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12175:17730":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:21827:4010":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:3395:3794":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:14560:21032":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:45867:4016":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:1395:3615":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10524:17513":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:2551:32878":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"15:0:2590":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:570:10397":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:16050:20475":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"11:1601:16312":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12127:17666":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40889:9589":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:0:2587":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:34213:9635":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:8195:3729":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8699:3913":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:10827:29746":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:21719:29463":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:2768:16415":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:44049:3772":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13922:20990":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:47017:4067":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:2323:3614":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:1897:3668":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:4462:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:2541:2599":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:9314:25954":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:42212:2834":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5927:17334":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7539:17392":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12408:17740":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:7633:32942":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11089:17552":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:3809:31602":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:6248:3752":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:10409:3932":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:9161:3971":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:4337:3752":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:42429:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:42263:2739":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12433:17487":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:830:3605":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11715:17646":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42301:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:2315:3711":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4325:3875":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:4485:9208":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14599:21034":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12478:17753":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:2684:16411":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:531:22023":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12030:17663":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:4743:17035":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:517:10390":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42221:2736":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:40680:9397":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:4641:16979":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13972:20993":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7509:17390":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1132:31602":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4927:3860":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"14:0:2589":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4792:14347":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:16223:21983":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"18:651:34137":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:40639:9395":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:6037:3585":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:5139:3752":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:6122:3944":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11142:17517":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10759:17517":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:38421:9642":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46943:4061":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:43441:28491":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4819:25745":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:12371:17528":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2878:16420":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:3460:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"9:328:16241":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:4672:3883":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:11304:27561":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:23024:28232":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:873:3611":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7473:17388":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14091:21002":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12454:17751":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:42366:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11419:17517":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12707:17521":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11102:17551":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:42196:2788":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11621:17615":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7656:17401":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6026:17337":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2478:16402":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5288:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8869:2790":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6160:16365":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:46109:4005":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:44467:9313":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:7982:2575":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1589:11295":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:39718:9645":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13211:20472":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:39746:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:4217:3600":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:44199:9296":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"14:40:20473":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:656:2743":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6385:17349":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10964:3733":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:12491:9727":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:44171:9268":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:40706:3688":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4990:14367":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:5995:17336":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:15616:21797":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3097:31283":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6691:15141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:43846:9257":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:2715:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6574:17363":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7549:17393":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5562:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:6358:4149":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"12:0:2588":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5230:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5341:14403":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:3899:16490":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:43642:9246":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:4504:9364":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:46611:4038":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:2939:9414":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:798:3603":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6543:17361":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8607:3871":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"10:44:16295":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:11348:3709":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13187:20471":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:34386:9636":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4896:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:43934:9244":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1424:3616":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:3422:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15324:21775":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:6853:3960":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:1500:11285":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:1410:3614":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}