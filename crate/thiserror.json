{"root":"0:0:1724","crate_version":"1.0.38","includes_private":false,"index":{"2:11540:32068":{"id":"2:11540:32068","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:21518":{"id":"2:11456:21518","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11457:21516"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50380:7889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1722":{"id":"0:48:1722","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1830"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":{"restricted":{"parent":"0:3:1715","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1829"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:63:1833":{"id":"0:63:1833","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:1831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:24274":{"id":"2:11443:24274","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48132:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11505:1954":{"id":"2:11505:1954","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11130:7866","str::matches":"2:11505:1954","prim@char":"1:12299:409","`DoubleEndedIterator`":"2:7091:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50310:7903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5085:2425":{"id":"5:5085:2425","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11459:32052":{"id":"2:11459:32052","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50370:7900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:19609":{"id":"2:11454:19609","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50082:7892","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11514:32059":{"id":"2:11514:32059","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7091:120","prim@char":"1:12299:409","str::match_indices":"2:11511:32058","self::pattern":"2:11130:7866"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50274:7902","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11502:32056":{"id":"2:11502:32056","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:24297":{"id":"2:11451:24297","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11452:24298"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:2096":{"id":"2:11430:2096","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44:1830":{"id":"0:44:1830","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:3:1715","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1829"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:65:1828":{"id":"0:65:1828","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:47:1830":{"id":"0:47:1830","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5088:32719":{"id":"5:5088:32719","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:24315":{"id":"2:11464:24315","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,4],"end":[250,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::aserror::AsDynError","name":"AsDynError","id":"0:6:1720","glob":false}},"2:11431:21297":{"id":"2:11431:21297","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":{"restricted":{"parent":"0:3:1715","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:12:1829"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11474:2095":{"id":"2:11474:2095","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11130:7866","`None`":"2:48132:176","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428":{"id":"2:11428","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10693:1359","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11429:796","2:11430:2096","2:11431:21297","2:11432:32047","2:11434:32048","2:11437:24248","2:11438:32049","2:11439:310","2:11440:24277","2:11441:24273","2:11443:24274","2:11445:24275","2:11447:24276","2:11449:32050","2:11450:32051","2:11451:24297","2:11452:24298","2:11453:19691","2:11454:19609","2:11455:19752","2:11456:21518","2:11457:21516","2:11458:19879","2:11459:32052","2:11460:21231","2:11461:24314","2:11464:24315","2:11467:24316","2:11470:2137","2:11474:2095","2:11478:24305","2:11481:21517","2:11484:24308","2:11487:32053","2:11490:32054","2:11493:24310","2:11496:24312","2:11499:32055","2:11502:32056","2:11505:1954","2:11508:32057","2:11511:32058","2:11514:32059","2:11517:32060","2:11519:32061","2:11521:32062","2:11523:32063","2:11524:32064","2:11525:32065","2:11528:32066","2:11531:20858","2:11534:24317","2:11537:32067","2:11540:32068","2:11543:32069","2:11546:19628","2:11548:19734","2:11549:21825","2:11550:21826","2:11551:21827","2:11552:32070","2:11554:2235","2:11555:32071"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11467:24316":{"id":"2:11467:24316","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11432:32047":{"id":"2:11432:32047","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11519:32061":{"id":"2:11519:32061","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11548:19734":{"id":"2:11548:19734","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11555:32071":{"id":"2:11555:32071","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4477:32071"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50423:7898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1830":{"id":"0:53:1830","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11511:32058":{"id":"2:11511:32058","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7091:120","self::pattern":"2:11130:7866","prim@char":"1:12299:409","str::rmatch_indices":"2:11514:32059"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50256:7901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11550:21826":{"id":"2:11550:21826","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1723":{"id":"0:58:1723","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:59:1833"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}},"0:24:1829":{"id":"0:24:1829","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11525:32065":{"id":"2:11525:32065","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11155:7861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11484:24308":{"id":"2:11484:24308","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:12299:409","str::split":"2:11478:24305","`DoubleEndedIterator`":"2:7091:120","self::pattern":"2:11130:7866"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50124:7849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:32721":{"id":"5:5099:32721","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11554:2235":{"id":"2:11554:2235","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4480:2235"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50414:2236","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11552:32070":{"id":"2:11552:32070","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4479:32070"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50405:7897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11490:32054":{"id":"2:11490:32054","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11487:32053","prim@char":"1:12299:409","self::pattern":"2:11130:7866","str::split":"2:11478:24305"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50174:7905","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:37:1716","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5394:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1830"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11434:32048":{"id":"2:11434:32048","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11432:32047"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11521:32062":{"id":"2:11521:32062","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5083":{"id":"5:5083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4994:1359","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5084:32718","5:5085:2425","5:5088:32719","5:5091:32720","5:5099:32721","5:5100:32722","5:5101:2447","5:5102:21823","5:5103:21824"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,47],"end":[251,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::PathAsDisplay","name":"PathAsDisplay","id":"0:48:1722","glob":false}},"0:21:1829":{"id":"0:21:1829","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11543:32069":{"id":"2:11543:32069","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:7866"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:24314":{"id":"2:11461:24314","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:7866"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:37:1716","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1722","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5506:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1830"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11496:24312":{"id":"2:11496:24312","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11493:24310","self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50228:7851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103:21824":{"id":"5:5103:21824","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11551:21827"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[253,4],"end":[253,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(provide_any)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::provide::ThiserrorProvide","name":"ThiserrorProvide","id":"0:58:1723","glob":false}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:3:1715","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:7747:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1829"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11447:24276":{"id":"2:11447:24276","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11531:20858":{"id":"2:11531:20858","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:24277":{"id":"2:11440:24277","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12316:1455"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11517:32060":{"id":"2:11517:32060","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:2137":{"id":"2:11470:2137","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409","`None`":"2:48132:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1829":{"id":"0:12:1829","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:21231":{"id":"2:11460:21231","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50398:7887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:796":{"id":"2:11429:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12299:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1829":{"id":"0:18:1829","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:32063":{"id":"2:11523:32063","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11487:32053":{"id":"2:11487:32053","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11478:24305","self::pattern":"2:11130:7866","`DoubleEndedIterator`":"2:7091:120","str::rsplit_terminator":"2:11490:32054","prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50156:7906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11524:32064":{"id":"2:11524:32064","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:3:1715","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1829"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11478:24305":{"id":"2:11478:24305","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:7866","str::split_whitespace":"2:11456:21518","`DoubleEndedIterator`":"2:7091:120","str::rsplit":"2:11484:24308"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50106:2423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1828":{"id":"0:25:1828","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5100:32722":{"id":"5:5100:32722","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2079","`String`":"5:6968:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2079","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11481:21517":{"id":"2:11481:21517","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:7866"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10954:7855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11499:32055":{"id":"2:11499:32055","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:24248":{"id":"2:11437:24248","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10698:7890"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5102:21823":{"id":"5:5102:21823","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11550:21826"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11549:21825":{"id":"2:11549:21825","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5091:32720":{"id":"5:5091:32720","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1724":{"id":"0:0:1724","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[254,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:68"],"is_stripped":false}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:54:1717","path":"::provide"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3370:1832","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1723","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:63:1833"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5084:32718":{"id":"5:5084:32718","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2079","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2079","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6719:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1833":{"id":"0:59:1833","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:1831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,29],"end":[251,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::DisplayAsDisplay","name":"DisplayAsDisplay","id":"0:43:1721","glob":false}},"0:51:1830":{"id":"0:51:1830","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1718","glob":true}},"2:11449:32050":{"id":"2:11449:32050","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12305:1359","crate::ops::Index":"2:2987:2307","str::slice_mut_unchecked":"2:11450:32051"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:32049":{"id":"2:11438:32049","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1720":{"id":"0:6:1720","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:8:1829"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:9","0:13","0:16","0:19","0:22"]}},"2:11493:24310":{"id":"2:11493:24310","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12299:409","self::pattern":"2:11130:7866","str::rsplitn":"2:11496:24312"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50210:7853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11508:32057":{"id":"2:11508:32057","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12299:409","str::matches":"2:11505:1954","self::pattern":"2:11130:7866","`DoubleEndedIterator`":"2:7091:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50328:7904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1830":{"id":"0:49:1830","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11537:32067":{"id":"2:11537:32067","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:37:1716","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8615:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1721","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1830"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11458:19879":{"id":"2:11458:19879","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50360:2424","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:19752":{"id":"2:11455:19752","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50092:2421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1721":{"id":"0:43:1721","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1830"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"2:11452:24298":{"id":"2:11452:24298","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11451:24297"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:24273":{"id":"2:11441:24273","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48132:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11546:19628":{"id":"2:11546:19628","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11091:2051","FromStr::Err":"2:11092:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48274:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11091:2051","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11091:2051","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11534:24317":{"id":"2:11534:24317","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48130:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11150:7863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5101:2447":{"id":"5:5101:2447","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6968:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6968:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11551:21827":{"id":"2:11551:21827","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1829":{"id":"0:8:1829","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11439:310":{"id":"2:11439:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11440:24277","`u8`":"1:12316:1455"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11528:32066":{"id":"2:11528:32066","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11130:7866","prim@char":"1:12299:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11135:7862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1829":{"id":"0:15:1829","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:24275":{"id":"2:11445:24275","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9312:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11457:21516":{"id":"2:11457:21516","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11456:21518"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50389:7888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:32051":{"id":"2:11450:32051","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11449:32050","`str`":"1:12305:1359","crate::ops::IndexMut":"2:2991:2308"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:19691":{"id":"2:11453:19691","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12299:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50076:7893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"13:108:33739":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8638:2472":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9263:15336":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12134:18388":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9712:15426":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:9779:7852":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4766:2530":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5772:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:271:32830":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6538:13374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2827:8217":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:50849:8370":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:4216:2486":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"9:676:14044":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:6401:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9449:15246":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7267:15251":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:5392:8171":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6567:15168":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:6781:2638":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:3162:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:10880:8377":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4262:2490":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:46958:2236":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2515:2432":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:495:9012":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4768:12325":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:7538:23551":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:7749:1997":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:834:2260":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47319:8176":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11939:18375":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:49646:8347":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4206:12110":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:2401:2384":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:6771:2449":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:50837:8367":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:9737:7853":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:2030:31523":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:50050:7899":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5887:2580":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5595:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:8701:15320":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:7054:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11946:14217":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:487:9011":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:8172:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:6313:7941":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:9238:2569":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:52652:29206":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:52262:2724":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9722:15423":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"12:2178:33682":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:7804:26327":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:49160:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:52032:2711":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"12:393:33689":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:2738:31449":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:7909:15167":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:2991:2308":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:49461:29778":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:8619:2009":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:628:2233":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:48206:2101":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12748:18659":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11014:15703":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:52378:2700":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:49974:7829":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:7961:2324":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:11846:2475":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3084:2309":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"12:751:2253":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:6708:2642":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:11983:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:10682:15546":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:54225:7775":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:8510:15263":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13527:19319":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:10297:7844":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"12:2184:30596":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13404:19280":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:12225:18455":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6375:9843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4239:12269":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:0:1846":{"crate_id":17,"path":["object"],"kind":"module"},"5:3764:32830":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12884:18815":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4565:12302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:5695:2564":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2411:2389":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:11725:8007":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:50006:7846":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2792:8211":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:5614:2410":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5504:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:1938:1977":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10445:15532":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:29645:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:1105:2264":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:507:9014":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:8882:8010":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:49127:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:8560:1980":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2674:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:52598:29271":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:5541:15211":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4904:23648":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"9:920:14065":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5582:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9585:7842":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:586:9024":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:6445:32845":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:51961:2719":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:10425:2329":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4810:12329":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:5348:22781":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47653:8156":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6424:13367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"6:6500:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2917:2285":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11748:18361":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:46636:7965":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:11997:18378":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11515:18182":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:50629:7877":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:51787:29249":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:2793:15290":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:8752:2421":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3347:2450":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:4731:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"12:1065:19857":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9873:15479":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:918:2251":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10088:15441":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:1114:2265":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:5469:8162":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1887:2336":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4534:12298":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1505:9902":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6448:13369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:11798:8008":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7056:2652":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11468:24196":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12237:18456":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:6743:2253":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:8945:2041":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:47174:2419":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47295:8163":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11247:15867":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:531:19388":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:48215:1995":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:7255:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6903:15246":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1415:2256":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:46453:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:524:26325":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:353:2229":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"9:586:13988":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:10894:15553":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"1:944:2253":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8795:1988":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4262:14714":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:6875:2312":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:10903:8374":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10625:15542":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6376:15236":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:11150:7863":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:51853:2718":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10856:2442":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:6759:31429":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47067:8300":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7388:15173":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7396:15258":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11106:15773":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:52476:2692":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:202:7912":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8762:2504":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:47257:8172":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13047:19189":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9118:34624":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:52084:2703":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:3086:2452":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:9778:15400":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:58404:29762":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:46595:8226":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:4662:14844":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:782:2276":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4621:12309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:8629:2017":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:727:19380":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"12:2053:2263":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:51877:2710":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11639:18292":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:8110:15578":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"12:1840:2253":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1678:9919":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:9388:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8813:2028":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:50082:7892":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8138:2434":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:6079:2641":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9422:15349":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46563:2274":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:12304:1329":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11576:18190":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11734:18360":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:5494:15208":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:736:19381":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4417:12288":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:8596:15317":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7543:15152":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:52454:2689":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"12:762:2254":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:4908:23652":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11343:15992":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46437:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:969:2257":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:48883:2018":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9820:15477":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5443:12877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:20093:30809":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:9857:15458":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5087:2501":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:491:34632":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"9:827:14123":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5447:15205":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:20046:7997":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5672:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:52551:29274":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11661:18298":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:1446:2289":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:8137:15556":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6572:13377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:25282:2477":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7659:15147":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:4403:19587":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:4532:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:9293:15359":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10708:15547":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46497:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:9312:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:1760:8252":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:7483:15160":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12251:18457":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8411:2419":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:2257:2375":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5841:12170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:7954:2268":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:9346:2586":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:6470:32837":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:1668:9918":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:8941:15580":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:3485:2294":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:3015:2273":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12860:18751":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11485:18180":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:8796:15577":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:48890:2019":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8226:2436":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:50825:8364":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"12:60:33692":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9738:15401":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4324:2496":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:1889:2337":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:49414:29763":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9484:21969":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:7226:12455":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12278:18459":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4144:14399":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:54135:7769":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3184:19649":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:51010:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:3566:14223":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:48198:2250":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:50833:8366":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"12:119:19862":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:4684:2245":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:8613:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:1707:2513":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8698:2525":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:630:31381":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4254:2489":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:481:19385":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:6920:22762":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:49172:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7435:15191":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:49422:8012":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11372:26342":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:1532:9906":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11902:7779":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:7045:2254":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:4689:14847":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:600:9026":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6496:15238":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4551:12300":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:8162:15566":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:9317:15353":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6975:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:49895:7837":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6123:15148":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:49935:7830":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:545:9018":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3382:1831":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:8561:15316":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:7149:22409":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:21127:29766":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12303:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:49835:19682":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6463:15237":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4185:12263":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1611:2253":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:0:1841":{"crate_id":11,"path":["adler"],"kind":"module"},"17:13506:19317":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13374:19277":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9700:15397":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:51020:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"12:725:2251":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:54126:7768":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:47620:8152":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:8056:15132":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9021:15582":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12291:18465":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11828:18367":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:10973:15590":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12980:19181":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2490:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:2938:2076":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"8:0:1838":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:1555:14185":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10506:15499":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:9302:1828":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12972:19154":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8130:19542":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6070:15140":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:8621:2018":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4367:12285":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8362:2449":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:954:2254":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:21941:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:113:19403":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10528:15573":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5163:15091":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4635:12311":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8504:2465":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:47381:2420":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:50423:7898":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:10668:8353":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:50909:8385":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:48130:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:49661:19732":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10774:15527":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10350:15527":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:52629:29236":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8378:2393":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10497:15536":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9446:15363":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:47360:8179":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:12361:18533":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5761:15218":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9658:15424":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12046:18382":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13024:19184":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:4894:2491":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2444:1828":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:12315:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:49142:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:48747:2630":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6524:13373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12816:18707":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:11144:7864":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6842:33952":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"12:738:2252":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11153:2393":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12934:18820":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6676:15156":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:8822:34621":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10921:15588":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10796:15549":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10466:15533":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:2050:19772":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:5664:15215":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2800:8212":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:53842:2706":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:9155:15583":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:4246:2488":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9371:15362":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:8105:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:13393:19279":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12955:18833":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2497:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:29617:7935":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:12312:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:48274:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:48595:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:2300:15270":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:12314:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:12302:1024":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6241:15232":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:52232:2720":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:50256:7901":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11456:2569":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:20360:1828":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:5646:2561":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:6076:2101":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:6603:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3232:2445":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"9:896:14064":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:985:2263":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"9:0:1839":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:6990:7910":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:5596:15213":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1608:9914":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2935:2075":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:4117:2475":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:4606:14831":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4461:12292":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:853:2277":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8686:2467":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4737:12322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:62:8626":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5568:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:8295:15575":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"14:40:15591":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:10862:2440":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:2535:15279":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:8704:2516":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:5957:2253":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:9681:15425":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6781:15169":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6392:9846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4286:12275":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"15:0:1844":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:6951:2350":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2261:15268":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:20059:30726":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:1954:19748":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:7017:8158":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:990:2260":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47020:7989":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50666:7878":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:46681:7945":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11787:18364":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1574:9910":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:4201:7958":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11315:15990":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:51084:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:8863:2038":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:1615:2254":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:3188:15298":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:4278:7965":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:5236:1015":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:29823:19718":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"12:2069:2264":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:53512:2733":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:49665:7831":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:3689:14249":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5861:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12485:18593":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6252:15233":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:11953:14217":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5388:15202":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5981:19926":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11034:15704":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6210:15231":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:50829:8365":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10583:15540":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:54302:7778":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:47626:2450":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5472:15207":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:47039:2352":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:6704:15170":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:3616:2101":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5203:15265":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11174:15812":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4706:12319":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:1771:15378":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:20512:1828":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:9696:7850":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:9369:2634":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:11762:19480":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12781:18704":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:49987:7845":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:20091:30811":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6415:13366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:5178:2554":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:54263:7777":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:5857:8183":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8911:34617":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:48709:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:2825:15291":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:870:2042":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11708:18358":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5558:15212":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:6837:2643":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:9274:15337":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7872:15166":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"12:2205:2049":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4346:12282":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:2605:15282":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:80:19401":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:4948:7822":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:57082:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47345:8178":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:54050:2729":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7298:15254":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:48876:2010":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:96:19402":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12874:18753":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:13148:19202":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4224:12267":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2493:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"18:624:34645":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11500:18181":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7970:15163":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:12297:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:20776:2685":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:3147:8225":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:12306:1437":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:7050:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10159:15445":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:3249:15463":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6472:14206":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"12:387:33688":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:4574:14826":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:286:2079":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:7279:13934":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12313:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:9212:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:7319:15256":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1686:9920":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:50076:7893":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13536:19320":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:8212:15557":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4605:12307":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4515:12296":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:7441:2282":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:21270:30127":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:8623:2019":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5749:33441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4635:14839":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:21233:28731":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:47645:8154":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:9627:15384":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"14:31:14191":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:9525:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:7243:12457":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4087:7971":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:3486:2405":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13557:19321":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11356:16005":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:50537:7874":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:9535:2590":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2487:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10139:15358":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:3430:32830":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:1643:8032":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:487:15571":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:4352:2219":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4540:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8612:2468":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:3263:15299":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5605:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1595:9912":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2564:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2676:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9764:15427":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12730:18657":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4102:12257":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:8418:15565":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8487:2464":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10108:15437":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:4316:2494":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"12:646:2250":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:2255:19776":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10360:15492":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:6877:15245":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:8341:19670":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12118:18387":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11263:2331":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4300:12277":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4433:2519":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:6851:2644":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11761:18362":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9631:15371":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:10684:8355":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:1982:19773":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11951:18376":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8434:2423":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12322:18467":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10385:15528":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1044:32870":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10075:15440":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:21428:30490":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:4217:14665":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:671:19375":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:10997:15591":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1227:2264":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9805:15476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"12:0:1842":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:50092:2421":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:46987:7986":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:57043:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:6217:2580":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10434:15531":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:7289:13935":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:12638:18651":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"12:1029:2265":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:8447:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:686:2242":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11137:15775":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:5009:2502":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6329:2558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:11785:2474":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2389:15273":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7309:15255":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:6734:2278":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:7191:24253":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:3154:19548":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4786:14862":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11684:18299":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:8390:2397":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13126:19199":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46994:7987":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:1600:9913":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:8177:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:9830:2369":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:7208:12452":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9250:15335":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:8615:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:5505:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"10:0:1840":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:12321:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:21449:2480":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:960:2255":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11271:15979":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11528:15485":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:53122:2708":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6298:15177":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:49886:7838":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"14:215:14194":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11495:2401":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:9260:2042":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50714:7907":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:247:34622":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8955:2042":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:2681:2220":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"0:0:1724":{"crate_id":0,"path":["thiserror"],"kind":"module"},"2:2928:2073":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"12:669:2256":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:8421:2420":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:21036:2659":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:636:34636":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11149:15810":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:9282:2582":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13134:19200":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"12:1872:2273":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:47205:8167":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:581:9023":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:3010:15296":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:6668:20068":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13459:19287":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:9436:22816":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:9454:2042":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:6528:8166":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:48671:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12317:1452":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1518:9904":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:4354:12283":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11532:2590":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:7567:15179":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:7114:2077":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10310:15525":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4126:12259":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8649:2461":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11133:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:8065:2368":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:7249:12458":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:6639:22762":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:12106:7998":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"12:659:2101":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:10949:15589":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:12300:1471":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13382:19278":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:2250:2370":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:2631:15283":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8221:19503":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:47225:8169":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"12:1852:2270":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:3908:2410":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"14:187:14201":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:9577:15379":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2433:15275":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:5191:7939":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:47234:8170":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:719:19379":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3157:19549":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:2253:2374":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6200:15230":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:52139:29247":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:3479:2396":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:48443:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:51101:7790":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10394:15529":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11300:15987":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4017:2473":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:4598:12306":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6479:13370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5876:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10062:15442":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12514:18594":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11123:2372":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6171:15199":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:7977:2331":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:20409:2661":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:9835:22975":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"7:32:13951":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:9206:2566":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:50853:8371":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4659:12314":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:46911:7992":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:21310:2479":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13518:19318":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:8871:15579":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"7:79:13958":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:614:34641":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4527:12297":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10642:15543":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:12316:1455":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"9:19:14046":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:29398:2478":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:4210:2487":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:8887:8011":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4906:23650":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:1944:2207":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4575:12303":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:46613:2062":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"9:863:14063":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:6781:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1643:9916":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:4003:7795":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:2904:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:5498:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4816:12330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:501:9013":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:54012:2709":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"12:632:2042":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:50876:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9909:15436":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9406:22404":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46541:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2932:2074":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9328:15352":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4274:12273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"9:382:14084":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:52332:2712":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"7:0:1498":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:5510:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10444:22973":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4449:12291":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:12009:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:9330:2585":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1738:9925":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46921:7993":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:6922:19720":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4519:14770":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:50274:7902":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46941:7984":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:3377:2410":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12307:18466":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6137:26233":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:20112:30808":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:8991:34619":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:50554:7875":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:20493:2657":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:2780:8208":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:48869:2009":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8903:2040":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8886:2039":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:7847:1828":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:386:15447":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:9623:7856":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:562:15572":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:6680:2635":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11952:2737":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:11201:7870":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:7237:12456":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:51899:2698":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:48266:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:1562:9909":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"9:592:13998":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:6751:2279":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"15:214:14213":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:8014:15194":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12265:18458":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7237:15249":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:1534:14184":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:4327:14746":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5184:15267":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4690:980":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:0:1351":{"crate_id":1,"path":["std"],"kind":"module"},"1:910:2101":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"9:188:14022":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:5541:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6528:15239":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:49406:8013":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:599:34635":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11143:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:51071:2736":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9554:2401":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:3160:19550":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:4657:2517":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:4317:12279":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:50897:2651":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:14:1957":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:6495:2580":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:52732:2732":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13031:19185":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:5011:2505":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:11093:23629":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46375:7802":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:9751:7851":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12797:18705":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7847:15260":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3404:2395":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:3271:2441":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:47370:8164":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:7603:15176":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2726:2072":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"14:7:14191":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4191:12264":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:6284:7939":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7343:15158":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:9080:29437":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"16:2341:15271":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12337:15532":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:6277:9842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5169:2553":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:5525:2599":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:47124:2366":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:7357:15171":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13192:19228":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:29623:8199":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10332:15526":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2842:15292":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:2588:26330":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:8617:2010":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:8610:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:50228:7851":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:6908:2351":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3594:19447":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:5737:15217":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:2477:19775":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:545:2207":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:51063:2735":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"12:1044:14180":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:22472:2476":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"12:1138:2266":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:3805:2250":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:7445:8157":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:47328:8177":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:6509:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:50370:7900":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:52284:2727":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12550:18595":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:51113:7788":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5782:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6311:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9362:15358":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:48557:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:21254:19634":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:4060:7970":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:678:2239":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:5235:33971":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:1595:32830":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:7869:2201":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7497:15155":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8075:2371":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:50845:8369":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:46854:2236":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:49924:7840":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10257:15498":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13158:19224":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4212:12266":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4361:12284":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:131:8692":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:598:2216":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5780:15219":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:8951:34616":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:2320:15135":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:3632:14240":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:53764:2722":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:1085:14181":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:1864:2329":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:21461:2483":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4096:12256":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:7747:1826":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:3854:14285":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:21974:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6517:14205":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:9897:15481":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11559:18187":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:11288:22798":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10455:15521":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:50857:8383":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:4129:7818":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9601:15377":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:9112:26330":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:9831:15478":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10670:15545":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:6953:8970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9303:15357":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:11163:24192":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2930:15136":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:3956:29752":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4592:12305":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11235:15866":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4726:12321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:4849:14882":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:9514:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:2578:2433":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3561:32830":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6137:15146":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:1636:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8576:2466":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:4797:12327":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:11669:21709":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:46933:7898":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:5541:8598":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:3192:2442":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:20074:30726":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:2739:7796":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:6543:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:8339:15574":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:11383:26238":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8644:2471":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:9382:15356":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8428:2421":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:47604:28631":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:8881:34620":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:7853:7862":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:2579:15281":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:777:14178":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:8055:15555":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:50523:7871":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:8981:15581":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:9546:7855":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:21809:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13141:19201":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4427:12289":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"12:861:2262":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7637:15164":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:8666:15319":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13039:19186":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:50602:7876":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:5628:15214":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:54172:7772":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11513:21700":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:153:15138":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:50210:7853":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:4297:14735":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:53306:2714":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9433:15348":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:7168:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:29659:19716":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4280:12274":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:11091:2051":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:8847:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7211:15141":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11687:23655":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9165:34626":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:20521:2661":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9401:15354":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:48181:2100":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:242:34629":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:967:15355":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:21842:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"13:220:33695":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10403:15530":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"20:0:1718":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"5:1387:2251":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12320:1451":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"12:274:33685":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:2868:15293":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11654:21760":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6322:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:21383:29349":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:9573:2645":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8216:19502":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:1608:2101":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2948:2042":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1887:10061":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:20368:2660":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:46477:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"13:0:1836":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:2763:8207":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:9183:15584":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:1021:15360":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:6392:2737":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:1196:2263":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:6810:2101":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:20319:1828":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13100:19194":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9475:15376":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:5823:2571":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:519:9016":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:44:14168":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:21286:29341":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:47266:8173":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:554:9019":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:52810:2721":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:50414:2236":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12176:18404":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3107:2254":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4673:12316":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:4357:14752":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9539:15373":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:21908:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:690:19377":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:5803:2739":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:1962:15396":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9791:15428":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4139:12260":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:6003:32830":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4969:2556":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9127:29438":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"12:353:19859":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2727:15287":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:6161:15229":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:8570:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"18:644:34631":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8589:2467":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4559:12301":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"12:1836:2101":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:54106:7766":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4335:12281":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:1832:2042":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:12141:26008":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:47165:2305":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"12:810:2255":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:10698:7890":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:11087:15772":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13007:19183":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:979:2259":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4307:12278":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13594:19362":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4611:12308":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:53966:2691":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:11356:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:9223:15334":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:47001:7988":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:2743:31445":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:507:34631":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:6575:28640":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1701:9922":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13231:19237":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:39423:8186":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:484:22825":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:12323:1098":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:54187:7773":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6968:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2672:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:22007:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:1845:2254":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:9823:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:21399:29235":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3470:26192":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:6043:2633":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:36:33679":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:7981:19779":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:48317:2042":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:51831:2730":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"12:300:19861":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:6831:2595":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12909:18818":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:973:2258":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:6891:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:2788:2650":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"9:505:14163":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:1637:2273":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11606:18290":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:5433:15204":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6593:15240":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:11746:30907":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1636:9915":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8631:15318":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11703:22825":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"9:111:14014":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:13354:19241":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:39374:2574":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:8740:2558":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:7848:2231":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"12:1628:33693":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2839:8219":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1405:2255":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:46519:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4441:2520":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:4952:7823":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:1359:2250":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:2445:8001":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:20928:2653":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10822:15550":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10121:15438":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7278:15252":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:48519:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6052:15228":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:7091:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1654:9917":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4489:2546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"12:320:19860":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6017:2632":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:2894:15294":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:4312:2493":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:2367:15272":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:11130:7866":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"18:0:1847":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:1620:2270":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:5680:2563":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9283:15361":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:11584:26335":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:39410:19779":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:6109:15174":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:7923:2237":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8329:2392":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"12:1518:14183":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1426:2257":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:574:34631":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:12298:919":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:3363:2250":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5525:15210":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:2869:19505":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:7013:8159":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:7214:12453":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:50734:7908":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46980:7897":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:53654:2702":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:9478:2250":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:4744:2529":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4294:12276":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12148:18389":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:1825:2296":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:755:19382":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:592:9025":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:29583:2284":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4505:2522":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6186:15150":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6270:15151":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"12:697:2257":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12926:18819":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:7748:1998":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:50701:7881":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:49431:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5835:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:9526:15374":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6829:20071":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:57108:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8470:2463":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:6151:32830":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:660:19374":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:48481:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9268:2579":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5703:15216":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:513:9015":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4257:12271":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:8718:2526":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:2822:8215":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:4748:2599":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13114:19196":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6790:15244":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11547:15484":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:9488:15375":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11594:18234":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:11712:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:2812:8213":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13413:19283":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4247:12270":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:50156:7906":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:4105:32832":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:52062:2699":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:420:15134":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3230:2444":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:5554:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:9276:2101":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4179:12262":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4268:2491":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12103:18386":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7942:15262":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:20488:1828":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:21875:2221":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:9252:2570":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:1931:15372":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:5894:2581":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:21743:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"14:160:14191":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5122:14914":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4:990":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:21435:2481":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:47275:8182":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:8272:15570":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8693:2524":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:4441:14766":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:1691:2254":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:9553:15358":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1511:9903":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47187:8160":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13340:19240":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12756:18701":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:51807:29338":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:4329:12280":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:5064:2507":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13184:19227":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"9:709:2038":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12318:1453":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"18:699:19378":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5713:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:5350:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"12:1003:2264":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:2989:2270":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:11850:30723":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:11389:26329":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4267:12272":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:2578:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:539:9017":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:707:7864":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:9885:15480":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:5709:2565":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4817:14875":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:4268:7964":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11909:18372":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22073:2482":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:6059:20055":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:575:9022":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:1525:9905":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2652:2435":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:29717:19717":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"9:649:14000":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:9004:8330":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:54161:7771":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10667:22974":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8972:2045":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:681:2241":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11259:15976":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10296:15495":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1349:2042":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5660:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:9501:15357":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13221:19236":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11288:15986":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:52430:2707":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:47411:8181":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10420:15520":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:3168:7955":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"12:1866:2272":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4425:2518":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12198:18453":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:54088:2694":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11825:2473":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:47286:8174":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:6622:8149":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:4778:12326":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:7956:15162":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6269:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:51983:2723":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"15:193:14209":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:20940:30724":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:22040:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9031:34630":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:5878:15223":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:10321:19561":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:10859:2444":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11681:23636":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5614:19920":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:10954:7855":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:50680:7879":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5480:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2673:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6293:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9441:22764":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:20306:2667":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:52500:2693":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:9503:2423":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4545:14824":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2612:2426":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13492:19311":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:21180:29775":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:48325:2250":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:4705:29461":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12617:18597":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:5411:15203":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:4542:7914":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:21362:29273":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:2465:15276":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"19:0:1006":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7249:15250":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3457:15301":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:3157:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:48405:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:52856:2725":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8146:2293":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11125:15774":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9636:2336":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:47114:2367":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:5510:15209":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7372:20077":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:6330:15234":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:515:19387":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4302:2492":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12211:18454":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:10919:8376":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:7220:12454":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4716:12320":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7938:2240":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11893:18371":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2796:8210":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:48248:1996":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6034:15227":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:6408:26340":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6735:15172":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46897:7990":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:2981:2272":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:4332:7967":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:6885:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5523:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:6442:2109":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6146:15198":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46629:29476":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:11135:7862":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11368:16006":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:2080:2265":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:5636:31184":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"14:0:1843":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4379:12286":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:50064:7896":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:47051:19720":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"12:1859:2271":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4231:12268":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:8241:15569":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9671:15391":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:9530:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:2737:2160":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:46860:7956":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:9658:7849":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:2383:2378":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3269:2440":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:521:19384":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:6938:2349":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:8526:15315":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11444:2568":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4721:14850":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:3194:2443":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:1919:7803":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2843:8220":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10207:15511":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:7747:22405":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:7890:15165":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:1695:9921":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10476:15534":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6719:20066":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:8627:2016":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7093:15247":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4385:14758":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:8494:15265":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:4904:32830":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:57069:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47635:8153":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8736:2555":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:7166:15248":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:12281:23079":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:4378:7968":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:6554:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7059:1995":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:21322:19630":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:6302:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:50405:7897":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:2399:2383":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:47243:28642":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11436:18179":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:3734:2253":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4506:12295":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11841:18368":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:49109:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:7166:13906":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11813:18366":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:49246:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:2955:2271":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12022:18380":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:38200:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:21345:29237":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:52001:29248":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:996:2261":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:5660:2562":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:21776:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:12305:1359":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:4042:32832":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7426:15175":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:12324:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8961:2044":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:20280:2666":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8533:23177":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"5:5889:32845":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:10264:7843":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:3314:2429":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5720:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12850:18750":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1078:19771":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13091:19193":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:50508:7868":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2758:2649":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"9:33:14047":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:20362:2658":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11070:15765":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4745:12323":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11536:15483":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:1632:2272":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:8368:15558":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:6430:13368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10608:15541":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:7859:23170":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:8393:15567":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4475:12293":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:7895:2213":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:582:7997":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:766:19383":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:48333:2101":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:1060:19770":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10245:15524":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6690:15157":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10845:15532":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4200:12265":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9193:34623":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9458:15390":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6409:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:4027:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:12349:18530":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11330:15991":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10182:15443":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4653:12313":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13168:19225":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:965:2256":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9061:15358":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:1241:2266":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2817:8214":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:12270:2244":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:49230:8312":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:11606:2577":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:4627:2410":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:11306:2570":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7785:26338":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1580:9911":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7511:15131":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:567:9021":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46869:7991":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:608:9027":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"9:956:14057":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12033:18381":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:53092:2705":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12164:18390":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1500:9901":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8441:2424":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:52886:2728":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9429:22789":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:359:2230":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:50821:8362":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:11920:23171":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:6619:15241":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9947:15482":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:2969:7801":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:4206:7959":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:6784:2639":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:3716:14282":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:47597:8150":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:8336:19669":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:2768:8206":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:50380:7889":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"9:977:14066":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2993:15295":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10321:15491":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13059:19190":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5472:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:5227:1987":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8070:2369":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10233:15523":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5374:15149":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:3125:15444":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:652:34631":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12609:18596":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:3026:15297":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:0:1837":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:50360:2424":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:11155:7861":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:20114:30806":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8092:2373":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11774:18363":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:12322:1508":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:6316:15178":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13214:19235":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3422:2394":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:58383:29750":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:2683:15285":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:10494:19499":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5219:15263":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10374:15494":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:4972:2529":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5317:22781":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:2198:33683":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:6676:2246":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:50124:7849":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11974:18377":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:20771:2662":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:50486:7867":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7980:15195":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:560:9020":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:1751:30162":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:10755:2566":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:52408:2704":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:4921:14905":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:53156:2690":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:5996:15225":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13279:19238":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:2747:31444":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:8625:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11721:18359":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:11773:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10580:2576":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:1903:15412":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6981:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:900:2250":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:6303:7940":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:7063:2078":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:6816:2101":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4698:12318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10520:15537":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7117:19903":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4454:2521":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7874:2211":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:6816:20070":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4644:12312":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:49961:7828":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6359:15235":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:6440:22782":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13366:19276":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:47144:7828":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12964:19153":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:3402:15300":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11853:18369":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:50691:7880":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:9071:34628":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:2739:31443":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12896:18817":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2657:15284":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11276:2567":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:20243:2665":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:4838:2545":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:51028:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46881:19620":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:47611:2246":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11098:2371":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:0:1845":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2282:15269":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:49133:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:12060:18383":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:10798:26333":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:887:2042":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:50328:7904":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11054:15764":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13082:19192":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:5949:15224":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:646:9056":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:57056:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:53904:2726":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:9301:2583":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2833:8218":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:49996:7848":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8122:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2154:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5460:15206":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7469:15159":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1722:9924":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5534:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11111:22804":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:54240:7776":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11199:15814":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:8774:15576":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:7299:27956":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6743:15243":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:8712:2472":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:50106:2423":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:1826:2317":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:6863:2049":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:5763:2567":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:7288:15253":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11617:18291":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:54115:7767":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9463:22821":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:4413:14762":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:8475:15307":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:3174:7954":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:2960:19745":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13176:19226":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10283:15496":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:50174:7905":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8369:2451":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:47215:8168":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:1672:1062":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:590:29755":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9314:2584":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2753:2647":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:21710:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8441:15568":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4152:12261":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:4585:2523":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:2669:1835":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4115:12258":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6654:15242":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4014:2474":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12674:18652":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:1967:1978":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:48190:2042":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:6789:19749":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:1123:2266":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"12:98:19858":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:3473:2293":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:3953:2470":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:4581:12304":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11600:22769":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:21034:1828":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:21337:29760":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:1552:2410":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9350:15350":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12087:18385":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7329:15257":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:1737:8253":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:1370:2101":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9383:22766":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:8082:2372":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"12:815:2258":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:564:19390":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:4197:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:36:2313":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4629:12310":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:2662:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11161:15811":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7825:15259":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:950:32830":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:47196:8161":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:5013:2506":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:1604:2042":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10546:15539":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8624:2469":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11267:19498":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:39414:8278":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:6773:2101":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6545:13375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10752:15530":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1541:9907":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10875:15552":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5692:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:54210:7774":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:51931:2731":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"12:1120:14182":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3911:2042":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3461:1980":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:9339:15351":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12948:18821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6284:15161":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:50389:7888":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:931:2252":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4888:14890":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:853:2261":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13327:19239":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:9394:2212":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12695:18653":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:12309:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:53046:2701":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12299:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10854:15551":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:1714:9923":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5741:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:54146:7770":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:538:19389":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9930:15457":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3236:7800":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12836:18748":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:574:2214":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3350:2042":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10901:2213":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4761:12324":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5625:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:8763:29765":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:1212:2265":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:38217:7997":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:10490:15535":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:7438:2050":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:9691:15398":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2509:15278":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3599:14231":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13436:19284":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:9094:29448":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:49904:7841":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13203:19229":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"15:175:14208":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11069:2557":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3370:1832":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:4665:12315":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13478:19293":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:1626:2271":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:48342:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:7062:7936":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:4072:2410":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6017:15226":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:609:34637":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:5826:2573":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3968:29774":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:12265:23547":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13572:19326":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"9:622:13999":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:4683:12317":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12768:18703":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:2771:15289":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:9751:15399":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"14:165:14192":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"14:221:14200":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:20331:2656":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:52121:2688":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10650:2565":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:6010:2631":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:52102:29351":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:8833:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:661:1979":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:534:19922":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:47034:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:800:14103":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:9644:15370":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5727:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"12:822:2259":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:2916:15439":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2987:2307":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8553:19585":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:49443:2038":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:11639:21752":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2784:2648":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1091:2263":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:1550:9908":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:217:7806":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:56673:2734":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4804:12328":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:12319:1454":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10721:15548":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10221:15522":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:6316:26233":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2805:8216":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"12:2190:33681":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12739:18658":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6865:20073":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:6719:2311":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7929:15261":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4437:12290":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:47309:8175":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:2705:15286":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:2487:15277":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13071:19191":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:2670:7798":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:49914:7839":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9844:15435":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:3542:2254":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:7266:12460":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:52186:2655":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7044:19900":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:12064:2310":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:1002:2262":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:52968:2713":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13580:19328":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7557:15153":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5684:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9224:2568":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11873:18370":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:46422:8224":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:49194:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:46964:7985":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:6345:15154":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:135:8693":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2385:2379":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:12311:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:57095:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7736:15572":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:6998:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12630:18649":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5587:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11217:15815":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4496:12294":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2774:8209":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:6979:7909":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46336:7953":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:2557:15280":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:5839:15222":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:12008:18379":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:719:2243":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"18:681:19376":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:57030:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12310:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:5815:15221":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7135:19904":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11800:18365":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:2411:15274":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:9108:15362":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:11941:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:50841:8368":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10270:15497":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:48633:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12073:18384":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:48257:8303":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:1828:2318":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7944:2267":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:50016:7847":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:5416:2253":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:50398:7887":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:20519:2663":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:2994:19746":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:6728:2101":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:49453:29761":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11088:22951":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2851:8222":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2856:8223":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5733:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2749:15288":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:46622:15194":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:2847:8221":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:4323:7966":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:10843:8375":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:3199:7799":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:50310:7903":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:47396:8180":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1396:2252":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4398:12287":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:4749:14858":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6352:9869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5699:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:5793:15220":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11476:8383":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:48367:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11186:15813":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:9765:7854":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}