{"root":"0:0:2506","crate_version":"1.0.62","includes_private":false,"index":{"2:14011:31228":{"id":"2:14011:31228","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13618:9322","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::matches":"2:14008:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45052:9340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13929:1024":{"id":"2:13929:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12465:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14046:31240":{"id":"2:14046:31240","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14026:31234":{"id":"2:14026:31234","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5744:24844":{"id":"5:5744:24844","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14054:24847"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14052:26743":{"id":"2:14052:26743","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40728:9456","Self::is_ascii":"2:14051:24842"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40728:9456","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13987:25579":{"id":"2:13987:25579","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13618:9322","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::split":"2:13981:25575"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44848:9307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13960:28423":{"id":"2:13960:28423","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13959:28626"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45113:9324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13967:25588":{"id":"2:13967:25588","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13952:25570":{"id":"2:13952:25570","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13951:25569","str::split_at_mut_checked":"2:13954:25574"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14005:25586":{"id":"2:14005:25586","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5745:24845":{"id":"5:5745:24845","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14055:24848"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13940:25547":{"id":"2:13940:25547","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12484:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13941:25543":{"id":"2:13941:25543","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14059:31242":{"id":"2:14059:31242","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5152:31242"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45129:9333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14014:31229":{"id":"2:14014:31229","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13618:9322","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::rmatch_indices":"2:14017:31230"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44980:9337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14057:26747":{"id":"2:14057:26747","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37244"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13950:31224":{"id":"2:13950:31224","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12471:1765","crate::ops::IndexMut":"2:3608:3693","str::slice_unchecked":"2:13949:31223"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:31225":{"id":"2:13962:31225","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45094:9336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13937:26910":{"id":"2:13937:26910","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13140:9326"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13949:31223":{"id":"2:13949:31223","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12471:1765","str::slice_mut_unchecked":"2:13950:31224","crate::ops::Index":"2:40375:3692"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13961:27786":{"id":"2:13961:27786","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45084:3809","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13984:25577":{"id":"2:13984:25577","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13408:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13999:25583":{"id":"2:13999:25583","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12465:490","str::splitn":"2:13996:25581","self::pattern":"2:13618:9322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44952:9309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13954:25574":{"id":"2:13954:25574","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13953:25573"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13990:31226":{"id":"2:13990:31226","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13618:9322","str::split":"2:13981:25575","prim@char":"1:12465:490","`DoubleEndedIterator`":"2:8516:133","str::rsplit_terminator":"2:13993:31227"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44880:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14061:3613":{"id":"2:14061:3613","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5153:3613"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45138:3614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:31936":{"id":"5:5726:31936","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2859","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2859","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13932:31220":{"id":"2:13932:31220","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13947:25546":{"id":"2:13947:25546","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13945:25545":{"id":"2:13945:25545","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:14056:26746":{"id":"2:14056:26746","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37244"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14017:31230":{"id":"2:14017:31230","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13618:9322","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::match_indices":"2:14014:31229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44998:9338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14020:31231":{"id":"2:14020:31231","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14049:31241":{"id":"2:14049:31241","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13579:148","`FromStr`":"2:13578:2846"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13578:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13578:2846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14040:31238":{"id":"2:14040:31238","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14054:24847":{"id":"2:14054:24847","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13970:25589":{"id":"2:13970:25589","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13993:31227":{"id":"2:13993:31227","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13618:9322","str::split":"2:13981:25575","prim@char":"1:12465:490","str::split_terminator":"2:13990:31226"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44898:9341","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13996:25581":{"id":"2:13996:25581","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322","str::rsplitn":"2:13999:25583"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44934:9311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14043:31239":{"id":"2:14043:31239","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:31939":{"id":"5:5741:31939","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5743:3837":{"id":"5:5743:3837","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14028:31236":{"id":"2:14028:31236","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13644:9317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13931:31219":{"id":"2:13931:31219","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14051:24842":{"id":"2:14051:24842","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2506":{"id":"0:0:2506","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use core::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use core::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.62\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:2501"],"is_stripped":false}}},"2:13959:28626":{"id":"2:13959:28626","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13960:28423"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45104:9325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13981:25575":{"id":"2:13981:25575","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13618:9322","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::split_whitespace":"2:13959:28626","str::rsplit":"2:13987:25579"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44830:3813","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5733:31938":{"id":"5:5733:31938","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13939:350":{"id":"2:13939:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13940:25547","`u8`":"1:12484:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13958:22136":{"id":"2:13958:22136","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44816:3812","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14008:2752":{"id":"2:14008:2752","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13618:9322","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::rmatches":"2:14011:31228"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:45034:9339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14031:31237":{"id":"2:14031:31237","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13951:25569":{"id":"2:13951:25569","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13953:25573","str::split_at_mut":"2:13952:25570"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14058:26748":{"id":"2:14058:26748","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:37244"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13928":{"id":"2:13928","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13929:1024","2:13930:2886","2:13931:31219","2:13932:31220","2:13934:31221","2:13937:26910","2:13938:31222","2:13939:350","2:13940:25547","2:13941:25543","2:13943:25544","2:13945:25545","2:13947:25546","2:13949:31223","2:13950:31224","2:13951:25569","2:13952:25570","2:13953:25573","2:13954:25574","2:13956:28517","2:13957:28555","2:13958:22136","2:13959:28626","2:13960:28423","2:13961:27786","2:13962:31225","2:13963:28518","2:13964:25587","2:13967:25588","2:13970:25589","2:13973:2928","2:13977:2885","2:13981:25575","2:13984:25577","2:13987:25579","2:13990:31226","2:13993:31227","2:13996:25581","2:13999:25583","2:14002:25585","2:14005:25586","2:14008:2752","2:14011:31228","2:14014:31229","2:14017:31230","2:14020:31231","2:14022:31232","2:14024:31233","2:14026:31234","2:14027:31235","2:14028:31236","2:14031:31237","2:14034:3483","2:14037:25590","2:14040:31238","2:14043:31239","2:14046:31240","2:14049:31241","2:14051:24842","2:14052:26743","2:14053:24846","2:14054:24847","2:14055:24848","2:14056:26746","2:14057:26747","2:14058:26748","2:14059:31242","2:14061:3613","2:14062:31243"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5742:31940":{"id":"5:5742:31940","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2859","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2859","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:2886":{"id":"2:13930:2886","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13956:28517":{"id":"2:13956:28517","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12465:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44800:9329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14034:3483":{"id":"2:14034:3483","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13963:28518":{"id":"2:13963:28518","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45122:9323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14062:31243":{"id":"2:14062:31243","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5150:31243"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45147:9334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:31937":{"id":"5:5730:31937","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13953:25573":{"id":"2:13953:25573","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13954:25574"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13973:2928":{"id":"2:13973:2928","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13957:28555":{"id":"2:13957:28555","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12465:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44806:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13964:25587":{"id":"2:13964:25587","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13977:2885":{"id":"2:13977:2885","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14055:24848":{"id":"2:14055:24848","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14024:31233":{"id":"2:14024:31233","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:31232":{"id":"2:14022:31232","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:2501":{"id":"0:74-20:0:2501","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[248,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:2501","glob":true}}},"2:14037:25590":{"id":"2:14037:25590","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:9322"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13934:31221":{"id":"2:13934:31221","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13932:31220"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:31936","5:5727:9658","5:5730:31937","5:5733:31938","5:5741:31939","5:5742:31940","5:5743:3837","5:5744:24844","5:5745:24845"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:14027:31235":{"id":"2:14027:31235","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:9658":{"id":"5:5727:9658","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13943:25544":{"id":"2:13943:25544","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14002:25585":{"id":"2:14002:25585","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13938:31222":{"id":"2:13938:31222","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:14053:24846":{"id":"2:14053:24846","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13854:20546":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"9:355:16241":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:9382:22848":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:1123:30840":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:39027:9682":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12762:17781":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:23577:28425":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:667:17532":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:12198:9310":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15050:21099":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:12489:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:14001:20556":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:1507:11327":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6144:17370":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:7577:15610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7431:11452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6462:15164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:42942:9758":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:2496:3761":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12992:17785":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:23023:4052":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"11:123:33022":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11075:34179":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:351:33005":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:33062:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:39716:9685":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:44776:9335":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:12491:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11026:28174":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:45550:9804":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:42055:3840":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11864:17650":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:8290:14645":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:7448:15601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12122:17677":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13610:17586":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:8105:17449":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:44816:3812":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:680:22084":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5311:14440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:47623:28410":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:8284:14644":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:651:34288":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6480:15166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:7332:10307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:904:2891":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:7518:15606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11553:17615":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5676:14480":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:2366:16353":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:4873:17003":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14358:21055":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14547:21066":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:473:10426":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11851:17651":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7368:3950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7969:17440":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:14520:21064":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11173:34031":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:6232:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:45574:9802":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8281:3824":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:1158:3657":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:45122:9323":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12280:17764":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:34701:9675":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6740:15188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:1489:11324":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8151:17451":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:12480:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:2295:30448":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:11015:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:8931:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7548:2891":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:2545:33029":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:23816:28485":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:40555:9397":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:23376:4176":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:11055:3785":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:8732:3957":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:10479:3975":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:40379:9686":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6638:15176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10963:27694":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2684:16446":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12347:17767":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:7414:11454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:47721:4098":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7192:17417":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5288:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:45264:9355":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:23871:28624":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:7340:22128":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:2137:3655":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:894:3641":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:589:28532":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4890:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10115:17535":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:1888:3644":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:15701:21831":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:7487:15605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3403:3834":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3576:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:23329:2629":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:4827:22572":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:45828:29609":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:8457:2857":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14997:21095":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:5575:9278":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:31847:9451":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:41610:9636":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:2406:17649":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:4997:3902":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:16145:21866":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:15439:21818":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16613:20544":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12044:17675":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:3110:16463":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:41413:3748":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"16:5742:17362":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4404:16649":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:16494:20540":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:47289:28492":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:12465:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:43930:28623":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:4924:9415":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6521:15167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:44848:9307":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:16507:20541":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:16668:22045":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15946:21853":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3668:24756":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3310:24632":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:45635:9826":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5670:14479":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:8233:17456":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13385:17575":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:43157:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:3567:2855":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:881:3653":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:386:3610":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:8546:17463":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:48168:9230":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3391:9670":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9161:3947":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:23758:3880":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"11:396:33013":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:7350:15599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:23665:28275":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:1584:11335":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10784:33710":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:7337:17422":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12673:17797":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:1108:3656":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:45356:9358":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47996:4116":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43651:2803":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15852:21844":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12931:17582":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8758:2837":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:4311:24414":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11377:27568":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:96:22068":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:16399:21885":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:2533:33028":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:485:10428":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:1898:9568":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"17:16132:21865":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:2112:9599":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:3817:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"9:328:16281":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:5635:3963":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:45441:9343":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:14821:21083":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10394:17544":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:3304:3659":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:14269:21051":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:3330:3660":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:553:10435":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:22592:4050":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"11:1580:16351":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7938:17437":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11026:34268":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13041:17827":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:9425:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"14:202:9363":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13838:20545":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:41566:28547":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23915:28530":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:12234:17761":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5107:14419":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41339:9437":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:10979:22878":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:11209:28695":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:2718:3823":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:9234:4009":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41202:9438":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2793:3825":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:6046:3644":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"18:481:22090":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:14346:17771":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:14773:21080":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:23700:28314":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15679:21829":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:2880:16455":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:2029:3793":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:11958:17648":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"9:236:2838":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:42040:3993":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:12042:9314":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2772:16450":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41215:9440":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43148:2891":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:6832:3998":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6716:15185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:3854:17748":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:15963:21855":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:43181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5217:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6723:15186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:47549:28508":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"11:2466:3645":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:1586:3643":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:14612:21071":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5570:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15739:21834":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:7556:3665":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:5477:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10031:17533":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:2331:3753":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4914:14398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10516:17548":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4957:14403":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8503:3841":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6914:17405":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6381:15097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43255:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:41840:9643":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:5408:28909":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15844:21843":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42871:2891":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4816:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8699:3899":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:13108:9770":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8900:2843":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:16209:21872":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:31447:9589":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:16812:22056":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:8448:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1630:3645":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13322:17572":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5271:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6625:33130":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:8343:16180":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:14140:20566":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:15573:21824":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11579:17613":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6680:17389":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11358:17594":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12095:17676":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:23221:2629":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:6919:9645":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:6935:30840":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:48017:4137":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7542:33435":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:9174:3971":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13909:20549":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11163:17563":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:4018:3861":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6658:17388":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10776:3832":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:39137:9684":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:47190:4135":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:7628:30398":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:7119:28538":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:7316:11280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41176:9439":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:670:22083":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:16159:21867":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:1635:3658":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:15939:21852":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5641:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:1619:2842":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13491:17580":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7789:33434":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"15:327:16388":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:563:22095":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1569:11334":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11329:22288":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:538:10433":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:4844:16997":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:1703:11346":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5085:17077":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:23937:28550":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:14708:21077":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:3802:30148":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:44806:9328":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:2266:30921":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:8014:15982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:46752:4094":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:1117:3657":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8254:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:47975:4082":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:32:16197":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11630:17618":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:5012:2818":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8036:3598":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4569:3913":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:31462:2812":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6391:4192":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:4929:17013":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:8179:17453":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11515:17630":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:9726:9318":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11566:17614":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5450:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:4225:3890":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11421:17597":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:22902:30206":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:45554:9806":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:16642:22043":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:43072:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"16:3141:16465":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:912:3642":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13570:17584":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41548:9631":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:13124:9772":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:5998:3990":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15557:21811":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:317:33370":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:31409:3673":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:5127:14421":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12851:17814":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44789:9332":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:4570:28646":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:4211:3888":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:40544:2962":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7168:16378":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:15864:21845":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:3677:3777":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"9:445:16225":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:40375:3692":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:8978:28704":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:45235:9353":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:13692:9346":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:8199:16144":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:13644:9317":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:4332:3793":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11275:3971":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:282:30840":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:7292:30877":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6970:17408":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8289:3678":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1524:2842":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12860:17815":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:7758:9746":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43092:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:16684:22046":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:14845:21085":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:23849:28489":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:929:3663":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:1049:3656":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:7114:28531":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:4152:16489":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:43292:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11386:17595":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:42605:3851":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"14:31:16359":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10597:17550":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:24389:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:1626:3644":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:3338:3658":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3772:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5649:17342":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:40487:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6573:17385":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12108:17706":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"13:229:33036":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8588:3849":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13983:20555":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:6584:4195":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:13757:20541":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:10998:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:22335:30203":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:6462:17384":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:40429:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:9447:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4947:14402":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:23734:3866":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:842:3650":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:38972:9681":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13361:17574":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:10392:3709":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:12776:17812":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10803:3812":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:8711:17471":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:10285:22311":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"11:2566:2845":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:45582:9825":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:10368:17543":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:16008:21860":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:6876:17402":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:44715:9286":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6866:17401":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:4636:9404":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:23456:28264":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:635:34304":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2328:3752":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11475:17602":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:11577:24693":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:6421:17382":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:2704:16447":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2620:16443":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:40537:9688":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5488:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:8255:14640":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6123:17369":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:45849:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:33037:28668":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:10823:17557":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3620:3775":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"11:2349:3656":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:11795:22671":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:10734:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:4171:3886":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:8137:17450":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15731:21833":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7361:15600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:6708:15184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:11686:2629":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"1:9438:3793":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11065:17561":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:23197:4183":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:47798:4070":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:8066:17447":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:3579:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:3014:16461":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:3834:16470":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15905:21849":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6738:33413":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:6410:9626":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6640:17387":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:46867:4101":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7980:17441":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:785:3643":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:6904:17404":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:34288:4041":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:26789:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:12478:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:973:3650":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:6599:15172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:48043:9221":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:47076:4114":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"10:44:16335":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:43665:2804":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:0:2644":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:3608:3693":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:42920:2626":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:6770:15192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:48138:9228":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5255:17109":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:12437:3623":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12035:16343":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13181:17830":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:113:22069":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43960:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43479:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1932:3716":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1657:11341":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:11807:22274":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:7745:3731":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:10779:3834":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:14243:29153":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"6:6473:15165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:23371:4178":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:46995:4134":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:889:3662":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6623:15174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9195:2842":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:7980:9612":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:12004:9302":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:996:3653":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:48230:9232":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9217:4011":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:472:17530":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:12077:9307":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6437:15161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:43658:2802":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:11050:3719":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:3551:3674":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44702:9285":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6111:17368":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:40331:9258":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:41816:3811":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:15351:21814":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15973:21856":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:33026:2961":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:2467:16436":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5405:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:47304:4097":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43027:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"6:4842:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:46899:4113":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10696:17553":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44980:9337":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:16786:22054":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:14299:21053":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"14:220:16369":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:9211:2891":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"14:7:16359":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6777:15193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:15183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:22580:2629":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12359:17768":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12711:17811":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11963:3859":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"14:214:16368":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:44406:28468":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:15121:21104":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"18:521:22089":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:583:17531":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:2816:9446":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:1401:3655":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11232:17602":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:15136:17582":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5648:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:4575:30847":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:15:2755":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4899:3945":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:12485:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:9369:17431":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:44952:9309":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5603:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4937:14401":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:16750:22051":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:7391:11469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40392:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10928:17559":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11678:17611":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:16323:21879":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41510:9624":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11042:3946":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"17:15496:21820":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:4120:16480":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:45138:3614":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8201:2964":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:6542:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11309:17566":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"14:0:2642":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:45807:4190":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:1623:2891":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10534:17361":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:11835:22138":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:3126:16464":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13119:17831":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:22466:4049":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:4349:3918":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:41461:3773":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:40447:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14127:20565":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10487:17547":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:16632:22042":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:15602:21826":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:3503:17725":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:14348:29152":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:33044:2815":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:10705:24699":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13692:17868":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:47399:4115":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5349:14445":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:2585:30832":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:11007:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3338:9648":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5629:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7075:17415":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:7748:22668":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5471:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13471:17579":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:15689:21830":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8228:3770":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6526:15168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:43329:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2206:9710":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:80:22067":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14832:21084":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12699:17810":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:10427:28705":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12983:17821":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12492:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6173:17372":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6443:15162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15010:21096":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:479:10427":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:1370:3654":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6564:15171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:16187:21870":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1002:2842":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:45815:4191":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:45578:9803":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:7402:24720":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:8302:14647":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:7044:17413":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:16775:22053":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:10729:17554":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:5635:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:11134:24712":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3461:9678":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11706:17638":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"12:0:2641":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:1880:2842":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:16179:21869":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13890:20548":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13781:20542":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11155:24711":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:11346:28694":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"17:10442:17546":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:42921:2793":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:4113:3883":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:45600:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:45147:9334":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13095:17833":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:22379:30212":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:967:3649":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:6494:4005":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:8399:9623":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1711:11347":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3602:3776":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6098:17367":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11432:17598":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:3308:16466":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:22381:30199":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4414:3920":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:9297:3991":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:14220:21050":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:10753:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2215:2965":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:9576:2791":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:47888:4076":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2013:2796":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:23649:28251":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:12479:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:31473:28387":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:9756:24470":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:37096:9680":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22393:30210":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:47528:4130":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:9356:22669":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:4582:28647":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9465:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5586:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6631:15175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:42033:9614":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12476:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:2323:3655":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:33060:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11124:33927":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6942:17406":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:4990:2816":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:5285:25118":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8911:2844":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10274:17540":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:43891:28543":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:12083:24709":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:8673:3946":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:12716:9296":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:9452:4000":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:42649:28499":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:7539:3675":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13547:17583":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:23115:4181":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:6531:10032":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:3296:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6337:17378":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:3695:16469":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11952:17661":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:2368:30455":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5196:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:7864:9445":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43968:2812":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12962:17819":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:6890:17403":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:659:22082":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:46913:4061":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13537:17582":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:12059:16392":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:8209:17454":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:44636:9297":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:8503:17461":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:14283:9634":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:44800:9329":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5295:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7554:17430":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12416:22897":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:1696:3909":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5025:14412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12583:17724":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12260:17763":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:3446:3830":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"11:2551:33025":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:44665:9300":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11465:17601":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:11923:3860":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:46980:4128":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41619:9627":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12798:17813":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12204:17711":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:3048:16462":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8031:3596":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:41403:3812":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:1230:30830":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:8058:17446":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:5305:17838":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:23159:4182":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:2348:32035":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:3851:3856":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4221:3889":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:12466:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:44757:9305":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4896:14228":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:1632:11339":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:41691:9629":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:1064:16347":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:2162:3679":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:12483:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:2648:3822":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8273:24633":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:4733:3600":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:4119:3882":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:2796:16451":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:2380:2842":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:8265:3639":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:7588:3681":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:22868:4056":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15418:21816":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:1884:2891":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:5884:4006":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6822:17397":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:11971:17647":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:12481:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:22484:4050":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:16332:21880":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:4694:16916":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6611:15173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7806:22201":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:599:3593":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:984:3651":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6852:17400":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:1220:17617":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:0:2646":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:1589:11336":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:6070:3624":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:22464:2629":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:4163:3885":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:506:16407":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12524:17728":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13398:17576":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:10988:3772":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:9321:3590":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:10570:24469":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"18:515:22092":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"15:0:2643":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5316:25118":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:45034:9339":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:5579:9279":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:706:9320":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:598:34287":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:3944:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4333:3916":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:12170:9309":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:948:3645":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:8031:15983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3403:9254":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:15549:21823":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:586:10440":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:15714:21832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12920:17817":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8806:2838":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:5318:17126":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:13639:9319":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:5449:17165":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:6439:22678":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:5530:30840":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:10411:24400":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:12409:17769":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:13624:9318":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12066:17700":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:45839:4188":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:12482:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8741:3956":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:10662:3970":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:7949:17438":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:41632:9637":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:12484:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:1005:3654":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:11149:24706":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12469:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11878:17563":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:44998:9338":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:2403:9259":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:8212:3983":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:809:3645":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:16714:22048":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12869:17578":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:23343:4177":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14573:21068":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:623:34302":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4984:14407":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4177:3887":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5562:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5341:14444":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:45566:9807":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6823:15195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:16728:22049":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:8368:22667":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4805:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:44191:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:48054:9222":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:6829:3997":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13222:17568":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:16283:21876":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11058:3966":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:10296:17541":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12906:17807":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:3851:3678":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:6216:4005":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6188:17373":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8096:3622":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:15036:21098":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:45744:28539":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:12008:17702":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:7341:15598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11653:17616":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:45865:9244":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:44934:9311":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8629:3922":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12605:17563":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:46831:4066":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:954:3646":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:5689:17359":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11073:22896":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11900:24405":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:5206:1333":{"crate_id":1,"path":["std","path"],"kind":"module"},"6:8308:14648":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12787:17777":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7714:3638":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:6084:17366":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7386:17425":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7907:17435":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1871:3699":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:41538:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14947:21092":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6731:17392":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:16198:21871":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:45407:9360":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13635:17866":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:4956:17017":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14963:21093":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11788:17667":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14902:21089":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:4135:3644":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:4149:3884":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6605:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11222:17564":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6544:15170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:873:3652":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:14531:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:11852:24402":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:726:30364":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:2860:16454":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:2121:3654":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2666:9700":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:3699:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:48115:9227":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:41528:9630":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:8829:2839":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4362:3919":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10778:17555":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"11:2400:3641":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:48191:9231":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13515:17581":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:2840:16453":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:12052:25121":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3916:3859":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:14627:21072":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:42999:9762":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:14666:3667":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12149:17673":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:1140:16349":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11005:25135":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:1415:3657":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:47272:28522":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:15876:21846":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:42064:9617":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:212:9261":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4594:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:14405:21058":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:13578:2846":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:3789:9401":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5301:14439":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:8117:3719":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:5265:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:43017:9761":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:16036:21863":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:16656:22044":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:578:10439":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:14611:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:23235:4186":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:3933:3645":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12570:17723":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9361:22689":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:14796:21081":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:6680:15181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:16555:22041":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:5224:17101":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:15760:21836":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:3441:16467":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:2208:9711":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:8622:3853":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12432:22681":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:8565:17464":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5395:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6502:16404":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:15106:21103":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:1900:3658":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8260:3640":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:41580:9634":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10735:2798":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:45418:9361":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6368:17379":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:6900:4004":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:13854:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4829:14391":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5482:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15887:21847":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:7604:15612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5741:3966":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12625:17731":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:2256:3586":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13427:17577":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:45052:9340":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1684:11344":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:41468:9285":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"13:110:33045":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:33804:9668":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5007:14410":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4902:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15586:21825":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:47205:4136":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:7818:22196":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:4492:3793":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:4810:16986":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22347:30203":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:1907:3709":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:7656:2891":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:43403:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:8206:3771":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:3456:3645":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:3086:30835":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5088:14418":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11821:22291":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:687:3619":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:16520:22040":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5507:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:23882:28556":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:14043:20559":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:881:3867":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:517:10431":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5551:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3381:4042":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11527:17624":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4815:3887":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:299:33015":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:7956:24714":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:15919:21850":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44576:29281":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:16822:20551":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:39:3694":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"10:0:2639":{"crate_id":10,"path":["adler"],"kind":"module"},"1:3539:3840":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:4829:22574":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:8403:9622":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:896:33344":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:31820:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:11050:3783":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:608:34292":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:14375:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:8261:14641":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:43946:28545":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:12941:17808":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:5165:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:8249:14639":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:15981:21857":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:7929:28789":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:41146:9405":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:48063:9223":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13205:17567":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:12486:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"20:0:2501":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"17:16595:20543":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"5:1605:3647":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5139:14422":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6159:17371":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"14:187:16367":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15812:21840":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:6565:4194":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"14:160:16359":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:11846:24409":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:430:33031":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:41589:9635":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:33119:2858":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:45749:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:9150:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"9:176:16330":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:9315:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:13266:17569":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12335:17766":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:16832:20553":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:7469:15604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:6711:3993":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7508:33455":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:10241:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14327:17772":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:581:9451":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7883:17434":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:1893:3645":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7305:17421":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7424:17427":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:6588:17386":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:15540:21822":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:8626:17468":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8844:2840":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"15:288:16383":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45558:9805":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:41651:9639":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"11:1105:16348":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12550:17727":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8634:3923":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12464:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:32984:3973":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46846:4096":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3659:2798":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:4165:30840":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:2802:9252":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:22472:4053":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:16761:22052":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:3364:3661":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8640:3912":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13082:17564":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:5319:14441":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:15777:21838":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"9:0:2638":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5113:17082":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:9430:3992":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:9457:4001":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:297:2859":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:44213:28509":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:14099:20563":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11016:17560":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"13:0:2635":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:5809:3967":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:8437:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:47120:4068":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5060:17075":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:5417:17156":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:3556:9245":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:6957:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:5429:9273":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"6:4881:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6808:17396":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7058:17414":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:8569:2856":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:698:22086":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:34016:9671":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:7462:17428":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:14692:21076":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13871:20547":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14483:21062":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:6763:30840":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:5224:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:16171:21868":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10843:17558":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:47251:28411":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:45214:9352":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6876:15222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:3538:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:46814:4060":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12216:17712":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:545:10434":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:3309:30917":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3573:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:22890:4046":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13958:20553":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:5128:3944":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:7094:9385":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12163:17708":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:12749:17782":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:47416:4063":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3343:30912":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:41244:3614":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13719:17869":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:7108:9628":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:13157:17825":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:43553:3988":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:16362:21882":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:538:22094":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:16311:21878":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:16377:21883":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1539:3641":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:1085:33017":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:42589:3850":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4941:3900":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:663:2797":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:15931:21851":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6731:15187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:43051:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"16:6064:17365":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15989:21858":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:47917:4110":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:5441:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8016:3611":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:14917:21090":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:47490:4075":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:39082:9683":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:44221:28541":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5069:14417":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:44166:3784":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4939:3897":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:41557:9632":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15655:21827":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:7838:17433":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:2820:16452":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:41140:3614":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:23904:28594":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:14031:20558":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4997:14409":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:16264:21875":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"9:390:16226":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:5145:3793":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:5460:3842":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:3720:3641":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:630:3612":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43440:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:1616:3648":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13818:20544":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:2440:3644":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:5441:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:23286:4187":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:3405:3835":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:708:3647":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12470:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:1514:11328":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:44830:3813":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:14859:21086":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:33151:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13306:17571":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:8940:9621":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:22364:30208":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5249:14432":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8363:25130":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:9773:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:43985:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:491:34303":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8240:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7212:16377":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:47158:4080":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:1907:3659":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1577:3642":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:2724:16448":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:7578:3666":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:16218:21873":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"15:306:16384":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14084:20562":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44737:9306":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:1652:3661":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:46966:4079":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:43140:3641":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:1085:3654":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3303:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40728:9456":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:42911:2790":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:23779:2629":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:47091:4062":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:2920:16457":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:643:34288":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:6765:15191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:15753:21835":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:42026:28540":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5151:14423":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14640:21073":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:8298:17458":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:6407:24719":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:41376:9746":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14599:21070":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:44423:9288":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:10822:3595":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:8165:17452":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13145:17826":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:6713:17391":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9328:22135":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:11448:17599":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:22362:30213":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:44898:9341":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:41225:9441":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:6844:2891":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6691:15182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:3042:24464":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"14:40:20542":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6652:15177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4233:3891":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:44655:9299":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:14019:20557":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:7500:24410":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:7539:15607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7016:17411":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:1555:2891":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15077:21101":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:1914:3660":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:4766:16965":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"11:102:33030":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:5502:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:7454:15602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:7648:2891":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5230:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:1494:11325":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:5375:14448":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13193:17829":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:6296:9633":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"9:422:16227":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:3520:9257":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:42789:3854":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6659:15178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6794:17395":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:6882:14303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:23727:28430":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:5727:17361":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4875:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8571:3809":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13055:17620":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:13354:9812":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:34489:9672":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:1564:16350":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:532:3291":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:47141:4074":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:4855:9407":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13169:17861":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:328:33012":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:42074:9618":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:44419:28493":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6953:17407":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12952:17818":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:11965:9313":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12897:17816":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:5621:3962":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:7612:2891":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:14886:21088":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:23593:28257":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:491:10429":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11294:9825":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:4921:14399":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2990:16460":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:45562:9809":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12723:17784":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:23747:3865":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:42951:3602":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:41391:3730":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10663:17552":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:15769:21837":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:4781:2814":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:33030:17470":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:5144:17090":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14586:21069":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6408:17381":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6813:15194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2590:16442":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3783:9402":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13921:20550":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12736:17783":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8373:3826":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13014:17837":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:14574:4189":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:6843:17399":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:23249:9700":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"2:45876:9242":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12648:17729":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44676:9287":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9442:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6269:17376":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:48100:9226":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6749:17393":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:34874:9676":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"9:480:16224":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5019:14411":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:45459:9344":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3800:30840":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13554:17590":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:23562:28302":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2668:9701":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"5:7773:3732":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:42880:2789":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11606:17563":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:1930:3715":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:14416:21059":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:3085:2952":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7716:33123":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:4267:16535":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:31441:9283":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:3376:4040":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6837:17398":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:42827:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:33061:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:42767:3853":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:1551:11332":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:47009:4048":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11733:17640":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:6183:10024":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5186:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:4702:9418":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:4981:9416":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:4851:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:8223:17455":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7521:33497":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:7586:15611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:3298:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:2966:16459":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11114:17562":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:43672:2805":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:10572:2826":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13798:20543":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:1521:11329":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:33149:9253":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:14152:20567":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:3088:30837":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12487:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6440:17383":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:41187:28305":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:47843:4104":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:12463:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4341:3917":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:10798:2803":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:4300:3793":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:45428:9362":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:23021:2629":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:570:10438":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:12488:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8583:3857":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:3687:3804":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:7822:9364":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5533:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3889:16471":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15315:21813":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5051:14415":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:8296:14646":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5877:4005":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:42959:9760":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:9261:4010":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6419:15160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13970:20554":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:4189:2891":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:12156:9311":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6672:15180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:546:33253":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:9187:3972":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:42082:9620":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:5105:3942":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:7731:2789":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:3096:30839":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4990:14408":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:4056:3644":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:11291:34237":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:43918:28498":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12319:17743":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:12472:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:10141:17536":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6902:15223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3854:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:45756:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:5020:3896":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:45329:9357":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:322:33429":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:6288:3793":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:8008:15981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:6534:15169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:14284:21052":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:47349:4103":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5179:3908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11457:17600":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:11926:17654":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12537:17726":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:46799:4100":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:523:10432":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:42755:3862":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:45250:9354":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:23685:28291":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11998:17668":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11818:17652":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2498:3762":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:11831:17620":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:23247:28877":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:3313:24602":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:1920:3661":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14975:21094":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"14:165:16360":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:7830:22199":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:14507:21063":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:3344:9650":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:45113:9324":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6028:17363":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:4902:17009":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:8267:14642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13349:17573":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:2378:17689":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:9310:22662":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:48089:9225":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8512:3774":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:8330:14650":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:45888:28625":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:10958:24882":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:2480:3757":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:42863:3641":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:3092:30836":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11592:17612":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3307:28171":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:534:3586":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:22325:9451":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47511:4081":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:7844:22122":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:12371:17722":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8015:2629":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12249:17762":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6790:32475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6042:17364":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8082:3621":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:41497:3810":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1641:3659":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:22413:4054":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10630:17551":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:985:3664":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:1500:11326":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2550:16440":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5057:14416":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:754:22088":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:740:3648":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:4241:16532":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13006:17822":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12176:17709":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:9586:3715":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:2415:16405":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:7901:17532":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:925:3643":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:5043:2817":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:15785:21839":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:9751:3771":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:1984:2795":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5241:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8273:14643":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:42567:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"8:0:2637":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12306:17765":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"18:765:22081":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:12040:9238":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:2530:16439":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47173:4129":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12448:22890":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:4495:3921":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"11:685:3641":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:23838:28516":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:12066:16392":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14750:21079":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7267:30880":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11720:17639":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:3569:3793":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:41826:9642":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:34556:9674":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5655:3964":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8102:3718":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:12251:24717":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:7703:2845":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8648:3858":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:11347:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:11339:28696":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:14460:21061":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15896:21848":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:7563:15609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6302:17377":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7990:17442":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12082:17678":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10246:17539":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:613:34291":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:2148:3656":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6205:17374":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:6162:3987":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2660:16445":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6758:15190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:8218:3772":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1667:11342":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11034:28177":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:2816:32026":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12687:17809":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7030:17412":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:16084:21864":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13662:17867":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:5593:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7223:17418":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2506:16438":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:9276:4013":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15621:21810":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:8014:17444":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:4934:2815":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:1675:11343":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:10789:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:5195:3952":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10549:17362":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4943:3901":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11985:17701":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:3024:2629":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:4562:3793":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"5:7118:9386":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1643:11340":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:48074:9224":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:13408:9313":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:1601:16352":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6696:17390":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5387:14450":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44645:9301":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12191:17710":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:34422:9673":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13945:20552":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12028:17704":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5622:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:41667:9640":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:990:3652":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"0:0:2506":{"crate_id":0,"path":["thiserror"],"kind":"module"},"2:9613:2792":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:33051:9738":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:11699:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14312:21054":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"17:16026:21862":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:7832:9365":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12225:17713":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:507:24701":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7891:3645":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:10796:2802":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5205:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:2754:3814":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:0:2640":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:2482:3485":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11401:17596":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:5379:17141":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:13331:9815":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:3720:17730":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:45393:9359":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:6751:4002":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:698:2891":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6449:15163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4970:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:16241:21874":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2748:16449":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:679:3617":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:22590:4051":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:16701:22047":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:14335:17770":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14533:21065":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:46951:4073":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:7729:3601":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:7758:2899":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:8353:16181":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5381:14449":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:15286:21812":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:23926:28527":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:9501:4039":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:7471:17429":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:13140:9326":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:3866:3679":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:35047:9677":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:47059:4108":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:2209:3757":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:6219:3793":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:23300:9700":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"1:3913:3860":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6493:15125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:8483:17460":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1727:11348":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10097:17534":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:45084:3809":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:7433:22916":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:573:34288":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13733:20540":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8654:3915":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"11:1674:33020":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12471:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:41642:9638":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5494:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:1563:11333":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:2732:9787":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10793:17556":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"2:43901:2812":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:9144:3970":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:44728:9303":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:35220:9679":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:2570:16441":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:5812:3969":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:23641:28515":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:43132:2842":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:13294:9813":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:40295:9400":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7159:17416":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:15531:21821":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8054:3595":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:8267:17457":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1690:11345":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:718:22079":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:5548:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:14114:20564":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:434:33032":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:16341:21881":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:8541:3810":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:11731:2838":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:564:10437":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5541:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4902:3924":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:45774:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:1597:11337":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7416:17426":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:22863:2629":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:5117:14420":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15997:21859":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:8516:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1386:3656":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:15953:21854":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:8319:14649":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:46782:4095":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:8152:3839":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:3308:2820":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:12754:9293":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:41259:9434":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:3448:3831":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"11:835:3649":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:575:3591":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:1023:3655":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:9203:4014":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10939:3948":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:682:3618":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46934:4067":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:6886:4003":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:4860:9408":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5366:14447":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11281:17565":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:14807:21082":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14393:21057":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:5223:9427":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8677:3950":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:14738:21078":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:16739:22050":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:45546:9801":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12816:17579":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:9744:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:40407:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:42621:3852":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:14560:21067":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:1595:3646":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41252:9333":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5282:14436":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1647:3660":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6781:17394":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42733:28322":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:14652:21074":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:13618:9322":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:41423:3747":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1:2521:3768":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:12468:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:7919:17436":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5172:17095":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10564:17549":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:10806:2806":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:47378:4109":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:497:10430":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:45094:9336":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:41332:9436":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:7308:10477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13592:17585":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15475:21819":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:8494:3839":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11090:3972":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:40467:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:23509:28315":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11805:17653":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:42049:9616":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:6025:3958":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:7986:10385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:1785:30840":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:41681:9641":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:10413:25131":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:7495:33093":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:8528:17462":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5114:3943":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:10167:17537":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5682:14481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:2301:3654":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:8934:3671":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"10:36:33003":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:11483:28691":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:12056:17705":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:0:2645":{"crate_id":17,"path":["object"],"kind":"module"},"17:15431:21817":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:559:10436":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:1250:30816":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:23860:28391":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:2900:16456":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:11017:3774":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:3350:3832":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14375:21056":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11801:3976":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:48153:9229":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5462:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10977:34222":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:8636:17469":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6389:17380":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:4372:2842":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:8028:17445":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:4210:3641":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:47594:28491":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:5870:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:42807:3855":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:7598:30919":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6917:15224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:10800:2804":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7959:17439":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7358:17423":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7568:3644":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:2486:16437":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:7185:4045":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11503:17603":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:23627:28245":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:3025:9455":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12392:17742":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2335:3754":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7372:17424":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12135:17707":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:2227:17655":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:2508:3767":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5348:17133":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11487:3749":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11539:17620":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:1869:3698":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:7907:9382":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:1339:17625":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5428:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5325:14442":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8551:3811":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:8000:17443":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7807:33322":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12826:17778":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:45752:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:5304:3987":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8521:3778":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:726:22087":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12018:17703":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:1889:3645":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:41488:3690":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11617:17564":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:364:33010":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:45104:9325":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:15410:21815":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:3411:9256":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:6998:17410":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:14672:21075":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7578:17431":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4929:14400":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:830:3646":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3352:3833":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3762:9687":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:12115:9308":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5255:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:1539:11331":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:8624:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:380:3609":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6315:24696":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:689:22085":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6984:17409":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6507:15126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:34355:4043":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:3587:16468":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:10808:2807":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:10218:17538":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"9:500:16228":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6411:15159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:45129:9333":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:7401:33460":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14055:20560":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:735:22080":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11691:17610":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15090:21102":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13070:17563":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:5671:3965":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"7:79:16204":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:4780:3941":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:43366:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:1099:3655":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5357:14446":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:5520:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:4617:9251":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5036:14413":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:23827:28557":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:11262:3947":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:4680:3924":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:3987:16472":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:15024:21097":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:11897:3641":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8884:2841":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7911:22190":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12976:17820":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:44627:9298":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13028:17828":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:1530:11330":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:507:34288":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:47946:4131":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:4498:30847":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10782:3830":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:6715:3994":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"11:798:3644":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:41360:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:16297:21877":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:45766:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:10794:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4869:14393":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8577:3858":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:4184:16498":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2950:16458":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44880:9342":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:46884:4107":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:45570:9808":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10938:34167":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:465:10425":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:10802:2805":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11777:17642":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:41443:3734":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:13633:9320":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:9402:22665":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1625:11338":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:7548:15608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:2539:29198":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:6666:15179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:15829:21841":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:44182:3786":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:903:33370":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:12477:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:5282:17113":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:44747:9304":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:4529:3793":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:12490:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:531:22093":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:2640:16444":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:31179:3863":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14072:20561":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:7463:15603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:45281:9356":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:41347:9433":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11319:34044":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8564:3813":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:11922:3813":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:41236:9334":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:3777:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15641:17619":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:9483:3781":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:8096:17448":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:42855:2842":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:16798:22055":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:11902:17656":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4964:14404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:5198:17098":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:44203:2838":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10804:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:9246:4012":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:23616:3864":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6256:33259":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:15665:21828":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8558:3812":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:43218:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15160:21106":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:7797:9274":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:4702:3925":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:9349:25128":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:47222:28412":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:2228:16343":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:41365:3729":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:43516:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:2148:3678":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:3297:2842":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14872:21087":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:42846:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"2:10432:28773":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:7863:9444":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:45624:4044":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:3496:3817":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2450:16435":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:3181:2632":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:10332:17542":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:8669:17470":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"9:53:16244":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8894:2842":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:4825:22570":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:12886:17806":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:8043:33347":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:881:2842":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:11984:3861":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:772:3642":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:11421:3750":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:5478:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7765:17432":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:963:3648":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1214:30820":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4976:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:959:3647":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:12683:9295":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:13370:9814":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11757:17641":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:47038:4102":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:7128:9387":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:7259:17419":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15148:21105":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:44006:2813":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:5839:9385":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13451:17578":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:10553:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:938:3644":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"11:2420:2891":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5658:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:5044:14414":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:4983:17021":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:6717:3644":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:671:2842":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8211:3769":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:3406:9255":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15064:21100":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:22411:2629":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:41598:9644":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5709:17360":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:10968:3769":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:2435:16434":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6239:17375":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:47644:4064":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:2559:33026":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11312:3781":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:4792:14388":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:15836:21842":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11286:28180":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:5991:3989":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5420:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:8612:17467":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14438:21060":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13290:17570":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:12184:9312":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5334:14443":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:16019:21861":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10418:17545":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:5757:33397":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:8320:17459":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:14400:9460":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:23893:28537":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:14933:21091":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:2173:3680":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:41519:9625":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:3707:2842":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7350:33133":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7282:17420":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:2437:17674":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:48034:9220":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6748:15189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:10246:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12475:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:33120:9651":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:5131:17832":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:14260:9462":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"11:854:3651":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47461:4069":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:46767:4059":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:8585:17465":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:8598:17466":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:16385:21884":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:0:2636":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:41298:9435":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12293:17721":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:155:16410":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5687:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:40507:3632":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:2554:2652":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:908:33429":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"15:394:16395":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:7785:3733":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:33592:9669":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:14554:4192":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13933:20551":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:44174:28421":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1636:3677":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:11873:2842":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12840:17780":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}