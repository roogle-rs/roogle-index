{"root":"0:0:1893","crate_version":"1.0.50","includes_private":false,"index":{"2:12519:26507":{"id":"2:12519:26507","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43909:8619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:26512":{"id":"2:12516:26512","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12515:26509"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43900:8620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:28536":{"id":"2:12518:28536","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43881:8632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:20821":{"id":"2:12523:20821","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12558:21447":{"id":"2:12558:21447","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:28543":{"id":"2:12578:28543","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:28550":{"id":"2:12599:28550","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:29211":{"id":"5:5520:29211","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2221","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2221","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:29213":{"id":"5:5527:29213","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:29211","5:5521:8947","5:5524:29212","5:5527:29213","5:5535:29214","5:5536:29215","5:5537:3160","5:5538:22695","5:5539:22696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12615:28554":{"id":"2:12615:28554","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:28554"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43934:8630","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:29215":{"id":"5:5536:29215","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2221","`String`":"5:7490:251"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2221","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:21429":{"id":"2:12510:21429","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12511:21430"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:28535":{"id":"2:12509:28535","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12025:1510","crate::ops::IndexMut":"2:3077:3020","str::slice_unchecked":"2:12508:28534"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1893":{"id":"0:0:1893","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[257,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.50\")]","#![allow(clippy :: module_name_repetitions, clippy :: needless_lifetimes,\nclippy :: return_self_not_must_use, clippy :: wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:1888"],"is_stripped":false}}},"2:12487":{"id":"2:12487","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12488:875","2:12489:2248","2:12490:28530","2:12491:28531","2:12493:28532","2:12496:21301","2:12497:28533","2:12498:345","2:12499:344","2:12500:21403","2:12502:21404","2:12504:21405","2:12506:21406","2:12508:28534","2:12509:28535","2:12510:21429","2:12511:21430","2:12512:26506","2:12513:26550","2:12514:20631","2:12515:26509","2:12516:26512","2:12517:26214","2:12518:28536","2:12519:26507","2:12520:21449","2:12523:20821","2:12526:20823","2:12529:2289","2:12533:2247","2:12537:21437","2:12540:21439","2:12543:21441","2:12546:28537","2:12549:28538","2:12552:21443","2:12555:21445","2:12558:21447","2:12561:21448","2:12564:2133","2:12567:28539","2:12570:28540","2:12573:28541","2:12576:28542","2:12578:28543","2:12580:28544","2:12582:28545","2:12583:28546","2:12584:28547","2:12587:28548","2:12590:2822","2:12593:21450","2:12596:28549","2:12599:28550","2:12602:28551","2:12605:28552","2:12607:21333","2:12608:21334","2:12609:21336","2:12610:21337","2:12611:21338","2:12612:28553","2:12614:2945","2:12615:28554"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12511:21430":{"id":"2:12511:21430","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12510:21429"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12607:21333":{"id":"2:12607:21333","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12610:21337":{"id":"2:12610:21337","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:20823":{"id":"2:12526:20823","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:21301":{"id":"2:12496:21301","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11749:8622"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12596:28549":{"id":"2:12596:28549","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:344":{"id":"2:12499:344","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12036:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:8947":{"id":"5:5521:8947","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:1888":{"id":"0:74-20:0:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1888","glob":true}}},"2:12576:28542":{"id":"2:12576:28542","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29212":{"id":"5:5524:29212","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:22696":{"id":"5:5539:22696","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12611:21338"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:2289":{"id":"2:12529:2289","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:2247":{"id":"2:12533:2247","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:21437":{"id":"2:12537:21437","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12189:8618","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12019:453","str::split_whitespace":"2:12515:26509","str::rsplit":"2:12543:21441"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43617:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12540:21439":{"id":"2:12540:21439","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12005:8609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:21441":{"id":"2:12543:21441","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12189:8618","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12019:453","str::split":"2:12537:21437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43635:8603","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12502:21404":{"id":"2:12502:21404","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:20631":{"id":"2:12514:20631","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43603:3136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12491:28531":{"id":"2:12491:28531","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:345":{"id":"2:12498:345","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12499:344","`u8`":"1:12036:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12489:2248":{"id":"2:12489:2248","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:29214":{"id":"5:5535:29214","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:28551":{"id":"2:12602:28551","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:21406":{"id":"2:12506:21406","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:21334":{"id":"2:12608:21334","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39604:21300","Self::is_ascii":"2:12607:21333"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39604:21300","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:26214":{"id":"2:12517:26214","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43871:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12609:21336":{"id":"2:12609:21336","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12490:28530":{"id":"2:12490:28530","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:28545":{"id":"2:12582:28545","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12590:2822":{"id":"2:12590:2822","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12488:875":{"id":"2:12488:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12019:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:26506":{"id":"2:12512:26506","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12019:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43587:8625","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:28537":{"id":"2:12546:28537","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12189:8618","str::split":"2:12537:21437","prim@char":"1:12019:453","`DoubleEndedIterator`":"2:7571:126","str::rsplit_terminator":"2:12549:28538"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43667:8638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12555:21445":{"id":"2:12555:21445","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12019:453","str::splitn":"2:12552:21443","self::pattern":"2:12189:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43739:8605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12580:28544":{"id":"2:12580:28544","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:21450":{"id":"2:12593:21450","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:26509":{"id":"2:12515:26509","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12516:26512"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43891:8621","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12504:21405":{"id":"2:12504:21405","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12584:28547":{"id":"2:12584:28547","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12214:8613","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:21403":{"id":"2:12500:21403","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:28534":{"id":"2:12508:28534","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12025:1510","str::slice_mut_unchecked":"2:12509:28535","crate::ops::Index":"2:3073:3019"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12605:28552":{"id":"2:12605:28552","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12150:132","`FromStr`":"2:12149:2210"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12149:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12149:2210","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:28532":{"id":"2:12493:28532","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12491:28531"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12520:21449":{"id":"2:12520:21449","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:26550":{"id":"2:12513:26550","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12019:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43593:8624","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:2133":{"id":"2:12564:2133","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12189:8618","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12019:453","str::rmatches":"2:12567:28539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43821:8635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12567:28539":{"id":"2:12567:28539","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12189:8618","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12019:453","str::matches":"2:12564:2133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43839:8636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12583:28546":{"id":"2:12583:28546","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12561:21448":{"id":"2:12561:21448","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12611:21338":{"id":"2:12611:21338","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12612:28553":{"id":"2:12612:28553","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:28553"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43916:8629","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12549:28538":{"id":"2:12549:28538","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12189:8618","str::split":"2:12537:21437","prim@char":"1:12019:453","str::split_terminator":"2:12546:28537"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43685:8637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12573:28541":{"id":"2:12573:28541","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12189:8618","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12019:453","str::match_indices":"2:12570:28540"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43785:8634","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:28533":{"id":"2:12497:28533","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:2945":{"id":"2:12614:2945","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:2945"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43925:2946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:3160":{"id":"5:5537:3160","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:22695":{"id":"5:5538:22695","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12610:21337"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:28548":{"id":"2:12587:28548","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12570:28540":{"id":"2:12570:28540","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12189:8618","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12019:453","str::rmatch_indices":"2:12573:28541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43767:8633","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12552:21443":{"id":"2:12552:21443","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12019:453","self::pattern":"2:12189:8618","str::rsplitn":"2:12555:21445"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43721:8607","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8614","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4908:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:4727:3208":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:9003:26363":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:41868:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:42647:27118":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6913:14413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:123:9408":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:2833:2217":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:6086:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40303:3017":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:4849:225":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2939:8972":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:0:2023":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:2178:16420":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4686:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:40183:26759":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2860:8957":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:2172:29734":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:2644:15245":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4870:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:42920:27107":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5712:16165":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6901:16212":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:7565:23680":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40495:8927":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:12018:1002":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:42949:2201":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2173:8989":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:7904:24630":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:14100:20539":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14145:20544":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9972:16385":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:2692:29617":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1691:10638":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:7827:2323":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:5123:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:42049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:7128:16220":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:44144:8654":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47912:3449":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:4037:3202":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:504:16323":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:22429:3188":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:39356:224":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:6468:2974":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13135:19780":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:12017:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:4988:3119":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10714:16533":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:4774:15876":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:22181:26916":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1413:2205":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:5859:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10821:23433":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:614:32207":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:2463:28487":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:9571:2160":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:652:32195":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:21900:27257":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10265:16422":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10980:16345":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11215:16547":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13906:20521":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9945:16391":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4478:3234":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:829:2980":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:393:15022":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:12042:1672":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13897:20520":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:536:31088":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8803:3273":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2866:8960":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:45886:3379":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:9488:32185":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:0:2027":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:2225:30131":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:41723:2971":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9762:32183":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8791:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13890:20519":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:4362:8712":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5969:13979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6318:16185":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:8072:16250":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12034:800":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:1778:2975":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:12834:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9093:243":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:7232:2252":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6346:16187":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13215:19786":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"15:306:15180":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:2461:31001":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"9:426:15023":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6721:16206":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:9010:24188":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12576:19745":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:903:2975":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:736:20596":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:43423:8593":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2876:3343":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11381:16589":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:1140:30092":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4146:3225":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7677:218":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:1874:2157":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:9660:32189":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4549:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:21311:3361":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:4557:15803":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:3173:2205":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:7622:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2907:15256":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8158:3103":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:10060:28415":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11261:16573":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:9084:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12945:19767":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:39268:218":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:4236:2205":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:400:16322":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9521:16342":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3416:3101":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"13:226:31060":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:43413:8595":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:723:152":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:1826:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:9633:2187":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4138:3224":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13040:19774":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3244:262":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11184:3107":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:12031:801":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:1819:3042":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:2368:2974":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:9823:16371":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11910:19229":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:1869:2989":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:14378:20558":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12685:19751":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:40505:8912":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6600:16204":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:11592:26373":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44038:8650":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:836:2205":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:9623:2180":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4977:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:2339:15232":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"15:288:15179":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:43839:8636":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:32075:3276":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:5322:16136":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:2345:3082":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:44195:8656":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:7679:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:10770:20779":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3193:3155":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12196:19247":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:2614:3138":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:2596:15243":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:40171:3061":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:2284:15202":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:22921:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"15:327:15184":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10628:16483":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13778:16390":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:4801:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:629:29556":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4455:13080":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3360:3163":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12024:19235":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:5435:31435":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:5487:3268":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12554:19744":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:1444:2252":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7782:16244":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:2150:16460":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:6514:29629":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:8953:16333":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7884:16248":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1501:10619":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:41472:27088":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11407:16350":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2905:23688":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2881:15255":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2722:15248":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:4350:273":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:20989:27351":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12531:19742":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2892:8963":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:11719:9069":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:21449:3355":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:3073:3019":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:4745:15871":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:3315:15263":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5004:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:11934:19230":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9790:32190":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1664:10635":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6361:16189":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:4068:8548":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:5626:3308":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5419:16156":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10929:16496":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14173:20547":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:21190:27029":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:8925:3315":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:5418:3267":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:2238:2984":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"11:693:2252":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:46556:3409":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:7912:3147":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7990:26397":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:14042:20533":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:41386:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:12041:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6136:30887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:3565:16517":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10528:3153":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:2578:3146":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44628:8542":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:7252:2974":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:12149:2210":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:44352:9113":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13202:19785":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:1876:2990":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:7739:3046":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13422:20496":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:47950:8520":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:389:30986":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6764:10748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:10476:3137":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:2968:29560":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2195:3077":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:12029:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:11599:15188":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11201:16545":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:548:151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:43667:8638":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12437:19738":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10698:16512":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:3232:16494":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:8181:16256":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6569:16202":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:39604:21300":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7102:16219":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:10782:3097":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:40883:8900":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:3180:2989":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:9589:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:8926:16332":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:22690:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:7768:16243":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7492:16226":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11000:16500":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7582:16234":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:5068:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:10631:8603":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3160:24757":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7262:2996":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4015:3199":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:44052:8651":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:3519:2974":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"14:31:15155":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12711:19753":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:1550:2988":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:43496:8599":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:12123:19242":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11617:16359":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:1075:16388":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4516:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9372:16340":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9037:23451":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:22290:3187":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6927:14414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:5945:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11244:16359":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:22010:2011":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4731:3212":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:507:32195":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6934:14415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12086:19239":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:40659:8929":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12543:19743":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:42912:3110":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:32111:2428":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:42967:26920":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11316:16575":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"9:486:15020":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:1428:2971":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:14401:20559":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"10:36:30982":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:4288:8704":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:7674:2929":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:22342:26756":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:5733:3293":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11742:16364":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13487:20498":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:11040:23660":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:3232:15262":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:5075:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"11:1855:2975":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:9619:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:5368:3264":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5829:13907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:46010:3350":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:2592:23684":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:1738:8998":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:10525:3157":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:40005:2946":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:2845:3342":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:1092:15144":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46375:26956":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11074:16577":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:7437:26759":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4785:3213":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"15:394:15191":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4029:3201":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:1687:154":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12184:19246":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:9058:22836":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:12026:1597":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11815:16595":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:527:9730":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40084:8630":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:8281:16260":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:1850:2974":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:2373:3092":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14522:20568":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:32136:9023":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6960:16215":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:47790:3443":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:1632:10632":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7006:16217":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:6149:23692":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:22379:26797":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:8319:3262":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:7723:3045":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:922:2979":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:7702:14976":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:14296:20551":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:14221:20548":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:40199:3060":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11463:3183":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:46324:3448":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:47836:3394":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:20974:27254":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10507:16447":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:3654:2252":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:2202:3079":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13055:19775":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10420:16473":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4351:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6332:16186":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:2380:15234":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:434:15204":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:569:9735":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:7844:3097":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:5958:3307":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:6059:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:1556:2989":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:9650:16345":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"9:52:15040":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:11970:9118":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5634:16160":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:5295:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"11:2058:2984":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:4800:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:10427:2205":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:43934:8630":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:0:2021":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"9:330:15077":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:43891:8621":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:45723:3378":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4998:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2325:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12019:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13451:20497":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:12023:342":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9752:16347":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:4395:3119":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4960:1109":{"crate_id":1,"path":["std","path"],"kind":"module"},"17:12043:19236":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"18:582:8751":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7828:16246":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:1567:2991":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"14:202:8659":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:10596:8610":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11295:16584":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12698:19752":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:10066:3036":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:39410:8977":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13188:19784":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7012:22838":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"9:237:2201":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44344:9110":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:7556:14947":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10440:16475":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:6499:16198":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:42937:155":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6335:3491":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11448:16351":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:43603:3136":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8967:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:7514:16324":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2198:3078":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:48049:8527":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:475:9724":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:22325:26743":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14076:20536":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8442:2201":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:10087:26379":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"11:423:31012":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:43617:3137":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11490:16353":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:4298:3229":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:6159:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9102:16310":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1546:10625":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6531:16200":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5955:13936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:9172:16336":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:30072:3186":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:22822:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"14:0:2025":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7331:2252":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6968:16216":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10278:16421":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:824:2993":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4860:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:23020:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11761:16365":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5433:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:8769:8614":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:12020:1632":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4968:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:5558:3271":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11389:16349":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8465:2202":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:555:9733":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11954:9116":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:596:9739":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4543:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43685:8637":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:4416:8714":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11990:2956":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3041:137":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:46792:3375":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:40092:2946":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:7837:3094":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8126:3162":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:45631:3371":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:588:9738":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:7604:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:3044:138":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13228:19787":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:3233:3157":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:46453:27007":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11162:16544":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:3657:3179":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40413:8930":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:945:2982":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12237:19250":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:45677:3412":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6352:16188":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:40312:3134":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4434:13237":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41731:2252":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12765:19757":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:21325:8988":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2783:2017":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13298:19791":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:6813:14407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7371:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:1558:10626":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7867:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11098:16551":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:3274:27349":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10752:26409":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:5403:16155":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:2317:2205":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:21234:3365":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:7504:8660":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6944:31381":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:644:32195":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"12:0:2024":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11300:3279":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:119:9407":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:21004:27353":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11327:20633":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:10311:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4724:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:588:2944":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:3185:30103":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:6984:29661":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:41634:3178":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:22408:27131":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:44611:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:40353:8916":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14024:20531":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:10958:23469":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:6107:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:6259:8911":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:21364:3357":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:4808:3207":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:42428:2189":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9207:16337":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:44348:9109":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:42703:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:6169:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4473:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12452:19739":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:759:2972":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:43916:8629":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:43881:8632":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10603:16481":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13816:20513":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:6128:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4986:15920":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2841:8937":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:363:2942":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4613:15811":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:23500:244":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:6817:8683":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11086:16578":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:9185:24824":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8482:2203":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:3461:15264":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:785:2974":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12888:19764":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6425:16194":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2897:8967":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2504:15239":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:30327:8950":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:7629:2943":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4824:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7613:16235":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:7223:3004":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4893:3257":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:44229:8639":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:41783:9054":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:41579:3185":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:7542:2220":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10949:16492":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:2406:15235":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:992:2984":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:41859:2252":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11991:19233":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9136:3341":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:8167:16255":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:40062:8741":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:6583:3305":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:46202:3380":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9961:20768":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4955:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6083:15201":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:47985:8523":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:9780:16348":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"11:2394:2975":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:11687:16361":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:40119:8736":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7694:16239":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"10:0:2022":{"crate_id":10,"path":["adler"],"kind":"module"},"1:5619:3307":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12671:19750":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4676:13263":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7610:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:44336:9105":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:7286:2252":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:41932:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8980:23342":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:1537:10624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1496:10618":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:3482:26425":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:7895:2969":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:11226:16581":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:25902:275":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2347:2824":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:298:30983":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10383:16418":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:12025:1510":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:7390:2968":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10616:16482":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:10145:23482":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11719:16363":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44364:9106":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:44416:3346":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10726:16534":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7479:8570":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:5038:26396":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1682:10637":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:1650:10634":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40256:3075":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:14346:20556":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13802:20512":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5939:16173":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:5474:3119":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:44001:8648":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7653:2932":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"14:7:15155":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:40635:3135":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:40011:8701":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:427:31008":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:727:20603":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9574:32191":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:40845:26496":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:731:2978":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:45701:3372":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:2670:15246":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:2961:2312":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:2964:29559":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:40343:8915":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:5740:3294":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"14:40:19230":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:860:2982":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3034:2218":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13792:20511":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:9614:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11306:16362":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10165:16412":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"9:450:15021":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:10558:8596":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:4862:15892":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12846:19762":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2541:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7533:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9070:16155":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4523:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:39378:2962":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:10788:16536":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13546:20499":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:40424:8922":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:4004:2974":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:3949:3119":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:40100:8629":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:10279:247":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:4352:8711":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4939:1069":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13024:19773":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:7708:16240":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40874:3163":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:3032:15259":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:9271:27507":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10227:16423":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:8134:16253":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:40433:8910":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:43593:8624":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:46476:26957":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:44023:8649":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:7920:3007":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5117:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6120:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4932:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:10830:23461":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14110:20540":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:8661:2176":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11661:16309":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4578:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8281:3222":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:4417:15759":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:563:9734":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13949:20524":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:4167:3227":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:8097:16251":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9083:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2850:3344":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:43575:8628":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:6467:16196":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:7854:3095":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8524:2204":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8275:3231":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2872:8959":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:6691:14402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:8594:16308":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4989:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:11191:16360":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8215:3181":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12373:19736":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6893:31391":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:3434:3100":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13148:19781":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:43433:8594":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:1821:3043":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12208:19248":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3289:8551":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:0:316":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5963:16174":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:41706:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:14056:20534":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:4860:3165":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:9416:2179":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:2544:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:10661:16531":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:40166:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:46980:3442":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:1710:10640":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5727:16166":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:32129:8712":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:8270:3230":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:42928:3112":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:1562:2990":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:9933:16395":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8226:3172":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:40334:8908":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:261:29629":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:849:2971":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:822:2979":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5891:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4401:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10430:16474":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13851:20516":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1674:29629":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:43525:8601":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:531:20609":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3498:3128":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11606:15188":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11971:19232":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:261:32171":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7544:16231":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:45655:3407":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6012:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4461:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:21441:2011":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:30415:26794":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:10750:16491":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:538:20610":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5088:15950":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:22855:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:3824:3184":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:897:2205":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4506:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:44360:9112":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11062:16576":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11573:16357":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:8765:16327":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:3953:3195":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11503:3182":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6898:14412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:1604:10631":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2654:3148":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:9878:3111":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:3206:2990":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:533:2925":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:20959:27254":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:43587:8625":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:9994:9082":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:3326:8554":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:909:2976":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:2810:15252":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:32223:8938":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13162:19782":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:21463:3356":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:8978:16334":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6804:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6781:10746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:12043:1219":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:7503:16227":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:41971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1514:10621":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14420:20560":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:14434:20561":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:357:15037":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:7492:8906":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5612:228":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:12035:796":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13085:19777":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11580:8536":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:9098:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:44537:227":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10468:16476":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:2933:15257":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:5622:8919":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:8839:2205":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39312:223":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46870:3381":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:22012:3354":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:6413:3297":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10916:16495":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:22234:26795":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9886:16374":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11951:19231":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:40363:8917":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:1576:10628":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13010:19772":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:7590:8679":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13174:19783":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:564:20611":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:7027:26501":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11281:16574":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5760:16168":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:11357:20794":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"0:0:1893":{"crate_id":0,"path":["thiserror"],"kind":"module"},"1:3235:3158":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11034:23683":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:7702:2954":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:2884:8962":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:2499:8755":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:3764:15274":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10012:16345":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:6081:8931":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:39431:8694":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11337:16586":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:8895:16331":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:46086:3420":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11507:16354":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5111:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:42657:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6263:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:6862:2260":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11586:16358":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:47478:3382":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10292:16345":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:12039:1615":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10059:16387":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:11270:8598":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:14469:20564":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:3802:2975":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:4949:15907":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4841:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5140:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4764:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:2487:30997":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10456:16446":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:7378:2208":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:47939:8519":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:1752:27115":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:482:23665":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:3722:3007":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:44117:8653":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11327:16585":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:7616:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6386:16191":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4914:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:40381:26503":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"16:3915:15329":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:13676:20506":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:817:2976":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4488:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:2494:2208":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2367:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:7832:3096":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:6963:8914":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:3722:3182":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4889:15895":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:7598:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4745:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6114:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7041:31425":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:43635:8603":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:1549:3119":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"18:590:27117":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11023:23690":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:45755:3408":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:5816:31100":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:9607:16344":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:7515:8661":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:42127:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4738:3192":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:39252:221":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11985:24157":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:2832:15253":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:22302:26838":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:8239:16259":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"11:703:2977":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:5976:3291":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:5376:8576":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:7985:2209":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:5767:3295":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:3332:2975":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1475:2973":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4388:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4789:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:10738:8608":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12154:19244":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:3975:3197":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:4901:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:40852:8897":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10214:16424":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:2161:637":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6248:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6879:16211":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2943:8973":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:7651:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"11:680:2971":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8880:3311":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46422:26973":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:557:2927":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12044:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:7639:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1913:10806":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5588:16158":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:7529:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6243:16182":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:48034:8526":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11872:16597":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:4053:15443":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:1965:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:5791:259":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:3671:29629":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:43721:8607":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4698:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:46278:3441":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:2904:8964":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:46300:3447":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:8713:16326":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:11131:3273":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:6270:27094":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:10771:16511":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:9023:16220":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:11277:23667":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11023:16498":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2574:15242":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:13739:20510":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7054:31407":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4218:3228":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:10328:24351":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:8659:16305":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:8848:16330":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:43561:8631":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4884:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12911:19765":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:40404:8921":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:6236:3307":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:1534:2205":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:12038:1614":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:47130:3376":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8196:3136":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:46946:3393":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:4344:15710":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13101:19778":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2793:255":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:507:9729":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:2133:2921":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:5121:15959":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43900:8620":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:7633:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45963:3446":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:41592:3176":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43871:3133":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:48064:8528":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7534:16230":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7269:31499":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12033:799":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11272:16583":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10366:16432":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:14335:20555":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6189:31417":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:10930:3046":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:5997:9327":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10962:16493":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:1145:2987":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:30343:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:1521:10622":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10568:2929":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6485:16197":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:9852:16372":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:40446:8923":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:22723:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9867:16373":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:40020:8740":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3737:3008":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:1796:3036":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:1910:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:10519:8609":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:45856:3373":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:2548:15241":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:5402:3266":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:7884:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:12030:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:8315:3260":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:2450:15237":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22128:26915":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:11311:8590":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:4612:3198":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3719:3183":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6057:23671":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13723:20509":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:8686:16325":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"11:2074:2985":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:1672:1159":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:5328:29629":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6883:23694":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:515:20608":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:2935:8971":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8861:3313":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:5562:3119":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:2143:30104":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43767:8633":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:44372:9125":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:3583:2205":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:41843:2205":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7660:16238":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:8659:2009":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2909:8965":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4783:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:11894:9117":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:10240:16391":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:5743:16167":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:256:32181":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9328:3136":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:22987:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6171:214":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4814:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10139:16411":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:9921:16401":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5696:16164":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:4407:8713":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:30357:26834":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2940:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:7240:2995":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13868:20517":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:40325:8907":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:43404:8591":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:7343:9685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:45908:3385":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5992:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13989:20528":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7722:16241":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:47959:8521":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:939:2981":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:21575:3356":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:149:15207":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:796:2975":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:1570:10627":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:9959:16386":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43152:9098":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:11931:9119":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7453:3057":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4375:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12970:19769":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5928:13978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4776:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6682:9608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"9:177:15126":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7648:2930":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:12415:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3917:3194":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8534:2205":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:7365:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:47970:8522":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:46680:3421":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:2351:2252":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:43444:8584":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10534:16448":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:12214:8613":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:707:8616":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4690:3233":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11367:16552":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:10752:8606":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6401:16192":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:40048:8739":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:20946:8751":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:489:9726":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12022:1120":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:48087:8529":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7015:16218":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14134:20543":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:47874:3428":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:39237:8975":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10588:16480":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:6798:8682":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:6959:29646":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"11:2479:30994":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13973:20526":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9277:16339":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:6970:23478":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12074:19238":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:7645:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:45825:3425":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5974:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13259:19789":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:45785:3413":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:3655:15266":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:6265:27136":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:22954:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:1184:16396":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:3441:16499":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:40246:3076":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:690:20601":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46232:3386":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3981:3198":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7554:16232":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:0:2028":{"crate_id":17,"path":["object"],"kind":"module"},"5:6827:8684":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:13554:20500":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:43515:8600":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10237:3278":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:40133:8738":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10792:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:1635:31005":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2798:2328":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9003:16335":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41715:2205":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4535:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:22888:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:2670:2014":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"9:507:15024":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:14001:20529":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7090:31422":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:1304:2987":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:6587:2252":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5995:16176":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:9629:214":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:7323:2252":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:5009:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:9627:2189":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5921:13977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:22441:3190":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:21796:3367":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:47728:3422":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4878:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1718:10641":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:22363:26800":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:40126:8737":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5382:3265":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:3214:2988":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:44547:235":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:21140:2011":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:39151:8697":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7360:31487":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:3473:2160":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:10724:8605":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:2526:15240":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:3234:8976":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:6101:3119":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6415:16193":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:574:9736":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9617:32186":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:6798:3347":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7513:16228":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7621:16236":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4584:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8909:3312":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4806:15884":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:2193:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3255:8699":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:96:20583":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6792:16208":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:645:2951":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:9625:2188":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7067:31114":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5897:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:1541:2974":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"7:0:1662":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:40901:8903":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:10463:23663":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:8029:27510":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4626:24129":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:41792:213":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:7462:16224":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:42414:2181":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3967:3196":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:481:20606":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:10269:2011":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:3049:15260":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:41426:3174":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:14514:20567":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5905:16172":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:44555:215":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9896:16375":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2361:3086":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:21192:8988":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:7792:16245":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:1013:29629":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:11157:23454":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11524:3184":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:10669:8604":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1290:2985":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:21278:3366":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12513:19741":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:5033:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11358:16588":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:1758:3025":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:9088:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:868:2983":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:44216:8658":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:9838:155":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:14118:20541":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8973:2924":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:40893:8901":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:1528:10623":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:32122:27615":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:13083:2997":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"11:1072:31013":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:45611:3406":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:10092:27420":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:609:32221":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6583:16203":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:4137:8718":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:880:2973":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12422:19737":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:7995:24185":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"11:2260:2985":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:6133:3489":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:4902:3258":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"18:624:32211":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2498:2011":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"13:110:31059":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:654:9786":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11173:16580":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"14:165:15156":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:7624:2219":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:14163:20546":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:3830:15292":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7651:16237":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5052:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6261:16183":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12790:19759":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3038:136":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8831:3275":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5941:13935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:7988:3000":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:276:2221":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:621:2159":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:5574:16157":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:4428:29628":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:44069:8652":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:8948:3296":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10447:15139":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:40645:8928":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:9350:16307":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14083:20537":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:44391:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12473:16537":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:2784:8550":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2880:3345":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:1760:3026":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40481:8926":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:41443:3175":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13981:20527":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:2914:8966":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:3491:3102":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12465:16539":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8179:3134":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43344:26499":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:0:2019":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:699:20602":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:10812:3099":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:41655:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:12036:1616":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:41800:234":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:4808:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:6819:14408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:1072:2987":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:784:2992":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:1036:2986":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7523:16229":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:1923:8555":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:7992:8904":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:8392:2200":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:574:32195":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4616:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3195:3156":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:22:734":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:41893:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12737:19755":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11048:16564":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:6666:10578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10126:16410":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:13028:150":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:8195:16257":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:62:9353":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:47588:3416":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:5049:15935":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:2969:15258":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4364:13232":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"13:0:2018":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6844:16210":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:12189:8618":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11440:23367":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:344:31002":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:49950:3369":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:10934:20781":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:6700:14403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5982:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8189:3135":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:9912:16376":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4710:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11845:16596":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:4622:24125":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"11:1882:2991":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5867:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5612:16159":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:14308:20552":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6696:15174":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8221:3180":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:1635:636":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12778:19758":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:548:9732":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4610:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4529:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"19:0:1100":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:2051:3008":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:12807:28072":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10547:16478":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:14355:20557":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:44590:3487":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:1051:15143":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:766:20597":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:7272:30110":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:42421:2188":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:42166:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:10410:16439":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:15:2136":{"crate_id":2,"path":["core","write"],"kind":"macro"},"7:78:14999":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2472:15238":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:39334:222":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11221:159":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:12260:8642":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13922:20523":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:20987:27356":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:2303:15149":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:12005:8609":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10420:3272":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:2925:8969":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:10710:8607":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"11:483:152":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:46634:3415":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:46108:3426":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:5634:8682":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:30521:26833":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:13567:20501":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:2361:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:22317:27140":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:2321:15231":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10197:16438":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6658:9774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7391:16222":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:4021:27350":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:9531:32179":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4211:8571":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13966:20525":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:46254:3392":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12598:19746":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:42285:3292":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6837:14409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:39292:220":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:46056:3414":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:6079:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:1054:2985":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10976:3275":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:9137:16311":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13667:20505":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:3923:3193":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7736:16242":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:12225:19249":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8540:2206":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:6666:29629":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:46916:3387":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:640:2950":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:30287:3002":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1703:3219":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:11735:9071":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:666:2205":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:1466:2972":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:3249:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4449:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:5372:8575":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:533:9731":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2696:15247":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12876:19763":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:3261:8698":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12997:19771":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4025:3200":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:42088:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6071:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:4585:15807":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:9873:3109":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:483:9725":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6284:228":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:1541:15147":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:48011:8525":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:7466:3058":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:1846:2252":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2551:265":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:21888:3348":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10340:16425":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:928:2980":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:10646:16530":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:637:2949":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:719:20595":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:6279:16184":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:5866:16171":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:207:8558":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:43505:8602":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:7318:16221":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:4279:229":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8551:2207":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44653:27087":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:1525:15146":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4947:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7597:31123":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12983:19770":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11351:16587":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6017:16177":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11137:16548":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10112:16409":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:9276:28151":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:5974:228":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:11710:16362":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"18:491:32213":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:9445:16341":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:7574:2975":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"3:234:234":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14090:20538":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:21006:27355":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4729:3211":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10520:16477":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11473:16352":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:30891:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13826:20514":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8263:3176":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4456:3233":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12724:19754":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:8205:16258":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:42712:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:9830:151":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4:1083":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:2037:3007":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:8050:16249":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:47996:8524":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6156:16179":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5648:16161":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4556:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:3797:15283":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"8:0:2020":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:4166:3119":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:2836:8549":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"11:357:30990":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4116:26205":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:681:20600":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:12990:3489":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2948:8974":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:101:30996":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:9985:16384":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:8154:16254":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10757:3094":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:21381:2011":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"11:1010:2985":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6041:16178":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7342:31510":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8374:2170":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:8115:16252":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:42687:27114":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:357:2941":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:41773:2175":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4647:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44368:9107":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1545:2975":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:10802:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:1525:3006":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6222:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:12209:8615":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13838:20515":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4628:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7657:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:42675:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:7743:2428":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:8289:3181":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6753:16207":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"20:0:1888":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:43785:8634":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6915:16213":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6513:16199":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:521:20605":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:3596:2971":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:42752:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:12203:8616":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5130:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:43470:8582":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12750:19756":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8146:3099":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:10728:3261":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:2618:15244":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:1104:30091":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2888:8961":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:4283:8703":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11639:16360":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:4436:2933":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:14282:20550":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:11237:8597":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:4463:8715":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5982:16175":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13876:20518":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10370:16419":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:122:30989":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:7692:14975":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14316:20553":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:3023:3003":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12007:19234":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:867:2972":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:2209:16445":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:6597:3306":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"14:187:15163":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11235:16582":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6741:10763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2931:8970":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5015:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5363:16153":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"15:0:2026":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:2245:29759":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:841:2981":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3317:3142":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:31:14992":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12959:19768":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11165:9125":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12484:16538":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:47666:3388":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:21142:3358":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:40032:26841":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6915:272":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12172:19245":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5384:16154":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:43171:8585":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:501:9728":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:7078:8895":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:14460:20563":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"10:44:15131":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:11342:20630":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:580:9737":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4168:8719":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4847:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12785:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10186:16413":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:40283:8582":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:42246:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:7571:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3077:3020":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8785:3272":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:43167:26949":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:6344:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6047:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1406:154":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:2359:15233":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:113:20584":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2766:15250":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5885:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13758:20494":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4687:3259":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:9089:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1516:218":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:41615:3177":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11803:20803":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:14536:20569":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:1862:2988":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:22756:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:22250:27122":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2776:245":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:14068:20535":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:3888:15326":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:47336:3410":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:1505:2978":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:12032:798":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:4497:15791":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1275:2986":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7365:24186":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12305:19255":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"14:221:15165":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:1120:28505":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1591:10629":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:8341:3210":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:11294:24189":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1903:2158":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:40456:8924":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:14448:20562":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13632:20504":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:4566:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:4365:29628":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:4719:15869":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8297:3232":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:542:2651":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:7490:251":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:12194:8614":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6943:14416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5023:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:9051:16306":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:4822:28438":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:951:2983":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:46710:3427":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10316:16427":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:7248:3162":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5910:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:4921:15903":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:8660:2177":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:7584:23661":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5152:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8962:24198":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6204:16180":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7717:2955":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:4034:29629":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:678:258":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44356:9111":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:11886:19228":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6868:14410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5085:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7121:26207":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:7496:8905":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:5673:16163":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:3600:15265":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8000:3149":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6268:31509":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:22415:3189":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4755:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:0:2029":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:2786:253":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43821:8635":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12621:19747":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:41740:2174":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:21573:3362":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:14499:20566":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3274:3154":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4496:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1127:15145":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2511:3145":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8855:2252":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:9469:23693":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:4154:3226":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9457:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:9117:3107":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"18:671:20599":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2305:15230":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42730:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11145:3274":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:3157:24751":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4893:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:5138:3291":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:48126:8530":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9711:32182":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12280:19253":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:914:2977":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:12111:19241":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"11:2085:2986":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:636:32208":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:8794:16328":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6818:16209":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:11547:16356":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10494:16449":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:13071:19776":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:9153:26382":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:2744:15249":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:893:2974":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"14:160:15155":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:3240:2991":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:3570:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3154:23940":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:12040:1612":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:12001:23465":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:4462:15780":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9564:16343":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:4951:2166":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:1259:2984":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:6527:3301":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:9701:16346":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:324:30999":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:9015:24197":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:6560:31460":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:7525:23483":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:4076:2971":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:2864:15254":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5146:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1596:10630":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2419:2035":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10561:16444":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:40868:8899":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:2788:15251":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:4640:8728":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6228:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:21547:3352":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:9998:16383":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:12037:1613":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2547:266":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:12859:8759":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:22266:26851":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13693:20495":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4556:3250":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6545:16201":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11202:23053":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:3388:3119":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:1743:660":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11151:16579":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:660:20598":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:2334:2971":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:40465:8925":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10097:16381":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14013:20530":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:0:1502":{"crate_id":1,"path":["std"],"kind":"module"},"17:11111:16550":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:4835:15889":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1040:2984":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14324:20554":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6226:16181":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:11749:8622":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1734:10642":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12267:19252":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"11:772:2973":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8135:3164":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4440:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:21542:2011":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:47930:8518":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:44206:8657":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:40213:3062":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:42959:26921":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8847:3316":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:582:16324":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:599:32200":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10672:16532":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:30321:8678":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:2972:29558":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:1562:15148":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:1842:2205":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:6417:3298":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:43739:8605":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:32115:16259":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44428:9126":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6456:16195":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1538:2252":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:4624:24127":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:45926:3391":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12062:19237":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4666:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5830:16170":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:9631:2186":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6711:14404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:9086:16156":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:6453:3304":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:2855:8958":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:21178:3360":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:21791:3359":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:44340:9108":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:1642:8885":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"18:80:20582":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:40107:8735":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43909:8619":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:40372:8918":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40859:3297":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:6530:3302":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:4527:15797":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10747:20782":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:10478:16471":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11375:23701":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:3065:15261":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:43395:8592":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:41409:3173":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39190:8553":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:918:2978":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6100:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:39417:2429":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:1494:2977":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10085:24352":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:44181:8655":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10522:3155":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:3219:30109":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43925:2946":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6889:14411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7436:16223":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:5555:3269":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:4033:27341":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:2467:26555":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14033:20532":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:44598:3488":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:21397:3351":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:40276:3098":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14126:20542":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:43483:8583":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2171:8988":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:10023:16346":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:44640:8540":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:35:3021":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13113:19779":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:7388:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:2012:16426":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10397:16472":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:10451:2971":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:22789:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:7680:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:1697:10639":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:7890:2970":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:40072:8742":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:42207:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:45945:3440":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:13685:20507":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:1484:2976":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:9621:2181":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6181:24155":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9175:24822":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:7628:2011":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:2992:8552":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:495:9727":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7474:16225":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5044:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:3171:219":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:7668:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4830:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6742:15173":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14478:20565":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2919:8968":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4603:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8817:3274":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13274:16362":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:4196:3119":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:10943:3268":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4595:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:5861:2974":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:859:2252":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:14269:20549":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8209:3133":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:880:2994":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12830:19761":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:40395:8920":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:45807:3419":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5115:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7568:16233":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11369:26199":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6798:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:755:20604":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4922:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8893:3314":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10685:16490":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11535:16355":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13611:20503":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5227:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:21566:2011":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:41851:2971":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:1761:2324":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10637:16484":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:7284:2174":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:2962:29809":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:40152:8734":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13710:20508":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12293:19254":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13244:19788":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:9464:3096":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12252:19251":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4641:15815":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:5680:8909":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7862:16247":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:7406:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1639:10633":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13575:20502":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"14:215:15164":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:30919:8751":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:2286:2986":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:4370:3223":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10036:16389":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3272:3153":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:23053:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10903:16497":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:12934:19766":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:2363:3087":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:5812:2957":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12496:19740":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6929:16214":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6376:16190":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:1674:10636":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5661:16162":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:1507:10620":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:41556:26725":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7423:3059":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:12772:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:8202:3137":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4480:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10575:16479":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:5069:26396":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:7294:218":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:42407:2180":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6718:3262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12098:19240":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:2938:234":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:504:2921":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4854:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12136:19243":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:2428:15236":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11124:16549":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:6961:14417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13286:19790":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:1962:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2787:252":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9455:32177":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:14156:20545":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:2165:15139":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:8825:16329":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11788:16594":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:10084:16382":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:7302:29549":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:12024:1478":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6687:16205":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:12979:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:5017:15927":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1063:2986":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5104:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:21443:3353":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11968:23436":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:5798:16169":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4902:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13914:20522":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:10077:23684":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:46156:3374":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12658:19749":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12810:19760":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:44249:8640":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:9264:3042":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:10738:16535":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:2473:30995":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9242:16338":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:7308:3286":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12645:19748":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:6631:241":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4428:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}