{"root":"0:0:1690","crate_version":"1.0.32","includes_private":false,"index":{"0:44:1795":{"id":"0:44:1795","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5797:2192":{"id":"1:5797:2192","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:52030","1:5799:52031","1:5800:52032","1:5801:52033"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13141:2019":{"id":"2:13141:2019","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13142:126","2:13143:55202"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13592:2353":{"id":"2:13592:2353","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49566:2144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10457:189":{"id":"2:10457:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10458:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:2417":{"id":"2:3372:2417","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13569:57572":{"id":"2:13569:57572","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13567:2052":{"id":"2:13567:2052","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13593:28528":{"id":"2:13593:28528","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15995:1832"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49854:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9035:2604":{"id":"2:9035:2604","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8071:2605","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3389:2669":{"id":"2:3389:2669","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5741:2188":{"id":"1:5741:2188","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:55412","1:5743:55414","1:5744:55413","1:5745:55415"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3427:2681":{"id":"2:3427:2681","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13597:28513":{"id":"2:13597:28513","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49872:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3577:2294":{"id":"2:3577:2294","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3740:2778":{"id":"2:3740:2778","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:51434"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2866:2606":{"id":"2:2866:2606","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:56021"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13221:2721":{"id":"2:13221:2721","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13223:2740","2:13224:922","2:13225:55816","2:13226:55817"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6707:2191":{"id":"1:6707:2191","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6708:54047","1:6709:52163","1:6710:52164","1:6711:52166","1:6712:52165","1:6713:52167","1:6714:52168","1:6715:52170","1:6716:52171","1:6717:52174","1:6718:52175","1:6719:52176","1:6720:52177","1:6721:52178","1:6722:52179","1:6723:52172","1:6724:52173"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23922:2799":{"id":"2:23922:2799","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23923:2802"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23918:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13586:2348":{"id":"2:13586:2348","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15995:1832","crate::ops::Index":"2:3577:2294","str::slice_mut_unchecked":"1:15995:1832"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1793":{"id":"0:28:1793","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3384:2715":{"id":"2:3384:2715","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6459:2214":{"id":"1:6459:2214","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:2528","1:6461:2529","1:6462:52236","1:6463:54990","1:6465:54994","1:6467:54991","1:6468:54992","1:6470:54993"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13577:52481":{"id":"2:13577:52481","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16006:1841"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:58234":{"id":"5:6104:58234","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8361:216","`Box<str>`":"5:432:2035"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2035","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3:1683":{"id":"0:3:1683","crate_id":0,"name":"aserror","span":{"filename":"src/aserror.rs","begin":[1,0],"end":[41,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:10:1687"],"is_stripped":true}},"2:13621:52511":{"id":"2:13621:52511","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:1827","str::split":"1:15995:1832","self::pattern":"2:13202:2718"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49598:3051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10459:1984":{"id":"2:10459:1984","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10460:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13590:3111":{"id":"2:13590:3111","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49550:3075","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:58231":{"id":"5:6088:58231","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13580:52478":{"id":"2:13580:52478","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47617:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:58230","5:6085:2148","5:6088:58231","5:6091:58232","5:6103:58233","5:6104:58234","5:6105:2170","5:6106:53568","5:6107:53569"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13677:57592":{"id":"2:13677:57592","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6883:2217":{"id":"1:6883:2217","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6884:52317"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13662:57589":{"id":"2:13662:57589","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13232:2717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3368:2416":{"id":"2:3368:2416","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13930:150":{"id":"2:13930:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13931:181","2:13932:150","2:13933:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:2701":{"id":"2:3352:2701","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3516:2032":{"id":"2:3516:2032","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:2041","2:2960:2042","2:2961:2043"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3347:2699":{"id":"2:3347:2699","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13582:52479":{"id":"2:13582:52479","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13584:52480":{"id":"2:13584:52480","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13648:57582":{"id":"2:13648:57582","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827","`DoubleEndedIterator`":"2:8591:120","str::rmatch_indices":"1:15995:1832"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49730:3084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14390:2356":{"id":"2:14390:2356","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14391:54935","2:14392:54936","2:14393:54937","2:14394:54938","2:14395:54939","2:14396:54940","2:14397:2082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13660:57587":{"id":"2:13660:57587","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23025:2913":{"id":"2:23025:2913","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23026:2802","2:23027:1247","2:23028:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:2309":{"id":"2:3406:2309","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4783:2656":{"id":"2:4783:2656","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:2056","2:4785:56796","2:4786:2059"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6812:2214":{"id":"1:6812:2214","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6813:52237"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8543:136":{"id":"2:8543:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8545:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3274:2030":{"id":"2:3274:2030","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4748:2120":{"id":"1:4748:2120","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:55488","1:4750:55489","1:4751:55491","1:4753:2142","1:4754:55490","1:4756:52508","1:4757:3618"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4666:2136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8616:2033":{"id":"2:8616:2033","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8617:793","2:8618:2052"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8510:2768":{"id":"2:8510:2768","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8512:2108"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10723:2292":{"id":"2:10723:2292","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10724:146","2:10725:29841","2:10726:55626"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5749:2189":{"id":"1:5749:2189","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5750:50731","1:5751:52289","1:5752:52290"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13671:52520":{"id":"2:13671:52520","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15989:1827","self::pattern":"2:13202:2718"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8547:151":{"id":"2:8547:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8548:2056","2:8549:2057","2:8550:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13685:3263":{"id":"2:13685:3263","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13680:57593":{"id":"2:13680:57593","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15989:1827","self::pattern":"2:13202:2718"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16:1793":{"id":"0:16:1793","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3423:2679":{"id":"2:3423:2679","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8071:2605":{"id":"2:8071:2605","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8072:56538","2:8073:56539","2:8074:56536","2:8075:56534","2:8076:56540","2:8077:56537","2:8078:56535"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23613:2804":{"id":"2:23613:2804","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23614:1270","2:23615:1269","2:23616:1267","2:23617:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23025:2913","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3337:2415":{"id":"2:3337:2415","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8506:2770":{"id":"2:8506:2770","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8508:2107"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13596:57576":{"id":"2:13596:57576","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49844:3089","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9031:2602":{"id":"2:9031:2602","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:43:1688":{"id":"0:43:1688","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1795"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"2:3376:2711":{"id":"2:3376:2711","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1690":{"id":"0:0:1690","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[221,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `backtrace()` method is implemented to return whichever\n  field has a type named `Backtrace`, if any.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `backtrace()` method is forwarded to the source's backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use,)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:54"],"is_stripped":false}},"2:13568:57571":{"id":"2:13568:57571","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6981:2203":{"id":"1:6981:2203","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6982:53970"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:3274":{"id":"5:5833:3274","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5669:2225":{"id":"1:5669:2225","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5670:52048","1:5671:3356"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13571:57573":{"id":"2:13571:57573","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15995:1832"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23088:2263":{"id":"2:23088:2263","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23078:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6881:2204":{"id":"1:6881:2204","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6882:55455"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:3:1683","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:10:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:22:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9408:1968":{"id":"2:9408:1968","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:4144","1:2575:4145","1:2576:4146","1:2577:4147"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10440:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10447:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:29:1684":{"id":"0:29:1684","crate_id":0,"name":"display","span":{"filename":"src/display.rs","begin":[1,0],"end":[28,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:43:1688","0:48:1689"],"is_stripped":true}},"2:13611:2051":{"id":"2:13611:2051","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15989:1827","`None`":"2:47617:176","self::pattern":"2:13202:2718"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6481:2211":{"id":"1:6481:2211","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6482:52358","1:6483:36595","1:6484:52359","1:6485:52360","1:6486:52361","1:6487:52362"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:2045"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13665:57590":{"id":"2:13665:57590","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23618:12480":{"id":"2:23618:12480","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23619:56235","2:23620:56236","2:23621:56237"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23613:2804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:29:1684","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10447:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1688","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1795"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:53:1795":{"id":"0:53:1795","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:7529:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3364:2707":{"id":"2:3364:2707","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13687:52398":{"id":"2:13687:52398","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:49:1795":{"id":"0:49:1795","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:7529:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":{"restricted":{"parent":"0:3:1683","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:10:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:16:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:3:1683","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:10:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:25:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13692:57595":{"id":"2:13692:57595","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15989:1827"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49897:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13674:57591":{"id":"2:13674:57591","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[220,29],"end":[220,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::DisplayAsDisplay","name":"DisplayAsDisplay","id":"0:43:1688","glob":false}},"2:10451:1979":{"id":"2:10451:1979","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10452:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13689:57594":{"id":"2:13689:57594","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15989:1827"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49879:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[214,0],"end":[214,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1685","glob":true}},"2:13688:52399":{"id":"2:13688:52399","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:3:1683","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:10:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:9407:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:28:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3396:2307":{"id":"2:3396:2307","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3417:2668":{"id":"2:3417:2668","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:48:1689":{"id":"0:48:1689","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1795"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}},"5:6084:58230":{"id":"5:6084:58230","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2035","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2035","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13686:52397":{"id":"2:13686:52397","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1795":{"id":"0:47:1795","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[219,4],"end":[219,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::aserror::AsDynError","name":"AsDynError","id":"0:10:1687","glob":false}},"2:10455:1987":{"id":"2:10455:1987","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10456:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:55:1686":{"id":"0:55:1686","crate_id":0,"name":"private","span":{"filename":"src/lib.rs","begin":[218,0],"end":[218,15]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:56","0:60","0:63"],"is_stripped":true}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:2044"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6579:2255":{"id":"1:6579:2255","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6580:54040","1:6581:54041"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11082:214":{"id":"2:11082:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11084:181","2:11085:52477","2:11086:52478","2:11087:52479","2:11088:52480","2:11089:753","2:11090:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11073:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13651:57583":{"id":"2:13651:57583","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13202:2718","`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:1827","str::match_indices":"1:15995:1832"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49748:3085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13575:57574":{"id":"2:13575:57574","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1793":{"id":"0:25:1793","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22988:2774":{"id":"2:22988:2774","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22989:56656","2:22990:1227","2:22991:1228","2:22992:56657","2:22993:56658","2:22994:56659","2:22995:56660","2:22996:56661","2:22997:56662","2:22998:56663"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8556:2034":{"id":"2:8556:2034","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8558:2053","2:8560:2054","2:8561:2055"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:19:1793":{"id":"0:19:1793","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13639:57580":{"id":"2:13639:57580","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13691:2234":{"id":"2:13691:2234","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15989:1827"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49888:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5811:2194":{"id":"1:5811:2194","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5812:54014"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13588:52500":{"id":"2:13588:52500","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15995:1832"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22899:2912":{"id":"2:22899:2912","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22900:2802","2:22901:56656","2:22902:57165","2:22903:57166","2:22904:57167","2:22905:39484","2:22906:57168","2:22907:57169","2:22908:57170","2:22909:57171","2:22910:57172","2:22911:57173","2:22912:57174","2:22913:57175","2:22914:57176","2:22915:57177","2:22916:56713","2:22917:57178","2:22918:56236","2:22919:56235","2:22920:56237","2:22921:56657","2:22922:56658","2:22923:56659","2:22924:56660"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:51:1795":{"id":"0:51:1795","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:7529:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13627:57578":{"id":"2:13627:57578","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15995:1832","prim@char":"1:15989:1827","self::pattern":"2:13202:2718","str::split_terminator":"1:15995:1832"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49648:3081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23237:12461":{"id":"2:23237:12461","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23238:56643","2:23239:56644","2:23240:56645"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23230:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13607:2093":{"id":"2:13607:2093","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15989:1827","self::pattern":"2:13202:2718","`None`":"2:47617:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10678:142":{"id":"2:10678:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10679:715","2:10681:54600"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8591:120":{"id":"2:8591:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8592:2046","2:8593:2047","2:8594:2048","2:8595:2049","2:8599:2050","2:8602:2051"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13574:52011":{"id":"2:13574:52011","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12673:3218"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13645:57581":{"id":"2:13645:57581","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8591:120","self::pattern":"2:13202:2718","prim@char":"1:15989:1827","str::matches":"1:15995:1832"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49802:3088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3717:3154":{"id":"2:3717:3154","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3648:3153","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:1897"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4666:2136":{"id":"1:4666:2136","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:2463","1:4668:54393","1:4670:54394","1:4671:54396","1:4672:2137","1:4673:54395","1:4674:52242","1:4676:54397","1:4677:2082","1:4678:2353","1:4679:2064","1:4681:2076"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:12:1793":{"id":"0:12:1793","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5763:2191":{"id":"1:5763:2191","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5764:54266","1:5765:54267","1:5766:50731","1:5767:54268","1:5768:2528","1:5769:2529","1:5770:54269","1:5771:1304","1:5772:54270","1:5773:54271","1:5774:54272","1:5775:54273","1:5776:54274","1:5777:54275","1:5778:54276","1:5779:54277"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:58233":{"id":"5:6103:58233","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13630:52513":{"id":"2:13630:52513","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827","str::rsplitn":"1:15995:1832"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49684:3054","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13566:793":{"id":"2:13566:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10447:119":{"id":"2:10447:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10448:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4723:1946":{"id":"1:4723:1946","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:1915","1:4725:55292","1:4727:55293","1:4728:3541","1:4729:55294","1:4730:55295","1:4731:55216","1:4740:2082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3310:2031":{"id":"2:3310:2031","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:2148":{"id":"5:6085:2148","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10461:1985":{"id":"2:10461:1985","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10462:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13591:2747":{"id":"2:13591:2747","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49556:3076","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13615:52508":{"id":"2:13615:52508","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15995:1832","prim@char":"1:15989:1827","self::pattern":"2:13202:2718","str::split_whitespace":"1:15995:1832","`DoubleEndedIterator`":"2:8591:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49580:2146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13601:52518":{"id":"2:13601:52518","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13618:28385":{"id":"2:13618:28385","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12994:3048","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13565":{"id":"2:13565","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12662:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13566:793","2:13567:2052","2:13568:57571","2:13569:57572","2:13571:57573","2:13574:52011","2:13575:57574","2:13576:304","2:13577:52481","2:13578:52477","2:13580:52478","2:13582:52479","2:13584:52480","2:13586:2348","2:13587:57575","2:13588:52500","2:13589:52501","2:13590:3111","2:13591:2747","2:13592:2353","2:13593:28528","2:13594:28518","2:13595:3618","2:13596:57576","2:13597:28513","2:13598:52517","2:13601:52518","2:13604:52519","2:13607:2093","2:13611:2051","2:13615:52508","2:13618:28385","2:13621:52511","2:13624:57577","2:13627:57578","2:13630:52513","2:13633:52515","2:13636:57579","2:13639:57580","2:13642:1912","2:13645:57581","2:13648:57582","2:13651:57583","2:13654:57584","2:13656:57585","2:13658:57586","2:13660:57587","2:13661:57588","2:13662:57589","2:13665:57590","2:13668:10975","2:13671:52520","2:13674:57591","2:13677:57592","2:13680:57593","2:13683:2969","2:13685:3263","2:13686:52397","2:13687:52398","2:13688:52399","2:13689:57594","2:13691:2234","2:13692:57595"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3411:2674":{"id":"2:3411:2674","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:2688":{"id":"2:3440:2688","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13668:10975":{"id":"2:13668:10975","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:2170":{"id":"5:6105:2170","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6885:2218":{"id":"1:6885:2218","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6886:54570"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:10:1687":{"id":"0:10:1687","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:12:1793"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":["0:13","0:17","0:20","0:23","0:26"]}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:29:1684","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:7354:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1795"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2116","5:785:2117","5:786:2118"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9028:2018":{"id":"2:9028:2018","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3380:2713":{"id":"2:3380:2713","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[220,47],"end":[220,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::PathAsDisplay","name":"PathAsDisplay","id":"0:48:1689","glob":false}},"2:3775:2623":{"id":"2:3775:2623","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13212:2719":{"id":"2:13212:2719","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13214:2721","2:13215:56764","2:13216:56765","2:13217:56766","2:13218:56768","2:13219:56767","2:13220:56769"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13232:2717":{"id":"2:13232:2717","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13636:57579":{"id":"2:13636:57579","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:1793":{"id":"0:22:1793","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13661:57588":{"id":"2:13661:57588","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7817:2384":{"id":"1:7817:2384","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7818:54263"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3581:2693":{"id":"2:3581:2693","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3577:2294","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3431:2683":{"id":"2:3431:2683","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3559:2922":{"id":"2:3559:2922","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:56322"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14314:141":{"id":"2:14314:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14315:277","2:14316:518","2:14317:280","2:14318:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4051:1943":{"id":"2:4051:1943","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:4147"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075:2232":{"id":"1:1075:2232","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2116","1:1077:3263","1:1078:53568","1:1079:53569","1:1080:52397","1:1081:52398","1:1082:52399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13594:28518":{"id":"2:13594:28518","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15995:1832"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49863:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10688:146":{"id":"2:10688:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10689:652","2:10690:1915","2:10691:54096","2:10692:54097","2:10693:54098","2:10694:54099","2:10695:54100","2:10696:54101","2:10697:54102","2:10698:54103","2:10699:54104","2:10700:54105","2:10701:54106","2:10702:54107","2:10703:54108","2:10704:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10453:1986":{"id":"2:10453:1986","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10454:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23285:2803":{"id":"2:23285:2803","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:23922:2799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23276:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12649:3256":{"id":"2:12649:3256","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12650:2056","2:12651:56073"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5675:2223":{"id":"1:5675:2223","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5676:4041","1:5677:52011"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6107:53569":{"id":"5:6107:53569","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15995:1832"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10440:109":{"id":"2:10440:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10441:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:3272":{"id":"5:5837:3272","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:29595"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13654:57584":{"id":"2:13654:57584","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5807:2193":{"id":"1:5807:2193","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5808:54267"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13595:3618":{"id":"2:13595:3618","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49834:2147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3358:2704":{"id":"2:3358:2704","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13576:304":{"id":"2:13576:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16006:1841","str::as_mut_ptr":"1:15995:1832"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13227:2722":{"id":"2:13227:2722","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13229:2046","2:13230:56521","2:13231:56522"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13221:2721","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13587:57575":{"id":"2:13587:57575","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15995:1832","crate::ops::IndexMut":"2:3581:2693","str::slice_unchecked":"1:15995:1832"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:5008:2237":{"id":"1:5008:2237","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:2010","1:5010:54672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3505:2149":{"id":"2:3505:2149","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3648:3153":{"id":"2:3648:3153","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:56117","2:3651:56118","2:3652:52517"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9407:1791":{"id":"2:9407:1791","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":{"restricted":{"parent":"0:3:1683","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:10:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:19:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13578:52477":{"id":"2:13578:52477","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47617:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:2308":{"id":"2:3401:2308","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9365:2260":{"id":"1:9365:2260","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9366:54242","1:9367:54243","1:9368:54244","1:9369:54245","1:9370:54246","1:9371:36031","1:9372:54241"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3104:2692":{"id":"2:3104:2692","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3103:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5819:2196":{"id":"1:5819:2196","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:50731"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10449:1980":{"id":"2:10449:1980","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10450:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13598:52517":{"id":"2:13598:52517","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5757:2190":{"id":"1:5757:2190","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5758:50731","1:5759:52196"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13658:57586":{"id":"2:13658:57586","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:53568":{"id":"5:6106:53568","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15995:1832"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13683:2969":{"id":"2:13683:2969","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13141:2019","`FromStr`":"2:13141:2019"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13141:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13141:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13915:138":{"id":"2:13915:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13916:181","2:13917:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6809:2230":{"id":"1:6809:2230","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6810:52201","1:6811:52202"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8748:157":{"id":"2:8748:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8749:2056","2:8750:922","2:8751:2058","2:8754:2059","2:8755:495","2:8757:2060","2:8760:2061","2:8761:2062","2:8762:2063","2:8763:2064","2:8765:2065","2:8767:2066","2:8768:2067","2:8770:841","2:8773:2068","2:8780:2069","2:8782:2070","2:8785:2071","2:8786:2072","2:8787:2073","2:8789:2074","2:8791:2075","2:8794:1308","2:8795:2076","2:8796:2077","2:8800:2078","2:8803:2079","2:8804:2080","2:8805:2081","2:8807:2082","2:8808:2039","2:8810:2083","2:8813:2084","2:8815:2085","2:8825:2086","2:8840:2087","2:8842:2088","2:8846:2089","2:8855:2090","2:8858:2091","2:8860:2092","2:8863:276","2:8870:294","2:8877:2093","2:8884:2094","2:8893:2095","2:8903:1014","2:8910:2096","2:8917:2041","2:8918:2042","2:8919:2097","2:8931:2098","2:8938:2099","2:8950:2100","2:8957:2101","2:8958:2102","2:8963:2103","2:8966:2104","2:8969:2105","2:8970:2106","2:8972:2107","2:8974:2108","2:8976:415","2:8979:2109","2:8982:997","2:8985:2110","2:8988:604","2:8991:2111","2:8994:907","2:8996:826","2:8998:792","2:9000:713","2:9002:696","2:9004:2112","2:9005:2113","2:9013:2114"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:58232":{"id":"5:6091:58232","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10390:1946":{"id":"2:10390:1946","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10391:1533","2:10392:55215","2:10394:55216"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4741:2140":{"id":"1:4741:2140","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:55111","1:4743:36445","1:4744:55112","1:4745:55113"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13642:1912":{"id":"2:13642:1912","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15995:1832","prim@char":"1:15989:1827","`DoubleEndedIterator`":"2:8591:120","self::pattern":"2:13202:2718"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49784:3087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:2778","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13656:57585":{"id":"2:13656:57585","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13604:52519":{"id":"2:13604:52519","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13589:52501":{"id":"2:13589:52501","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15995:1832"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3342:2310":{"id":"2:3342:2310","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:29:1684","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:7463:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1795"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3812:2624":{"id":"2:3812:2624","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13633:52515":{"id":"2:13633:52515","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13202:2718","prim@char":"1:15989:1827","str::splitn":"1:15995:1832"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49702:3055","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:2722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13624:57577":{"id":"2:13624:57577","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8591:120","str::split":"1:15995:1832","self::pattern":"2:13202:2718","str::rsplit_terminator":"1:15995:1832","prim@char":"1:15989:1827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49630:3080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22952:2926":{"id":"2:22952:2926","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22953:2802","2:22954:56656","2:22955:1227","2:22956:1228","2:22957:39484","2:22958:56709","2:22959:56710","2:22960:56711","2:22961:56712","2:22962:56713","2:22963:56657","2:22964:56658","2:22965:56659","2:22966:56660","2:22967:56661","2:22968:56662","2:22969:56663"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:2208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3435:2685":{"id":"2:3435:2685","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"16:5257:42276":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:14815:2381":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12543:48801":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13612:49956":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:9240:4000":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:11073:2208":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:50549:1941":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:694:4132":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:4443:2010":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"12:432:3573":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10609:2432":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6310:3741":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:2262:3392":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13840:50006":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:53117:2840":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:8954:4011":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10318:4021":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:2218:3326":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12048:48705":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:4434:2166":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:10667:7105":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:46861:2871":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46424:2930":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3561:2154":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:11159:2146":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:15989:1827":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:23141:2802":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:7111:58346":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:8338:3355":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12209:48778":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:3581:2693":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:8506:2770":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10136:43909":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:1597:2010":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:46440:2932":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12318:48785":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10730:1936":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"5:1843:58338":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13917:50039":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12143:48773":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10198:43978":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:52865:2852":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11142:43916":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:16001:1836":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:820:6998":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:2433:8128":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:14561:52191":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:5541:40420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12063:52184":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:13655:2362":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11922:48595":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6173:3738":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6549:3682":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:5889:58373":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:4066:1942":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:46397:2235":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9958:60413":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5229:40374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10725:3398":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4454:39773":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:45980:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:933:2274":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:12943:3083":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:774:60431":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:49379:3059":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46537:3242":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10082:4098":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12183:48776":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13352:49578":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:46763:2863":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2171:2303":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:49490:3067":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:10892:2156":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:10595:56258":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:3104:2692":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:24019:3125":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:11431:3050":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11381:44311":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6075:3665":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:4903:42931":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:51474:2806":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11002:44209":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11725:44815":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11784:44828":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6931:3974":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:51731:2818":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:586:36724":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:49471:3065":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12157:48774":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7355:3666":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:48951:2006":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:994:3407":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11087:2172":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:6856:41332":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:8355:57356":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:15468:52154":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10223:4014":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3740:2778":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4397:2491":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10445:44024":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:379:3575":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:12573:48803":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10801:4090":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10851:44100":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13306:49563":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:169:50403":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10705:8123":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1438:2057":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7257:58338":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:47877:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13573:49947":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13257:49496":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:2937:3951":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"12:2280:2281":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:11411:2239":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4005:39724":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:9408:1968":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:7141:3762":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13377:49923":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13735:49960":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:1482:2270":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:13583:52006":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:1748:37627":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:1497:2273":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:8748:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:10639:2434":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12607:48866":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"10:0:1800":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11085:4066":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4142:39741":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:14945:54654":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:777:2057":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:13221:2721":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:15044:2412":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10558:44125":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13247:49495":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:2508:2657":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:10819:2259":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11530:44598":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:51951:56031":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:1618:2057":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4315:39755":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:49408:3062":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11822:44843":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4110:39737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:10440:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:47683:1965":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:7896:2886":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5178:40369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"9:996:3503":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10127:4021":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:5811:2194":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:10622:44095":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:9028:2018":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:3576:42281":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:1236:43981":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:1415:2010":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9561:4012":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"18:704:60431":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:5030:2425":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:50076:2731":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13073:49397":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4394:2490":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10489:44025":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11363:2507":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10048:43983":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"12:1238:3571":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:9676:60407":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:53459:18010":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:5675:2223":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:3933:39718":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6159:3668":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6925:39908":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:38930:1939":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13404:49925":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:11465:10579":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:820:4119":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12674:48871":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:2040:2269":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:2177:2304":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:979:2278":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3370:2303":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:3129:3941":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1576:37611":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9085:2368":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5398:40385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:4373:39762":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2283:2787":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:46804:2867":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13138:49403":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4048:39729":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:5530:3718":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1132:1945":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:46523:3093":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:7642:3309":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:47785:2010":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:3770:42326":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:12139:2326":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:1912:37763":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:22988:2774":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4218:39747":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9988:43964":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7379:2057":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:8307:56605":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:4157:4094":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:0:1807":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:5398:2506":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:10399:52248":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2183:2305":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:11244:2244":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:5208:2648":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6099:3735":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3337:2415":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:3648:2155":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10610:44128":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:53257:2844":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11314:4005":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:46734:2881":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:8130:2269":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:3993:39723":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:49872:3092":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:49997:2726":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:14278:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:24161:35718":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10464:4017":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:56461:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8947:2555":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:9755:2500":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:1446:2267":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"12:162:3572":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:48702:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:6764:2128":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:46914:2874":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:3103:2208":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:14041:29599":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6943:39911":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12482:48797":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:3494:42279":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11591:44608":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:6858:3971":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:668:4131":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3044:57446":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:14951:54647":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:2200:58343":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8995:2405":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:152:50402":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3287:2227":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4743:42891":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:51761:2822":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:32624:56490":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:13595:49954":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:7949:2448":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"12:1183:3569":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5390:40384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7208:3764":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10240:4053":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:2314:4074":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13293:49562":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13887:50036":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:299:60408":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10979:2159":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:157:36405":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:7184:3976":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:7685:2375":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9326:4001":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:1939:2270":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:8547:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10474:54661":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:4965:2290":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10407:4070":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4098:39736":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:5807:2193":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:10127:3035":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:51284:2849":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10304:3999":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:47617:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:49165:3260":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:5516:3908":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:5165:2647":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:46824:2868":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:6885:2218":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:4666:2136":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:2793:1938":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:11409:44319":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"12:399:3574":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:4741:2140":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:3396:2306":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10115:4101":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13557:49945":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:10688:2283":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:8121:3408":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:513:36716":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:539:36720":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11713:44814":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:7051:3754":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:8849:4060":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1669:37619":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:9160:4063":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:672:36760":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:6027:40799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46795:2866":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13565:49946":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:15988:1826":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13440:49930":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:49879:3093":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:15971:50737":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7121:3760":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:51807:2807":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:48650:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:11671:44648":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:4689:42885":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4055:39730":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10859:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:5326:3708":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5998:36597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:11354:3048":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:1524:2277":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:49550:3075":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10530:44123":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:47102:2407":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8215:52279":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:8902:43893":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"12:183:3576":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:49748:3085":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:51252:2816":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4402:39766":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:46464:3245":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7110:3759":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46743:2861":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:2813:3945":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:3339:2471":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:3920:39717":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4346:39759":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11433:44320":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:14929:54658":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4179:39744":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:3221:3935":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"12:1682:3582":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1621:37615":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6967:41358":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12512:48799":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:7741:3767":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:5008:2237":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:3376:2711":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:47649:2056":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11068:4010":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6089:3734":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2866:2606":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6643:3964":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:5039:2996":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"14:11:42196":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:15994:1831":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:3559:2922":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:49834:2147":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:720:56259":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11307:52186":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:5085:2361":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"2:50294:3104":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:1694:3387":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11221:2243":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"14:56:44321":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12557:48802":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:51492:56065":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:51585:2838":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:22752:56017":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5274:40354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:22712:55847":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:8361:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:46224:2950":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:6080:37546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:51437:2821":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:9740:2499":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:14030:2377":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:1472:2280":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:3743:42323":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:9082:2541":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12009:2377":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:48171:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2754:3919":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:46020:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:8071:2605":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"15:230:3590":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:2166:2270":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:14314:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4012:39725":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"9:809:2006":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:14571:2201":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:5331:40381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:24803:2452":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6691:3750":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12158:2327":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:45906:2665":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11615:44644":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:50140:2733":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:12738:2460":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:12769:52245":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"5:3488:2270":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:15739:52382":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:3406:2309":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:50298:3103":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13763:49997":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5426:40388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:51354:56063":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11374:2509":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:50154:2734":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5247:40376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9004:43895":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:5582:40422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:32458:2406":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:13202:2718":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:49580:2146":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:1472:2269":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:3972:39721":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:14390:2356":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11487:2216":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7369:3667":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:661:4130":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:3314:3917":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9131:43899":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:47658:2010":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13755:49996":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:51982:56068":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:5522:2513":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10829:2201":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:744:60430":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1537:37606":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7295:3671":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:9466:43904":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7415:3686":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:11573:3056":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:8372:3267":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:13584:49948":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10586:44126":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:16007:1842":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11810:44842":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:14637:50751":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13708:49958":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"9:234:3462":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:12072:3069":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13721:49959":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:10390:4020":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:12740:52281":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:53655:18022":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4446:39772":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:13427:35992":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:593:36725":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13155:49446":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10988:44182":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46530:3241":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:53616:18021":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:46577:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7824:58346":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10824:2460":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:5395:2505":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12431:48793":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11327:50664":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:13935:52272":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:49398:3061":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:1441:2279":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2751:1937":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:13782:2386":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:5156:3002":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3717:3154":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:5605:3720":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:9883:60419":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:52509:2808":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:5763:2191":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:49648:3081":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13037:49396":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5301:40379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4509:39778":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13859:50012":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:47674:2057":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:7849:58362":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:1633:2280":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:651:4126":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9259:42276":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:2159:2057":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:46842:2869":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13938:50040":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12731:48880":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:2188:2306":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:15397:2513":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2772:3952":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:6881:2204":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11130:43915":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:6688:41173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12003:48647":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5288:40377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5566:3719":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:12130:48772":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:15995:1832":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:5833:3274":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:1663:2272":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6120:40801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4803:42903":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:10728:2695":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4516:39779":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:48939:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:9836:60422":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:545:36721":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:13965:57164":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10058:4104":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6035:3704":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:23237:12461":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5974:36638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:52659:2832":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10435:4019":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:5396:3712":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:0:1806":{"crate_id":17,"path":["object"],"kind":"module"},"12:1103:2279":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4277:39751":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:618:36729":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:37750:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:51853:2811":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12196:48777":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:12298:2413":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:2310:3416":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4287:39752":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:580:9511":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11956:44131":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:32524:56492":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:46544:3243":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:611:4127":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:5902:3730":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11664:2009":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:6717:52174":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:53441:2812":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:6719:52176":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:10588:2423":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:4510:2163":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:837:2721":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6981:2203":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:51539:2850":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:32464:3177":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:4316:42776":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10969:2400":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10900:2158":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:7671:2374":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:16010:1845":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:4775:42899":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:3243:3936":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:24770:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:10775:44097":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:3417:2668":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:7817:2384":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:4471:2167":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:8250:2172":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:48680:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:5366:40382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8760:2544":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:6459:2214":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11102:43914":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:8510:2325":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5186:40370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13481:49934":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1235:3390":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1634:37617":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9087:43898":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6665:41171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:49480:3066":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:4599:58344":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11494:44537":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:24902:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"9:722:3438":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"13:0:1796":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:9291:43883":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:3839:58338":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:10678:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:11587:3057":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:45933:2923":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:3743:4087":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"14:244:42198":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:4378:2057":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4599:42867":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1457:2281":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13215:49452":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:923:3406":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46753:2862":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:10453:1986":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:47716:1966":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5498:3717":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10925:44207":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:6954:3264":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:16008:1843":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:50511:3113":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:6579:2255":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:23287:2802":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9826:4021":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"12:856:2268":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4723:1946":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:5998:3684":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:11146:2143":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:9656:54660":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"18:645:4129":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"9:963:3502":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:3894:3382":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:50561:1940":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"12:2072:2306":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:896:4125":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:5289:3664":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1740:37626":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:7792:3702":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12117:48771":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:52399:2819":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13452:49931":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:10643:44110":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:12125:2323":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:53007:2820":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8432:3381":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:1704:37622":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13794:50002":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:7814:2382":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:783:6998":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:4464:39774":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:2512:4072":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:32820:2759":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13323:49564":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:15024:2380":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:24273:35742":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:5749:2189":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:1075:2232":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:353:59536":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:46484:3239":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:8825:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:15338:2505":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:681:43892":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5293:40378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12250:48781":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:1152:7109":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4127:39739":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:6873:1965":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:3960:39719":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:3521:42280":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12634:48868":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:5669:2225":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:49844:3089":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:16000:1835":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:294:60405":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9930:60404":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:53319:2809":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:13227:2722":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:3758:2781":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:15012:2379":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1190:7111":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4532:39781":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5455:58849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:3007:3930":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9756:60421":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:14546:2231":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:6721:52178":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:8668:2534":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:4051:1943":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"9:27:3486":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:47120:2173":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7148:1002":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:3682:2150":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:11907:48594":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"12:1203:3570":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:56383:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:621:60446":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:50306:3105":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5721:3726":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5210:40372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46904:2143":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7025:3657":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6533:3958":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11282:43919":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11195:2240":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:13975:50081":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10166:43980":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:24356:35744":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:2194:31843":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:5149:40325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:56409:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10788:44096":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"9:927:41570":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9183:4009":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7699:2376":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:3896:39715":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:547:3910":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:4699:58337":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12222:48779":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1544:37607":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2905:3928":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:56448:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:41:3487":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:1727:37625":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:11311:2146":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:7281:3670":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:5875:58378":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:11418:2577":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10571:4093":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3197:2463":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10682:7108":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11985:48603":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:5788:58338":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:15955:55289":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:9539:4061":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:5217:3920":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:1644:2268":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8154:2449":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"16:3402:3652":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:3358:2704":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10187:43979":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:11605:2007":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12360:48789":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:3812:2624":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:16009:1844":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:8146:57359":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10974:2401":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"12:815:2273":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4230:39748":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:15996:1833":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46852:2870":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:46813:2882":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:13278:2725":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4871:42923":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:6959:2219":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:22729:56019":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:10937:44208":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:10723:2292":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2269:2783":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6007:40797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:15062:50721":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:8438:2270":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:6717:3751":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"19:117:60448":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:46084:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11103:2139":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"12:1784:59539":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:47835:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"9:900:41604":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:1680:37620":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:3908:42440":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:56026:2905":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"9:1020:3504":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:8278:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:10587:2208":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:4885:2993":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:3297:3990":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13331:49565":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:6672:3336":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:3077:3989":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10147:43982":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12469:48796":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:69:3303":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:739:60447":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:612:36728":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12383:48790":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:565:36722":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3048:57445":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8402:2449":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:5374:3711":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12417:48792":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12085:50730":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"18:782:60431":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:2395:8116":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:9196:52241":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:53479:18012":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:48255:3164":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6937:39910":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4038:39728":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"12:466:59546":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"9:776:3484":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13345:49566":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:5605:2924":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:53514:18015":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:15999:1834":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:10614:2447":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13281:49560":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13428:49929":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:1149:7107":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13361:49895":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:14:1915":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:3364:2707":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11172:2239":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:53499:18014":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:14627:2139":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:6153:40804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:521:36717":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:12401:4713":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:4515:3367":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:0:1805":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:4921:2994":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:24869:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12957:49341":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:8262:2291":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:4840:42916":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9796:60415":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12455:48795":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11547:44605":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:607:36727":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:16003:1838":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1626:37616":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12406:48791":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6518:3680":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12687:48872":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:895:3560":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"14:194:42197":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13908:50038":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:14802:2226":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:16006:1841":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:3427:2681":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:1607:2266":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:15173:2342":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46833:2884":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7139:1956":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:23276:2208":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:2397:2366":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:53403:2847":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:16005:1840":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:24389:3143":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6016:40798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"9:749:3439":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:12117:2010":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:3351:2477":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4148:39742":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:48969:56262":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:5185:2335":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:15494:3599":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"13:232:59552":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:25370:2984":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:8543:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:32424:3151":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:52005:56070":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6468:3745":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:8176:3282":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"7:85:41458":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11354:4003":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5412:3713":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13529:49942":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:10876:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:12920:3082":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:7354:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6229:40808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5419:40387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:136:50401":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:48391:1986":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7169:3681":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:57736:56250":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:5855:3729":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10899:44197":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:12067:50740":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:1651:2282":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11797:44829":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:11094:2174":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10516:44026":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:3375:3324":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:3951:2270":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:6221:2524":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"15:248:3591":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5478:40392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9206:43900":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:849:4121":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10455:4018":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7309:3669":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:3199:3934":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:22697:55847":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:10962:44184":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"12:2045:2270":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:4351:42787":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6504:3747":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9033:43896":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1017:2449":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:48384:1980":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"12:843:2267":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:8203:2057":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:12883:3079":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:50322:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12921:49340":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11474:44536":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:46507:3240":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"9:1056:3497":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6331:3587":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46610:3161":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:1486:2282":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12527:48800":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12660:48870":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:1694:37621":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:7637:2372":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:22750:56020":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:1567:37610":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:2959:3929":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1600:37613":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:10688:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:24182:2976":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:50103:2732":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49556:3076":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:12255:2365":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:5176:43132":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10476:4022":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7471:3662":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6482:3960":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:6671:41172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:766:60435":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:6341:2525":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:49684:3054":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:12105:3070":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:8115:2057":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7155:3763":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:2861:3927":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11013:43912":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:48668:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:11689:44704":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:11286:2266":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:2484:44012":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11622:2008":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"8:0:1798":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:9161:1961":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:48003:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1558:37609":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5216:40373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:4740:2796":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:11082:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:13564:8128":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:1721:37624":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:5111:2646":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5547:39629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46873:2872":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:23082:2261":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"9:1075:3505":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"0:0:1690":{"crate_id":0,"path":["thiserror"],"kind":"module"},"2:48635:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:49897:3094":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3411:2674":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10422:44023":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:3177:3933":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14:0:1803":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12700:48878":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1157:7110":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:3029:3931":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:51160:56067":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:49538:2915":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13961:50047":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:46712:1936":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10068:3993":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:7954:52286":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:22952:2926":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:46106:3152":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:51637:2845":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:48754:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13899:50037":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7247:3699":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2155:2010":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:10451:1979":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:1488:2271":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6214:40807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10913:44206":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10503:4023":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:46667:8748":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:5741:2188":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6433:3744":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:11153:2144":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:4032:2403":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:3275:2625":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3401:2308":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:4660:42880":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4270:2526":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:45996:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:7100:3758":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11429:2518":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1428:2266":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:24671:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:32284:3188":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11234:4062":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13094:49398":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10975:44183":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:12673:3218":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:7826:2901":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:50028:2730":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:23824:55850":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:10447:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:24311:35734":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4075:39733":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"12:1666:3581":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10253:4056":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5567:40421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:3505:2149":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47793:2266":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:6026:3661":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:46924:2875":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:15214:2350":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:46781:56111":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10039:43967":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:4362:39761":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3736:2157":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:49702:3055":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4028:39727":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:7308:52222":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9661:52287":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:12237:48780":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:8197:2057":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:12245:2547":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:811:4118":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10831:4021":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13016:49342":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:1195:57301":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13495:49936":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:894:2427":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"12:764:2266":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:24250:2972":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:10455:1987":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4538:39782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:2456:4713":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12262:48782":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:53593:18020":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9920:43910":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10545:44124":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:7754:2378":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"18:857:4122":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:47742:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:1764:37628":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4526:39780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:12041:2380":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:9489:54591":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:2733:3903":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:38993:2662":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:32472:56441":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:607:43891":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:48922:56272":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3039:57443":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11335:4004":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:10449:1980":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:4198:42706":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:8455:3304":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4242:39749":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:14238:2163":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:6883:2217":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6268:40811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:23285:2803":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:5990:2581":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:6809:2230":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:28180:2773":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:12078:52223":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:11350:9882":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:8001:2859":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8861:52241":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:4474:39775":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:24265:35724":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:4411:42799":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10015:43965":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:0:1802":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:10459:1984":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:4439:42803":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:49458:3064":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:692:3437":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"12:2059:2304":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11653:44647":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"14:250:42204":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:5784:3728":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11890:48593":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5488:40393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13271:49498":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10028:43966":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:49598:3051":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:5584:7113":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4061:39731":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:16004:1839":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:3325:2467":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:24290:35743":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:9911:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:4732:55248":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:23088:2263":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:23812:2262":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:12133:2057":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:14111:56520":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:10457:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11628:44645":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6205:40806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:4716:42888":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:11261:2245":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:4670:2128":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:12994:3048":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:9365:2260":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:46172:2902":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:8661:2532":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:15993:1830":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:3051:3988":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:6954:39912":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:6104:2515":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:52445:2823":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:6907:3752":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"14:189:42196":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:3347:2699":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:52239:2846":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:5668:3723":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:9064:43897":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:49730:3084":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"15:269:3595":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:48617:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:24935:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:1703:3583":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4493:39777":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:12203:2330":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:801:4117":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:49566:2144":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:6481:2211":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6407:3743":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:24327:35745":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:47140:31254":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:5405:40386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6949:3975":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:472:59547":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:47666:2266":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6980:3753":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5639:3721":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:4400:2492":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:53540:18017":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11754:44824":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:1733:2519":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:5101:3001":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:15992:1829":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12171:2328":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7131:3761":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:53525:18016":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13817:50003":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:10443:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:7238:3685":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:6514:2865":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10388:43892":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:51783:2825":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"12:2066:2305":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:5238:42278":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:5745:3727":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:4942:42946":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10104:4100":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:1518:2276":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"12:2269:2280":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6931:39909":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:0:1797":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:13212:2719":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:11504:3052":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:4242:58338":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6050:3733":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:46772:2864":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13129:49402":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:50302:3107":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:4467:42807":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13167:49448":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12496:48798":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9793:54664":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:10884:2484":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11423:2580":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12226:2540":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:5408:3236":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46725:2878":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:50188:35994":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"6:1662:37618":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:571:36723":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:14798:8130":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6060:3705":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:49960:2720":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4198:39745":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"12:2253:2279":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11136:1936":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:46062:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:24214:35706":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12770:48946":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:8295:3353":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:3987:39569":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13180:49449":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:8106:3278":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3746:2780":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2839:3926":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:7810:2065":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:3103:3942":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:50318:3101":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11680:2012":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:1011:2010":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:9275:42275":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"12:880:2270":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:10846:2202":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:2458:8135":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:15987:1825":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:1606:37614":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8410:2006":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:13233:49493":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:6257:3308":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:9031:2602":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10949:44185":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:16012:1847":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7449:3674":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:1653:2271":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11640:44646":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:11559:3055":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:7651:2373":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:10598:44127":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4067:39732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:49500:3068":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:8250:2017":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12348:48788":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8311:2449":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:11968:48600":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13522:49941":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:51829:2810":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:52085:2851":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:4573:42865":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:1507:2275":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4256:39750":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:53365:2827":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10599:52158":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:8049:2449":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:16013:1848":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:88:36339":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4425:39769":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:11545:3054":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:56396:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12746:43920":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7637:3765":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12646:48869":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:12205:56275":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"12:2032:2010":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6914:39907":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:48930:2696":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:53468:18011":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12716:48879":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:2330:3391":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:50519:3114":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4512:2164":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"12:750:2010":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:51615:2842":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:4381:42793":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:1493:2272":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:48641:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:8930:2407":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:46145:1944":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9706:43906":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:23230:2208":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:7033:2883":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:54:3558":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:729:60434":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46563:2934":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:1551:37608":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9616:52268":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11443:2527":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4416:39768":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:432:2035":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:46040:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12302:48784":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:1635:2267":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12015:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12093:48712":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"12:952:2276":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4160:39743":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12070:48711":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:4300:2175":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:696:2422":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9587:60417":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:52321:2831":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:3516:2032":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4081:39734":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7323:3687":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:13515:49940":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:3883:39714":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:46703:2877":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:13930:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6630:3963":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12442:48794":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:46:59535":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12758:48943":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47961:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:3907:39716":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:12250:2364":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:47801:2057":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:3265:3937":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13472:49933":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5460:3716":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:5698:3725":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:161:36406":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:50343:2418":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:57757:56270":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:8160:2057":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4607:2173":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"14:47:42196":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4332:39757":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:4008:44099":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:11563:44606":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:14313:2434":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"12:2404:59545":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6342:3742":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:11369:2508":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13539:49943":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:46476:3094":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:24238:2971":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11256:43882":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:4215:2269":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4440:39771":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11603:44643":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:9649:52288":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:52163:2839":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13507:49939":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"12:2036:2057":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1642:2281":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"9:603:41681":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6902:39905":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:5536:3336":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:14227:3115":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13029:49394":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:50165:2735":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:9873:43909":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:14235:2167":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:6979:41359":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2594:52240":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"17:9716:60420":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6643:36675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:15376:2506":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11168:43917":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:51206:2836":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:16002:1837":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:3274:2030":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:23078:2208":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10364:4073":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:5240:40375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10449:54665":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5260:40353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5378:40383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:12260:2336":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:4495:42811":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:3342:2310":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:8309:3160":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11532:1996":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:9916:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:49524:3165":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10291:3996":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:50011:2729":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11115:2141":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:10093:4099":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7090:3757":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:2981:3940":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:866:4123":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:47734:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"18:637:60431":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4392:39765":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:13432:35993":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:6184:40805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7782:3673":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:4306:2266":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6557:3748":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:5757:2190":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:23001:2208":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:12240:2395":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:9409:1967":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"15:0:1804":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46138:2782":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4386:39764":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:51230:2828":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:3341:3323":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3431:2683":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6243:40809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:10266:3993":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3384:2715":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:8591:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:4684:2138":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4473:2168":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:53488:18013":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"12:1256:2282":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3372:2417":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:4783:2656":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:23918:2208":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7659:3766":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:48738:2637":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:56422:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15459:26599":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4116:39738":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:49863:3091":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:8138:3409":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:5797:2192":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:1311:4105":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:3759:2010":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:6688:3337":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9396:43902":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:49319:3053":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:6774:56221":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:47919:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:50290:3102":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:50468:29598":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:13957:2378":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:11166:2147":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:10461:1985":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"12:971:2277":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:754:60440":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9948:43911":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5447:40391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:52209:2843":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6908:39906":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5982:37545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:47129:31252":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13147:49404":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:15202:2344":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:49388:3060":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4748:2120":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:7453:58338":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:24836:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:48129:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:12649:3256":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2792:3651":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"18:829:4120":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:1091:58338":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:885:4124":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"12:2412:59541":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:24363:3193":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:46179:2646":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7754:3768":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:0:1801":{"crate_id":11,"path":["adler"],"kind":"module"},"6:601:36726":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10814:4091":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:5819:2196":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:48045:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:790:4116":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:9529:2719":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11701:44705":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6595:3679":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:2292:2788":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:6057:37572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:24704:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:4975:42955":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:3380:2713":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4020:39726":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:3461:3939":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"14:231:3270":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5433:40389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:16014:1849":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6097:37549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10340:4075":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7721:3677":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:10698:2284":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:4432:2165":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13463:49932":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4485:39776":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"12:1121:2280":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46165:2901":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:3038:2116":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"20:0:1685":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:51314:2837":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11305:43920":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:3478:3938":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:51385:2829":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:15990:1828":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4296:39753":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:9361:43901":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:50355:3174":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:14584:50741":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:47725:35953":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8712:2535":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:14217:2658":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7768:3672":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6604:3749":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11514:1957":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6679:3967":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:10390:1946":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:13915:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:6003:2582":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:47095:31249":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:10721:8130":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7079:3756":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9646:60410":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5959:3656":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:8510:2768":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:8325:3354":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:12055:2381":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:46454:3244":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:9746:43907":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:25001:3130":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:5415:2128":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:4271:42755":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:510:43890":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13549:49944":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5439:40390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5948:3925":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:16011:1846":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"9:686:3435":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:8929:43894":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3440:2688":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:15220:2351":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:3155:3932":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8503:2324":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6130:3736":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5311:40380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3970:58338":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:8616:2033":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5273:42275":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:8383:3268":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13774:49998":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:50532:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5303:3707":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"12:2392:59543":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"12:787:2272":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6381:3678":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3772:2266":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:11393:3049":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:900:2428":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3658:54648":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:5443:3715":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7379:3688":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:3686:42290":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:37774:2764":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:4728:2795":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:13919:2376":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:24090:3127":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2162:2269":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4379:39763":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6277:3740":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12170:48775":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:10836:2462":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:11582:2006":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:48377:1979":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7684:3676":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4308:39754":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:9786:43908":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6490:3746":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:1674:2273":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:1041:2258":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:7620:3308":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"12:869:2269":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3577:2294":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:9517:2144":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:49888:2235":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:10400:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:46893:2879":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:3352:2701":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10211:43984":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11945:44130":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4135:39740":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:23613:2804":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:6250:40810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:14006:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:49161:3261":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:9636:43905":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6656:3965":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:22684:2764":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11461:2229":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:51455:56071":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:6707:2191":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:14596:2462":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"12:1147:2281":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13602:49955":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:3882:2158":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:5952:2576":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:1531:37605":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3435:2685":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:15036:50734":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:49784:3087":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:533:36719":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:634:36731":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4434:39770":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6012:3663":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12620:48867":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:47810:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:1530:2278":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:15188:2343":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:46687:2876":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:15081:2336":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:3323:2466":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:50476:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4410:39767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:23025:2913":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:12187:2329":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:1215:3389":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:712:2764":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5941:3732":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:2419:2017":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11457:44321":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:51140:56069":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:24198:56825":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:8556:2034":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:5982:2579":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:49630:3080":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:12279:2412":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"12:940:2275":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11691:2013":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:3329:2010":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:9035:2604":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:3336:2304":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"9:469:41576":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:14566:52181":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:49445:2876":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:50310:3106":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10874:44098":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7200:3683":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11278:2360":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:13141:2019":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:3389:2669":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:24737:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:2777:3394":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4340:39758":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13785:49999":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:13232:2717":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12585:48817":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6114:40800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:46412:2929":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3040:57343":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"9:0:1799":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11769:44827":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:5880:2573":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"16:7063:3755":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4088:39735":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"12:114:59550":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:626:36730":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:10122:3034":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2397:8117":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:5362:3710":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11212:4064":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:11674:2010":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7702:3675":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:3194:2461":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"9:157:3454":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:23922:2799":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:15110:52159":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:48087:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13953:50045":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:3966:39720":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"12:1162:3568":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:12027:2379":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1501:2274":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:2553:3395":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:14232:2165":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:527:36718":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:49370:3058":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:48914:2293":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:6591:2880":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12026:48704":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:56435:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50314:3100":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:49419:3063":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13196:49450":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5974:2578":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:3340:3918":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6141:3737":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:374:3333":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:9407:1791":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"12:2052:2303":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:3775:2623":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5923:3731":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:3396:2307":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6129:40802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:2543:4015":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:46594:3160":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50286:3099":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:5887:3915":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:928:2271":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:50175:2736":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6034:10579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:48398:1987":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1526:37604":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:46657:8749":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5204:40371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:51184:2848":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11742:44823":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:3341:2472":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:11207:2241":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:46403:29063":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:12959:3086":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:51685:2830":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:5348:3709":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:46582:3159":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3200:2137":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:48961:56252":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:53195:2824":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10660:44129":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11031:43913":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:6812:2214":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:5837:3272":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:5649:3722":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8496:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:48213:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:3366:3943":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"14:216:42205":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2883:3946":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:12015:48703":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7212:2269":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:15960:7112":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:4628:42872":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11937:44132":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:49802:3088":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4356:39760":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:5427:3714":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:9788:54651":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:11262:2010":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:8323:2408":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:49982:2723":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13660:49957":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:53578:18019":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:5034:2995":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12892:49339":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3310:2031":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13421:49926":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:7997:52279":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:15483:3599":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:7463:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6286:3588":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:24968:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46883:2873":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:5685:3724":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:51415:2817":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:14604:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:14620:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:51904:56064":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:13418:2520":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:1619:2279":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:24638:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:7277:52222":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11514:44597":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:11437:2507":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7529:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:53563:18018":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46501:2235":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6135:40803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"7:38:41451":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2062:2128":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:50458:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:15316:2247":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3648:3153":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1588:37612":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6896:39904":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:3362:2305":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:1459:2268":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:3877:39713":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11181:43918":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:52475:2826":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10394:4071":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13747:49995":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:47111:31251":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12282:48783":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:4643:58337":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:49854:3090":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4321:39756":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:14099:54656":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:542:3638":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4208:39746":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:15118:2388":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13369:49896":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9431:43903":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:6475:2269":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"13:120:42151":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6190:3739":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:13873:50030":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"12:2398:56643":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:23618:12480":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:51336:2841":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11579:44607":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:3981:39722":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3368:2416":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:3423:2679":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1712:37623":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9883:6998":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:4639:2128":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:11466:3051":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:22731:56015":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:22899:2912":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:24377:3144":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"}},"external_crates":{"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"thiserror_impl","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}