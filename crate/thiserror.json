{"root":"0:0:1791","crate_version":"1.0.44","includes_private":false,"index":{"2:12128:2190":{"id":"2:12128:2190","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41601:179","prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:21839":{"id":"2:12101:21839","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41601:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:29559":{"id":"5:5527:29559","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12125:21880":{"id":"2:12125:21880","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12119:21878":{"id":"2:12119:21878","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1908":{"id":"0:44:1908","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12145:28881":{"id":"2:12145:28881","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11788:3288","str::split":"2:12136:21869","prim@char":"1:11991:419","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12148:28882"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43610:9229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:28884":{"id":"2:12160:28884","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:23001":{"id":"2:12095:23001","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11348:9213"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1911":{"id":"0:63:1911","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:1908":{"id":"0:47:1908","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:21838":{"id":"2:12099:21838","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41601:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:8321:1904","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1907"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12204:28898":{"id":"2:12204:28898","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11749:127","`FromStr`":"2:11748:2105"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41743:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11748:2105","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11748:2105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"generic":"T"},"items":["0:12:1907"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12105:21841":{"id":"2:12105:21841","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:28886":{"id":"2:12169:28886","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11788:3288","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::rmatch_indices":"2:12172:28887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43710:9224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1911":{"id":"0:59:1911","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12195:28895":{"id":"2:12195:28895","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1906":{"id":"0:65:1906","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"2:12211:28899":{"id":"2:12211:28899","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:28899"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43859:9220","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12092:28876":{"id":"2:12092:28876","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12090:28875"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1790":{"id":"0:58:1790","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:59:1911"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}}},"2:12109:21861":{"id":"2:12109:21861","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12110:21862"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:21205":{"id":"2:12113:21205","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43546:3727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1907":{"id":"0:24:1907","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68-20:0:1785":{"id":"0:68-20:0:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1785","glob":true}}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1907"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43:1788":{"id":"0:43:1788","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:44:1908"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}}},"2:12089:3167":{"id":"2:12089:3167","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:27294":{"id":"2:12111:27294","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11991:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43530:9216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8:1907":{"id":"0:8:1907","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12096:28877":{"id":"2:12096:28877","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:21879":{"id":"2:12122:21879","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:2702":{"id":"2:12189:2702","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12207:21640":{"id":"2:12207:21640","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39638:21779","Self::is_ascii":"2:12206:21639"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39638:21779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12208:21642":{"id":"2:12208:21642","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:21874":{"id":"2:12151:21874","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288","str::rsplitn":"2:12154:21876"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43664:9199","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:28890":{"id":"2:12179:28890","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:21643":{"id":"2:12209:21643","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12210:21644":{"id":"2:12210:21644","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12107:28878":{"id":"2:12107:28878","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11997:1417","str::slice_mut_unchecked":"2:12108:28879","crate::ops::Index":"2:2980:3616"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12213:3540":{"id":"2:12213:3540","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:3540"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43868:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:28897":{"id":"2:12201:28897","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086":{"id":"2:12086","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12087:820","2:12088:2149","2:12089:3167","2:12090:28875","2:12092:28876","2:12095:23001","2:12096:28877","2:12097:315","2:12098:314","2:12099:21838","2:12101:21839","2:12103:21840","2:12105:21841","2:12107:28878","2:12108:28879","2:12109:21861","2:12110:21862","2:12111:27294","2:12112:27222","2:12113:21205","2:12114:3401","2:12115:3399","2:12116:24508","2:12117:28880","2:12118:3084","2:12119:21878","2:12122:21879","2:12125:21880","2:12128:2190","2:12132:2148","2:12136:21869","2:12139:3400","2:12142:21872","2:12145:28881","2:12148:28882","2:12151:21874","2:12154:21876","2:12157:28883","2:12160:28884","2:12163:2031","2:12166:28885","2:12169:28886","2:12172:28887","2:12175:28888","2:12177:28889","2:12179:28890","2:12181:28891","2:12182:28892","2:12183:28893","2:12186:28894","2:12189:2702","2:12192:21881","2:12195:28895","2:12198:28896","2:12201:28897","2:12204:28898","2:12206:21639","2:12207:21640","2:12208:21642","2:12209:21643","2:12210:21644","2:12211:28899","2:12213:3540","2:12214:28900"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5513:9532":{"id":"5:5513:9532","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:29557":{"id":"5:5516:29557","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:21862":{"id":"2:12110:21862","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12109:21861"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:1907":{"id":"0:21:1907","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:21869":{"id":"2:12136:21869","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11788:3288","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::split_whitespace":"2:12114:3401","str::rsplit":"2:12142:21872"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43560:3728","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1907"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12148:28882":{"id":"2:12148:28882","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11788:3288","str::split":"2:12136:21869","prim@char":"1:11991:419","str::split_terminator":"2:12145:28881"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43628:9228","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3373:1910","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:1913","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:63:1911"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12182:28892":{"id":"2:12182:28892","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1908":{"id":"0:51:1908","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5302:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:314":{"id":"2:12098:314","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12008:1520"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:2148":{"id":"2:12132:2148","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41601:179","prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:29560":{"id":"5:5528:29560","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2127","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2127","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:3599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:21840":{"id":"2:12103:21840","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9882:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:3751":{"id":"5:5529:3751","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:21876":{"id":"2:12154:21876","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11991:419","str::splitn":"2:12151:21874","self::pattern":"2:11788:3288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43682:9197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:29556","5:5513:9532","5:5516:29557","5:5519:29558","5:5527:29559","5:5528:29560","5:5529:3751","5:5530:23085","5:5531:23086"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:15:1907":{"id":"0:15:1907","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:28894":{"id":"2:12186:28894","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12214:28900":{"id":"2:12214:28900","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:28900"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43877:9221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1908":{"id":"0:49:1908","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5302:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5530:23085":{"id":"5:5530:23085","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12209:21643"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:28879":{"id":"2:12108:28879","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11997:1417","crate::ops::IndexMut":"2:2984:3617","str::slice_unchecked":"2:12107:28878"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:6:1787":{"id":"0:6:1787","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:8:1907"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1906","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:22","0:16","0:19","0:13","0:9"]}}},"0:0:1791":{"id":"0:0:1791","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[255,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.44\")]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:68-20:0:1785"],"is_stripped":false}}},"0:18:1907":{"id":"0:18:1907","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:3401":{"id":"2:12114:3401","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12115:3399"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43834:9212","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::path::PathBuf","id":"1:5122:191","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1908"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12139:3400":{"id":"2:12139:3400","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11604:9201","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:21872":{"id":"2:12142:21872","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11788:3288","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::split":"2:12136:21869"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43578:9195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12163:2031":{"id":"2:12163:2031","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11788:3288","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::rmatches":"2:12166:28885"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43764:9226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9220:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"items":["0:47:1908"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12172:28887":{"id":"2:12172:28887","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11788:3288","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::match_indices":"2:12169:28886"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43728:9225","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"std::path::Path","id":"1:5234:190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1908"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12115:3399":{"id":"2:12115:3399","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12114:3401"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43843:9211","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12175:28888":{"id":"2:12175:28888","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:28889":{"id":"2:12177:28889","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12192:21881":{"id":"2:12192:21881","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:315":{"id":"2:12097:315","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12098:314","`u8`":"1:12008:1520"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:29558":{"id":"5:5519:29558","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:23086":{"id":"5:5531:23086","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12210:21644"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12090:28875":{"id":"2:12090:28875","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:27222":{"id":"2:12112:27222","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11991:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43536:9215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12198:28896":{"id":"2:12198:28896","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:28883":{"id":"2:12157:28883","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41599:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1787","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1907"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12118:3084":{"id":"2:12118:3084","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43852:9210","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:21639":{"id":"2:12206:21639","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:2149":{"id":"2:12088:2149","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:28880":{"id":"2:12117:28880","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43824:9223","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:29556":{"id":"5:5512:29556","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2127","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:3599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2127","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:3599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:28893":{"id":"2:12183:28893","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11991:419","self::pattern":"2:11788:3288"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11813:9205","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1789":{"id":"0:48:1789","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:49:1908"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:52","0:50"]}}},"0:53:1908":{"id":"0:53:1908","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"path::Display","id":"1:5302:120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12116:24508":{"id":"2:12116:24508","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43814:3724","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12:1907":{"id":"0:12:1907","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"dyn_trait":{"traits":[{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12181:28891":{"id":"2:12181:28891","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1906":{"id":"0:25:1906","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"2:12087:820":{"id":"2:12087:820","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11991:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12166:28885":{"id":"2:12166:28885","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11788:3288","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11991:419","str::matches":"2:12163:2031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43782:9227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11793:9206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11808:9207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:4729:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14350:21037":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:8997:16788":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:42902:27292":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12905:20250":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:8105:16735":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"19:0:1040":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:22628:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:6648:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:41494:27298":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:6815:16692":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9926:16867":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2832:9554":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:47851:4043":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7331:31494":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:30391:27005":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:11813:9205":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6900:16696":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:12013:796":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:568:10304":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7012:31306":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:21215:1906":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:8138:16737":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5590:16641":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10486:16960":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:2203:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:12878:20248":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:21908:27094":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13557:20979":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4151:3818":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:12458:9342":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:8542:16789":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:41735:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:21054:1906":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:2383:3690":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6868:14904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:9409:32037":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4678:3786":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2212:3677":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6618:14891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:44367:9696":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4963:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4895:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:5425:3861":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12851:20246":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:8225:3772":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:3058:15744":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:2523:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:10763:23738":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:6441:3567":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:0:1920":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:25984:3778":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:5618:3902":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11552:9130":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46649:4021":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:30555:27076":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:7384:3657":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:4:1023":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13795:20995":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:1672:28736":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:22364:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:40143:9321":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:7523:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:1048:31217":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9875:16883":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:8199:3726":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:40098:9327":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:3744:15757":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:1975:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:10030:2100":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:7484:16710":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12479:20223":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:10450:26765":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:7295:15275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14163:21023":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7993:26664":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:2049:3578":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:21561:3942":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6763:16690":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9485:32012":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:895:2100":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:2497:15722":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7038:31569":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:22562:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:42880:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:8890:3906":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6175:16662":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:1911:11374":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:40219:27081":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4028:3793":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:1411:2100":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:5409:3860":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:2186:31220":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14015:21016":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:7511:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:45995:4008":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42855:9347":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44287:9680":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:20677:27153":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4167:3820":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43966:9240":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:45662:3972":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7518:16806":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:6188:24695":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13991:21013":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:44012:9243":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9098:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9274:3727":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:8021:16731":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"13:226:31282":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:749:3567":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12035:19721":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13566:20980":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:6834:9483":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9118:16818":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:2131:3515":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11568:16843":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:10141:24734":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12435:20221":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:47869:9112":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:7414:3655":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11998:1501":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"18:521:21078":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11992:19718":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:43095:9668":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:8605:16787":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10377:16928":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11967:19716":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:856:2154":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13083:20262":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:7250:10254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:5843:16653":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:9215:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12631:20233":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1069:3580":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4469:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6598:14889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7592:16718":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:30925:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8475:2097":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2966:29854":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:9068:21208":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:5363:16636":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7073:16701":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:3385:1909":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:11997:1417":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:9222:2075":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5567:16640":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:8043:16732":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2762:9543":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3966:3789":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:45640:3966":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2787:3939":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14301:21033":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:11788:3288":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4764:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6834:14901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2162:9573":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:8136:3753":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2928:2123":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8958:3891":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7651:3524":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:40875:9485":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:7525:16714":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:5956:3886":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:4965:16402":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:4196:3713":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:2857:15737":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9716:32152":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:9220:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:8632:16807":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:30361:9535":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:43439:9191":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:11604:9201":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40424:9507":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8492:2098":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2846:9557":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:3296:3745":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44149:9248":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13069:20261":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:11973:23742":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11564:26670":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:1051:3578":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:43628:9228":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40128:3541":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:3196:9145":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4606:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40524:9514":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:96:21056":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:43610:9229":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6554:16685":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4231:3822":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:4984:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1833:3640":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12017:19720":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:4694:3853":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:46573:4009":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:5364:9168":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10520:16963":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:2611:15727":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:6983:3753":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:2399:15718":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:11571:15672":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4186:9164":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:2332:15715":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5920:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10597:17012":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:40931:9491":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:12406:27401":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12727:20239":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"11:2033:3577":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:8919:3907":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7705:3549":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4556:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6128:16661":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1595:11199":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8325:3854":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:6889:26748":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:7553:16716":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:43536:9215":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:7726:3581":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8189:3725":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:6081:3713":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:400:16804":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:9180:2057":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4496:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:30130:3779":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9939:16866":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:11334:9641":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:21246:3956":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11872:19710":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4908:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:3295:15746":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6796:14898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43518:9219":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13923:21006":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:2421:15719":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5793:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2878:23754":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:766:21070":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:40882:27299":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"7:32:15479":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12303:20214":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:0:1923":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:42070:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7445:16707":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2962:9147":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4524:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:2705:2228":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:6872:16694":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11192:3912":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:2551:3737":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:41675:2154":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12579:20229":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9025:24682":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:11859:9233":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:20865:9573":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:3867:15808":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:590:27305":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7463:16708":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5234:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:8841:16813":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:7540:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11591:16844":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11696:17074":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12691:20237":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:11475:3773":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3339:3733":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11250:17031":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5414:31474":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:43376:9186":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12952:20253":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:14026:21017":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"9:177:15613":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6531:31323":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9734:16830":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:39164:9287":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:1554:2154":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:5320:28736":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14417:21042":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:631:3544":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:7043:3881":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4413:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10280:16951":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:12433:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"9:393:15509":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8977:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47889:9114":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:48065:9124":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2921:2121":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:7575:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:6973:24739":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4958:2061":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"15:288:15663":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13683:20985":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:44279:9675":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:5008:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4638:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:46495:4003":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5626:16643":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:47909:9116":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:46263:4042":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:1288:3578":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:760:3568":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:40453:9509":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1696:11208":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:11043:26747":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:47878:9113":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43287:27809":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11767:19705":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:45949:3944":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4664:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:41448:3765":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9296:16790":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11264:17068":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:30449:27093":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:9477:23753":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:624:32435":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:5589:9497":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11753:17076":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4159:3819":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:4841:16374":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8145:3755":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:7656:3526":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11371:16835":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2874:15738":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:7476:9252":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:44138:9247":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:7720:3550":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"11:1838:3583":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"11:1068:15629":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10750:3692":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:11241:17067":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:3520:3722":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:2060:3579":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:9561:16826":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:2516:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:2825:15736":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11989:372":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:1422:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:6064:26767":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:41811:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:41650:2153":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:8711:16809":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:12371:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:5611:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11434:3774":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:7632:3538":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10654:16990":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:890:3567":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:7015:21210":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13732:20989":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:573:10305":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:32149:9600":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4436:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:20679:27158":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:9528:32109":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13707:20987":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:636:32437":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:8273:3767":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:6771:9273":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3647:2154":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2690:29864":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:5398:16638":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:40462:9498":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11791:19706":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:7738:3643":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6713:15657":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4862:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:4325:9299":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:119:9977":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:2900:15739":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:0:1409":{"crate_id":1,"path":["std"],"kind":"module"},"1:8544:2100":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11642:16847":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2795:9546":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:1103:15630":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4695:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:42673:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:14054:21020":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:40534:9499":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:43814:3724":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:4592:16293":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:582:3539":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12921:20251":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10883:16979":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14359:21038":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:3186:16973":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:43877:9221":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:43114:9178":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6470:16680":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5051:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:599:32418":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:14037:21018":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:9595:9652":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8299:3772":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:7586:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:13749:20990":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:5775:16651":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11049:26773":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12008:1520":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"11:1852:3585":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:2748:9524":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:10994:17029":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5058:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:80:21055":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5793:31730":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11127:16841":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:3894:15811":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:43387:9177":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5829:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14205:21027":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:14216:21028":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:47667:4016":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:10327:9197":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:11802:9208":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:11569:9688":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:541:2536":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6607:14890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:5737:16650":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6986:16700":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6516:16683":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:900:3568":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22016:27017":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:1012:3579":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:4428:28756":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:22037:27021":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:20619:9334":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:4409:3527":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10948:23726":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:3671:28736":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12003:751":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:14227:21029":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10515:3744":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:42150:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6639:28736":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8280:3824":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:9103:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10079:3728":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13548:20978":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13854:20999":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3456:3698":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9275:3640":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4650:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10051:16863":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:4563:3844":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9850:16857":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12089:19725":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:3257:3749":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"13:0:1914":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:39305:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:3737:3603":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3233:9146":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:40410:27342":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6018:16660":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:40041:3541":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:6787:27473":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3802:3568":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:782:3587":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:39430:2118":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4489:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46095:3968":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:1629:589":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7631:16720":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2587:3729":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:10840:9189":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4374:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:1302:3580":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4626:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13043:20259":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5100:16441":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2811:9549":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:21802:26988":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12826:20244":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"9:52:15527":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:40401:9505":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11578:15672":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:46314:27276":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:3141:9561":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:44592:27311":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:6540:16684":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1492:3570":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:41431:3764":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46885:3987":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:3810:15775":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:527:3519":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:8351:3804":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:41786:2100":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:822:3588":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:8795:3867":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14259:21031":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:915:3571":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:40363:9496":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10161:16899":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11155:3705":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:20984:3955":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:261:28736":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:41667:3564":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:587:10307":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13029:20258":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:574:32414":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:22529:3528":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:44529:4081":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3215:3746":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:9224:2074":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:10823:26286":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:44355:3940":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:4050:3796":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6789:16691":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:2663:15729":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:41717:2070":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4587:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:13055:20260":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:42618:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4787:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:45847:3979":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:8872:16814":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4872:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6232:16665":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"10:44:15618":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:2265:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:46217:4035":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4740:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:4034:28736":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:805:3573":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:22115:3784":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4929:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:2168:31221":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9977:16828":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:44476:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4955:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:4076:3564":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:5651:16645":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:42871:9346":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:531:21082":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:6351:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11428:16838":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:10512:3748":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:3495:2057":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:4987:3713":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7529:24731":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:42646:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2352:15716":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10544:17010":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:0:1919":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:942:3575":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:1746:27312":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:2984:3617":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:8748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:21991:27341":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:6573:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2152:590":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10110:16901":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:681:21073":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:9968:21199":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"18:113:21057":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:20851:3954":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"9:237:2096":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:42863:27327":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1523:3601":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6720:14894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46361:27278":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:14150:21022":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6688:11315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:3204:3585":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7665:16721":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:39465:9284":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:6800:9275":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12148:19729":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:1636:9474":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4550:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46193:3986":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:498:3515":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:44295:9683":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:579:10306":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:14236:21030":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11220:17065":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7433:16706":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:40084:9325":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2357:2704":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:5836:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6625:3856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13620:20983":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6667:15658":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14395:21040":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:32236:9525":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:2205:3675":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:7859:3695":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14315:21034":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11329:16833":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:2180:31218":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:2049:3603":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:2223:30346":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13513:20977":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:21136:3950":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:44192:9231":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:9439:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:22397:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:48003:9122":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:4764:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:9882:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:1184:16878":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:1517:15632":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:4633:26520":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:13964:21010":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:1590:11198":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6671:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4992:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1557:11195":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"10:36:31207":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"18:736:21069":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:4335:9300":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:21685:3948":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:6651:2162":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:2960:29856":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:1755:2224":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12792:20242":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:10785:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:45764:4019":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11173:21463":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:40169:9324":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:1464:3565":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:20662:27155":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:474:10293":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:6308:4085":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:6424:3893":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:9887:16877":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:2541:15724":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:9661:26823":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:7915:3738":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10072:3634":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"11:332:31215":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6484:16681":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:22053:27025":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:7531:3568":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:4441:16262":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:6560:2154":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"7:79:15486":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4380:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:3777:15766":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:1473:3566":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:968:3577":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:4032:15925":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8857:3911":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:9146:3935":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14403:21041":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:2398:1931":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4328:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7289:16703":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:7339:2103":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:47275:4004":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14102:21021":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:40292:3673":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:10914:9182":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:12009:1517":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:2035:3602":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9899:16873":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:846:3564":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:40120:9221":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44124:9246":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2471:9338":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:5841:3567":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9032:16638":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3176:21417":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10303:16952":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:11748:2105":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:9048:16792":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:45865:3985":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5972:16658":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:22694:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:1500:11188":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:911:3570":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2842:9556":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13427:20972":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:6589:3900":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:494:10296":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12065:19723":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1520:11191":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"10:0:1918":{"crate_id":10,"path":["adler"],"kind":"module"},"1:3936:3787":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4824:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:7731:3582":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4463:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:45724:4007":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:1826:3567":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:6140:4083":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:1102:30265":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12365:17017":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13847:20998":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:7564:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:311:31224":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:500:10297":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7758:2328":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"0:0:1791":{"crate_id":0,"path":["thiserror"],"kind":"module"},"17:13894:21003":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:21037:3951":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:4928:16389":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:482:10294":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:5440:3862":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:1138:30263":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:46025:4014":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9777:16853":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2208:3676":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4616:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:639:3546":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6502:16682":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11056:17059":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:9228:2084":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:1631:11201":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9188:16820":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2313:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:1818:2100":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11164:17053":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:9230:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:6932:28801":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9518:16825":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7568:31626":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10266:16896":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11991:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11210:17064":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:614:32432":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8168:3701":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1774:3624":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13659:16872":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:736:3566":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4631:26518":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:12659:20235":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:8125:16736":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11411:23757":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:2970:29855":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6057:15685":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13757:20991":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10097:16902":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:2133:16898":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11109:17060":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:47924:9117":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2637:15728":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:43356:9187":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:564:21084":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:12011:1519":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:936:3574":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6357:16673":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:5383:3713":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:3513:3700":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:4753:16358":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:39391:3557":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:798:3572":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:42630:27320":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:22496:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:43682:9197":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:8428:9206":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:43944:9239":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:4311:3823":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11924:19713":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11178:17063":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:35:3619":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:21:686":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7351:3563":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13125:20265":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:2783:3937":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:3078:3618":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:46239:4041":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:3580:15748":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6939:16698":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:4010:26811":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:21116:3947":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7474:16709":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:3162:9289":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:44486:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:285:31226":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5342:16635":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:11992:1536":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10330:16925":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:9693:26829":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:1972:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:8166:16739":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:46731:3969":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:4734:3802":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10080:16916":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:44537:4082":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:925:3573":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:11542:16791":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:4469:3827":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:1536:11193":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:695:3571":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:12626:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:3980:3790":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40047:9291":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:4724:16353":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11189:16844":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:5977:9897":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:2799:9548":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11905:19712":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:21239:1906":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10323:16954":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:7631:1906":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1442:2154":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:4785:16366":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:12014:1574":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41875:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:40904:3754":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:4698:16351":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:877:3566":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:6841:14902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8108:3696":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:7494:16711":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13604:20982":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:8323:2071":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5080:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2164:9574":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:43859:9220":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:40207:3659":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2915:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:1550:2100":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4794:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11098:17026":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13971:21011":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:9872:1906":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:4113:9305":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:7278:15274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:7213:3567":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5863:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7539:16715":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:547:10301":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:4619:3792":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:4909:3852":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:1917:3607":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:40372:9502":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:2164:16923":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:12010:1518":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46047:4020":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:615:2056":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10671:17015":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:7998:24700":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4401:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:11298:21520":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:8935:3910":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:45694:4002":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:4042:3795":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"14:187:15647":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:32109:3871":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47775:3988":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5068:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6438:16678":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8003:3740":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10581:16991":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:6420:3892":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:13016:20257":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10339:16924":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:8659:16808":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4887:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:20813:1906":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:42371:2084":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8849:2100":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:1920:658":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"16:7584:16717":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8983:3518":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:7465:9251":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:6239:31456":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:9474:9344":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5916:16655":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6977:16699":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:41743:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:4395:3713":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:10341:9200":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:11348:9213":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1545:11194":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10775:3695":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:10458:16958":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4483:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:14380:21039":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:276:2127":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:2510:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:3583:2100":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2821:9551":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:41537:3776":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:46619:4015":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:7284:2154":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:41599:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:261:32205":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"9:450:15508":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12161:19730":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40341:3725":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:2743:9143":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:1666:1096":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10038:16864":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:1690:11207":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:13981:21012":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:9614:32011":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:7247:2154":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:652:32414":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:7529:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:836:3575":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:39444:16741":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:3373:1910":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"11:1121:3580":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:46415:27280":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13096:20263":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:595:10308":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:755:21077":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:403:31230":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:43728:9225":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:9033:16702":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5967:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13999:21014":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:9226:2083":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4800:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6775:14897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:7329:2125":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3670:3770":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:43995:9242":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:41585:3769":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6289:16667":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5044:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:434:15688":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12118:19727":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4738:3806":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:352:3536":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:12004:748":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:41953:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6565:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43664:9199":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6460:3899":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:720:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:4536:16285":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:5494:3863":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:7552:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:43868:3541":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13957:21009":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:727:21076":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:3183:30360":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:8972:24703":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9913:16868":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:40392:9504":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11034:17058":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:39265:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8871:3908":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:3217:30365":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:8068:16733":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:1810:3634":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3217:3747":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10845:16972":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:4456:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:0:1924":{"crate_id":17,"path":["object"],"kind":"module"},"17:12004:19719":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"14:160:15639":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7025:31727":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11271:3874":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4833:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4389:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5015:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:2293:15686":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7362:16704":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:2371:3684":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12006:750":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:14007:21015":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:14:2034":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:45825:3973":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8561:2102":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:986:3578":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5689:16647":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2737:15732":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:47898:9115":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:1913:2055":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:5882:16654":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:45550:4000":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:1663:11204":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10945:17055":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3513:3567":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12994:20256":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:9431:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6705:14892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13303:20969":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5382:16637":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47417:3976":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:11940:23732":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:1583:3586":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"14:31:15639":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9016:16637":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6317:16669":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:10199:9202":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:5890:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44303:9682":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13697:20986":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:8086:16734":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:6171:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:45616:4006":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:11962:3551":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:14282:21032":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:4436:9303":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9127:3705":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:10555:3523":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:11328:21516":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13914:21005":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:42600:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:7313:31372":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:506:10298":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12502:20224":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:4236:2100":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4543:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:426:15510":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10499:16961":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:6603:3901":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8156:3697":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4723:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:55:15683":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:42109:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"14:165:15640":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10966:3870":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1273:3579":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10511:16962":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:9571:32230":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:45570:3965":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6008:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:40485:9511":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:2816:9550":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6332:16671":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:2689:15730":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7907:24460":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13574:20968":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:5302:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40332:3614":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11996:1387":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4291:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:1772:3623":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1572:3584":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:1858:3586":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:43560:3728":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5882:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2243:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4848:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13771:20992":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:5130:3886":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13937:21007":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:4629:26516":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:21999:27095":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:10161:9188":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:44567:9136":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:11118:17061":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:6156:26772":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:11265:24710":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7515:16713":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:4476:16273":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:7588:26752":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8307:3826":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11520:16842":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:43347:9183":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6028:14480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:11493:9687":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43782:9227":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:7657:3595":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:2931:2124":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4716:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:44283:9678":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6022:14479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4315:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:41514:27087":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:40510:9513":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:43843:9211":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:690:21074":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:7546:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12966:20254":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6214:16664":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:20647:26836":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:3106:3756":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:13179:20268":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:23174:3777":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12982:20255":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:1845:3584":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:5965:3902":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11815:19707":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:44060:9244":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:43366:9185":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:11726:17075":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:5028:16417":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13492:20976":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:39423:9562":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:30321:3597":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11943:19714":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:21855:27077":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:40678:9515":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10302:3862":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10148:16900":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2962:15741":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10013:16869":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13862:21000":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:0:1915":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11032:26750":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:9232:2081":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:8210:16741":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2488:3736":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:22661:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:6136:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:8899:16815":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4879:1010":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:40382:9503":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13639:20967":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:11248:26756":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:5639:16644":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:149:15691":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:538:21083":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:9990:16871":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:5389:3859":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:11530:9689":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:657:2154":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:11553:9686":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:256:32170":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:507:32414":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:44311:9677":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5025:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13332:20970":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2507:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:40202:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:43426:9176":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:4258:9293":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:1776:3568":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:2791:9547":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"11:2194:31222":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:22430:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11852:19709":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:4792:3807":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:8252:16742":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8865:2154":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:41550:3767":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:3998:26835":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7855:16730":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10407:3867":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:6487:28736":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:12012:1516":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4475:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4518:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:47527:4010":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:4900:3851":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:3181:27518":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:5720:16649":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2803:15735":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5673:16646":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:1538:15633":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11007:17028":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:7292:2154":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44307:9676":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:1037:3577":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:7661:9492":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2355:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10123:16873":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2314:15714":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:3635:15749":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11774:23098":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:3504:24244":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:6291:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:41802:2154":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:2170:29948":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"13:110:31281":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:41794:3564":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:40494:9512":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"14:7:15639":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:399:31235":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:2838:9555":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3179:24449":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3994:3792":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:40475:9510":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5818:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:2105:16939":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1503:3571":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9318:16822":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4900:16385":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:2855:9559":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:4620:16297":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12394:20218":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5704:16648":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:609:32443":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"14:215:15648":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7240:31718":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:39458:9300":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:12864:20247":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:817:3574":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:4736:3805":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1649:11203":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:1501:15631":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:4811:802":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:21220:3946":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:39369:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:30355:9269":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:40188:9320":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2470:1906":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:1513:11190":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11104:3868":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5625:3903":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:1482:3569":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6372:16674":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11272:16831":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:2589:15726":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4818:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:3042:15743":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11498:16841":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:43546:3727":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:8916:27899":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40913:9488":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"9:486:15507":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9655:16828":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9665:32232":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12412:20219":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4854:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:3732:3774":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:41726:9626":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:9821:16855":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"14:221:15649":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:554:10302":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6850:16693":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:21976:27023":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:5748:3889":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12757:20240":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5987:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2752:3936":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:7517:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:21683:1906":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:7398:27081":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2850:9558":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:43468:9193":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:10471:16959":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:21964:3780":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6915:31637":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13591:20981":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:8990:21160":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2246:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13719:20988":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7842:2223":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:7201:3590":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11600:16845":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"14:0:1921":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9185:24296":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:7693:16723":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:43981:9241":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1709:11209":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14044:21019":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:5554:3864":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2443:15720":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13870:21001":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:21070:3945":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:5375:3858":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:532:10300":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13368:20971":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:4506:16279":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:9475:16824":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3255:3748":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12133:19728":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8231:3771":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:1757:612":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:12589:4083":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:12016:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12053:19722":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:11793:9206":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6323:16670":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:21464:3953":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:4380:9301":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10313:16953":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10906:16977":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4180:3821":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:9190:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13673:20984":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:47973:9120":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:9744:32053":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13167:20267":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:40235:3658":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:4868:16377":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:4605:9315":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:14197:21026":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7233:30347":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11074:16842":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4506:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:42364:2083":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:3438:3699":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:5979:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:44550:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9442:32219":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4967:1049":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:3410:3713":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:9108:3912":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:6658:16687":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:11346:24472":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:8152:16738":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:7852:3692":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:46171:3980":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:21469:3961":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4420:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9153:16819":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:21114:1906":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:47813:4022":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:660:21071":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:30953:9334":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11669:17073":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:878:3589":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:20907:3959":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:8801:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:6067:14482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4754:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12891:20249":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"15:0:1922":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4842:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:20815:3952":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:5990:9518":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8771:16811":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13803:20996":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:2962:29853":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10931:17043":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13140:20266":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2513:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:6931:16697":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:4996:16409":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:4045:9142":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:47935:9118":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:10873:9190":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11388:16836":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:7882:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:47988:9121":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11832:19708":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:2804:9552":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1575:11197":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11623:16846":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4304:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11467:16840":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2318:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:11116:3869":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:8949:16817":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:1495:11187":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:8176:16740":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:1060:3579":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:9678:26759":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2690:1913":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:8321:1904":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11155:17062":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13155:16844":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:7799:16728":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:11496:3775":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:3294:3744":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:7599:15462":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:2519:15723":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:515:21081":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6130:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12106:19726":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:7847:3694":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6571:16686":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6886:16695":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:5900:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4748:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1673:11205":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3930:3788":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:582:9334":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:481:21079":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10832:16971":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9020:24696":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:671:21072":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:45902:4040":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45884:4034":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:7677:3523":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:653:10355":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:1681:11206":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43110:27226":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10199:16905":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11416:16837":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:3735:3773":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:5994:16659":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:7367:24701":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4781:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:9706:16829":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:3519:16996":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5612:16642":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43852:9210":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12457:20222":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:3382:3754":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5074:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:42357:2075":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:526:10299":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:5741:3888":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12254:20213":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:2567:15725":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12646:20234":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7558:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:47605:3982":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10253:16897":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:0:825":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11995:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2759:15733":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:20998:9573":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10066:16891":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:667:3570":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:44579:9134":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12840:20245":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:41836:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14341:21036":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5819:3552":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:8236:3763":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:906:3569":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"15:306:15664":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11990:945":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:5614:9273":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:5994:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41573:3768":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4770:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:10740:24128":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6015:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12077:19724":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:6744:14896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:40923:9489":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:7505:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:2373:3685":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:48026:9123":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1733:11211":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6077:14483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12526:20225":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:10361:16950":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:20863:27480":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12815:20243":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:793:3569":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10863:16827":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10223:16903":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:644:3564":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3168:9288":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40249:3660":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:4365:28756":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6396:16676":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2373:15717":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10568:16969":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:10936:3863":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12618:20232":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7407:16705":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:43504:9222":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:3178:3584":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:3238:3586":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:1075:16870":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7061:31571":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40433:9508":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:8534:2099":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10812:16975":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:4004:3567":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:6740:9501":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2826:9553":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10351:16955":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:44172:9230":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4446:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:2201:2103":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8827:3869":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:10355:9198":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:1820:3606":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:47729:4037":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43834:9212":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5955:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10175:16827":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1611:31213":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:9047:21593":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:630:2100":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:2691:9144":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:2959:2213":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10609:17013":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40692:9516":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10249:16910":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:5301:16618":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:8911:26802":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:3220:15745":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:43710:9224":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3212:3583":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4697:3827":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11290:16832":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:2925:2122":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:1973:16904":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:707:9208":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:10122:9201":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2773:9545":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10786:16976":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:40155:9322":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13949:21008":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:21122:3949":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:2926:15740":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10319:23752":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:44291:9679":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"15:327:15668":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:32145:2328":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:12681:3592":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"9:0:1917":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:12007:746":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:2565:26759":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10509:3746":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:39281:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:4973:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8285:3825":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2349:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42228:3887":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6197:16663":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:723:3565":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10799:16974":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11340:26271":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:119:31210":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:39203:9148":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:62:9923":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:7547:9270":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2243:29935":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:10529:17009":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10444:16922":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6864:31720":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4917:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:2627:3739":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7899:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10555:17011":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:6536:3897":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:11957:24685":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7833:16729":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11199:17054":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6724:16689":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11979:19717":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:844:3576":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42695:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:45594:4001":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:491:32426":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:1118:29844":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1702:3813":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8841:3870":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6036:14481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6156:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10390:16926":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5122:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:9866:16858":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:20632:26836":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:41684:2069":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12539:20226":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5553:16639":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:9013:26678":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:1603:11200":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:45746:4013":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:7123:26268":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:12014:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:4129:26267":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10417:16927":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:43824:9223":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:6790:9274":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:42031:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43413:9175":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:7463:15434":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:42350:2074":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:358:3537":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4368:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2767:9542":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6456:16679":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:6637:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:5045:26663":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6711:14893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:44315:9695":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:1732:9582":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13778:20993":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:46809:3975":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12936:20252":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:6804:3941":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:43578:9195":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:2715:15731":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:7099:16702":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10621:17014":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8813:3868":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5799:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8291:3816":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12186:19732":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2913:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:1569:11196":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8384:2065":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5959:16657":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42892:2096":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:20951:3960":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:7272:15273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:39325:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:10721:3855":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10403:16956":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:7654:2104":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:41992:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:9083:16793":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6303:16668":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9952:16865":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:3934:3713":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:43764:9226":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10923:3644":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:7763:16727":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:40898:9487":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:11318:9639":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:10054:3564":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41914:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10745:26610":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:44494:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13109:20264":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6820:14900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9806:16854":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:6692:16688":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:1543:3713":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:1578:3585":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2519:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:6250:16666":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6160:31588":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:3837:3775":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:42590:27335":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22595:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:11128:26283":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4341:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:22089:3782":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:8743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:41465:3766":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:7869:3693":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:365:31211":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7679:16722":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:3330:3568":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:1527:11192":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14189:21025":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:2740:2120":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:2781:15734":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40056:9326":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:5557:3866":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12671:20236":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6044:30895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:22103:3781":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11313:21204":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11354:16834":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6386:16675":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:39250:9560":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6726:14895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5774:3890":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4944:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"15:394:15675":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:9604:16827":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:7227:9494":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12566:20228":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3182:24459":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:719:21068":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5805:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5737:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:0:1785":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:7277:2126":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4323:16192":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:12384:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:644:32414":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1638:11202":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12346:17018":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:22727:3783":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:1027:15628":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7609:15463":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9966:16827":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:42910:27334":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:30377:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11955:19715":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:3395:16978":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44159:9249":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12711:20238":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:40354:9495":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:9163:26675":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:10430:16957":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:5368:9169":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12377:20217":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9840:16856":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11084:17024":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:1506:11189":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11454:16839":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13882:21002":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:4785:26970":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:6347:16672":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2779:9544":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3722:3602":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43338:9184":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13830:20997":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6427:16677":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1566:3583":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:43458:9192":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2590:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:10814:26288":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:207:9151":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:12002:647":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:9223:16821":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:1426:3564":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4389:9302":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:42655:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"14:40:19707":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:43448:9194":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:39451:27810":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:12424:20220":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:12015:1140":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:40108:9328":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:40664:3726":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7707:16724":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:9093:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11234:17066":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:4263:9294":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4810:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:3596:3564":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:2465:15721":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11020:17027":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:551:3521":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:14329:21035":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12333:20216":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:5877:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:477:26754":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:12578:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6805:14899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13448:20974":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13905:21004":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:4564:16289":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:39638:21779":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:1884:2054":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40162:9323":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:41659:2100":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42189:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:8322:2072":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11888:19711":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:8924:16816":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12354:17016":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12318:20215":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:4491:3828":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:488:10295":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:97:31229":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5767:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:46141:3974":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6850:14903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:9472:3694":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10981:17030":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4814:16371":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:5076:26663":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:504:16805":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:5981:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:948:3576":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:7223:3591":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8212:3728":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:833:2100":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:40889:3892":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3988:3791":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:20660:27157":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:1011:28736":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:4166:3713":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:6957:28762":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:21924:27336":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:530:31327":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10293:16917":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12605:20231":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:10231:3873":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:47069:3970":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:47950:9119":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:10272:9196":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"9:507:15511":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:4038:3794":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:7440:9163":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:699:21075":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4568:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:562:10303":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:49871:3963":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:12001:645":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41408:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:39347:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10805:3697":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:1561:3568":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:10795:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"7:0:1564":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:5471:3713":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:10234:9195":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7505:16712":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"6:4938:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12592:20230":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7753:16726":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4949:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"9:357:15524":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:4396:16241":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11144:17052":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2757:3938":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:40282:3674":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:8794:16812":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:40312:9175":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:9479:9345":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:0:1925":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:44299:9681":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10957:17056":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:1831:3568":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8219:3724":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:44334:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4815:3801":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:1822:2154":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:582:16806":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:12174:19731":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:11136:9695":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:1257:3577":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8402:2095":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9399:16823":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2980:3616":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:6243:3902":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:7569:26770":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:22463:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:2461:29845":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:43530:9216":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:3171:2100":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14177:21024":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:7193:2154":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:123:9978":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13787:20994":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:8550:2101":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:9195:24298":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13435:20973":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:45795:3967":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:864:3565":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:40442:9517":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10633:16970":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:7263:28812":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:6533:3896":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:2141:30329":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13456:20975":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:4383:3817":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"11:2174:28422":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12769:20241":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:4144:9306":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:22082:27323":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:8740:16810":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:9465:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:2355:3680":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11045:17023":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5067:16432":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5849:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7184:3599":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:5531:9506":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:21940:27101":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7739:16725":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4704:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6589:10178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4685:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4395:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:9234:2082":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:21573:26841":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:10927:24137":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8903:3909":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:21248:3950":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:3441:15747":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:7923:3602":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:7231:9493":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:1557:3567":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:634:3545":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:10091:23756":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:629:28730":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:7754:3644":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:11808:9207":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4428:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:46392:27277":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"9:330:15564":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"14:202:9250":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:7427:3656":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7622:16719":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10969:17057":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8206:3727":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:40136:9220":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5807:16652":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1835:3641":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12552:20227":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:3025:15742":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11994:1058":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1717:11210":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:5940:16656":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:40068:26987":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"8:0:1916":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:919:3572":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4535:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5775:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:12005:749":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:9344:32207":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7255:2069":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:10313:9199":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:7698:26800":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:2910:3598":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44087:9245":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46919:4036":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:46855:3981":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8452:2096":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:8329:3856":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}