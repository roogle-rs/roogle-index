{"root":"0:0:1826","crate_version":"1.0.48","includes_private":false,"index":{"2:12380:23201":{"id":"2:12380:23201","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12032:8438","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split_whitespace":"2:12358:26992","str::rsplit":"2:12386:23205"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43360:2956","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12392:28474":{"id":"2:12392:28474","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12032:8438","str::split":"2:12380:23201","prim@char":"1:12038:428","str::split_terminator":"2:12389:28473"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43428:8457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12410:28477":{"id":"2:12410:28477","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12032:8438","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::matches":"2:12407:2066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43582:8456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:26969":{"id":"2:12362:26969","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43652:8439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:2644":{"id":"2:12433:2644","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:26052":{"id":"2:12360:26052","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43614:2952","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:28481":{"id":"2:12421:28481","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:1821":{"id":"0:74-20:0:1821","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1821","glob":true}}},"2:12395:23207":{"id":"2:12395:23207","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438","str::rsplitn":"2:12398:23209"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43464:8427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:23194":{"id":"2:12354:23194","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12353:23193"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:28476":{"id":"2:12404:28476","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12330":{"id":"2:12330","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12331:836","2:12332:2184","2:12333:28466","2:12334:28467","2:12336:28468","2:12339:22285","2:12340:28469","2:12341:320","2:12342:319","2:12343:23168","2:12345:23169","2:12347:23170","2:12349:23171","2:12351:28470","2:12352:28471","2:12353:23193","2:12354:23194","2:12355:26968","2:12356:26411","2:12357:21791","2:12358:26992","2:12359:27003","2:12360:26052","2:12361:28472","2:12362:26969","2:12363:23211","2:12366:23212","2:12369:23213","2:12372:2226","2:12376:2183","2:12380:23201","2:12383:23203","2:12386:23205","2:12389:28473","2:12392:28474","2:12395:23207","2:12398:23209","2:12401:28475","2:12404:28476","2:12407:2066","2:12410:28477","2:12413:28478","2:12416:28479","2:12419:28480","2:12421:28481","2:12423:28482","2:12425:28483","2:12426:28484","2:12427:28485","2:12430:28486","2:12433:2644","2:12436:23214","2:12439:28487","2:12442:28488","2:12445:28489","2:12448:28490","2:12450:22806","2:12451:23110","2:12452:22807","2:12453:22803","2:12454:22802","2:12455:28491","2:12457:2768","2:12458:28492"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5528:22805":{"id":"5:5528:22805","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12453:22803"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12436:23214":{"id":"2:12436:23214","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:2183":{"id":"2:12376:2183","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12442:28488":{"id":"2:12442:28488","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:2066":{"id":"2:12407:2066","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12032:8438","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatches":"2:12410:28477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43564:8455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12454:22802":{"id":"2:12454:22802","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:23193":{"id":"2:12353:23193","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12354:23194"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12331:836":{"id":"2:12331:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12038:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:23168":{"id":"2:12343:23168","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:28466":{"id":"2:12333:28466","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12366:23212":{"id":"2:12366:23212","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12372:2226":{"id":"2:12372:2226","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41400:181","prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12363:23211":{"id":"2:12363:23211","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12334:28467":{"id":"2:12334:28467","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12342:319":{"id":"2:12342:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:28486":{"id":"2:12430:28486","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12445:28489":{"id":"2:12445:28489","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12457:2768":{"id":"2:12457:2768","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4556:2768"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43668:2769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12347:23170":{"id":"2:12347:23170","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12416:28479":{"id":"2:12416:28479","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12032:8438","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::match_indices":"2:12413:28478"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43528:8454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:28469":{"id":"2:12340:28469","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:28483":{"id":"2:12425:28483","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29149":{"id":"5:5510:29149","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2156","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2156","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:22803":{"id":"2:12453:22803","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:8774":{"id":"5:5511:8774","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:29150":{"id":"5:5514:29150","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12398:23209":{"id":"2:12398:23209","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12038:428","str::splitn":"2:12395:23207","self::pattern":"2:12032:8438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43482:8425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:26968":{"id":"2:12355:26968","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43330:8445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12386:23205":{"id":"2:12386:23205","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12032:8438","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::split":"2:12380:23201"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43378:8423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12339:22285":{"id":"2:12339:22285","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11592:8442"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29153":{"id":"5:5526:29153","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2156","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2156","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:23203":{"id":"2:12383:23203","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11848:8429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12332:2184":{"id":"2:12332:2184","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2979":{"id":"5:5527:2979","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:22804":{"id":"5:5529:22804","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12454:22802"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12351:28470":{"id":"2:12351:28470","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12044:1448","str::slice_mut_unchecked":"2:12352:28471","crate::ops::Index":"2:3068:2843"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29149","5:5511:8774","5:5514:29150","5:5517:29151","5:5525:29152","5:5526:29153","5:5527:2979","5:5528:22805","5:5529:22804"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12349:23171":{"id":"2:12349:23171","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:28485":{"id":"2:12427:28485","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12057:8433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12345:23169":{"id":"2:12345:23169","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12419:28480":{"id":"2:12419:28480","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29152":{"id":"5:5525:29152","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12451:23110":{"id":"2:12451:23110","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39432:23083","Self::is_ascii":"2:12450:22806"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39432:23083","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12458:28492":{"id":"2:12458:28492","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4553:28492"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43677:8450","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:26992":{"id":"2:12358:26992","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12359:27003"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43634:8441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:27003":{"id":"2:12359:27003","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12358:26992"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43643:8440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:22806":{"id":"2:12450:22806","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12455:28491":{"id":"2:12455:28491","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4555:28491"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43659:8449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1826":{"id":"0:0:1826","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[257,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.48\")]","#![allow(clippy :: module_name_repetitions, clippy :: needless_lifetimes,\nclippy :: return_self_not_must_use, clippy :: wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:1821"],"is_stripped":false}}},"2:12452:22807":{"id":"2:12452:22807","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12389:28473":{"id":"2:12389:28473","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12032:8438","str::split":"2:12380:23201","prim@char":"1:12038:428","`DoubleEndedIterator`":"2:7472:121","str::rsplit_terminator":"2:12392:28474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43410:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12356:26411":{"id":"2:12356:26411","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43336:8444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12401:28475":{"id":"2:12401:28475","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12426:28484":{"id":"2:12426:28484","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:23213":{"id":"2:12369:23213","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12448:28490":{"id":"2:12448:28490","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11993:127","`FromStr`":"2:11992:2142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11992:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11992:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:28471":{"id":"2:12352:28471","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12044:1448","crate::ops::IndexMut":"2:3072:2844","str::slice_unchecked":"2:12351:28470"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12341:320":{"id":"2:12341:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12342:319","`u8`":"1:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12413:28478":{"id":"2:12413:28478","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12032:8438","`DoubleEndedIterator`":"2:7472:121","prim@char":"1:12038:428","str::rmatch_indices":"2:12416:28479"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43510:8453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12439:28487":{"id":"2:12439:28487","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12038:428","self::pattern":"2:12032:8438"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12037:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12052:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29151":{"id":"5:5517:29151","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12423:28482":{"id":"2:12423:28482","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:28472":{"id":"2:12361:28472","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43624:8452","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12336:28468":{"id":"2:12336:28468","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12334:28467"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12357:21791":{"id":"2:12357:21791","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43346:2955","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:7102:15967":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:40254:8737":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:536:30970":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8964:3116":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13259:19539":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:41636:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:21014:1944":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:12051:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:8953:16081":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5060:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12531:19492":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:6979:8722":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:31903:3096":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11281:16324":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:10340:16174":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12543:19493":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4874:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6083:14949":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:41586:2137":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:11813:8943":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5010:13072":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2782:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:12043:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:9148:27249":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3321:8372":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:488:9550":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6204:15928":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:7191:2189":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:46373:3235":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:39018:8374":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9998:16131":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:6147:3309":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:4500:3053":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"11:2033:2805":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:39259:8516":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4946:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:2178:16169":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1138:28217":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:45370:3191":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5572:3091":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:43336:8444":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2366:2907":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"7:32:14743":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:399:30713":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4975:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:7443:2155":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:44294:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:40689:8726":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2907:15004":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:7430:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4772:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:9070:15903":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:7764:22638":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:653:9610":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10929:16246":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:43318:8448":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:6798:8504":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:12057:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:1012:2807":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5082:13080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:41602:2189":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12888:19514":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:10126:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:3565:16267":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:2933:15005":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10214:16173":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47773:8346":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:5551:8746":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:4526:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:4909:3076":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:12059:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:7608:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:8659:16053":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:41831:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9328:2955":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5845:13730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2380:14982":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:1557:2137":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:22316:3009":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:8115:16000":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12513:19491":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12098:18990":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:41516:2107":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:587:9562":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:7638:2766":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:4176:3045":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13174:19533":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13758:20244":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:21108:3185":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:638:2772":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10738:16285":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:6644:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13778:16138":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4725:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11547:16104":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11742:16112":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:6811:3167":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7090:30844":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2536:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:43668:2769":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10580:2750":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8004:21983":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4498:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11934:18980":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43812:8472":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:14163:20296":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11319:3099":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:2920:8796":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10962:16243":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:2598:2957":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:12833:3309":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13554:20250":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:574:31902":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:8665:8434":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11203:2933":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12598:19496":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3188:25959":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44103:8937":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3529:2950":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:1302:2808":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:8097:15999":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9074:21851":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:5640:3128":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:47217:3202":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10084:16130":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:43268:8421":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:21886:3174":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3115:2984":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:22283:27013":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:11987:21854":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"9:52:14791":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:12009:2779":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:41336:3004":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8807:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:3764:15022":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:6896:24970":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:39206:2785":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:1048:30712":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9445:16089":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:8114:2924":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:3461:15012":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:3224:2974":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:798:2800":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13851:20266":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3269:27271":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5891:13732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:44286:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:3648:2189":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5403:15903":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:6879:15959":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12997:19521":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:0:1957":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:1573:2811":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:2325:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:43087:26966":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:41264:2994":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:12925:2820":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4628:3017":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9137:16059":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13826:20264":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:1611:30691":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:8181:16004":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44079:8930":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12876:19513":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11661:16057":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13890:20269":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:8286:3049":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:4234:2137":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10240:16139":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7534:15978":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9019:25069":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14346:20306":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4628:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4189:3046":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4059:3021":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12373:19486":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10849:24771":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:1818:2137":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:43528:8454":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7597:30967":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1681:10461":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:10771:22067":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:8794:16076":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2665:1947":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:49671:3189":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:41458:2137":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:10023:16094":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9896:16123":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:9650:16093":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12123:18992":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4687:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7128:15968":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7884:15996":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10995:3095":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11376:21910":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:1911:10629":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:43258:8420":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11151:16329":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:5049:15683":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:5128:3111":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:3183:29516":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:624:31908":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:2180:30700":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:6361:15937":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:4638:22085":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:43226:8403":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13676:20256":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:5053:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13906:20271":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:40286:8752":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:4448:8537":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3303:2972":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:400:16070":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2788:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4830:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"11:1103:14894":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:506:9553":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:4641:15563":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:3019:2153":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:671:20349":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14076:20286":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:41449:2188":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:41909:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8481:2134":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:5886:13731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7462:15972":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:9153:27845":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8855:2137":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:7425:2883":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10432:3092":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:5449:3087":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:21421:3172":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10628:16233":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:11507:16102":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5363:15901":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"10:0:1955":{"crate_id":10,"path":["adler"],"kind":"module"},"1:12045:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:47689:8340":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40027:2885":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:4921:15651":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13228:19537":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2406:14983":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:2359:14981":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:12039:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:9907:26920":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:3720:2830":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6386:15939":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:42455:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:7637:1944":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13298:19541":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:8195:16005":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2539:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:10588:16230":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:3050:8373":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:515:20358":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2969:15006":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:3238:2814":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:22796:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:41483:2106":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3013:2151":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5996:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11482:3002":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:2250:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:20878:26456":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:5017:13073":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3166:2845":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:20880:26452":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:45625:3199":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"13:0:1951":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:5781:3115":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:7524:16072":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:7438:8390":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11261:16323":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:913:2797":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:13685:20257":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6915:15961":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:595:9563":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:7888:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:10516:8424":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:6788:8503":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4403:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:22003:26686":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:2966:29838":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:7683:2750":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"11:844:2804":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"14:221:14913":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6053:30515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:44167:8951":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4789:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:2201:2140":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:10298:2792":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3391:2982":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10447:16196":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:45595:3193":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:9026:21974":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:11084:8417":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:4976:1067":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:9114:2762":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:2141:28326":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4640:22087":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:12658:19499":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5574:15905":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:14478:20315":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:2409:1968":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12484:16288":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:10475:25021":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:9169:25039":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6582:10402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4850:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:4264:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:7875:2920":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:3232:15010":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:2962:28319":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:46609:3201":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:22125:27052":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:42663:27026":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:660:20348":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4766:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11150:3093":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11710:16110":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:14378:20308":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11761:16113":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2840:3162":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10637:16234":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:2170:28261":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13949:20274":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:736:20346":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:918:2798":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12044:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:30149:8498":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8540:2136":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:40722:8730":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:7726:2778":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11042:25018":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:9607:16092":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:2223:28336":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:9207:16085":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13981:20277":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:9003:16083":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:14056:20284":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10520:16227":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4168:3044":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:39947:8558":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:261:29463":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:8242:2991":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:8996:21842":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:10949:16242":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:12870:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:7375:21984":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7360:31210":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:4032:29463":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12671:19500":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:7245:2189":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9531:31891":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:7732:2809":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:5609:8736":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"15:306:14928":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:4417:15507":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6960:15963":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:43949:8477":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2793:2755":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10160:22032":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:13989:20278":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8212:2955":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6318:15933":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:541:2476":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"18:690:20351":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:25777:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:3212:2811":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11388:21790":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3264:2976":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:4985:2941":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:5838:13729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1776:2796":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:3797:15031":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:8154:16002":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:39839:8523":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13567:20251":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5046:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4864:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9099:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12043:18986":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:4268:8525":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:357:14788":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:31964:8852":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6901:15960":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2781:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12252:19001":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:9685:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:21064:26876":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:45416:3232":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4572:3069":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:14100:20289":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4783:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4508:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:40011:26651":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43330:8445":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:3016:2152":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:46192:26757":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:39935:8557":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12196:18997":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"18:609:31932":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14514:20317":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2783:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:5995:15924":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4742:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:4019:26934":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6156:15927":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:40216:8747":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:22056:26689":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:10540:2972":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:9924:24973":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:285:30697":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:43781:8470":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7584:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7391:15970":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:40225:8748":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:5633:3127":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4835:15637":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:871:2793":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:3741:3002":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:5322:15884":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:8009:2968":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:47467:3242":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:44350:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6944:30978":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10250:3098":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:7594:25023":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10383:16167":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"14:31:14903":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:35:2846":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:7259:9509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:14:2069":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:3581:2137":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:14221:20298":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:97:30704":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8305:3000":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:14110:20290":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:805:2801":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6729:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:47803:8348":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:8848:16078":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:42655:8586":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:45665:3211":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11176:24776":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:12046:8436":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11316:16325":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:8205:2954":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:14090:20288":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:45795:3234":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4919:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40193:8745":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3229:8803":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11272:16333":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:10811:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"9:393:14773":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:8594:16056":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:3419:2941":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6041:15926":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:40133:2953":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43187:8404":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:4527:15545":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:9470:2111":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:11164:3094":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:22631:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:2696:14995":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:646:2774":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4931:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:11774:8944":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:44379:8360":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3244:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12846:19512":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:42390:27012":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:9053:21913":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:9481:2922":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:1557:10450":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7131:21763":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:504:16071":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:2959:2249":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6531:15948":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:119:9232":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4652:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12007:18984":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8556:1942":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6968:15964":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10980:16093":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:9104:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4552:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:736:2794":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"7:79:14750":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8331:3079":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3284:8371":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2493:1944":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:1696:10463":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:8167:16003":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:507:31902":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"10:36:30690":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10420:16223":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:4138:21778":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:7472:14698":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:39928:8449":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:7199:2818":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:7337:2140":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:14420:20310":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4844:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11719:16111":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:1717:10465":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12061:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12267:19002":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11619:14936":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12810:19510":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:39833:2769":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:43795:8471":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13838:20265":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:40146:8734":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4889:15643":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:2845:3164":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:3009:2150":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:7396:26651":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5964:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:6485:29463":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:46869:3196":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43138:8412":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:4986:15668":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6742:14921":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:38979:8519":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:6610:3126":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:2596:14991":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:2938:8800":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:2832:15001":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:8558:2108":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:45847:3246":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:7463:8480":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3522:2928":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41207:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:9242:16086":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4430:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:782:2815":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:40074:2901":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8291:3050":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:39954:8559":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:22192:27039":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10292:16093":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:4426:29483":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:3830:15040":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:1121:2808":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12945:19517":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14355:20307":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:727:20353":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:7858:2919":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:3171:2137":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5776:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:4031:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:932:2801":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:922:2799":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:22254:26656":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:2828:2149":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:2562:2965":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:1633:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43464:8427":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8408:2132":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12056:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:4862:15640":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8978:21979":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:3989:3015":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:43652:8439":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10603:16231":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1631:10456":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:207:8378":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7513:15976":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6003:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6616:14154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10440:16225":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:149:14955":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:43410:8458":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:8237:2999":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11490:16101":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:9472:2120":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"11:2049:2806":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13040:19524":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7929:2830":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1781:2851":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:8896:3131":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:1921:8375":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9867:16121":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6076:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"9:426:14774":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4820:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:9172:16084":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11313:21959":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3744:3001":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6735:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10265:16171":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:2368:2646":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43887:8474":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:12052:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:2864:15002":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:2159:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7041:31026":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:12822:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:10097:16129":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10726:16284":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6569:15950":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:7889:2823":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6696:14922":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9701:16094":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:9201:22042":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3513:25568":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:41675:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13575:20252":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:43938:8476":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:6199:26922":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6929:15962":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4666:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7054:30947":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:7514:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:6079:2941":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47651:3269":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10468:16226":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:6850:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:11523:3001":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:13816:20263":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:5798:15917":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13792:20261":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"11:1538:14897":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:4123:8540":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:2867:8786":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11951:18981":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:5434:3086":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:43924:8475":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:817:2802":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:526:9554":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:14033:20282":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:21670:3187":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:6791:2197":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4731:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:6843:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:6769:8502":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4051:3020":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:8550:2137":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41594:2792":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2831:8369":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:4320:3048":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:11117:8418":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:6596:3125":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"18:491:31929":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:1076:2808":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:6955:29507":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:4007:26935":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:30747:8573":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5712:15913":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:40316:8754":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9711:31882":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10186:16161":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:4448:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4293:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:7662:2753":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:42164:2120":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:531:20359":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:562:9558":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:1426:2792":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:42910:26417":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10685:16240":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:538:20360":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4697:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:11578:8896":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6017:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:47709:8342":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6805:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:45941:3200":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:44111:8932":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9823:16119":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12724:19504":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:44392:27036":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:9841:8907":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:5131:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2362:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13244:19538":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:2644:14993":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:1838:2811":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:878:2817":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4897:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5027:13074":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6657:10587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2810:15000":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6467:15944":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3068:2843":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:13914:20272":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:4002:2795":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1273:2807":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2888:25006":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7282:2189":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:21323:3175":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13487:20248":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2542:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:9574:31898":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3348:2961":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:39184:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10534:16198":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1590:2814":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4003:3017":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:6298:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:10537:2976":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:21774:26283":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2670:14994":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14522:20318":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11124:16299":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:4706:3052":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:12042:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:22664:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10646:16280":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:564:20361":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:4164:2941":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:4196:8391":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10366:16181":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:590:27020":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:534:2746":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41792:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:14499:20316":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:9720:8583":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:276:2156":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:4918:3077":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10278:16170":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:43860:8473":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:641:2773":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:42446:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:6427:3117":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12058:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10714:16283":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:6930:29494":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:44337:3308":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"11:644:2792":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"14:0:1958":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11226:16331":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:11586:16106":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"11:1501:14895":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6352:15936":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:9418:2092":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:20820:8573":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9350:16055":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:12063:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4465:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10036:16137":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:9725:8584":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"9:450:14772":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:1442:2189":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7660:15986":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:2168:30701":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:7211:2795":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:45546:3239":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14460:20313":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:5088:15698":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:31957:8534":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:14335:20305":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:8458:2133":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10410:16188":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:261:31883":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:21884:1944":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2766:14998":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:11592:8442":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12208:18998":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:4743:3027":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2744:14997":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:6637:29463":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:10599:8426":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:483:25008":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:311:30705":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:5366:8396":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:7538:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13148:19531":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:1184:16144":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11221:21861":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:3504:2092":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:4824:3026":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1638:10457":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11162:16294":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4802:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:1495:10442":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6818:15957":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:4240:3047":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:5760:15916":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:364:2765":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3939:3013":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7708:15988":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:47724:8343":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8833:3094":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:7397:8732":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:2998:2826":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:573:9560":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:4160:3043":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:7532:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:47327:3236":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:2690:28312":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40245:8749":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10456:16195":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:1831:2796":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:46449:3247":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:43248:8422":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11617:16107":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:10557:8427":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10616:16232":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:1011:29463":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:47826:8349":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:884:2794":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4415:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:12037:8434":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13451:20247":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:46017:3261":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12060:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13710:20258":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:7853:2922":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9564:16091":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"14:40:18980":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:44091:8934":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:11562:8894":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:46719:3262":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:3594:2792":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3669:29463":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2930:8798":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:7595:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"15:0:1959":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4986:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42895:8923":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:11394:21785":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:8978:16082":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:2223:2904":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:9461:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9486:25020":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:1759:8826":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:20833:26278":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7828:15994":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10840:24773":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:8050:15997":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2613:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13085:19527":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:39120:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11337:16336":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:45702:3266":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:1547:2941":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:12054:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:44095:8938":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12062:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2771:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:1492:2798":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:32051:8765":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2833:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43677:8450":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:11848:8429":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:22730:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:11240:2762":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:6439:2795":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:40666:8724":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:7618:14727":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5384:15902":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4520:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:20848:26278":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:1058:2806":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:8281:16008":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:22763:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:10801:2923":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:505:2742":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13693:20245":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3185:24966":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:5866:15919":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:22565:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:6250:3127":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14282:20300":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:9521:16090":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1506:10444":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:8871:2189":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:30171:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:2861:8787":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:614:31913":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:9133:2933":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:7582:15982":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:5816:31042":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:4392:3042":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:9468:2112":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:667:2798":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:4363:29483":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10776:2919":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:7555:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:31950:27266":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:2504:14987":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:3305:2973":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2356:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:40714:8728":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:6627:14155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:2526:14988":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:4347:8534":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4856:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:500:9552":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:2546:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9474:2121":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:2618:14992":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:1924:2090":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10126:16158":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:6243:15930":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7768:15991":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7905:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2216:2902":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:7023:24760":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:4613:15559":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40104:8402":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:31943:16007":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:5872:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7862:15995":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:30185:26643":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:47750:8345":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:1068:14893":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5988:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:11053:25010":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3997:3016":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:949:2803":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11351:16337":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:1845:2812":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8498:2135":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12473:16287":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:9436:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"13:226:30719":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9455:31875":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7613:15983":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:8895:16079":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4957:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:40184:8744":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:43972:8459":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43659:8449":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12437:19488":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8847:3095":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:943:2802":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46215:26758":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"0:0:1826":{"crate_id":0,"path":["thiserror"],"kind":"module"},"16:7523:15977":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:14173:20297":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:558:2748":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:41543:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:2243:28264":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:6010:8758":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:9031:21967":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12830:19511":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:44099:8936":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13162:19532":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:12041:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43378:8423":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:5418:3085":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:11296:25015":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:8162:2925":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10916:16245":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11346:21850":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6560:31165":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:10561:16193":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13922:20273":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8335:3081":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:0:1962":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:41611:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12685:19501":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:723:2793":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:8134:16001":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:4273:8526":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12024:18985":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6485:15945":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2909:8793":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13274:16110":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:46531:3195":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8297:3041":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40456:2954":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9945:16139":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:12628:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:42692:2133":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"17:10059:16135":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3447:2927":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13868:20267":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10575:16229":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:43304:8451":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5972:3127":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:45749:3170":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:3204:2813":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:955:2804":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4680:3011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:11797:8941":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14083:20287":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3266:2977":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9780:16096":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6332:15934":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:30719:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:4337:8533":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7006:15965":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"9:0:1954":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:14118:20291":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:12004:21964":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:22238:26642":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:836:2803":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:42028:3112":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:629:28311":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"5:1257:2805":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:6880:8741":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:11737:8942":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6226:15929":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:568:9559":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:0:1960":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41313:26662":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:8142:2981":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:6031:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2450:14985":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:9959:16134":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:1822:2189":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:793:2797":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7651:15985":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:39890:8563":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12737:19505":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10903:16247":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4756:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11173:16330":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:2219:2903":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13802:20262":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:42680:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:6145:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:39848:8562":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14068:20285":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9985:16132":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12911:19515":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7342:31187":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6844:15958":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:7535:22035":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:6720:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6687:15953":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12154:18994":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:7886:2141":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:14316:20303":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10507:16197":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11448:16099":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11244:16107":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:10788:16286":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7269:31193":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:9466:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:42157:2112":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8174:2929":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:4401:8536":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:2382:2911":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:6165:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:8686:16073":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:2879:8789":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:123:9233":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:42495:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:4585:15555":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13723:20259":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:3239:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:43564:8455":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:332:30710":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:45564:3245":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:8205:16006":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:7182:2827":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:481:20356":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:41714:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:40164:8742":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:1569:10451":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13966:20275":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:532:9555":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:43428:8457":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8863:3136":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4940:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:22200:26544":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13135:19530":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6721:15954":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11023:16248":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12621:19497":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11111:16300":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:1568:2796":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4706:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4054:8368":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13055:19525":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8819:3093":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:21315:1944":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:80:20332":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:40267:8750":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:42702:26261":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:695:2799":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:39096:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:40234:8757":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:12055:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:41526:8880":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:45350:3226":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:10443:8430":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2305:14978":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:8909:3134":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:636:31915":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:40277:8751":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4397:12849":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:42914:8405":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4438:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:5839:2795":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:1702:3038":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40302:8753":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:10366:8429":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1673:10460":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5746:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7722:15989":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10747:3080":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2394:2917":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:4194:2941":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5827:13728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11059:24972":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10661:16281":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:43482:8425":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6045:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:657:2189":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:44367:8362":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:43614:2952":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:1670:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11381:16339":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:11389:16097":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:926:2800":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:7525:2154":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:10789:21922":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11886:18978":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:9102:16058":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11573:16105":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:1826:2795":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8925:3132":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:43147:8411":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:0:1961":{"crate_id":17,"path":["object"],"kind":"module"},"6:62:9178":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:47405:3208":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:47865:8350":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:1779:2850":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22928:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:9972:16133":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:39245:8507":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:30243:26633":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:40680:3117":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:43166:8413":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10962:3088":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:3975:3014":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:8825:16077":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11367:16302":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:5982:15923":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:699:20352":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12086:18989":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:2339:14980":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43744:8468":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:9790:31889":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:12052:8435":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8567:2139":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:12049:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:6163:25000":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:13188:19534":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:2150:16210":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:4719:15617":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:7848:2921":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:2548:14989":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:1561:2189":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:39238:8804":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:46295:3229":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:7865:2923":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:7474:8481":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"9:507:14775":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:630:2137":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:1520:10446":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:43992:8460":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12970:19519":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7782:15992":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6545:15949":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:5648:15909":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:21416:1944":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"20:0:1821":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:47529:3263":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:31939:22638":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:256:31873":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:44134:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9660:31890":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:1858:2814":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1663:10459":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:21255:1944":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4545:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7436:15971":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41474:2189":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:12038:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"14:165:14904":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:43213:8402":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:7209:3106":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5419:15904":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7318:15969":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:41372:2996":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:4750:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:41989:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:4478:3052":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10197:16187":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12184:18996":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:760:2796":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6600:15952":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4471:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:22304:3007":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:853:2792":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:39920:2769":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:40466:8755":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:8801:3092":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12074:18988":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:21:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:3330:2796":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1503:2799":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:9476:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5808:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12237:19000":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:43643:8440":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:22829:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11639:16108":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:46063:3268":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11086:16328":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5929:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:47075:3230":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:6194:27051":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:11910:18979":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:4622:8550":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:1750:27016":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:39961:8560":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:10165:16160":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:3256:8520":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:1579:2812":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2272:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:3178:2812":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6829:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6607:14153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:7393:8733":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"10:44:14882":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:6558:2189":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:2194:30693":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7492:15974":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:21066:8815":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6376:15938":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9281:2867":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:21185:3181":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11000:16250":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:2186:30703":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:10116:1944":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:1895:2089":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"18:644:31902":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1733:10466":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:21762:3168":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:2875:3165":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:4951:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:45524:3233":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:12048:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:42710:26262":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:45462:3198":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"9:237:2133":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:6543:3122":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:42473:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:10750:16241":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:46419:3241":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7621:15984":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4994:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:4967:2098":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:12032:8438":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:822:2816":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:6753:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:5435:30915":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:7913:25067":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46161:26759":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:8985:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:2428:14984":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9912:16124":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7694:15987":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:6634:3081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:11612:25060":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:7567:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:21199:8815":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13113:19529":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4306:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:2253:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:554:9557":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:10571:8425":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4330:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:47575:3214":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43510:8453":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5963:15922":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:6358:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:21440:1944":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6024:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:547:9556":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:2960:29839":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:45647:3205":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9852:16120":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4618:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13286:19540":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:5975:9152":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:40174:8743":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11845:16346":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:8151:2983":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6346:15935":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:22697:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"11:365:30708":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:9933:16143":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40041:2887":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:4889:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:1102:28208":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:39994:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:30349:26630":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2169:8815":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:43360:2956":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:14145:20294":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:41384:2997":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14469:20314":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:10766:22101":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:6188:8738":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:7231:28315":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1595:10454":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11235:16332":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10139:16159":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:2576:24973":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4608:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4718:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40155:8735":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13739:20260":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2970:29837":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9051:16054":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10316:16176":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5909:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:12057:8433":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4589:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6401:15940":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:434:14952":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6086:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:482:9549":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:3735:2831":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:1482:2797":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:5569:3089":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:681:20350":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11074:16327":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12959:19518":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:10478:8423":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:39140:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:41349:2995":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12172:18995":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10547:16228":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13101:19528":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:41398:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12790:19509":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:1672:29463":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12136:18993":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6456:15943":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:29923:3005":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:863:2189":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8983:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2638:2967":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7999:25052":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11815:16345":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1603:10455":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:7529:2796":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:13422:20246":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:42430:27050":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42400:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6859:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6893:30916":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8941:3135":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11687:16109":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:45895:3194":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"8:0:1953":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:521:20355":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9488:31884":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:2530:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:7657:2751":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"11:2174:27299":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11191:16108":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:6877:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4806:15632":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:39080:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2855:8784":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2320:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:6415:15941":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7412:2882":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5830:15918":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:840:2137":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5070:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:41950:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:1288:2806":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:1527:10447":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8225:2952":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:12711:19503":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:4804:26948":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3800:2796":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:2943:8801":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:3315:15011":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:1640:8712":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:4343:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4812:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:1118:29832":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11822:24762":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13897:20270":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:474:9548":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2892:8794":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"11:1517:14896":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:20863:26454":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2494:8577":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:707:8436":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:113:20334":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"14:215:14912":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:10672:16282":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11137:16298":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:41247:2993":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:45993:3212":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:5085:25042":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6431:3118":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:1075:16136":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13667:20255":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:8926:16080":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:14401:20309":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:2881:15003":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:5017:15675":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:3846:3003":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:45440:3192":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8218:2956":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6513:15947":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:21016:3178":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:7520:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:43624:8452":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:2472:14986":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:44155:3166":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6784:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"13:110:30766":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:10977:21846":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:41753:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:11158:8410":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:5311:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11295:16334":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:10949:2871":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:10821:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:47678:8339":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"5:7221:2819":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:4344:15458":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9086:15904":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:40673:26979":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13010:19522":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:40124:2841":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:45494:3228":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"9:177:14877":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:1817:2861":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13546:20249":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4801:3032":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:21665:3179":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:30155:8777":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6753:15955":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:1500:10443":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10430:16224":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:1852:2813":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:10534:2974":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11215:16297":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:3217:29522":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:39876:8561":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4422:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2788:14999":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5858:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:9677:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4910:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40480:8756":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6792:15956":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:14296:20301":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44087:8935":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:7382:2884":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:43156:8415":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5976:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5899:13733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5661:15910":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12452:19489":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:9191:22099":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:2171:8816":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:7015:15966":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:42150:2111":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:8072:15998":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:12103:8462":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4826:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:1464:2793":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:44329:3307":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11361:21923":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:5403:2941":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:13202:19535":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:7744:2870":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:21449:3176":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10340:25606":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:7281:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:4745:15619":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"15:327:14932":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6598:9433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7792:15993":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:2624:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13215:19536":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:22895:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:7737:2810":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:44083:8933":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14126:20292":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:8765:16075":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46685:3213":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:7349:2791":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:4703:3078":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12554:19494":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:42671:8585":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:45825:3240":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:4154:8541":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:20861:26457":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:2778:1950":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5784:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"11:1027:14892":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2883:8788":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1536:10448":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:1824:2834":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:2722:14996":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:96:20333":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:22290:3008":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8989:2745":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:10102:25049":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:4382:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:1523:2829":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:41870:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3465:2926":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:5754:3114":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:39912:8450":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"14:7:14903":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:42171:2121":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10831:2925":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12698:19502":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:9478:2118":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4745:3030":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14269:20299":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5743:15915":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:22177:26671":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:12053:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10012:16093":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12496:19490":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:2060:2807":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12062:18987":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:43582:8456":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:599:31918":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6180:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6574:9598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43239:8419":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:39900:8564":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12422:19487":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:8556:2138":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:652:31902":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4370:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:39999:2886":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:5988:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:21052:3180":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:45971:3206":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:7760:2871":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10585:8428":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:986:2806":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:1585:2813":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:3032:15007":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6714:14156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4391:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:22165:3006":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:43766:8469":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:44276:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:0:1956":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:10494:16199":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"14:187:14911":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11459:21781":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:1067:2807":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:7581:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11535:16103":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:2131:2742":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:5054:25042":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14156:20295":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:40326:8739":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:40695:2982":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:39065:8802":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7575:25013":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:3191:25960":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:5121:15707":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10698:16262":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2533:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13876:20268":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:23375:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5243:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:12615:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:6697:10570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:12702:8581":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:2779:8370":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7503:15975":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:3655:15014":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8357:3029":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:12650:26868":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10081:2861":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:12778:19508":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12983:19520":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:4774:15624":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6279:15932":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:6306:3311":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7067:30939":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:10953:22041":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:2934:8799":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11473:16100":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:14434:20311":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4642:22089":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:9474:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5802:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:47669:8338":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:7711:2777":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10397:16222":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9617:31886":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9277:16087":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12765:19507":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6037:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6499:15946":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:2926:8797":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:21337:3176":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:4037:3018":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11971:18982":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:39432:23083":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:3935:2941":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:5362:8395":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:4047:3019":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12934:19516":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:5696:15912":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:719:20345":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:9372:16088":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11048:16314":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:5747:3113":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:5384:3083":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:5826:2780":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:7149:2981":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:897:2795":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:47613:3248":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10323:3087":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"14:202:8479":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1649:10458":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1690:10462":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8195:2953":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:7921:2966":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:11626:14936":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:8713:16074":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12576:19495":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5626:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:10323:2956":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4462:15528":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12750:19506":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13632:20254":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:43346:2955":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3679:2998":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10771:16261":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:1840:2867":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:5318:29463":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:9109:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46655:3207":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10370:16168":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8279:2995":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4747:3031":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:3072:2844":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:7304:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:5491:2941":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12305:19005":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:21271:3171":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:11358:16338":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:9480:2119":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8390:2102":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12036:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:43634:8441":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:47735:8344":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7736:15990":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:14448:20312":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:12645:19498":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:2035:2830":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:6680:10572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:4074:2792":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:2887:8790":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7287:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:2836:8764":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:47698:8341":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:2904:8792":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9886:16122":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:12037:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:4949:15655":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:8980:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:39860:26564":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:5954:3111":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:45394:3227":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:12050:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:10405:8416":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:119:30707":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:21152:3186":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:45684:3260":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:40084:2900":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:6139:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4640:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4796:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:2499:2964":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12280:19003":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10100:21762":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:7290:2189":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1842:2868":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:7930:27250":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:21238:3177":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:14013:20280":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7554:15980":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:3441:16249":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3405:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:1545:10449":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14536:20319":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11306:16110":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:43959:8478":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:7526:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1513:10445":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:21317:3173":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40202:26970":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:7261:28232":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4485:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2574:14990":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:358:2764":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:755:20354":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4376:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41230:2992":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:1575:10452":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:4557:15551":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:2850:8785":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3945:3012":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1709:10464":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11991:18983":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:749:2795":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:5612:8502":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8313:3051":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11872:16347":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:6071:25002":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4458:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10227:16172":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:30115:2825":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:2012:16175":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:10274:2137":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:2461:28317":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6017:15925":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:3232:16244":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:5398:3084":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:46039:3267":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5076:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12293:19004":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:43176:8414":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:7434:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:494:9551":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14134:20293":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4537:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:7549:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:6981:22040":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:6195:21962":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:12677:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22862:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11407:16098":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:8557:2109":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:582:8573":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4558:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:403:30714":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40704:8727":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:7561:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:46114:26791":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6425:15942":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:44115:8950":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:589:2767":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:6540:3121":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:4421:2754":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:7573:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:44107:8931":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13024:19523":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:6928:26977":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2914:8795":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"9:330:14828":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:1044:2805":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9977:22124":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:6268:31197":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:2209:16194":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:3065:15009":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4317:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:8239:16007":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:895:2137":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:4393:2941":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:579:9561":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:14308:20302":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"15:394:14939":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:22217:26638":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"15:288:14927":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:22109:26551":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:907:2796":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:11600:8356":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:2384:2912":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:21447:3182":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:3250:8521":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:5905:15920":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10112:16157":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:2049:2831":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6189:30968":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2321:14979":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:22598:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11201:16295":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:2985:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:9762:31885":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:622:2091":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:41466:2792":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3915:15077":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11184:8950":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:7893:8731":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5939:15921":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4570:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7474:15973":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1590:10453":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:582:16072":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14024:20281":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4835:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5634:15908":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11327:16335":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:9039:15968":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:39980:8556":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4965:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7544:15979":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:2899:8791":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:42418:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:12258:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:2871:3163":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:7472:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13973:20276":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:3049:15008":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:4053:15191":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11062:16326":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:11992:2142":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6583:15951":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:4497:15539":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:11544:3003":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:39162:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10478:16221":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:766:20347":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9752:16095":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4477:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1473:2794":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:9152:3161":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:1411:2137":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:12020:21828":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13071:19526":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11098:16301":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:3600:15013":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6261:15931":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:3888:15074":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"14:160:14903":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5673:15911":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:968:2805":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:7284:2106":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:14001:20279":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:7545:8499":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:47788:8347":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8231:3000":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:5588:15906":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:1564:2795":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3226:2975":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11788:16344":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9921:16149":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7568:15981":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:14324:20304":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:5612:15907":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8877:3133":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:6467:3124":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:41293:27027":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:5814:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12111:18991":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6814:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:3514:2795":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:4783:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"4:0:1952":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:14042:20283":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12225:18999":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2284:14950":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:1736:8827":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:9939:26185":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:41535:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"9:486:14771":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:22141:26536":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4491:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5503:3088":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:4392:8535":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5727:15914":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12465:16289":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13611:20253":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}