{"root":"0:0:1731","crate_version":"1.0.39","includes_private":false,"index":{"2:11933:31576":{"id":"2:11933:31576","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:3948":{"id":"5:5303:3948","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1840":{"id":"0:59:1840","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3389:1838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11921:2895":{"id":"2:11921:2895","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:24706":{"id":"2:11842:24706","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11841:24705"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11843:29229":{"id":"2:11843:29229","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50696:9365","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1729":{"id":"0:48:1729","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1837"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}},"0:65:1835":{"id":"0:65:1835","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11831:24682":{"id":"2:11831:24682","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11824:31555":{"id":"2:11824:31555","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11822:31554"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11837:24685":{"id":"2:11837:24685","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11847:3598":{"id":"2:11847:3598","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11846:3600"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51009:9360","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11851:24721":{"id":"2:11851:24721","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11909:31568":{"id":"2:11909:31568","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11889:31562":{"id":"2:11889:31562","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:3:1722","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:8139:1833","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1836"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11835:24684":{"id":"2:11835:24684","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:31563":{"id":"2:11892:31563","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:31577":{"id":"2:11936:31577","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11482:126","`FromStr`":"2:11481:2056"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11481:2056","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11481:2056","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":{"restricted":{"parent":"0:3:1722","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:12:1836"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11857:24723":{"id":"2:11857:24723","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1836":{"id":"0:18:1836","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:32229":{"id":"5:5293:32229","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1836":{"id":"0:8:1836","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11845:20953":{"id":"2:11845:20953","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50712:3921","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:31560":{"id":"2:11877:31560","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11520:3487","str::split":"2:11868:21119","prim@char":"1:11840:409","`DoubleEndedIterator`":"2:7125:120","str::rsplit_terminator":"2:11880:31561"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50776:9378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:31561":{"id":"2:11880:31561","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11520:3487","str::split":"2:11868:21119","prim@char":"1:11840:409","str::split_terminator":"2:11877:31560"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50794:9377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:31572":{"id":"2:11915:31572","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11545:9354","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:24400":{"id":"2:11939:24400","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849:31559":{"id":"2:11849:31559","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50990:9372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:24401":{"id":"2:11940:24401","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:310":{"id":"2:11829:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11830:24686","`u8`":"1:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5301:32230":{"id":"5:5301:32230","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1366","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:32227","5:5287:3925","5:5290:32228","5:5293:32229","5:5301:32230","5:5302:32231","5:5303:3948","5:5304:24398","5:5305:24399"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":{"restricted":{"parent":"0:3:1722","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1836"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11864:2106":{"id":"2:11864:2106","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1835":{"id":"0:25:1835","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11874:24715":{"id":"2:11874:24715","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11520:3487","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::split":"2:11868:21119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50744:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11898:31564":{"id":"2:11898:31564","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11520:3487","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::matches":"2:11895:1961"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50948:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:31579":{"id":"2:11945:31579","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4498:31579"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51043:9370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:24399":{"id":"5:5305:24399","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11941:24402"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1840":{"id":"0:63:1840","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3389:1838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:31578":{"id":"2:11942:31578","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4500:31578"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51025:9369","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1836":{"id":"0:15:1836","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:1961":{"id":"2:11895:1961","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11520:3487","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::matches":"2:11895:1961"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50930:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:24398":{"id":"5:5304:24398","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11940:24401"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1730":{"id":"0:58:1730","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:59:1840"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}},"0:51:1837":{"id":"0:51:1837","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5275:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:24402":{"id":"2:11941:24402","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11828:31556":{"id":"2:11828:31556","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:3:1722","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1836"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11821:3367":{"id":"2:11821:3367","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1728":{"id":"0:43:1728","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1837"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:54:1724","path":"::provide"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3377:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2680:1842","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:63:1840"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:24:1836":{"id":"0:24:1836","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:24705":{"id":"2:11841:24705","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11842:24706"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:31570":{"id":"2:11913:31570","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:31571":{"id":"2:11914:31571","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11918:31573":{"id":"2:11918:31573","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:32228":{"id":"5:5290:32228","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11930:31575":{"id":"2:11930:31575","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11827:27308":{"id":"2:11827:27308","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11088:9362"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:2148":{"id":"2:11860:2148","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48736:176","prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11818":{"id":"2:11818","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11083:1366","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11819:797","2:11820:2107","2:11821:3367","2:11822:31554","2:11824:31555","2:11827:27308","2:11828:31556","2:11829:310","2:11830:24686","2:11831:24682","2:11833:24683","2:11835:24684","2:11837:24685","2:11839:31557","2:11840:31558","2:11841:24705","2:11842:24706","2:11843:29229","2:11844:28720","2:11845:20953","2:11846:3600","2:11847:3598","2:11848:21120","2:11849:31559","2:11850:3285","2:11851:24721","2:11854:24722","2:11857:24723","2:11860:2148","2:11864:2106","2:11868:21119","2:11871:3599","2:11874:24715","2:11877:31560","2:11880:31561","2:11883:24717","2:11886:24719","2:11889:31562","2:11892:31563","2:11895:1961","2:11898:31564","2:11901:31565","2:11904:31566","2:11907:31567","2:11909:31568","2:11911:31569","2:11913:31570","2:11914:31571","2:11915:31572","2:11918:31573","2:11921:2895","2:11924:24724","2:11927:31574","2:11930:31575","2:11933:31576","2:11936:31577","2:11938:24397","2:11939:24400","2:11940:24401","2:11941:24402","2:11942:31578","2:11944:3739","2:11945:31579"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11907:31567":{"id":"2:11907:31567","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:31558":{"id":"2:11840:31558","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11846:1366","crate::ops::IndexMut":"2:2996:3812","str::slice_unchecked":"2:11839:31557"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11901:31565":{"id":"2:11901:31565","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11520:3487","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::rmatch_indices":"2:11904:31566"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50876:9373","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11844:28720":{"id":"2:11844:28720","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50702:9364","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11868:21119":{"id":"2:11868:21119","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11520:3487","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::split_whitespace":"2:11846:3600","str::rsplit":"2:11874:24715"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50726:3923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:12:1836":{"id":"0:12:1836","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11883:24717":{"id":"2:11883:24717","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487","str::rsplitn":"2:11886:24719"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50830:9346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:24397":{"id":"2:11938:24397","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:37:1723","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5095:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1837"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:44:1837":{"id":"0:44:1837","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11850:3285":{"id":"2:11850:3285","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51018:9359","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:37:1723","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9011:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1837"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6:1727":{"id":"0:6:1727","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:8:1836"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:22","0:13","0:9","0:16","0:19"]}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:37:1723","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5207:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1837"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:53:1837":{"id":"0:53:1837","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5275:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1731":{"id":"0:0:1731","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[255,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.39\")]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:68-20:0:1725"],"is_stripped":false}},"2:11846:3600":{"id":"2:11846:3600","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11847:3598"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:51000:9361","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11848:21120":{"id":"2:11848:21120","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50980:3924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:3599":{"id":"2:11871:3599","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11344:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11904:31566":{"id":"2:11904:31566","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11520:3487","`DoubleEndedIterator`":"2:7125:120","prim@char":"1:11840:409","str::match_indices":"2:11901:31565"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50894:9374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5286:32227":{"id":"5:5286:32227","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2084","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:3815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2084","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:3815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68-20:0:1725":{"id":"0:68-20:0:1725","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1725","glob":true}},"2:11819:797":{"id":"2:11819:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11840:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11833:24683":{"id":"2:11833:24683","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:31574":{"id":"2:11927:31574","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:3925":{"id":"5:5287:3925","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:24719":{"id":"2:11886:24719","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11840:409","str::splitn":"2:11883:24717","self::pattern":"2:11520:3487"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50848:9344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:3:1722","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1836"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:47:1837":{"id":"0:47:1837","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1836":{"id":"0:21:1836","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2593:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1837":{"id":"0:49:1837","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5275:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11820:2107":{"id":"2:11820:2107","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11839:31557":{"id":"2:11839:31557","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11846:1366","str::slice_mut_unchecked":"2:11840:31558","crate::ops::Index":"2:2992:3811"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:24724":{"id":"2:11924:24724","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11540:9356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11822:31554":{"id":"2:11822:31554","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11830:24686":{"id":"2:11830:24686","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:3739":{"id":"2:11944:3739","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4501:3739"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51034:3740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:31569":{"id":"2:11911:31569","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5302:32231":{"id":"5:5302:32231","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2084","`String`":"5:7156:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2084","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:3815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11854:24722":{"id":"2:11854:24722","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11840:409","self::pattern":"2:11520:3487"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11525:9355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:7680:3780":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10929:26456":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:48066:9647":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:7621:3719":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:1917:9296":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:20472:28382":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13527:20807":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"12:1065:33327":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10466:17068":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"9:592:15490":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:11852:731":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:2844:9707":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2459:1835":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:153:15727":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:2253:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"14:187:15690":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6842:33600":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:3153:3784":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:50848:9344":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:53575:4194":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:51025:9369":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:7265:13948":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4683:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5743:14443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5453:14366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12073:19872":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:10402:3941":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9947:17021":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:2505:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:8104:3893":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:912:2112":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:53181:29207":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11863:1515":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9021:16856":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6349:32326":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13557:20809":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3699:32326":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6903:16732":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:1511:11387":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:7947:24032":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12134:19876":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:755:20883":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5949:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"12:751:3765":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:11270:9864":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4241:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1538:11391":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9526:16915":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"9:586:15503":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:8775:4064":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2909:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12022:19868":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:6582:14866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:8569:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4589:3990":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10807:20904":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:11844:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:393:33346":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:6977:30937":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:5235:33417":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:50067:2043":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:2916:16979":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:9805:17015":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:7148:2082":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"9:896:15469":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:9006:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:48629:28432":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:3206:9292":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11864:1102":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:47386:9476":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9350:16895":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9223:16882":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4125:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11199:17302":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:2341:15753":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:10633:27612":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:6211:4100":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:500:10484":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:11525:9355":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3167:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:21741:28863":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:9021:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46936:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:21612:28410":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:10295:4061":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10670:16867":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:2604:31249":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12860:20239":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:47291:9482":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10476:17069":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:2387:2897":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:10651:21544":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:51304:9393":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5670:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11125:26365":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:6599:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:9975:9335":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:962:3767":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:50624:9339":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11515:19670":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:10546:16862":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6200:16705":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11774:19851":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:7167:9401":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:7202:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8867:4105":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:7008:15236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:7264:24033":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:47442:9480":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2683:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:50504:9331":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:6561:4097":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:1387:2112":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:5524:4066":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:10625:16865":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:3943:3762":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:1649:11401":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4201:4020":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:9362:16857":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7473:21333":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:387:33345":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:6963:10441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:47748:9668":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:4081:9460":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11828:19855":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:4441:16331":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"12:810:3767":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:7299:15424":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5730:14441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4020:3994":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:889:2047":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9577:16920":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:52650:4181":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3377:1839":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:4662:16408":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:288:2084":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12060:19871":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7059:2002":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:57559:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3384:3909":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:54644:9260":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:1771:16919":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48708:3965":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:574:34505":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11841:19856":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11300:17475":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:51325:9395":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"12:1872:3784":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9263:16884":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:21793:3979":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4195:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:3902:32326":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:20664:4160":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:50744:9342":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:58933:29226":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:1701:11406":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:784:3785":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:4921:16475":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2974:9294":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:3162:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:3161:26771":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:688:3746":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:49251:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:47788:9655":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:12312:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13436:20772":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:2873:26466":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:47827:9672":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:51708:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7250:9424":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"14:40:17079":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:7259:13947":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:48734:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12781:20192":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:1432:3768":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:46978:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:8666:16850":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:52791:4217":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7890:16764":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10245:17062":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:5390:9427":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:11148:4072":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6330:16713":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4310:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:22101:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:8184:3959":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:48878:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12485:20081":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11661:19786":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7135:33575":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:7004:2112":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12884:20303":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:25640:3975":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:1004:3774":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:4299:9455":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13168:20713":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:50696:9365":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13506:20805":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7980:16770":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:9722:16964":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:2943:2081":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:8494:15718":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:7462:16836":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3199:3943":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:47566:9322":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6567:16720":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:50592:9323":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"1:2909:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:4121:4016":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:2884:32426":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7372:33439":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2685:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:9553:16857":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:54716:9266":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:521:20885":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13100:20682":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1708:3766":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:1547:11392":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:12435:3814":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:54293:4215":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6339:4054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:49091:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:3964:3990":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:526:26472":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:54701:9265":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:2162:32427":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4585:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6321:14852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11528:17024":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:4749:16423":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:3321:3930":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:736:20882":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6781:16729":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:21757:28795":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:48672:3973":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12836:20236":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:4262:16296":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6534:14862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6312:14851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4427:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5761:16687":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:1813:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:51445:9849":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:4304:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11997:19866":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11854:729":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:3566:15792":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:6805:3950":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12337:16874":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2487:15759":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:1828:3820":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:51338:9379":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:48058:9645":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:6610:29459":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:1660:11402":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:46834:9295":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:8931:3718":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:2876:31254":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"12:1866:3783":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:52959:4200":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:4034:3909":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:113:20864":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:8368:16844":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:22398:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:48600:3963":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:1823:3802":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:20718:1835":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7557:16756":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:20638:4159":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:11547:17023":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:6931:3765":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5628:16683":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:50702:9364":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1614:11399":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:7574:3735":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:2922:3794":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"9:977:15473":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:7952:3937":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1969:1985":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:20851:4150":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:39882:9677":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11839:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:554:10489":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:3807:3972":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:52907:4193":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8906:4088":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8239:4014":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13071:20679":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"12:119:33328":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:48971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:0:1852":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:10396:3943":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9631:16912":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:5723:4083":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5592:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:3599:15801":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:1940:1984":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4771:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47355:9370":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1524:11389":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"12:1845:3766":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:3468:1987":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:3506:3765":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:2250:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8147:3920":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:5049:26793":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:1003:3776":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:48649:28854":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6252:16708":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:5739:10083":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:54655:9261":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11861:1458":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:54664:9262":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:11293:9861":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:2261:15722":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"9:920:15470":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:7637:16759":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2579:15763":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4210:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:54371:4199":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:9159:30114":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:5933:4100":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9820:17016":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8255:4024":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:680:3743":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:671:20876":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6270:16709":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:10654:9336":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:3936:3987":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:2028:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:8749:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:1376:3762":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:8423:2044":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8819:4102":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:6969:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4136:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:48785:2111":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4778:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13327:20727":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"12:2069:3776":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:9165:34015":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11858:1459":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:3900:3986":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:5581:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4708:4004":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:573:10492":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13580:20816":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:52460:4224":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:50794:9377":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:4289:9454":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47282:9446":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:47716:9654":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:8956:1987":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13279:20726":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:21819:3981":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:3249:17002":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:4150:9311":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:5614:33806":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:21695:29197":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"12:1832:2047":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:21591:28722":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"15:193:15698":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5596:16682":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11873:19858":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4485:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4277:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2259:3877":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:0:1846":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:11008:22132":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7233:3766":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9764:16968":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4201:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4129:4017":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:5737:14442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10846:4065":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7831:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:5664:16684":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5219:15716":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:8139:1833":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:20470:28385":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:683:3745":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:51533:9872":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6482:9427":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10796:16821":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:4281:4021":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:7047:9650":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:57585:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:992:3772":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47764:9669":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:21807:3978":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"12:762:3766":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:12630:20137":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:52428:4191":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:49757:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13192:20716":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4162:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:49796:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:4234:32306":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:47276:3740":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8273:4051":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10394:17066":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10088:16981":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:7117:33793":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:52360:4223":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8498:2049":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:10683:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11087:17260":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:4339:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12948:20309":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4603:27487":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4615:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:48048:9644":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:9844:16975":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:11845:1336":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:7856:26794":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10445:16874":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:7818:3875":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:8596:16848":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:5703:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8966:26804":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1107:3776":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:1973:3799":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:52406:4203":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:776:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:5095:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11070:17253":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13114:20684":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:632:30929":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12118:19875":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:47799:3920":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:47778:9670":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:7511:26470":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6137:16700":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:47626:9658":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12211:19942":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5490:14423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11721:19847":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:62:10109":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:12323:4230":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2687:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:2403:3885":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:46881:9713":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10949:17077":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"18:96:20863":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12349:20018":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:50289:9325":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10894:16877":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11186:17301":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:53835:4207":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11811:3748":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3089:3813":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:12115:9498":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3958:3989":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4602:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10854:16875":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:1959:3798":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:2811:9701":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:21134:4178":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:2557:15762":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8789:4065":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11851:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6517:15694":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:7176:15395":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:609:34524":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"9:19:15541":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4639:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6419:14854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:7247:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:47595:3919":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4755:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11142:23985":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10506:17037":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:8160:3923":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:5635:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:4938:4083":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12934:20308":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2692:2197":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2230:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:48802:3762":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:51034:3740":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8137:3919":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:4519:16385":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:47729:9666":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:2880:32425":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11368:17494":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12896:20305":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:1931:16913":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1091:31288":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9108:16858":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:11058:9812":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5605:14432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6171:16703":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11137:17263":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21628:28419":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7236:13944":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7063:3761":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:58912:29241":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:11787:19852":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:5207:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:6915:24603":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12768:20191":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9317:16898":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:1866:3832":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11847:1444":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:482:10481":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:3623:3799":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4675:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12550:20083":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5737:16686":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12103:19874":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:5494:9653":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:53685:4183":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7298:16741":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:9671:16932":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:47678:9663":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:7125:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6034:16695":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:20720:4151":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12850:20238":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:3086:2047":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:52668:29254":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12695:20141":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9458:16931":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:49784:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:3125:16984":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:0:1848":{"crate_id":11,"path":["adler"],"kind":"module"},"1:9051:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:881:2047":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:52591:4192":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10075:16980":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:547:3714":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:4937:1019":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:50948:9376":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1713:4011":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:1735:9739":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:5595:4101":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7872:16763":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:4373:3724":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8925:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:4327:16313":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:6780:4145":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:274:33329":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13203:20717":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:12380:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:3188:15781":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12514:20082":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:6575:4098":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:355:3733":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1404:3763":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11974:19865":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:4103:2047":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:7942:26797":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:4635:16405":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2684:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:7469:16751":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3643:3967":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2673:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:29979:9688":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:47586:3809":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11035:3901":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:48583:3962":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:10803:3834":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:10682:16868":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:8881:34377":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:9371:16858":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11800:19853":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11181:21493":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:4385:16323":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"13:220:33351":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11838:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:2681:9291":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:21392:1835":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:6287:11327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11855:730":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:50055:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:2933:2078":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7825:16761":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:7687:3827":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3326:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:8966:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:21668:3977":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:1257:3778":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9368:3871":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:5661:30054":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:7909:16765":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8973:24044":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"12:1518:15672":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:8851:4104":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12756:20189":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:3680:3766":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:6947:32358":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:51449:9851":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:4399:9458":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5122:16652":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:7864:3935":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:5396:4059":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:53385:4218":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5839:16691":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:300:33342":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4525:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:20451:28384":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:4144:16226":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11536:17022":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:13572:20814":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:7670:3779":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:7808:3874":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:47089:29142":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:2411:15756":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10997:17079":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:2389:15755":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:50522:9334":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"7:0:1505":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6146:16701":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:9021:21565":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:11344:9348":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:9475:16917":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:10013:9349":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:6156:24043":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:506:10485":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7329:16744":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:50532:9332":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7543:16755":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:7664:3744":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:52983:4182":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:47082:16771":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:9274:16885":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12046:19870":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:20689:4149":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4408:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:920:3763":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4137:4018":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:3263:15782":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4290:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:4667:4027":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:48870:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:51634:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:9015:2016":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:51132:9382":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:51043:9370":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:7051:9649":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6519:14861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2842:15774":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:8441:16847":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:47333:9483":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:22431:3980":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11853:19857":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3152:9714":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:53621:4198":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:3501:3762":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4447:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12278:19947":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:48794:2047":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:1413:3764":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13082:20680":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:5464:4062":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:51477:9858":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6362:11354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6070:16697":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10159:16985":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"12:1555:15674":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:20877:4156":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:48024:3750":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:3611:3798":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4575:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"12:777:15667":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:11494:15706":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:11746:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:9482:28520":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:21394:4152":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"14:7:15680":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4591:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11761:19850":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:1422:3767":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"12:1836:2112":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:600:3722":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10912:26468":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:864:3786":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"14:0:1850":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:420:15724":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:4099:23510":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:9072:4109":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:54433:4219":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:51315:9394":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:20404:9489":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9303:16902":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:54541:4202":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:49733:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:22365:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:49870:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10296:17033":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:54675:9263":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:2502:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:52613:4196":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13091:20681":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5558:16681":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:8088:3950":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2833:9704":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5541:16680":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2655:3936":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:1463:3797":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11149:17298":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:1556:11393":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5792:14446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6548:14863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:7097:2083":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:48010:9641":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"10:0:1847":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:2094:32433":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5482:14422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10520:17072":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13221:20724":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:933:3764":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5374:16670":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:4217:16275":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:6961:2112":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:6939:3788":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:47664:29223":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:10687:9337":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:50876:9373":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:4728:28621":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:6609:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:956:3766":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:11481:2056":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:7249:16737":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4664:4052":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4377:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"12:985:3775":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22299:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:3132:32371":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:981:3771":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:902:3762":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:8162:16838":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6619:16722":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:48921:2047":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:51253:9391":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13059:20678":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:2535:15761":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:2591:26459":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:20879:4154":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:51358:9380":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"12:659:2112":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:2749:15770":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:38677:9489":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7497:16753":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:47380:3740":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:22830:3974":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7093:16733":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:47503:3856":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:3191:30326":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11016:9870":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:10609:4053":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9601:16918":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:652:10542":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11856:726":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:5614:3765":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:2401:3884":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:6656:9639":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12087:19873":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5886:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:7595:3708":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:7224:13942":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:4786:16436":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:11074:9814":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:30179:28912":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:8883:4106":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"8:0:1845":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5388:16671":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:681:20877":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4788:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5845:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:44:15657":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:6501:9428":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:5815:16690":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"11:36:33324":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"12:822:3771":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:8339:16843":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2940:2080":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:53339:4214":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:22134:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10207:17049":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:7703:3834":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6186:16704":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:54183:4195":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"12:1044:15669":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:5494:16677":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:50046:9503":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:9738:16942":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7156:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11054:17252":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:51461:9854":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:48543:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:30073:28837":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:53127:29206":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:21680:28841":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:51465:9855":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:49514:2026":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13518:20806":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"9:649:15492":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:11125:17262":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:8796:16852":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:6907:3815":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2803:9700":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:47343:9484":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:1125:3778":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:12354:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:54739:9267":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:3411:3895":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2807:9699":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"9:676:15478":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:11330:17479":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:47000:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12955:20321":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4112:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:5094:32326":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:2657:15766":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:386:16834":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:11545:9354":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9155:16859":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:50712:3921":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2465:15758":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:20417:28154":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:9909:16976":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:5551:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11860:1461":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:7126:3852":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"7:32:15440":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10752:16871":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:1889:3839":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6241:16707":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2764:4140":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:47456:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6735:16727":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:53158:29213":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5615:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4149:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:9868:3762":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:20432:28154":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:8822:33916":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:1478:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:20846:1835":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"9:827:15567":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:9023:2023":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:2867:9712":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8743:4061":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:2683:15767":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6704:16726":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7319:16743":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9433:16893":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3239:3946":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6332:14853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:52861:4205":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:47402:9369":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:3164:27891":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:29756:3976":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:1628:33349":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:52715:4148":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9857:16997":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10332:17064":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:8561:16823":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"14:202:9404":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11217:17303":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:52530:29219":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:6474:2120":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9539:16914":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:1534:15673":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46795:9442":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:53005:4185":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:1443:3769":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4106:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:57637:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7942:16767":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:48819:2002":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10774:16872":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:562:10490":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10693:3893":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:9000:21551":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:50930:9375":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"18:0:1854":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:1550:3909":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:6644:26801":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11617:19779":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:4544:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"14:160:15680":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:50980:3924":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:8014:16771":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6743:16728":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3278:3942":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:6510:14860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"9:111:15485":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:9501:16902":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:8986:16732":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11485:19668":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2413:3890":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:1634:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:4353:9457":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:20449:28380":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:8871:16853":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4516:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:20677:1835":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:4704:4000":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:50634:9340":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11606:19778":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:6155:3765":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:49291:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4257:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4189:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:630:3737":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:2205:2054":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:10638:3873":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:975:3770":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:6087:32339":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:48929:3762":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:4461:4028":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:21485:28948":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:53261:4225":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:9885:17019":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4785:3999":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:5711:4085":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:624:34504":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:8941:16854":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:7848:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:10141:9344":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12964:20641":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"15:214:15702":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5871:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10434:17067":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:11840:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:1212:3775":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:53651:4201":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:52490:4212":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:51457:9853":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1586:11396":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:6668:32346":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4345:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:48937:2112":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5508:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7023:23503":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:3173:9444":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:0:1731":{"crate_id":0,"path":["thiserror"],"kind":"module"},"16:2631:15765":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11174:17300":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11014:17191":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:7139:3853":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:9965:3832":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"12:853:3773":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:4606:16400":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:10155:9347":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6654:16723":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4726:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"9:33:15542":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:47608:9651":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:3179:9443":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8299:4002":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:1612:32326":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13594:20850":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13478:20781":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:6124:26354":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:660:20875":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2508:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:5703:16685":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13176:20714":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:7079:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9984:23509":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:5564:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:4:994":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:361:3734":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:652:34505":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12674:20140":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:474:10480":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:8140:2005":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"12:98:33336":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:51500:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4707:3749":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:562:16836":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:80:20862":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3704:3971":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4459:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:4762:4005":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:4297:32306":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6690:16725":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6123:16699":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:7573:1835":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5682:14436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:690:20878":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:47073:2067":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5411:16672":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10708:16869":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:2937:2079":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5782:14445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2615:3926":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"9:382:15576":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:4689:16411":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2911:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:967:16900":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:6865:4079":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:50077:28403":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7289:15423":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:51161:9388":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8805:4099":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:1116:3777":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11841:1478":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13126:20687":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3477:21396":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"12:1852:3781":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:8526:16822":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11356:17493":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9061:16857":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:590:29220":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10139:16857":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1628:3782":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:5163:16669":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8221:3964":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"13:108:33396":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11893:19859":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2680:1842":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:242:33900":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:50726:3923":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4654:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10321:17029":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:2142:32440":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:12188:9499":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:5548:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12748:20147":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:1641:9628":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:2771:15771":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11500:19669":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:50614:9341":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11576:19678":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:8631:16849":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:49331:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:50990:9372":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:1021:16904":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11288:17474":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:38660:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3493:3918":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6345:16714":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4561:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:51725:9283":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"1:11846:1366":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:7237:16736":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:7649:3741":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13374:20765":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:2065:32367":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6489:14859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12033:19869":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:8482:2046":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10497:17071":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10403:16871":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2737:2077":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:47739:9667":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6816:33519":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:2307:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:4222:9448":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:4599:27483":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:20601:4158":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4663:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7288:16740":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11388:3972":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6676:16724":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6279:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6109:16698":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9644:16911":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:54041:4226":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:7585:22042":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:2854:9709":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:50830:9346":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:6643:32339":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:2874:32458":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:727:20881":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:48852:2003":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4870:4049":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:7051:2054":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"12:834:3772":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:50670:9371":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10663:3874":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9712:16967":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:2055:3714":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47646:9660":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9897:17020":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:2894:15776":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:4721:16419":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:595:10495":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12291:19953":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:3632:15810":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11951:19864":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:54792:9270":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:47319:9481":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:699:20879":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:6032:26357":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:22167:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4364:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:5996:16693":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8055:3892":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"9:709:2043":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:8701:16851":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5949:16692":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:2198:33337":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2791:9697":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:8418:16846":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4437:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:47409:9477":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:52316:29233":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:5472:16676":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7956:16768":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:21644:28411":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:4344:9456":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:2152:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13492:20799":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6303:10363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11235:17354":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:22200:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11865:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:8564:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:8272:16841":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5597:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1580:11395":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"13:0:1843":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:8752:3921":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:663:1986":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"14:165:15681":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:2858:9710":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:3245:3766":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:2996:3812":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8116:3897":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"12:320:33332":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:46896:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11853:728":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4879:4050":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:52512:4216":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:47696:9673":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6496:16718":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13404:20768":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6668:33799":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11939:19863":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:2252:3872":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:9278:9501":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5525:16679":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"19:0:1010":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11850:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:3568:32326":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11444:9272":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:22068:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4327:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4222:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:3093:3782":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:52937:4197":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:9361:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:6463:16717":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:11487:15706":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6434:14856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11271:17467":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:599:34501":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11708:19846":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10399:3945":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13354:20729":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:10127:9346":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:507:34505":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11211:21393":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8761:4063":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10703:22128":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4716:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4537:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:51178:9389":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4012:3993":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:50776:9378":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9339:16896":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:47416:9478":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11857:1462":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13148:20690":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:11520:3487":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:54831:9271":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:11806:23988":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7511:16754":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:50085:28393":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"12:815:3770":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:8154:3921":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:10628:24394":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:0:1358":{"crate_id":1,"path":["std"],"kind":"module"},"17:10350:16872":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2367:15754":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:8137:16837":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:6528:16719":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5723:14440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6402:11331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10108:16977":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:51453:9852":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:51110:9381":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9930:16996":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"15:175:15697":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:2375:31252":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:49131:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4317:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:8510:15716":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2828:9703":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:51473:9857":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4700:983":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:47687:9664":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7970:16769":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6719:33763":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:49818:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:5520:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5702:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:9118:34405":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:7230:13943":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"12:1029:3777":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:9514:28505":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:57598:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51290:9392":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:22332:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2255:3876":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:8212:16839":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11247:17355":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"9:863:15468":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"12:0:1849":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:50605:9338":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7567:16757":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:49507:2025":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"12:861:3774":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:1744:11410":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:6922:3787":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:9936:9348":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6593:16721":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8920:24050":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:5447:16674":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7166:16734":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:11304:20924":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2750:9289":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7483:16752":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:9873:17018":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:49766:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:9488:16916":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9658:16965":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12307:19954":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5514:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:1728:11409":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1606:11398":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12816:20195":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13382:20766":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:4356:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:2705:15768":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:51147:9385":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13047:20677":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:10034:21341":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7659:16760":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9328:16897":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5793:16689":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11684:19787":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:1568:11394":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13158:20712":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:5460:16675":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10207:27660":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:51687:4228":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:3689:15843":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9071:34249":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7278:16739":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13031:20673":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:3640:2112":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:488:10482":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:20870:1835":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12874:20241":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:8110:16817":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2344:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11734:19848":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11223:23514":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13413:20771":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:11591:9384":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12361:20021":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:54579:4222":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9183:16860":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:8737:28429":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:10828:21548":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6392:3750":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:51521:4144":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:2282:15750":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10310:17063":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:11862:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12638:20139":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4608:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:1610:2112":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9627:16925":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:7253:13946":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:8141:2004":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5751:14444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:51226:9390":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:47303:28879":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:9173:3839":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:2838:9706":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10121:16978":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:1228:3777":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12730:20145":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:50553:9324":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:36:3816":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:6916:2112":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:6396:4089":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6376:16716":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:11088:9362":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4706:4003":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:21703:28842":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:9701:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:6505:4092":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10455:17059":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:2496:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:30001:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7357:16746":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:9499:26459":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:29939:3793":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:12102:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"12:60:33344":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:1243:3776":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:5433:16673":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:3354:3951":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10374:17032":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:4817:16443":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2769:4142":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"14:215:15683":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:614:34512":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:47536:3870":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"12:738:3764":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8247:3969":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:123:10164":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:4024:9288":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"12:2190:33340":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2433:15757":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:2795:4141":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:273:32326":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:10875:16876":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:568:10491":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:1692:11405":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4296:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10608:16864":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:998:3773":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:1517:11388":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9193:34243":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4471:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3989:30108":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:5744:4087":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11748:19849":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:9229:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:2816:9705":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7267:16738":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12164:19878":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4216:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1613:3765":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10921:17076":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4669:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:51737:9281":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12739:20146":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"15:0:1851":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6059:33579":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:4413:16327":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6161:16702":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"12:1840:3765":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47363:9475":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"18:531:20889":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2593:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9861:20905":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"20:0:1725":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:51009:9360":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:5718:4086":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:53415:4221":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:7475:3791":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:9067:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:39869:2303":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:21298:28159":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13536:20808":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:538:20890":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:576:3720":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:49051:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:8056:16772":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4249:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:54635:9259":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:7088:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1093:3775":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:1674:11403":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:7707:2303":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:4297:16307":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:2385:3880":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:3488:2047":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:3429:3894":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:6563:9657":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:6873:21395":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:8911:34442":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13459:20775":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11559:19675":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:9031:34256":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:1670:1066":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:52561:4204":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:1622:3781":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:4817:3909":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"12:632:2047":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"12:2184:28913":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12198:19941":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"12:725:3763":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8797:2047":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:46956:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:52813:4220":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:47473:28804":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7211:16735":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11639:19780":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:53080:29251":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:48017:29228":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:9283:9502":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:564:20891":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:8277:4054":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:6108:4230":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6210:16706":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7603:16758":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:11053:21540":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:48685:3964":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:48566:3961":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:7178:9402":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4506:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4371:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:247:34149":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:6511:9429":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:4888:16466":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:3932:3909":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5533:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10490:17070":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:8332:1995":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"12:2178:33341":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:8393:16845":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:5510:16678":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:7084:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13007:20671":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"12:2053:3775":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:7472:2055":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10360:17030":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9700:16938":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4708:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4693:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:2774:9696":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:21538:28939":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13366:20764":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:971:3769":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:3276:3941":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5184:15720":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:5417:9662":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:50513:9330":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:20767:4154":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:4064:3909":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11436:19667":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2031:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4267:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9893:3923":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"7:79:15447":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"9:622:15491":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:49854:9798":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:9691:1835":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46912:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10642:16866":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11843:1028":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12176:19892":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:1606:2047":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:47022:3755":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5759:33210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11106:17261":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:9778:16941":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:5275:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:2499:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:10338:26462":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:7479:9648":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:48039:3951":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:9283:16905":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6359:16715":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13231:20725":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1639:3784":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:9062:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48861:9789":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:7388:16747":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:2793:15772":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3486:3896":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:51469:9856":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:54617:4187":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:119:10163":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:5882:9674":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:8991:34412":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:2862:9711":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:547:10488":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:1634:3783":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2338:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:5812:3909":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:47489:9784":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:3457:15784":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10062:16982":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"12:1138:3778":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:2850:9708":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13134:20688":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:3026:15780":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6985:15234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:7276:13949":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:7218:13941":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9751:16940":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4631:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11259:17464":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10257:17036":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4357:16319":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:579:10493":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12265:19946":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:3716:15846":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:11534:9357":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1617:3766":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:47707:9665":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:8774:16820":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:3854:15960":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6458:14858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:8732:30059":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:11327:3971":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:50684:9368":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:6319:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:1720:11408":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:47655:9661":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"14:221:15689":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"9:956:15471":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9250:16883":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:9243:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:47813:9671":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:1894:11547":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5709:14439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2868:15775":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:3098:32366":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:51018:9359":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:4754:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:22233:3725":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:4227:9449":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:22266:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12972:20642":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4439:4027":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:51481:9870":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:11196:21491":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12609:20084":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:534:33815":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8509:2050":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:3127:3781":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:57202:4227":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:53029:4186":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:50453:30106":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:2579:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:48033:9643":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:21720:28876":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4736:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:49371:4084":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11462:22026":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4621:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10385:17065":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6017:16694":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:4008:3992":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:5853:26357":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"12:697:3769":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:9013:2017":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10583:16863":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:2233:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8350:2033":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:20726:4153":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7847:16762":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:4563:9470":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:3872:3765":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:5138:9315":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:5588:4100":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:2823:9702":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9422:16894":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8838:4103":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:47096:9455":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:10996:4064":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:719:20880":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:721:3747":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:4353:4015":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2785:9698":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2779:9695":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6564:14865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6991:15235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:52631:29218":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6829:33801":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:9019:2026":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11343:17480":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10984:4063":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:644:34505":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4234:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"12:1085:15670":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11072:4109":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:219:9299":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:9025:2024":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9831:17017":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8095:3952":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:9844:2047":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1830:3821":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:57611:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:2993:15778":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"18:515:20888":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:1071:32457":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3243:9293":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:6998:2112":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:50038:28389":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:39833:4069":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:51000:9361":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:14:1964":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:8228:4022":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11859:1460":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:12163:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2460:9493":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3977:30112":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:1758:2194":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6385:11328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2605:15764":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9110:4138":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12797:20193":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8179:3968":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:961:32326":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:11245:26454":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:10086:9343":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6790:16730":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"9:800:15603":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2509:15760":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12926:20307":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:487:16835":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"12:646:3762":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:10169:9345":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3093:3953":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:5780:16688":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:9446:16906":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10721:16870":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5361:4057":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:0:1853":{"crate_id":17,"path":["object"],"kind":"module"},"2:47617:9652":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7791:2193":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:5981:33759":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:6355:26801":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:587:10494":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10973:17078":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:49171:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5787:4095":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:53497:4206":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:51652:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10816:4062":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10233:17061":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:47103:9433":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13039:20674":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4645:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10221:17060":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:51644:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4284:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9373:26465":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11315:17478":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:39873:9763":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:4550:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:3998:3991":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6440:14857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:669:3768":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11822:21553":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4826:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:1903:16953":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:47546:3869":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:4108:9461":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:10048:9342":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2992:3811":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:582:9489":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:21129:4155":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:6508:4093":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12322:19955":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:6259:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11034:17192":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:4849:16451":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:5878:15721":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8978:24039":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:6472:15695":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11813:19854":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2302:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:3237:3945":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4499:3984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10923:26464":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:6001:4232":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:8055:16819":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8981:16855":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:49751:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:1891:3840":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:57572:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5410:4060":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6298:16711":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:52336:29252":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9401:16899":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8167:3924":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:21786:29248":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:50579:9322":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:3389:1838":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:51695:4229":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2518:3933":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2825:15773":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10822:16873":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:8813:2112":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:1684:11404":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:1601:11397":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:836:32308":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"2:11540:9356":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1531:11390":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:5381:4058":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:47423:9479":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3167:27887":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7600:3717":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"9:188:15521":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"14:31:15680":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:5018:26793":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:49500:2017":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:5694:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5851:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10420:17058":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:5347:4056":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:7801:3873":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2300:15751":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4389:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:7872:3798":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:48946:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2320:15752":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11594:19722":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4569:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2727:15769":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13184:20715":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2799:4143":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:54769:9269":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1707:11407":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:8475:16818":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9293:16903":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9091:3901":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:54690:9264":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:29973:9423":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10441:3719":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:11682:26334":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:541:2736":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7426:16749":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:49011:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:9011:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4814:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13024:20672":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4545:16387":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:8295:16842":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4820:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:6274:2112":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13141:20689":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10673:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:3201:3944":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10283:17034":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10528:16861":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2581:3934":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"12:2080:3777":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:8233:4023":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:3707:3970":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"12:1859:3782":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12237:19944":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10845:16874":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:52382:4211":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:5527:4068":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12980:20669":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:50894:9374":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7110:28804":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:48810:2112":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2512:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:7516:30060":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:3402:15783":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:967:3768":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8400:2043":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:1642:11400":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11161:17299":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4807:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:5142:9316":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"18:481:20886":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7530:26457":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:54495:4184":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:12617:20085":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:707:9357":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:6201:32326":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10182:16983":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:1506:11386":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:1962:16937":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:1749:29230":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:7796:3871":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:526:10486":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11909:19860":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"12:353:33334":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:7096:3854":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6425:14855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10190:4060":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:8943:21392":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:491:34513":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7309:16742":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:4150:4019":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:8492:2047":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8173:3969":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:8951:34313":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12008:19867":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10120:4071":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:50270:9840":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12909:20306":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7044:33435":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7435:16750":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:946:3765":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:47461:3855":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3950:3988":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6316:16712":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:52761:4213":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:30015:28860":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:11367:3970":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6052:16696":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:494:10483":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:3010:15779":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9382:16901":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"9:505:15652":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:4264:3909":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:49493:2016":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9691:16939":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5578:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:6432:4096":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:4218:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"12:1120:15671":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13214:20723":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:2930:15777":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:50030:9504":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:9791:16969":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:4533:4042":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:54754:9268":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6865:33821":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:3119:3783":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:49211:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12225:19943":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7396:16748":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:48720:3966":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:8245:9355":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3906:3985":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:4601:27485":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:5203:15718":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:532:10487":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:57624:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6284:16710":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9681:16966":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:9017:2025":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:1055:31290":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:11233:9862":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:8241:16840":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:11309:9863":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6555:14864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13393:20767":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:12136:30280":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10270:17035":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4747:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12251:19945":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8440:2045":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:1366:2047":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:636:34521":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11229:22143":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5544:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:21286:4146":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4928:1994":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"4:0:1844":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:4574:16392":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47636:9659":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:47055:9715":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6877:16731":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:9400:9824":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:2873:2171":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7343:16745":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:486:26454":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:50542:9333":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:7929:16766":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12148:19877":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:766:20884":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13340:20728":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:50285:28769":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}