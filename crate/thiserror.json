{"root":"0:0:1716","crate_version":"1.0.38","includes_private":false,"index":{"2:11363:3125":{"id":"2:11363:3125","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49985:3088","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5120:59857":{"id":"5:5120:59857","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6992:220","`Box<str>`":"5:286:2070"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2070","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:4961":{"id":"2:11441:4961","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:3:1707","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1820"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11341:5401":{"id":"2:11341:5401","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11368:3666":{"id":"2:11368:3666","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50269:2477","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11357:54783":{"id":"2:11357:54783","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11444:54823":{"id":"2:11444:54823","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11458:3297":{"id":"2:11458:3297","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:1945":{"id":"2:11415:1945","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:119","self::pattern":"2:11040:2838","prim@char":"1:12376:407","str::matches":"2:11415:1945"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50219:3100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:59210":{"id":"2:11424:59210","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11040:2838","str::match_indices":"2:11421:59209","prim@char":"1:12376:407","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50183:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11409:59206":{"id":"2:11409:59206","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:59219":{"id":"2:11450:59219","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:5335":{"id":"2:11370:5335","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50307:3105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:59854":{"id":"5:5108:59854","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11391:5621":{"id":"2:11391:5621","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11040:2838","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10864:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44:1821":{"id":"0:44:1821","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11456:3016":{"id":"2:11456:3016","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11001:2042","FromStr::Err":"2:11002:125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48191:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11001:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11001:2042","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[253,4],"end":[253,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(provide_any)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::provide::ThiserrorProvide","name":"ThiserrorProvide","id":"0:58:1715","glob":false}},"0:49:1821":{"id":"0:49:1821","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11465:59222":{"id":"2:11465:59222","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:59222"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50332:3107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:37:1708","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5394:187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11447:59218":{"id":"2:11447:59218","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11403:54816":{"id":"2:11403:54816","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11406:54818","self::pattern":"2:11040:2838","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50119:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11369:59203":{"id":"2:11369:59203","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50279:3102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11394:54814":{"id":"2:11394:54814","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:119","self::pattern":"2:11040:2838","prim@char":"1:12376:407","str::split":"2:11388:54811"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50033:2307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11400:59205":{"id":"2:11400:59205","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11397:59204","self::pattern":"2:11040:2838","str::split":"2:11388:54811","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50083:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:59198":{"id":"2:11342:59198","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1820":{"id":"0:8:1820","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:58:1715":{"id":"0:58:1715","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:59:1824"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}},"2:11367:5620":{"id":"2:11367:5620","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11366:5622"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50298:3104","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11459:52042":{"id":"2:11459:52042","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:2087":{"id":"2:11340:2087","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11433:59214":{"id":"2:11433:59214","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11359:59201":{"id":"2:11359:59201","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2987:2321","str::slice_mut_unchecked":"2:11360:59202","`str`":"1:12382:1351"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:52043":{"id":"2:11460:52043","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:3343":{"id":"2:11365:3343","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50001:2475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1820":{"id":"0:24:1820","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:3:1707","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1820"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11361:54803":{"id":"2:11361:54803","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11362:54804"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1712":{"id":"0:6:1712","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:8:1820"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:9","0:13","0:16","0:19","0:22"]}},"2:11339:788":{"id":"2:11339:788","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12376:407"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103":{"id":"5:5103","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5014:1351","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5104:59853","5:5105:2478","5:5108:59854","5:5111:59855","5:5119:59856","5:5120:59857","5:5121:2499","5:5122:52040","5:5123:52041"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11388:54811":{"id":"2:11388:54811","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:12376:407","str::rsplit":"2:11394:54814","str::split_whitespace":"2:11366:5622","self::pattern":"2:11040:2838","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50015:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5105:2478":{"id":"5:5105:2478","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:5622":{"id":"2:11366:5622","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11367:5620"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50289:3103","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:52044":{"id":"2:11461:52044","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1824":{"id":"0:59:1824","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:1822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11435:59216":{"id":"2:11435:59216","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11065:2837","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:59200":{"id":"2:11348:59200","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11360:59202":{"id":"2:11360:59202","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11359:59201","crate::ops::IndexMut":"2:2991:2322","`str`":"1:12382:1351"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:2166":{"id":"2:11464:2166","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:2166"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50323:2167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:37:1708","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8600:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1713","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11397:59204":{"id":"2:11397:59204","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11388:54811","prim@char":"1:12376:407","self::pattern":"2:11040:2838","str::rsplit_terminator":"2:11400:59205","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50065:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104:59853":{"id":"5:5104:59853","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2070","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2070","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:54781":{"id":"2:11353:54781","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48049:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:54:1709","path":"::provide"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3370:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1715","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:63:1824"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:53:1821":{"id":"0:53:1821","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:2086":{"id":"2:11384:2086","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11040:2838","`None`":"2:48049:175","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:54643":{"id":"2:11347:54643","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10608:3254"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:59199":{"id":"2:11344:59199","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11342:59198"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:59213":{"id":"2:11431:59213","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:59220":{"id":"2:11453:59220","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11040:2838","prim@char":"1:12376:407"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5119:59856":{"id":"5:5119:59856","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5121:2499":{"id":"5:5121:2499","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11427:59211":{"id":"2:11427:59211","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11371:54820":{"id":"2:11371:54820","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11364:2869":{"id":"2:11364:2869","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49991:3089","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11406:54818":{"id":"2:11406:54818","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11403:54816","prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50137:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1820":{"id":"0:15:1820","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:54782":{"id":"2:11355:54782","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1819":{"id":"0:25:1819","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:3:1707","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2662:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2676:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:7735:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1820"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11380:2128":{"id":"2:11380:2128","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12376:407","`None`":"2:48049:175","self::pattern":"2:11040:2838"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5122:52040":{"id":"5:5122:52040","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11460:52043"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5123:52041":{"id":"5:5123:52041","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11461:52044"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1824":{"id":"0:63:1824","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:1822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:54780":{"id":"2:11351:54780","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48049:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9137:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1716":{"id":"0:0:1716","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[254,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:68"],"is_stripped":false}},"0:18:1820":{"id":"0:18:1820","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11421:59209":{"id":"2:11421:59209","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:11424:59210","`DoubleEndedIterator`":"2:7079:119","prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50165:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:308":{"id":"2:11349:308","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11350:54784","`u8`":"1:12393:1447"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,4],"end":[250,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::aserror::AsDynError","name":"AsDynError","id":"0:6:1712","glob":false}},"0:12:1820":{"id":"0:12:1820","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:59207":{"id":"2:11412:59207","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48047:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1821":{"id":"0:47:1821","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11362:54804":{"id":"2:11362:54804","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11361:54803"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1821":{"id":"0:51:1821","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5574:118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,47],"end":[251,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::PathAsDisplay","name":"PathAsDisplay","id":"0:48:1714","glob":false}},"2:11374:54821":{"id":"2:11374:54821","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11040:2838","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:37:1708","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1714","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5506:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1821"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11377:54822":{"id":"2:11377:54822","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:54784":{"id":"2:11350:54784","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12393:1447"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11338":{"id":"2:11338","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10603:1351","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11339:788","2:11340:2087","2:11341:5401","2:11342:59198","2:11344:59199","2:11347:54643","2:11348:59200","2:11349:308","2:11350:54784","2:11351:54780","2:11353:54781","2:11355:54782","2:11357:54783","2:11359:59201","2:11360:59202","2:11361:54803","2:11362:54804","2:11363:3125","2:11364:2869","2:11365:3343","2:11366:5622","2:11367:5620","2:11368:3666","2:11369:59203","2:11370:5335","2:11371:54820","2:11374:54821","2:11377:54822","2:11380:2128","2:11384:2086","2:11388:54811","2:11391:5621","2:11394:54814","2:11397:59204","2:11400:59205","2:11403:54816","2:11406:54818","2:11409:59206","2:11412:59207","2:11415:1945","2:11418:59208","2:11421:59209","2:11424:59210","2:11427:59211","2:11429:59212","2:11431:59213","2:11433:59214","2:11434:59215","2:11435:59216","2:11438:59217","2:11441:4961","2:11444:54823","2:11447:59218","2:11450:59219","2:11453:59220","2:11456:3016","2:11458:3297","2:11459:52042","2:11460:52043","2:11461:52044","2:11462:59221","2:11464:2166","2:11465:59222"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:48:1714":{"id":"0:48:1714","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1821"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}},"2:11429:59212":{"id":"2:11429:59212","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11438:59217":{"id":"2:11438:59217","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12376:407","self::pattern":"2:11040:2838"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11462:59221":{"id":"2:11462:59221","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:59221"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50314:3106","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1710","glob":true}},"5:5111:59855":{"id":"5:5111:59855","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11418:59208":{"id":"2:11418:59208","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:119","str::matches":"2:11415:1945","self::pattern":"2:11040:2838","prim@char":"1:12376:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50237:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11045:2839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11060:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1820":{"id":"0:21:1820","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,29],"end":[251,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::DisplayAsDisplay","name":"DisplayAsDisplay","id":"0:43:1713","glob":false}},"2:11434:59215":{"id":"2:11434:59215","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1819":{"id":"0:65:1819","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:43:1713":{"id":"0:43:1713","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1821"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":{"restricted":{"parent":"0:3:1707","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:12:1820"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":{"restricted":{"parent":"0:3:1707","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"6:507:37631":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11839:2526":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:47120:2421":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5472:41546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4540:40912":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5510:41550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:47243:2438":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:2254:3414":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"12:777:3608":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:11758:54050":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9155:45180":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11576:49931":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2904:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:2991:2322":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:4766:2366":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10774:4083":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13436:51361":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"12:834:2553":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7920:3830":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11974:50118":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5582:41554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:7748:52461":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10528:4183":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8814:2019":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:29747:3175":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:2869:2578":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:46865:3274":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:46963:3183":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:48664:3188":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:9127:1819":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12630:50726":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5941:190":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:7237:41069":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:9491:52448":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:2885:4016":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:3377:2464":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:5793:3789":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7849:2651":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:2327:185":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11165:52132":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:11787:50105":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4565:40915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10875:4130":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:12387:629":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:47149:2424":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9873:45395":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1701:38536":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7071:3815":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:8272:4192":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:9274:45231":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11343:46025":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6597:3809":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:46975:3184":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12265:50199":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13366:51353":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7256:3820":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11764:54051":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13126:51276":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:614:61755":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"9:920:3451":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:487:37628":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5194:43503":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:46487:3176":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:48474:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6545:41988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12896:50894":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7581:3745":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"9:956:3450":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"12:985:2556":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:47284:2441":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3763:59943":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10845:4187":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:52030:2891":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4605:40920":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12781:50781":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10944:2496":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11353:2374":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:12393:1447":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"9:382:3447":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:1021:4205":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:2273:3983":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"12:822:2552":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:4585:2736":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3486:2388":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6087:3743":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:50762:3115":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10207:45470":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:9303:4108":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:50980:3129":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:20214:2879":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:11841:50109":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"12:300:3623":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:515:4253":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:6496:2599":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"0:0:1716":{"crate_id":0,"path":["thiserror"],"kind":"module"},"2:21220:57337":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13536:51397":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"12:1065:3617":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:53997:2897":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5681:3784":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8147:2490":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11862:2717":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:9061:4110":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10921:45614":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"18:80:51788":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2859:3982":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11466:56373":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7958:3764":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:12358:54221":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4212:40879":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11547:45400":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5841:40784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:5908:59945":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:4433:2781":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:4969:2358":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"12:861:2555":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:9415:2604":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4565:44118":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:46401:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:545:37635":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:6009:2745":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7413:3760":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:54211:19243":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"14:40:45624":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6646:4033":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:52641:2936":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:8748:58253":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13168:51302":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7220:41067":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:2916:4124":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:25216:2836":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2578:2487":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:47158:2425":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7948:3732":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5713:41564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:582:2156":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:52287:2903":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"12:751:2201":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:20968:1819":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:51762:2921":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:2588:56348":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12103:50127":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9108:45179":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:49026:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:4719:772":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:5894:2600":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:38124:179":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4515:40909":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:2399:2684":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:50446:2849":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6124:3767":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:11828:50108":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10108:4127":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:979:2552":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12148:50130":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:21974:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2029:180":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:9567:2311":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13459:51364":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:1611:2201":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"12:738:2547":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11553:3204":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:46958:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:47111:2420":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:3232:2497":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6881:3814":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12225:50196":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12972:51231":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:54134:19240":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:49050:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:8946:2032":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:13340:51317":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7870:2642":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11230:2382":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:7429:2533":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:598:2615":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12399:1500":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10360:4220":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11997:54259":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1604:2033":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46546:3763":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:9376:2313":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11200:2675":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5568:41520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:29641:3174":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:50538:2852":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:1043:58621":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:11851:2626":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:8475:4064":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:4117:2725":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:2847:2192":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6302:41975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6713:3741":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:20970:2884":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:4777:44162":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6315:56358":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:4530:3271":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12674:50729":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:47068:2283":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:2385:2680":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:7300:54053":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:54119:19239":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:49147:2329":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:12389:719":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:7079:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13354:51318":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:49323:2411":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:6881:2040":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6178:3798":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:6516:2419":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:47190:2434":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"12:320:3622":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8448:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"9:33:3544":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:524:3975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:9599:163":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:51786:2913":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:52339:2910":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:48165:1987":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:8422:2443":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:12400:1090":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:9615:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:56952:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4417:40901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8488:2353":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4335:40894":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9250:45229":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:810:2548":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4644:40925":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12874:50830":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10997:45624":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:7001:2432":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4706:40932":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:48191:206":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:5472:3776":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7887:3736":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:8631:45172":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2252:3984":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:4944:2276":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10941:2494":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:5503:3778":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:554:4796":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:2358:4000":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:592:37641":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:2648:4014":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4152:40874":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:8774:4082":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:599:61749":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:48132:1986":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:4191:203":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:53751:2909":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:4126:2338":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:969:2550":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1953:3348":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:49370:57168":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1532:38520":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2564:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:9323:2376":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:3271:2493":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12307:50207":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:20240:2952":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:2493:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:7736:1989":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:50332:3107":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:54024:19232":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6248:3720":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:12347:8566":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:944:2201":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:6834:2092":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:9639:2591":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:47521:32464":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2674:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:21842:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8650:2721":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:4135:43952":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"12:1840:2201":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47210:2435":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:49744:3087":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3194:2495":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"20:0:1710":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:52460:57342":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"9:649:3496":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:12926:50896":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:887:2033":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:12392:717":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:990:2553":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5009:2236":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:4246:2221":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:6759:2501":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"9:622:3495":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"12:762:2202":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:8494:43503":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:50137:2309":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11014:45736":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"13:220:60801":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:47562:32468":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:3125:45371":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5861:41598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:6681:2758":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"14:7:43427":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3370:1823":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:7535:3722":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:1931:4097":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1626:2204":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:29583:3173":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:1643:3003":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:11449:56371":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4312:2226":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6500:41984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3422:2383":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12361:50274":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:4403:2778":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8956:2033":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11070:45798":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4680:44137":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:5633:2464":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11545:54624":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:50279:3102":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5541:41553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:1668:38532":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:1825:2580":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13141:51278":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:1938:1968":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:6448:41982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:4912:44201":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2670:2399":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:3804:2302":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:2029:58743":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11853:50110":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5835:41597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4506:40908":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12251:50198":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11528:45401":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:21061:3145":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:4318:44039":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:3956:2989":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4294:40889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:5525:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10139:4110":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11436:49920":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8737:2359":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:48436:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5064:2246":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:50623:3193":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:51022:2617":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3347:2502":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:1436:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:8645:2720":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8590:2172":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7803:3827":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:5000:59970":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:11300:46020":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4247:40883":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:49077:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:9479:2662":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:9021:45178":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"9:592:3494":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:49574:2286":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:574:61743":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:6838:2713":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:1105:2557":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:954:2202":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:52538:57402":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:49378:57169":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:3362:2302":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:48284:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6139:3797":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12816:50784":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8887:2030":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4598:40919":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:11635:30654":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:49883:2284":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7307:3825":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5727:41566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:56978:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10735:2372":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:5227:1978":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5959:3979":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:1771:4101":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6761:2201":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:46918:3277":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:4317:3040":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:49985:3088":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11572:2591":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:10579:2572":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:12396:1446":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:8871:45175":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2380:3996":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:2049:3410":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5684:41561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12756:50778":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6668:3726":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:359:2638":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:2947:2033":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:2739:2403":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12046:50123":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11780:52789":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:3382:1822":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10296:45455":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8391:2473":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7850:3735":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:12374:365":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:11656:58066":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:6563:2832":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:3174:2963":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11721:50100":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:4262:3039":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:20048:57769":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:52561:57343":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:49973:2569":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:54070:19236":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:47233:2437":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:7786:56356":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8554:2774":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:6909:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:8741:11876":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:9468:52780":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3014:2206":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:7934:3731":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:51740:2933":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:21167:56978":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:9488:2307":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:8323:3073":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:1002:2555":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:967:45245":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:20265:2987":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:7095:3994":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3429:59943":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:48550:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:9317:4200":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:50738:3118":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:1636:575":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:4404:44053":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3168:2416":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:6640:52757":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:9791:45292":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:2780:2260":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"12:1029:2558":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10520:45488":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:54044:19234":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:491:61757":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8471:2352":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4972:2360":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:52011:57392":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11034:45737":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:7102:2068":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4449:40904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:4195:3033":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9915:2673":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:8093:2234":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6188:3799":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4286:40888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:49339:2410":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11271:46012":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:8545:1971":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13221:51313":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:3590:43527":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:9514:52727":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:9137:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5561:3355":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:9658:2592":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:21875:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:1751:58116":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"14:202:3341":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5660:41559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:7321:3727":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6768:3812":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:6986:58626":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:8719:2740":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:21809:2666":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:5826:2380":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:50298:3104":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6759:3738":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"12:353:3621":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:20177:2986":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:8699:2782":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:2980:2205":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:4536:44113":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4906:52147":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6415:41979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:57004:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10062:45369":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7615:3733":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10233:45480":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:564:4256":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:2612:2480":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4745:40936":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10973:45623":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4437:40903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5443:41490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:49991:3089":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4427:40902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9681:45289":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:1594:59943":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:50937:191":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2456:4024":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10796:4184":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:1414:2549":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11873:50111":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:8666:45173":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:3953:2521":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12164:50131":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:20302:2632":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5519:3779":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:628:2164":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:3349:2033":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2401:2685":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:46465:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7374:3826":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6697:4031":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8071:2673":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6323:3723":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:56939:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4354:40896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9526:4099":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6682:3739":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13231:51314":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11951:50117":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:2988:2203":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12073:50125":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10670:4190":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11054:45797":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:6721:3811":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9362:4110":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6329:11876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:52048:57378":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4768:40938":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9309:2375":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1240:2559":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:636:61745":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12860:50828":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3968:2990":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:678:8561":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:3707:43572":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:12397:1443":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:545:2658":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:9453:2314":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8613:2523":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2928:2064":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:29507:3005":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4838:2612":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:918:2546":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6048:3709":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:54172:19242":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:507:61743":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1686:38534":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:21362:58189":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:4288:44033":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:47552:32467":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:6572:41990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:20455:2883":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:6302:3322":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:9930:45382":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:1525:38519":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:5380:2427":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:5504:41549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12008:50120":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9712:45290":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:2817:2173":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:271:59943":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:7249:41071":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7992:3763":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:50589:2854":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:21776:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4280:40887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:1760:3229":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:7051:2069":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:2792:2265":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11761:50103":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6981:42359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:586:37640":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:5226:61082":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:2596:4055":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:20422:1819":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6855:3813":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:5720:41565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10608:4088":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10221:45479":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:686:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4231:40881":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:8393:4069":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6509:41985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10270:45457":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:353:2637":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:0:484":{"crate_id":2,"path":["core"],"kind":"module"},"6:600:37642":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:624:61752":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:727:4246":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"7:79:42649":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:12836:50825":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:1003:2557":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4657:2737":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:21271:58114":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7404:3744":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:1511:38517":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:5592:3973":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4716:40933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:50033:2307":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13374:51354":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4804:40941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10682:4191":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:20705:2885":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"18:96:51789":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9422:45243":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:47139:2423":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11617:50032":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:0:1837":{"crate_id":17,"path":["object"],"kind":"module"},"2:53001:2908":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:1887:6077":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:6785:2582":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:3179:43507":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"13:108:60845":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2672:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:12382:1351":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:1903:45276":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7489:3699":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:6777:58610":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6450:3636":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:4432:44057":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11106:45806":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11365:52761":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6782:2754":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5672:41560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2696:4005":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6545:3737":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11235:45899":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"9:827:3449":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:50643:3194":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10708:4186":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7430:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:38141:2156":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:2622:4015":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4744:2360":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:7266:41073":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:49331:57796":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1211:2558":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9401:45244":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:1852:2203":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:521:4250":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:1580:38525":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:2903:206":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:9844:4211":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:6746:2092":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:1832:2033":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10822:45184":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:6604:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11259:46009":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2676:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9658:45288":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:8418:4132":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:9488:4063":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8066:2635":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10245:45481":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7978:9566":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:7189:3710":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:52385:2895":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:52171:2927":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6392:38460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:3484:3426":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:8055:4081":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11368:46039":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:7255:41072":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5394:187":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:12118:50128":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:47269:2440":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:4104:59942":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11174:45845":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"3:223:206":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:9333:2298":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:10594:3293":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:3541:2202":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:9283:45247":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:1518:38518":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8763:2361":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:6322:41977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:9909:45366":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:20427:13679":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:4747:3354":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"9:19:3543":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:12176:50145":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:487:45166":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:8610:190":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13114:51273":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"9:863:3452":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:53421:2937":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"9:977:3455":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:5715:3785":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:49111:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:736:4247":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3192:2494":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:21941:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:501:37630":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7113:3995":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:50806:2594":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5480:41547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4778:40939":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13518:51395":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13393:51356":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4126:40872":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9350:4203":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:3157:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:9526:2308":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2578:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:49795:2294":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:13039:51263":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:6769:3382":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:14:1948":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:6940:3184":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4254:2222":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:11974:2281":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:21383:3164":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9118:61390":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:8752:2475":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6012:3795":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46553:57451":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:39334:3417":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:8911:61556":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12638:50728":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:484:52789":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4592:40918":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11590:51990":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:20008:57520":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10420:4221":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:4712:44145":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:1562:38523":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8904:2031":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"14:187:43436":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:524:56354":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:10127:2301":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:13059:51267":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11521:2375":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2738:58592":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:7896:2644":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:46260:2271":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:9367:2601":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6311:41976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:686:8564":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:46857:3107":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:48322:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:719:4245":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:8137:45168":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:2987:2321":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:3001:4011":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:386:45165":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:9627:4106":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5595:41556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"9:188:3519":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:3393:43509":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12980:51258":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:6544:202":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:47543:2502":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:4302:2225":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:2959:3345":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10949:45622":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:6078:2757":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:8561:4146":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2784:4010":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5606:3782":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"14:221:43435":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10394:4164":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:50237:3101":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:50993:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:9386:2602":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:11111:2845":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:1226:2557":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8973:2036":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:4326:2340":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:10332:4227":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:10883:56363":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:11045:2839":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3616:2092":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5011:2243":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4816:40943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12211:50195":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:2497:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:48174:36879":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2856:2197":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:6042:2748":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9446:45248":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11149:45843":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9778:4152":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6495:3635":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:7945:2213":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:5976:2201":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:9415:2299":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12964:51230":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13007:51260":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"13:0:1827":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:47528:2543":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:9297:182":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:47320:2444":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10510:9564":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:49915:2304":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:4740:44149":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:2383:2679":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:49089:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:8867:2209":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11734:50101":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8694:2779":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:20453:2889":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:56582:3135":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:4840:44177":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2784:2248":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9475:4060":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:9610:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:3254:43508":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10466:45484":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7297:3824":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4139:40873":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:49360:2029":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:4348:44045":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6101:3717":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:11065:2837":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:50754:3120":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:6807:56974":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:8864:2029":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:560:37636":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6953:37587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:5680:2370":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:11760:58068":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:539:37634":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4300:40890":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:49905:2306":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46845:3280":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:50119:2311":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8379:2382":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:46991:3185":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:8614:2008":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:6921:52757":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:6164:3719":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9644:4095":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7335:3740":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:49813:2297":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2652:2489":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:8241:4189":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:11266:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:47089:2418":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4454:2784":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5739:3786":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:49823:2295":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10721:45183":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11979:27750":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7868:3734":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11536:45399":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:2746:58591":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:6807:3349":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:1714:38537":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2250:2674":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:21296:57333":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12291:50206":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4102:40870":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:11186:45846":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:48107:2033":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:9831:4210":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:58292:58115":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:50463:2850":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11383:2377":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:9671:4072":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:671:4241":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:4272:2339":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:0:281":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:49348:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6294:3747":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:21395:3163":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12278:50200":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4534:40911":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1678:38533":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:2833:3981":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"10:0:1831":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5749:60597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:9473:2626":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12060:50124":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6632:3810":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:10608:3254":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:47252:2439":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:52241:2915":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7245:3819":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:8595:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:46778:2167":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:5709:2372":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:2026:181":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9165:61260":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:8625:2524":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"12:697:2550":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10182:45370":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:4653:44134":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:6409:56370":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:50289:3103":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:4626:2464":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13527:51396":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:4346:2342":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:9534:3814":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:9820:4208":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6375:38457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9501:4108":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:1541:38521":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:50165:3097":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7539:54323":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:48588:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:8608:2010":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:681:8563":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11161:45844":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13082:51269":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10455:4222":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:5771:3788":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:47129:2422":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:2311:3702":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:9293:4204":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8505:2354":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:9328:4201":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:51808:2901":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"9:709:2029":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46605:2956":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:48259:179":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:2917:2479":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:12218:56026":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13580:51405":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10434:45483":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:3594:2356":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:20862:2631":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:50307:3105":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:6992:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2969:2819":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:4324:2228":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:9521:52790":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:11774:50104":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9577:4102":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4797:40940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:7057:2629":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:48115:2302":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:910:2092":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:286:2070":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12349:50271":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:10947:2492":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:2290:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"12:60:60789":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:0:1828":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:2673:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:1636:38529":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2154:576":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10642:4193":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:10840:2373":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:49896:2303":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1600:38527":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:5646:2368":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5438:3774":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"12:119:3624":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:2788:2263":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:52955:2904":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"15:214:3643":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:1608:2092":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:2932:2065":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:50919:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:12380:306":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:48793:2001":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:50742:3117":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:495:37629":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8705:2730":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9353:2598":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:48360:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"12:2053:2556":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:11661:56351":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:52363:2892":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:2839:2188":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:4216:2610":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7475:3724":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:3236:2979":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:7208:41065":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:46519:2968":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4908:52149":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1643:38530":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:4808:44169":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:21710:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:6037:3999":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4367:40898":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:50001:2475":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:6852:2714":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6524:41986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9691:4150":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2257:2472":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13327:51316":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:6022:59943":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8713:2719":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:562:45167":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:11622:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:1695:38535":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:52095:2935":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12514:50671":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7192:56327":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:3084:3177":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:8991:61625":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:52877:2916":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:50323:2167":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:20294:1819":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4551:40913":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:1811:596":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:3017:43506":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7366:3742":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10283:45456":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11199:45847":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12087:50126":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:50818:3206":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:7226:41068":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10088:45368":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:8881:61498":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:50750:3119":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:1059:3408":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:4086:3032":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:1348:2033":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8639:2719":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11087:45805":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:62:37250":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:131:37316":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:21279:57393":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5625:41558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:46944:2951":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:29332:3220":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:7962:9559":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:2921:3703":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11340:9566":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:5424:3773":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12375:911":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:11902:2718":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:54149:19241":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1574:38524":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:20296:2630":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46925:3278":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7825:3828":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2500:4013":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:48786:2000":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:8110:45161":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2851:2194":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2411:2690":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:1632:2205":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:52317:2907":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12322:50208":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:719:8565":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:2753:2249":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11137:45808":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:11288:46019":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4659:40927":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6969:3388":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:113:51790":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9071:61466":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13148:51279":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9458:4070":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11800:50106":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:2954:2204":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12884:50892":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11356:46038":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:7266:3821":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:7042:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:217:3377":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:6709:2541":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9539:4098":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2669:1826":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:5574:3781":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:5154:3985":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:1091:2556":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:9031:61730":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9722:45287":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:12379:1016":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:3106:2202":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"7:0:1490":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4014:2717":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:11054:2841":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:47048:10072":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"9:586:3492":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:1828:9553":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:2758:2211":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5587:41555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:57017:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50734:3116":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4810:40942":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4208:44001":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:3314:2483":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6409:41978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:630:58588":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:47098:2210":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13184:51304":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:36:3317":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:1386:2546":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:4672:8567":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:46784:30098":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:8600:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:7022:3991":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:1654:38531":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:20446:1819":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:8596:45171":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:53959:2932":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:4041:59942":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4267:40885":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9399:2603":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2291:4025":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:5822:13891":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6430:41981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:5758:3787":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:481:4251":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5554:41519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:10813:3096":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:6737:2282":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4316:2220":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:8526:4166":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12797:50782":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:7166:42519":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4726:40934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2905:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:50746:3121":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8442:2477":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:3162:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:538:4255":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4621:40922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2681:2344":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:4:982":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:6828:2092":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:8602:2001":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:2332:4018":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:7735:1817":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6230:3801":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8363:2501":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:53813:2929":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3908:2464":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:47335:2433":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:9548:52735":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6352:38483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2445:2407":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4206:40724":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:50785:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:50575:2853":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:29541:2542":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2253:2676":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13091:51270":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8076:2233":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4635:40924":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13158:51301":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11217:45848":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:7939:8562":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4441:2783":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:5211:3322":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:8368:4084":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:3147:3178":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8429:2475":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3479:2389":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"9:676:3541":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:9263:45230":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:5178:2519":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"12:815:2551":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:6136:56358":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:7955:2560":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:2993:3346":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8083:2675":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"8:0:1829":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5995:3794":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8131:2697":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:6308:3802":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11716:51986":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11746:51979":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:50972:3128":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11040:2838":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:39347:2402":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11923:2725":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:5534:41552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:766:4249":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:50183:3098":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4361:40897":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13134:51277":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:52141:2923":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11515:49923":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:4026:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"12:393:60790":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:644:61743":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:46299:2820":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:54015:19231":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11315:46023":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6276:3746":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11460:56330":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13024:51261":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7215:3817":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:8818:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:135:37317":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4307:40891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1369:2092":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:12023:3647":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4683:40930":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12748:50736":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8370:2503":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2487:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:3470:52621":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:51010:2619":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:52765:2928":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:20343:2883":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:5370:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9738:4153":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10476:45485":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:10753:3092":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:11533:2376":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:1595:38526":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7637:3716":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:4505:2727":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:9284:2033":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:1672:1054":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:50395:2840":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:9721:6077":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:5823:2378":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:2736:2151":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:411:161":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:12377:1463":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:5574:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"14:165:43428":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:1981:3411":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:12391:721":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:51840:2934":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:8162:4133":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7737:45167":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10350:4083":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:48807:2010":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:47038:10073":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:6216:2599":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9339:4202":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:9308:2302":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46421:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:2478:4001":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10497:45487":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5876:41599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5927:3792":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:1866:2205":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:46835:3279":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:1845:2202":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:11001:2042":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:6016:2747":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4761:40937":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:7005:2431":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:50083:3094":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:8832:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:51716:57386":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:6321:3323":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:5856:3791":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:8441:4188":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:1358:2302":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:1550:38522":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:1620:2203":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2816:4009":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:11731:51976":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:949:59943":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:50219:3100":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:6799:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5523:41551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11708:50099":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6538:41987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:20046:57767":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3230:2496":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:8598:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:11344:2571":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:21317:57401":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:46805:2947":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:48800:2009":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7447:3728":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:7243:41070":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:581:37639":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:6843:4038":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:1943:2658":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:574:2663":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:53563:2905":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1476:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:6393:3130":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"12:1138:2559":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"12:1120:3619":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6354:3804":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11909:50113":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:50417:2843":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:2833:2185":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:8981:45177":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:9857:4135":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4224:40880":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6441:3805":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:5887:2599":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:1737:3230":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4737:40935":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47219:2436":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:5741:41568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10385:4163":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:973:2551":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:20874:57523":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2762:4008":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4379:40899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12955:50910":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:9526:52787":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4179:40875":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:3184:2967":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9947:45398":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:9291:2373":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6975:42358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:46904:3106":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:8701:45174":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:12395:1445":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:8612:2007":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:1395:2547":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:9553:4110":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8123:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:50766:3204":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:5845:2430":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:567:37637":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:50600:2855":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:52507:57335":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:1962:4148":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:46377:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:2742:58590":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12390:720":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11500:49922":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:5506:186":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:50065:3093":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:48250:2092":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"12:1555:3631":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"12:2198:60794":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:47167:56960":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:3269:2492":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:19980:2156":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4527:40910":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:50314:3106":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:49959:3189":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4904:52145":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:10864:2313":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5974:3793":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:54055:19235":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:51696:57387":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:5817:3790":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:6791:2092":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:0:1838":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:50730:3113":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:13506:51394":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:9361:2092":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4262:2223":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12850:50827":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:646:37672":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:8295:45169":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1690:2202":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:2424:3997":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:7982:3417":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:19993:57520":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:6030:3796":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:707:2841":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:50511:2851":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:4597:44126":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:51941:2914":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:9631:4096":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4894:2224":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:8222:2576":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6149:3768":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:5365:3718":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:1077:3409":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:1552:2464":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:1887:38675":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10257:45458":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:9569:52873":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10583:4087":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:3472:2490":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:8577:2775":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:2285:184":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:4059:3031":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:8822:61261":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:49844:2285":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:677:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:49059:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:12342:54321":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3404:2240":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:1967:1969":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"9:0:1830":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10752:52827":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11939:50116":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:609:61756":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9620:2590":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:48626:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:5624:58466":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"15:193:3639":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:9595:2312":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:53215:2917":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:5880:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6115:3715":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"12:98:3620":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11606:50031":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46888:3275":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"9:800:42799":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7037:1986":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:48047:177":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:13100:51271":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6293:37509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:6463:59945":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:12030:3647":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11170:54607":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:7150:52465":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:52795:2931":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:6893:2563":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:50758:3114":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9897:45397":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:56991:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4369:2341":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4017:2718":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:21369:3225":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:7214:41066":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:7086:3318":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5175:43505":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:3154:2703":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12337:4187":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:8510:43502":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6554:41989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:12016:2158":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:11683:2387":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:21204:57800":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:8941:45176":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:51892:2926":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:49163:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9183:45181":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12617:50674":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:7875:2661":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:9431:2605":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:3845:43686":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2515:2486":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:513:37632":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8962:2035":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:1425:2550":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2827:2182":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:7038:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13192:51305":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:8951:61483":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6998:42360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:47305:2443":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4268:2224":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:3680:43569":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:7279:42547":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:1505:38516":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:111:3511":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:7860:54257":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:10529:52824":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:7737:1988":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:853:2554":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:48242:2302":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13572:51403":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:21908:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:44:3606":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10403:4085":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:2812:2177":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:47537:32466":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"12:1836:2092":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:12383:1429":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:3160:2705":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:1195:2556":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12948:50898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:46560:2339":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"11:36:60785":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13557:51398":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6424:41980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8034:3700":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2774:2257":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:519:37633":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12033:50122":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:10094:2300":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13214:51312":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5733:41567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:54081:19237":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10121:4128":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:1919:2625":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"12:2178:60798":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8217:2575":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4665:40928":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:47199:2429":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:53065:2893":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11485:49921":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10159:45372":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2984:4012":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9764:45291":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4510:44111":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5695:2371":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:1826:9552":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:2935:2066":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6219:3800":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6886:213":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4489:2739":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:3623:43536":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12609:50673":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:1738:38539":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:7461:3729":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8139:2488":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:242:61579":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3157:2704":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:6926:3386":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:0:1836":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4559:40914":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:48123:2092":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12134:50129":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:11708:30655":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:4071:2464":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:54035:19233":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:21677:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:12381:1321":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11594:49975":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:7289:42548":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9345:2033":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:49044:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:5782:41570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13176:51303":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"9:505:3442":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:22406:2822":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:6331:3324":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:12401:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"9:896:3454":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:21244:3018":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:47570:32470":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:20027:57766":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2726:2063":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"12:1872:2206":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7350:4042":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:4986:59954":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:5348:52752":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:53875:2894":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4496:40907":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10578:3291":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:0:793":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12550:50672":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:21333:57329":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"15:175:3638":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4191:40877":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10490:45486":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6337:3803":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:39298:2381":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"18:531:4254":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"12:274:60786":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:1608:38528":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11247:45900":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:20025:57764":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4673:40929":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8412:2210":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:20253:1819":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:6479:41983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:8606:2009":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:54096:19238":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6419:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:6610:2536":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:21743:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8106:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:661:1970":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3461:1971":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12695:50730":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:9454:2753":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11330:46024":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6262:3730":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:7069:2202":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"12:669:2549":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:5113:44378":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9700:4149":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4274:40886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"12:387:60793":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:2476:3413":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:21256:3019":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:11862:3130":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"12:0:1833":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:2570:4054":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:8604:2000":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10894:4129":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:4531:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4611:40921":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:6430:2100":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:6474:3806":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7014:3339":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4879:44192":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:50269:2477":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:681:4242":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"14:31:43427":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:48512:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13047:51266":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:6819:2544":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10374:4162":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:5450:3775":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:2402:4019":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:20710:13697":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"12:1534:3630":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4115:40871":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:3557:43518":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7907:3829":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:931:2547":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:4425:2780":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:5545:3354":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2822:2180":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:660:4240":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:4900:59943":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:575:37638":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:9751:4151":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"14:0:1834":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12730:50734":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:4003:2624":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4629:40923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11813:50107":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:5169:2169":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:960:2548":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:3249:4136":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:6956:3387":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4096:40869":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:49870:2283":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:6677:2543":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:11683:188":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:2526:4002":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6170:59943":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4626:44131":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:48234:2033":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7227:3818":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:9908:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:869:2033":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4653:40926":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11893:50112":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10546:45182":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:48183:189":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:5436:2201":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10752:4085":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5536:3780":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"12:1628:60799":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12198:50194":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4690:972":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6820:60954":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13492:51388":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2321:178":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"12:1085:3618":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5402:3772":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:7433:2535":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:7276:3822":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4575:40916":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4346:40895":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"12:2184:57181":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:46443:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:1500:38515":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10310:45482":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:56965:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9920:52825":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13413:51360":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:6232:202":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6807:4036":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:2805:2175":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"14:160:43427":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13382:51355":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:5236:1007":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:21644:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:608:37643":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:1114:2558":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5317:52752":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:8328:3074":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"12:1044:3616":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4329:40893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:3448:43510":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5692:41562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:8796:4089":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"12:725:2546":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:50015:2298":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13279:51315":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6269:37550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:4693:57447":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3086:2504":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12934:50897":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:2740:4007":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:590:58201":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:5763:2374":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9382:45246":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39338:2323":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11661:50039":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9223:45228":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11559:49928":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:10829:3099":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8435:2298":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4475:40906":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12398:766":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:52409:2896":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12376:407":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:774:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:699:4244":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:6752:3381":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13594:51439":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:29547:3006":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:48398:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:0:1343":{"crate_id":1,"path":["std"],"kind":"module"},"6:5772:41569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5699:41563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6794:4035":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4239:40882":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:46346:2988":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2662:216":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11240:54620":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4698:40931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:7426:2041":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:6488:59966":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4185:40876":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:6571:3808":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12739:50735":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12485:50670":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:11893:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:13071:51268":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:5457:2428":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:2843:2190":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6277:38456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:755:4248":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:53673:2925":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:58313:58113":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4317:40892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:247:61418":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:9601:4100":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12388:722":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10445:4187":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:5642:3783":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6506:3807":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"14:215:43429":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:10506:45459":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:1864:9564":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:1615:2202":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:10075:45367":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:7156:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2737:58624":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:51971:2902":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10854:4147":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:996:2554":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"12:1859:2204":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9337:2377":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:11210:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11997:50119":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11125:45807":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:8534:54258":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:7841:2839":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7545:3748":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:53921:2912":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:50610:2856":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:50432:2846":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13203:51306":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:4210:2611":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:51910:57327":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:3560:59943":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:29569:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12237:50197":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:2548:4003":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:652:61743":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:153:3707":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:49925:2305":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:8872:2409":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:8227:2491":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:4376:44049":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4461:40905":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:3910:2033":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12909:50895":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:2918:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:9609:2310":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:52719:2924":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7805:56365":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:2674:4004":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:12394:1444":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:8339:45170":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:47181:2426":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10321:4219":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13478:51370":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5210:43502":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:46911:3276":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11684:50040":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:3199:2980":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13404:51357":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:10204:57265":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:21114:3147":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:1707:2731":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:2768:2254":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5379:3771":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11639:50033":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46821:2949":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11188:52130":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:49833:2296":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:852:3380":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11154:2362":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10625:4090":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1445:3406":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"18:690:4243":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4257:40884":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"11:0:1832":{"crate_id":11,"path":["adler"],"kind":"module"},"12:2080:2558":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"12:1518:3629":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:6441:52753":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:1889:9571":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8796:1979":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5498:41548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11748:50102":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8330:2505":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:2796:2267":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7848:1819":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:4200:3034":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:6654:3725":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:51993:2906":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:2718:4006":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4398:40900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:49804:2293":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12768:50780":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:3733:2201":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7287:3823":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2800:2269":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:9581:2309":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9433:45242":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"7:32:42642":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:1123:2559":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:8212:4185":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:2490:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:51870:2922":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:1404:2548":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:10790:3095":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8687:2172":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:1637:2206":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:781:3379":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:420:3687":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:7521:3721":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12022:50121":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:50929:207":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2444:1819":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10665:2385":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"15:0:1835":{"crate_id":15,"path":["addr2line"],"kind":"module"},"12:646:2302":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4200:40878":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10406:2732":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5488:3777":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:49570:3295":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:47294:2442":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:4253:44022":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:11175:2233":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:1722:38538":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"19:0:998":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7003:3338":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9885:45396":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10986:2644":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:11609:2590":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:9371:45179":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:900:2302":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2938:2067":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5605:41557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:965:2549":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:5013:2245":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9805:4207":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:46361:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:659:2092":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:11677:52775":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:22007:3150":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:5087:2235":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"12:2205:2040":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:11060:2842":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:4948:2274":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"12:2190:60797":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:3338:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9193:61461":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5660:2369":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:7924:8559":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:46526:2053":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:6095:2092":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:21188:3023":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46882:2167":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4581:40917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:12386:628":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:53031:2911":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11220:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:21:664":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:8555:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13031:51262":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:11919:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:52193:2930":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2763:2252":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"12:2069:2557":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"12:632:2033":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:48098:2091":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7144:3816":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46793:2946":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"thiserror_impl","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}