{"root":"0:0:2116","crate_version":"1.0.58","includes_private":false,"index":{"2:13187:22893":{"id":"2:13187:22893","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13126:22850":{"id":"2:13126:22850","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:22891":{"id":"2:13184:22891","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13181:22889","self::pattern":"2:12804:8912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43542:8899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13135:30451":{"id":"2:13135:30451","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1699","crate::ops::IndexMut":"2:3374:3292","str::slice_unchecked":"2:13134:30450"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13138:22881":{"id":"2:13138:22881","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13139:22882"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13141:27928":{"id":"2:13141:27928","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43390:8919","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13238:24242":{"id":"2:13238:24242","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13148:27929":{"id":"2:13148:27929","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43712:8913","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:22897":{"id":"2:13155:22897","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:31166":{"id":"5:5611:31166","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:31164","5:5605:9252","5:5608:31165","5:5611:31166","5:5619:31167","5:5620:31168","5:5621:3434","5:5622:24294","5:5623:24295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13119:30448":{"id":"2:13119:30448","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13117:30447"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:30449":{"id":"2:13123:30449","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:2476":{"id":"2:13162:2476","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:3434":{"id":"5:5621:3434","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:24246":{"id":"2:13241:24246","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:37417"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:30462":{"id":"2:13212:30462","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13117:30447":{"id":"2:13117:30447","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13115:2477":{"id":"2:13115:2477","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:22887":{"id":"2:13172:22887","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12804:8912","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split":"2:13166:22883"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43438:8897","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:30460":{"id":"2:13209:30460","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:3213":{"id":"2:13246:3213","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4894:3213"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43728:3214","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13113":{"id":"2:13113","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13114:981","2:13115:2477","2:13116:30446","2:13117:30447","2:13119:30448","2:13122:22792","2:13123:30449","2:13124:334","2:13125:22854","2:13126:22850","2:13128:22851","2:13130:22852","2:13132:22853","2:13134:30450","2:13135:30451","2:13136:22877","2:13137:22878","2:13138:22881","2:13139:22882","2:13141:27928","2:13142:28258","2:13143:22035","2:13144:27926","2:13145:27927","2:13146:24973","2:13147:30452","2:13148:27929","2:13149:22895","2:13152:22896","2:13155:22897","2:13158:2518","2:13162:2476","2:13166:22883","2:13169:22885","2:13172:22887","2:13175:30453","2:13178:30454","2:13181:22889","2:13184:22891","2:13187:22893","2:13190:22894","2:13193:2357","2:13196:30455","2:13199:30456","2:13202:30457","2:13205:30458","2:13207:30459","2:13209:30460","2:13211:30461","2:13212:30462","2:13213:30463","2:13216:30464","2:13219:3087","2:13222:22898","2:13225:30465","2:13228:30466","2:13231:30467","2:13234:30468","2:13236:24239","2:13237:24240","2:13238:24242","2:13239:24243","2:13240:24244","2:13241:24246","2:13242:24247","2:13243:24248","2:13244:30469","2:13246:3213","2:13247:30470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5619:31167":{"id":"5:5619:31167","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:30458":{"id":"2:13205:30458","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:24244":{"id":"2:13240:24244","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:9252":{"id":"5:5605:9252","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13237:24240":{"id":"2:13237:24240","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39459:9052","Self::is_ascii":"2:13236:24239"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39459:9052","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:27926":{"id":"2:13144:27926","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13145:27927"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43694:8915","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:22851":{"id":"2:13128:22851","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:24239":{"id":"2:13236:24239","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13145:27927":{"id":"2:13145:27927","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13144:27926"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43703:8914","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:30457":{"id":"2:13202:30457","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12804:8912","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::match_indices":"2:13199:30456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43588:8928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:30463":{"id":"2:13213:30463","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12830:8907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:30455":{"id":"2:13196:30455","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12804:8912","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::matches":"2:13193:2357"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43642:8930","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:22882":{"id":"2:13139:22882","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13138:22881"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:22883":{"id":"2:13166:22883","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12804:8912","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split_whitespace":"2:13144:27926","str::rsplit":"2:13172:22887"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43420:3411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:30454":{"id":"2:13178:30454","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12804:8912","str::split":"2:13166:22883","prim@char":"1:12325:458","str::split_terminator":"2:13175:30453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43488:8931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:30450":{"id":"2:13134:30450","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1699","str::slice_mut_unchecked":"2:13135:30451","crate::ops::Index":"2:39104:3291"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:30466":{"id":"2:13228:30466","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:30467":{"id":"2:13231:30467","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:22854":{"id":"2:13125:22854","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:22885":{"id":"2:13169:22885","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12620:8903","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:30461":{"id":"2:13211:30461","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13142:28258":{"id":"2:13142:28258","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43396:8918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:3087":{"id":"2:13219:3087","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:22889":{"id":"2:13181:22889","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912","str::rsplitn":"2:13184:22891"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43524:8901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:22895":{"id":"2:13149:22895","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:30465":{"id":"2:13225:30465","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:30470":{"id":"2:13247:30470","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4891:30470"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43737:8924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:334":{"id":"2:13124:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13125:22854","`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:22035":{"id":"2:13143:22035","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43406:3410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:22853":{"id":"2:13132:22853","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:24973":{"id":"2:13146:24973","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43674:3407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:2518":{"id":"2:13158:2518","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:24243":{"id":"2:13239:24243","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:30456":{"id":"2:13199:30456","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12804:8912","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13202:30457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43570:8927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13175:30453":{"id":"2:13175:30453","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12804:8912","str::split":"2:13166:22883","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8196:129","str::rsplit_terminator":"2:13178:30454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43470:8932","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:30469":{"id":"2:13244:30469","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4893:30469"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43719:8923","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:30468":{"id":"2:13234:30468","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12765:135","`FromStr`":"2:12764:2438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12764:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12764:2438","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2116":{"id":"0:0:2116","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.58\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:2111"],"is_stripped":false}}},"2:13136:22877":{"id":"2:13136:22877","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13138:22881","str::split_at_mut":"2:13137:22878"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:24295":{"id":"5:5623:24295","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13240:24244"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:30459":{"id":"2:13207:30459","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13116:30446":{"id":"2:13116:30446","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:30464":{"id":"2:13216:30464","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:24294":{"id":"5:5622:24294","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13239:24243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:24247":{"id":"2:13242:24247","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:37417"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:2111":{"id":"0:74-20:0:2111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[248,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:2111","glob":true}}},"2:13190:22894":{"id":"2:13190:22894","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:22852":{"id":"2:13130:22852","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:22878":{"id":"2:13137:22878","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13136:22877","str::split_at_mut_checked":"2:13139:22882"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:22896":{"id":"2:13152:22896","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13114:981":{"id":"2:13114:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:30452":{"id":"2:13147:30452","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43684:8926","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:31165":{"id":"5:5608:31165","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:31168":{"id":"5:5620:31168","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2450","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2450","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:2357":{"id":"2:13193:2357","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12804:8912","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatches":"2:13196:30455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43624:8929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122:22792":{"id":"2:13122:22792","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12352:8916"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:24248":{"id":"2:13243:24248","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:37417"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:31164":{"id":"5:5604:31164","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2450","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2450","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:22898":{"id":"2:13222:22898","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8912"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:43292:8874":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:1577:2434":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22374:3773":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:7452:15204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2859:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:15206:21409":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13946:20635":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:12620:8903":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40124:3333":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6447:14765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:7389:11068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14212:20652":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:5788:3592":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:1559:10932":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:2432:3356":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:1496:10925":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14402:20665":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11300:22599":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:5158:28392":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:12111:22747":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2448:3360":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3339:3432":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:22283:3769":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:12326:1849":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:3614:16072":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15400:21427":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:2748:16057":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"14:0:2248":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:15266:21413":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:1025:3254":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:1311:3253":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9445:3625":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:2526:30228":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:33234:9266":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:22716:28153":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7954:2234":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5367:16961":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:8265:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3289:3430":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:35825:9274":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:7933:3569":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:2037:17236":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6079:16983":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:1888:3314":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6872:17017":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2383:2434":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:15:2360":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:6730:3584":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11354:17233":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14977:21394":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:10042:2407":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:14587:20677":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5636:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"11:2443:3243":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:31974:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:5122:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:479:10029":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46318:3690":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:1527:3242":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6379:14696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:521:21664":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:15701:21447":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43674:3407":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:9897:29309":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:10707:28284":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:22333:28806":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"11:2151:3255":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"9:424:15830":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5314:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11467:17235":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6689:14784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:10997:17183":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12238:17360":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:45821:28156":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:16259:20126":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7098:32547":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:4587:16614":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:42271:2418":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:46564:8812":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:1829:3298":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:7695:17046":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10877:17163":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8855:2436":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:4737:9009":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"11:742:3247":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:2483:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7580:17039":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:45550:3714":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9938:17148":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7584:15213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:765:21656":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:883:3252":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12433:17131":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:1207:17206":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:5196:27449":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42113:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12399:17393":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:45469:3699":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13774:17347":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:40775:9209":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:6060:9630":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12530:17405":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:8211:3238":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:16187:21624":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:13325:20122":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15197:21408":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6574:17006":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:13785:17348":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12516:17414":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:4335:28752":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4952:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:1663:10941":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:9139:2434":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8220:27446":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8155:3368":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:7585:9040":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:3179:8842":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:7397:32935":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:41633:2403":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6714:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:4614:16618":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11877:17301":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12340:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:7266:22776":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:45969:3701":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:1087:32437":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:37756:9276":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:40793:9212":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:11142:17161":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13024:17175":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:2460:3366":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:3472:3437":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:44170:9428":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42250:2409":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:13674:20623":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12225:17361":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14436:20667":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:12348:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"15:306:15988":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:31940:2687":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:365:3210":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10018:17122":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7590:17040":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11799:17342":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11747:21999":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14271:20656":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4243:27058":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:437:16011":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8061:3318":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:43166:28350":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:1066:3255":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13832:20629":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:33430:9269":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:12764:2438":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15138:21403":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14475:20670":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:3029:30231":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"14:160:15963":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:4761:25340":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:4959:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:39926:9035":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14260:20655":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7741:17048":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:2979:2237":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"11:351:32411":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:8073:17057":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4281:3515":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:3382:3428":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:8197:15746":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2049:2580":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8460:3373":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:8012:15584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"11:1676:32430":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:7436:2481":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5489:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:45369:3686":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6263:32876":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:7984:9987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5677:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:37866:9278":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:42074:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:46471:3702":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14372:20663":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11026:17185":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:8304:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:30190:3460":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:45483:3647":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:4641:16622":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13594:20141":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:542:32863":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13723:20624":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5260:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15116:21401":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8773:2431":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46098:3716":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5244:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:3305:3260":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12030:17307":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:39286:8988":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:13738:20625":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:4830:16696":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:22938:28052":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:2434:3089":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6427:16995":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:22388:9293":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:10720:33703":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:3149:3628":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:45760:3721":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7006:17023":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:2708:16055":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9781:17144":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5643:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5671:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:15410:21428":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6915:14826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15957:21613":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:43981:8949":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:506:3187":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:3792:3277":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:3337:3431":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:6098:16984":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:5409:30312":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:589:28872":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:3103:2584":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2694:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4976:16727":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:2936:16065":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:7570:17038":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5466:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:1107:15951":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:14246:20654":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:4149:3240":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:22245:3768":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:5581:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:37701:9275":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:5645:3551":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11825:17322":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:6532:17003":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5277:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5653:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:7727:17047":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:6219:22757":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:11029:3558":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5039:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:32061:8838":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1517:10928":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14788:21386":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6433:16996":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:3397:3244":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:10248:2409":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5083:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:3329:16070":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13146:17445":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11557:17284":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:1191:31496":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15190:21407":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:10254:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5370:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:40208:3408":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3144:3626":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:41736:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:1891:3243":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40321:9229":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40392:9234":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:5895:3575":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13797:20627":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:6768:14794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:44162:9405":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:689:21660":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14051:20643":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7355:17029":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:16249:21629":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:6798:3590":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"11:1051:3255":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14560:20676":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10092:17151":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5160:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:1942:2383":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:41838:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:1726:30312":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:96:21642":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:12506:9416":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:2548:16048":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4346:3517":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6948:17020":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:7485:15207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6120:3591":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:45384:3646":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:12343:1809":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"13:110:32485":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5306:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:12830:8907":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:4487:9013":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:31975:2240":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:3810:16090":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:3284:31520":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:4728:9008":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:10714:3195":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:4074:3243":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5385:16962":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:735:21655":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14463:20669":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:2423:2481":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:9527:3314":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:22774:28065":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:5863:16975":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:3502:3392":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7857:17054":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9293:27466":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:21479:29454":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:8522:3407":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:3872:3244":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:6648:17011":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:832:3245":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:12332:1787":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:10044:17150":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:2289:3353":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:3475:16071":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4718:16676":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:3033:30441":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:8301:17068":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13877:20632":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10887:33698":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:3618:3402":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:6466:16999":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10672:3427":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:11345:3349":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:2822:2234":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:7428:17030":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:41518:3452":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8601:3455":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:41711:2434":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12572:17161":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"11:1887:2481":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12724:17166":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:2197:3187":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5415:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:21433:29457":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:14298:20658":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14599:20678":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:256:32897":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"13:0:2241":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10439:17156":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:2326:3254":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"9:447:15828":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46492:3723":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:1883:2434":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"10:36:32405":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:1926:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:43642:8930":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:507:33725":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:0:2242":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:4863:3494":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:43588:8928":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:8534:3454":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40785:9210":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:21550:2234":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11051:17211":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"7:78:15806":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15836:21457":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4979:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:4609:8999":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:3623:8847":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7648:17043":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:926:3263":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:43007:28311":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8492:3408":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:4502:30324":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:531:21668":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:15720:21448":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:4062:16250":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2741:3422":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:3847:3456":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9300:22561":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:8175:17062":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:46392:3696":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:3552:8993":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"15:394:15999":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:2207:31488":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43524:8901":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:0:1691":{"crate_id":1,"path":["std"],"kind":"module"},"16:2478:16045":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:9715:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1671:10942":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:15324:21419":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:875:3251":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:12339:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5146:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15760:21451":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:6491:14724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7379:32892":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46450:3668":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:9382:3392":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:7656:17044":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:3319:3273":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:4246:3392":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:6947:8977":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:1890:3315":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:12878:8936":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:15390:21426":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2927:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:15944:20116":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:7851:24951":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:43542:8899":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:45437:3687":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"9:0:2244":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:45661:3648":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13526:20136":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5617:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14449:20668":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:22836:3462":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2788:16059":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:2352:3255":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:1850:3392":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:7392:3243":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:12337:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10671:33704":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3661:3240":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5528:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:15635:21443":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:925:3248":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:2175:17270":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4909:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21552:3635":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5181:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"11:687:3240":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:10187:21832":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:22705:3461":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:8622:9213":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:564:10039":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6542:14772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:1057:3254":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:32823:9265":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10710:17160":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:8613:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4152:3486":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:22960:28043":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:8249:2447":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:10503:3384":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:30460:2406":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:14529:20674":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:3027:30445":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:403:17141":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:6788:31829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:43944:8948":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:15092:21399":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:40309:9237":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4050:3479":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8702:2429":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:13494:9056":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:10213:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1605:3259":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:102:32425":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11661:17258":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:43379:8922":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12127:17310":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:867:32897":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:14147:20649":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1639:10939":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:44158:9411":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:10666:3429":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:44142:9409":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:624:2385":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10524:17157":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:15473:21435":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:4802:16691":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6721:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:10498:3382":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:8341:15782":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39108:9280":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:1526:10929":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:46666:8818":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7813:17052":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:591:3212":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:570:10040":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:1963:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:44334:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:5238:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12508:17399":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13509:20135":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:6402:3780":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:1342:3254":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11682:22798":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7841:17143":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15596:21439":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:15383:21425":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:2998:16066":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:7412:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2438:16043":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:23478:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9984:17149":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16212:21626":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"18:113:21643":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:6924:8976":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10218:17121":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12408:17384":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:33293:9268":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2989:22780":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:700:2481":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:6678:14783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11419:17161":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12949:17173":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11853:17344":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:23026:28050":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:42152:3574":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8145:2579":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4787:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:218:8851":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11405:17231":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:3264:17304":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7132:32811":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:4867:3498":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:3949:3458":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:40751:3579":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13292:20120":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7444:27061":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13485:20133":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:14545:20675":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1327:3255":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7538:3237":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:46538:8810":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3288:8844":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:12308:22544":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:31902:3559":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:3014:16067":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5219:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:5781:3591":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:21411:9047":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7452:29862":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:497:10032":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7168:17028":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10878:3544":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12089:17303":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:4683:9007":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:40114:3410":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"14:214:15972":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:5929:2396":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6609:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"9:330:15884":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:22682:27957":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12278:17389":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:10463:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12201:17387":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:553:10037":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:8502:3409":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:22927:28154":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:7473:17031":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:1503:10926":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6650:14779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:42752:3383":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:2338:16038":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:7527:2437":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:40760:9208":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12388:17383":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:517:10033":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:9396:3586":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:4164:3488":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5846:16974":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3250:27690":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:8660:29308":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:45842:28174":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6532:14771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:45743:3715":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:9088:3555":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8685:2395":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13089:17443":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:4309:2434":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5236:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6231:16986":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:32032:9244":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:11209:8904":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46590:8814":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10399:3410":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5225:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:7686:17045":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:22905:28034":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:883:3242":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:33175:9267":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:44150:9412":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:11850:8885":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:4965:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:40402:9221":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:3250:31525":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:16198:21625":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12494:17362":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:40142:3347":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:563:21670":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:10239:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12808:17126":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6670:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:2808:16060":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9313:17028":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:6681:2481":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5400:16963":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7412:3280":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:560:3193":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:39970:9029":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:22321:3772":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6729:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:43624:8929":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13211:20116":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:45322:3680":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"11:2562:32422":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:613:33737":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13235:20117":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5290:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:3844:3457":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5112:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9916:17147":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10573:33692":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:623:33728":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8150:3370":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:8582:3519":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:1066:15950":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:921:3247":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:7380:3264":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:643:3218":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13972:20637":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:9205:3596":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12289:17354":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:1933:9192":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"14:40:20117":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:729:3464":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:43570:8927":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:2768:16058":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:6657:14780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:4757:3199":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10905:17164":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:42500:2406":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12707:17165":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10897:21945":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:11841:17343":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3238:2434":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:30407:3272":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7144:17027":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:44223:9429":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21499:3640":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:11086:22753":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:9220:3599":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:43235:8891":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11583:17256":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12824:17167":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11899:27462":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:7546:15210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13844:20630":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15931:20115":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:43488:8931":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:8259:17067":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:15289:21416":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:21676:3637":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5817:16972":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:3037:30438":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:671:29861":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:10170:16963":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:2304:3253":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:1593:10936":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6811:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1580:10934":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:6164:3392":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:6838:9220":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:6738:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:7348:15201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5565:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:2572:16049":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10982:17182":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:7372:2481":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:8029:15585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:7429:11051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:32031:2449":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:46628:8816":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:11337:8899":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1565:10933":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11313:17223":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:11812:17300":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:4104:30312":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4080:3481":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:11365:8900":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:23015:28163":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:40152:3346":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40249:9223":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10931:3371":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:1547:10931":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12683:17407":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"6:5423:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:42264:2417":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:40277:28361":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:39121:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13473:20132":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:1917:3259":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:40744:9206":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:640:3217":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:13636:3778":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:21666:2234":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:15814:21455":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:2374:16040":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14177:20650":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:10258:2416":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:15456:21433":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6300:16988":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:9374:3578":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:4856:16699":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:9118:3557":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:15463:21434":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:15333:21420":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5700:16965":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:43737:8924":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10068:17129":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3599:27222":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5483:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:1584:3243":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15616:21441":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5457:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45948:3695":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5014:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:6519:14769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:15426:21430":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:42799:28870":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:5107:16766":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11865:17345":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:43852:8945":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7769:17050":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:44146:9408":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8040:3223":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11256:17220":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:46421:3717":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2236:8848":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4108:3484":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8439:3436":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:870:3241":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5382:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:41466:3459":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:3374:3292":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6802:15981":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:8154:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:40330:9219":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:40071:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:44458:28871":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:46575:8813":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8828:2433":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:5052:3541":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:4759:25338":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:13748:3266":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:13693:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:5227:27449":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12276:22522":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:21421:29457":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:13412:20128":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:41877:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8844:2435":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:4743:16678":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1536:3245":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:8351:15783":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:1653:10940":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:3597:17327":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:2612:16051":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:8838:2434":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:261:32919":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:10920:21918":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"11:787:3242":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11214:17192":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:44212:3630":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12597:17410":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:10284:17153":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12213:17388":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:1621:10937":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"7:31:15799":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11089:17196":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:45986:3649":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12792:17125":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40300:9228":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:7998:3195":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5897:16976":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:1566:15953":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:6784:3589":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:15368:21423":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3608:3376":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12993:17174":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15778:21453":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:16093:21617":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:9902:29014":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:5064:3392":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9700:22778":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:39060:8845":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"18:581:9047":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3531:9281":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:7582:9339":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10252:2418":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9886:17146":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13064:17127":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2846:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:43226:8887":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:45874:3683":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:42529:28427":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:1971:2384":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:1865:3308":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:3026:2542":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:7955:3211":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:1582:15954":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6588:17007":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:4468:16587":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:10675:28275":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:10256:2415":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:43823:8943":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:295:2450":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:10669:3431":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"11:811:3244":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:16121:21619":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:22466:3762":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:10997:3551":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:43266:8876":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21448:29462":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6746:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:5390:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:7472:2481":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11185:3556":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10612:17158":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:1603:15955":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5400:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:21450:29451":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13553:20138":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:7366:3545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:485:10030":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:16151:21621":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:4265:3513":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2115:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:13116:17444":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:14189:20651":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:2231:15946":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:6140:9218":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:8188:17063":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:6821:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:9695:3370":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:473:10028":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:5769:16969":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5064:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5320:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11665:22151":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:5560:3549":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:45401:3652":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15222:21411":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:39871:3214":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10251:17152":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:40050:9032":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:11166:17199":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:4294:3516":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:8006:15583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3287:3429":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:43396:8918":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6927:17019":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:13469:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:3741:30312":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6706:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:4712:3538":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7888:17055":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:7314:10882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:10692:22768":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:6606:17008":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:22651:28061":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:41663:3201":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:3899:16133":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5630:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:2854:16062":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:8282:14243":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:14912:21391":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13986:20638":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2823:9051":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5052:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:3782:3453":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:14386:20664":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:2309:30374":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5588:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9155:2481":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:2303:16009":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:42571:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11012:22542":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:5515:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:40343:9230":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2026:9303":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:15078:17200":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:7689:22589":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:8247:14238":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:22971:28048":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:44419:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:43255:8890":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:7701:9204":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:11324:17248":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11235:3380":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:13187:20115":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:9161:3597":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:7014:17024":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14025:20641":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"15:0:2249":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40353:9231":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:651:33725":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3551:3374":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:5196:3439":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:1496:2481":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:9265:3190":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:14111:20647":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1628:10938":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6353:16991":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6597:14774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:22982:28049":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:44389:3776":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:4673:9006":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:7480:2489":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:43470:8932":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:33057:3627":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:3159:9264":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14038:20642":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:4389:8995":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:7085:32823":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12300:17390":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:1923:3260":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:41566:2434":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:15376:21424":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:1142:15952":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12150:17308":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5914:32805":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8593:3509":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:43347:8895":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11063:17205":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:39955:3214":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13308:20121":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:45416:3682":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6756:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:16235:21628":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:1160:3256":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:22109:3638":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:14847:21387":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:6343:22581":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"9:178:15933":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:43217:8888":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42257:2410":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7569:3330":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4156:3487":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14489:20671":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:45629:3694":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:2636:16052":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:5344:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"11:1903:3257":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12422:17394":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15569:21437":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12621:17408":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:44435:8831":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6775:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:39216:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5502:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:6621:14776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9105:3556":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3244:25534":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:42807:28844":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:852:3240":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"15:288:15987":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"9:392:15829":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:39459:9052":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:40737:28354":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:917:3246":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3279:3257":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4992:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:7461:15205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:10564:3555":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:39266:9282":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:6615:3579":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:6664:14781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:12582:9417":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:7650:28353":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13455:20131":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:12347:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:4882:16702":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:5117:1283":{"crate_id":1,"path":["std","path"],"kind":"module"},"2:40043:9031":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8652:3496":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:10315:27467":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:16069:21615":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:6763:30312":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7799:17051":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:4784:9010":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:698:21661":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:3952:2481":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5540:3548":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:9241:3577":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:4823:3542":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:2103:3278":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:6895:17018":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:2757:30233":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:45646:3700":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:515:21667":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7363:3274":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:6962:17021":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2236:30425":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13753:20626":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4600:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11831:3458":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:30841:9047":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:40199:3289":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:538:21669":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:15655:21445":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:1910:3258":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:2684:16054":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:11351:8902":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:1485:10923":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:44047:8934":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:41622:2401":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4876:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"0:0:2116":{"crate_id":0,"path":["thiserror"],"kind":"module"},"16:6385:16992":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:597:17143":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11574:15946":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:10895:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:16165:21622":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:2234:17255":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:43694:8915":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22201:3767":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:434:32433":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:6026:9226":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7559:17037":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:6026:16980":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:839:2434":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:8328:14249":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:4924:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:4044:3480":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5802:16971":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:8236:3277":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4826:3521":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:6562:14773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:5717:8976":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4811:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4932:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12851:17168":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14066:20644":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10907:3368":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:4864:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:14311:20659":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2394:16041":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6976:17022":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8515:3411":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7497:17032":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:8167:2448":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2680:22768":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:5266:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12043:17305":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:11674:17288":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12584:17162":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:5974:3225":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:12338:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:8300:14246":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:7330:9909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:44356:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:2114:3279":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:39913:9033":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:670:21658":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:15214:21410":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:1812:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5296:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"14:31:15963":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:11323:8901":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:22738:27963":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:46509:8807":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:7446:15203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:33603:9270":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:10195:2386":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:7823:17053":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:41654:9353":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:12297:3224":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7528:17034":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6543:17004":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1577:3276":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:12825:8909":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:1610:3260":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:40058:9028":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:22335:9293":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"6:1692:3506":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:31951:28860":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:10885:2234":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:40076:3328":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:11132:8903":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12768:17123":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:46518:8808":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6494:17001":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13363:20124":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6782:17014":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11764:17294":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:8155:17061":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:42768:3385":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:5108:2391":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10759:17161":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5722:16966":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:13442:27800":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11676:25348":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"14:165:15964":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8448:3438":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:45579:3634":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3098:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:11770:3457":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:12819:8910":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12900:17171":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:523:10034":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:9305:22590":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:2403:3240":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:3245:3258":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:2548:32418":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:532:2907":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:2554:32427":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:4438:30324":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22730:28430":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13581:20140":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41591:2400":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4891:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:7655:8955":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4800:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:5361:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:8472:3377":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:2355:16039":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:43869:8946":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:12336:9370":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:40230:9217":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"9:357:15844":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:42760:28845":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:3196:16069":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:44410:3774":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:11755:17293":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:12362:17392":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:2902:16064":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42033:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:45352:3681":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:4094:3482":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:0:2247":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:6039:3573":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12443:17385":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43684:8926":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:7586:9041":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:45792:27973":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:8196:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:40102:3329":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9131:3558":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:5949:3392":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"9:482:15827":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:299:32408":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11497:17229":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"18:80:21641":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:364:32416":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9858:17145":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:14012:20640":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12485:17398":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:4352:16517":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:14356:20662":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:10246:2410":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41671:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:2849:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:45565:3720":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"10:0:2245":{"crate_id":10,"path":["adler"],"kind":"module"},"2:21467:29463":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15023:21397":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:7467:15206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12887:17170":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44154:9410":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:43305:8875":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12342:1827":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:31976:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:42777:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11075:22761":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6398:16993":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11547:17283":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:15126:21402":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:3571:28784":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10960:3373":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:22107:2234":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6749:17013":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:45690:3654":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:32451:9263":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:1490:10924":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:8121:9214":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6629:14777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6460:14766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:41500:3451":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:559:10038":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12056:17306":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11605:17281":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42554:2406":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"10:44:15938":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:43703:8914":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:12324:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:10607:22772":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:943:2434":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:6554:3243":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1581:2481":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:39158:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:3590:2386":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:12320:9368":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6047:16981":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:45859:28051":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4501:3510":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:598:33732":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10989:3318":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:13437:20130":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:484:22763":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:8616:3270":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6874:14824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"13:229:32486":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8228:3421":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:39024:8991":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5200:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8314:3423":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:41538:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12353:17391":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6620:17009":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:2728:16056":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:4612:3521":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6560:17005":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15058:21382":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:0:2111":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"1:1599:3258":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11115:17194":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:43390:8919":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5831:16973":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:3925:16136":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:3335:2446":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"9:238:2430":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:4102:3483":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:7119:30322":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11042:17186":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1593:3257":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7549:17036":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:43366:8925":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9807:17130":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:22666:29031":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2499:9294":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:7539:17035":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:1686:10944":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:32637:9262":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:15799:21454":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:5415:32861":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:10137:17115":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:5006:16734":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:45536:3665":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7978:3198":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44348:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:16079:21616":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:13375:20125":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:4757:25336":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:12345:1821":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"18:491:33741":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10769:33684":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:22545:28873":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5624:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:6409:14761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:3306:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:30445:9183":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:4921:3499":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:2536:32424":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:7873:3436":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11898:17321":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13999:20639":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:6727:3583":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6763:14793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:10969:22627":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:4604:8998":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1535:10930":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:3247:27692":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44006:8951":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5927:16977":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:8117:9215":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14284:20657":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:22307:2234":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:12352:8916":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:14933:21392":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:6295:3778":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8046:3317":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:38445:9279":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:22949:27970":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:12341:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:2285:3352":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:11915:17346":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:43917:8947":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5598:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:15678:21446":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:46613:8815":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:44338:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6880:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:43245:8889":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:1830:3244":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:44188:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:9401:3587":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:6421:3781":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:46196:3684":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:8288:14244":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:7604:17041":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:491:10031":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40527:3409":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11242:17219":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5781:16970":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10622:33712":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11016:17184":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3133:9241":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12464:17396":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"9:502:15831":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:39104:3291":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:954:3252":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:7339:15200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:481:21665":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"15:327:15992":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:6849:28277":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:5329:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:22598:28847":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10534:33691":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4885:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3324:8846":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:11743:17292":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:14752:21385":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12318:17173":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:14516:20673":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:12804:8912":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:870:3262":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11252:22164":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:12076:17302":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"18:754:21663":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:1171:30437":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:673:2434":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:643:33725":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:6844:29290":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:42592:2408":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:40766:3437":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8528:3455":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:43406:3410":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15624:21442":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:2140:3254":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:41632:2232":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:25878:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5376:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5536:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43802:8942":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:11282:8898":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:896:3243":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:8158:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43318:8893":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7633:32572":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7618:17042":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:8172:3369":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:6698:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:328:32406":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:0:2252":{"crate_id":18,"path":["memchr"],"kind":"module"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:3140:9243":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6813:17015":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:10250:2417":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:46363:3662":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:40:3293":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5134:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13766:17349":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:4142:3485":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:2089:3277":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:42789:2430":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:12189:17386":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11810:3456":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10828:33713":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1588:3244":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:4427:3518":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:11198:3557":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:33949:9273":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4971:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10954:17181":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:4964:9022":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5020:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:39176:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12349:1397":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:6524:14770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1465:2434":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10661:17159":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11730:17291":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1699:10945":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3712:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:12336:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"14:7:15963":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:6600:30312":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10978:22620":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:1356:3256":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:40239:9222":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:2599:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:30814:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:14235:20653":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11189:17197":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10818:17162":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:1510:10927":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:7645:8954":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7111:32878":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8304:27443":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:4269:3392":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:7910:22751":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:21988:29464":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:7094:30358":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:15748:21450":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6412:16994":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:14575:17131":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:39898:28037":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:3029:16068":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"14:187:15971":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:860:32939":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:4560:16610":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:7891:22765":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:6957:8978":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:10350:17155":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11571:27457":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:21976:3632":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:280:30312":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21570:3636":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:3473:17309":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:16105:21618":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:40537:9235":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11075:17201":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:9283:2402":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:3807:3278":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:1064:30312":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:3091:8839":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13424:20129":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:2688:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11341:17234":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6504:17002":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:718:21654":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:844:3249":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9254:22571":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10185:17120":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:22461:3764":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:11209:22625":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11443:17237":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11227:17191":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11524:17282":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:872:32919":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:14091:20646":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:2666:3420":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:16269:20128":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:7973:3196":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13959:20636":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11610:3562":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:45711:3660":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15102:21400":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:5716:3554":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4985:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:3174:8841":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:40551:9236":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:11244:8897":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12543:17404":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:3778:16081":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:9737:17116":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:5995:16979":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6456:16998":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:15151:21404":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11392:17232":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3648:2434":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:15418:21429":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8788:2432":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12671:17438":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:15646:21444":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13387:20126":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6634:17010":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14994:21383":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:8317:14248":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:12344:1815":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:9272:21899":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:5038:3540":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:12251:17359":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:39963:8923":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:41760:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6505:14725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:2289:31491":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40378:9233":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:5212:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:8253:14239":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5477:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:830:3261":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42992:9397":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:21949:2234":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:22823:3463":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:586:10042":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4942:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:1723:10947":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5960:16978":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11293:17222":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:8306:14247":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12264:17358":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:12107:17161":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:6619:3580":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:10244:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:40009:9030":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4837:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:6478:14768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2282:3351":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:1098:17198":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11651:22207":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:39196:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:41574:3240":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:16050:20119":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:5347:16960":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6849:17016":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11715:17290":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:6655:3588":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:5137:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:15582:21438":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:5283:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12175:17374":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6120:16985":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7321:2400":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:45504:3653":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:680:21659":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:41799:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:5526:3547":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4865:3497":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:14414:20666":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:22847:3477":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:942:3250":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:22754:28160":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:710:3246":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:2040:28398":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:13656:3775":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:6636:14778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:12810:8908":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11906:15996":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12328:17355":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:513:17142":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:123:32421":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:46549:8811":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:545:10036":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:40291:9227":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:906:3244":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:4323:28626":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:37811:9277":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:30439:8972":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:15313:21418":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46031:3655":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:4913:16710":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:7597:3331":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5713:3552":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:2569:2437":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11773:17340":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:44397:3777":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:31958:9007":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:40259:9224":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:43712:8913":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:5742:16967":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:7561:15211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11407:3348":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:8271:14242":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:536:3191":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:41719:3240":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:1585:10935":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11595:17286":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:2497:9293":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:10313:22804":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:7910:17056":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6317:16989":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:1707:10946":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:5037:16742":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:948:3251":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2660:16053":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5250:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:43838:8944":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:4239:3392":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7537:15209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:608:33750":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1518:3241":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:6335:16990":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13899:20633":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3558:8992":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"14:220:15973":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8118:17059":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:21497:2234":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10294:3308":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:16032:20118":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:33776:9271":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12371:17172":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:659:21657":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11634:17257":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43327:8896":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:41332:3449":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5436:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:3271:3259":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:5902:3576":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:46119:3650":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:21558:3639":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:11040:2434":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44138:9407":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:41316:3448":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:39887:9034":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10155:16962":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:8259:14240":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:12330:1665":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:5853:3392":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:41478:3450":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:726:21662":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3586:8843":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6900:14825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:41300:3447":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:6311:22779":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:2323:16037":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:5686:16964":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:912:3245":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:6398:3591":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:12557:17201":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:8309:22588":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:12328:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:40362:9232":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:5457:8869":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:5756:16968":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:11914:15996":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:42490:28431":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11887:8825":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:13015:17131":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12659:17402":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:13399:20127":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:862:2481":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7755:17049":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:648:3219":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6940:32812":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:359:3209":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:10609:9381":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:7609:3332":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13538:20137":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13497:20134":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:16176:21623":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15434:21431":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13606:20142":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2450:3361":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7509:17033":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:46529:8809":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:45454:3693":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10902:25322":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:21465:29459":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13344:20123":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:39936:9036":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:7602:15214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14723:21384":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:8093:17058":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:16223:21627":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:43337:8894":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:43011:8877":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7052:17025":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:40087:9339":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:4986:17415":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:13618:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:4531:16604":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46273:3656":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11367:17201":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:33116:3629":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:31965:9330":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22993:28172":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:13038:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:39947:8924":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:11883:8886":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:11537:17249":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:5217:3573":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11092:22774":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7422:31486":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:32063:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:42517:28400":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:7553:3200":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11688:17254":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:150:16014":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:11497:22748":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"11:0:2246":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:15301:21417":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:1480:3240":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:41360:28432":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:11637:22157":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6160:16008":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:2657:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13046:17128":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:3842:16099":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:12543:9418":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:4370:8837":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:12346:1803":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:45337:3645":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:5307:16943":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:7480:2481":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:2469:3244":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5472:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:11089:3411":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8607:3512":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:8626:3543":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:1827:3297":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:7295:24950":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:43420:3411":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:3669:16073":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:5922:3243":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:578:10041":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12647:17403":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12331:1699":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5075:16757":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:15168:21405":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6342:32938":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:2652:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22868:2234":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:2598:3419":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2618:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:465:10027":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:1043:3253":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:15281:21415":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:0:2250":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:14986:21395":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:46705:8819":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:8750:2430":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13568:20139":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:7575:15212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15342:21421":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:40221:9216":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:12292:22577":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:7516:15208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:1155:31498":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:44166:9406":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2702:3412":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7730:8973":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:4634:3522":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:8539:3446":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:39136:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:396:32414":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11269:17221":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:3171:8840":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:15769:21452":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15822:21456":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6991:32765":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"14:202:8953":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:40172:3372":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:4940:16714":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5191:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:5453:8868":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:40268:9225":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:573:33725":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7306:10079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:11064:3240":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3533:3375":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:5546:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:3380:3427":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:4821:17409":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"16:6442:16997":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4502:16598":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2596:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2852:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11593:22597":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:31944:17067":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:45608:3688":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:11924:8882":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:12863:17169":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:44446:8829":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:538:10035":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6066:16982":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:7338:22236":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11510:17228":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13814:20628":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8162:3371":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7061:17026":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43995:8950":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5031:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:4424:16566":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:45521:3659":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:42545:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3093:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:22433:3763":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:6471:14767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13252:20118":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:9427:3380":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:3819:3243":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:15445:21432":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:774:3241":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:46081:3667":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5576:3550":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:2542:28881":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:0:2251":{"crate_id":17,"path":["object"],"kind":"module"},"9:53:15847":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:4456:9012":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4273:3514":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:5029:3539":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:15356:21422":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5046:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1557:3247":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:4468:3392":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15010:21396":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:39236:3231":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12929:17172":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11621:17259":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"8:0:2243":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:10381:3561":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:2418:16042":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:4747:3484":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:2124:3253":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:41582:2481":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:9326:22387":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:7621:8863":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:837:3248":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5445:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:2369:15956":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:41994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:1546:3246":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14341:20661":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9178:3595":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:12335:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:2508:16046":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:21954:3642":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6665:17012":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:9710:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8630:3545":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:39273:2688":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11153:17162":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9671:17118":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9346:22228":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:6417:14762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12454:17395":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:4347:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:1978:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5336:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:44016:8952":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12478:17397":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:931:3249":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8026:3222":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:22789:28162":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:4824:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5002:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13173:17446":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:8587:3520":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6435:14763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41955:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:800:3243":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12695:17406":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14876:21390":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12969:17119":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13855:20631":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:15992:21614":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:15734:21449":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:856:3250":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7402:3265":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:14325:20660":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10317:17154":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:2203:17230":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46060:3661":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46643:8817":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:2528:16047":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15039:21398":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8575:3450":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14855:21388":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:3429:3416":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5174:3505":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:39877:8996":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:4944:3493":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12342:17357":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10915:33697":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8509:3410":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11788:17341":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:14968:21393":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:14079:20645":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:8202:17064":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:5557:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13922:20634":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5665:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:1680:10943":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:45775:3722":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15521:21436":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:44331:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3229:9272":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:4771:16683":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:2458:16044":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:2592:16050":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:635:33738":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:22816:29295":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:7714:3244":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:11171:8892":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5102:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9755:17114":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:41727:2481":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:14868:21389":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:8226:17066":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:11217:9428":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:7306:32941":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:23004:28046":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:4916:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11702:17289":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:45919:3689":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6278:16987":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:43719:8923":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2938:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6758:15982":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8206:3239":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:2855:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:4530:8864":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:41278:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:11128:17193":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:14131:20648":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2843:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:8294:14245":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13272:20119":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:1007:3253":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:12566:9415":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11604:22563":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:41916:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40179:8874":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6480:17000":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11567:17285":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:1075:3256":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:41557:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15249:21412":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:8136:17060":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:8216:17065":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:9394:8908":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:430:32432":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:6649:9238":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11647:17287":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4897:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9147:3600":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:15608:21440":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:10472:22805":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:22419:2234":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15176:21406":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2506:2258":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5352:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:44029:8933":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:16138:21620":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:43438:8897":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2838:16061":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:7359:15202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10419:17117":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:21678:3636":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:30471:28151":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:10455:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:2878:16063":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:45728:3666":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4870:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:22916:28059":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:11102:17195":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9190:3598":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11493:17242":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:706:8910":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:44134:9404":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:1896:3244":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15273:21414":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:43728:3214":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:7081:3631":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:41444:28058":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:14503:20672":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}