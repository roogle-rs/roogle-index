{"root":"0:0:1822","crate_version":"1.0.48","includes_private":false,"index":{"2:12410:20987":{"id":"2:12410:20987","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12411:20988":{"id":"2:12411:20988","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12383:28314":{"id":"2:12383:28314","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12361:28306":{"id":"2:12361:28306","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12399:28318":{"id":"2:12399:28318","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:8767":{"id":"5:5511:8767","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:2642":{"id":"2:12390:2642","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:23357":{"id":"2:12340:23357","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11805:8425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:28982":{"id":"5:5525:28982","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:28320":{"id":"2:12405:28320","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11950:127","`FromStr`":"2:11949:2140"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41908:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11949:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11949:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12296:23305":{"id":"2:12296:23305","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11549:8438"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12315:26319":{"id":"2:12315:26319","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12316:26315"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43999:8437","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12300:23323":{"id":"2:12300:23323","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41765:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12288:833":{"id":"2:12288:833","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12033:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:2763":{"id":"2:12414:2763","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:2763"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44033:2764","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:1817":{"id":"0:74-20:0:1817","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1817","glob":true}}},"5:5517:28981":{"id":"5:5517:28981","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12293:28298":{"id":"2:12293:28298","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12291:28297"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:23359":{"id":"2:12343:23359","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11989:8434","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12033:428","str::split":"2:12337:23008"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43743:8419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12367:28307":{"id":"2:12367:28307","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11989:8434","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12033:428","str::matches":"2:12364:2064"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43947:8452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12290:28296":{"id":"2:12290:28296","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12287":{"id":"2:12287","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12288:833","2:12289:2182","2:12290:28296","2:12291:28297","2:12293:28298","2:12296:23305","2:12297:28299","2:12298:320","2:12299:319","2:12300:23323","2:12302:23324","2:12304:23325","2:12306:23326","2:12308:28300","2:12309:28301","2:12310:23348","2:12311:23349","2:12312:26309","2:12313:26362","2:12314:20377","2:12315:26319","2:12316:26315","2:12317:23009","2:12318:28302","2:12319:26310","2:12320:23365","2:12323:23366","2:12326:23367","2:12329:2224","2:12333:2181","2:12337:23008","2:12340:23357","2:12343:23359","2:12346:28303","2:12349:28304","2:12352:23361","2:12355:23363","2:12358:28305","2:12361:28306","2:12364:2064","2:12367:28307","2:12370:28308","2:12373:28309","2:12376:28310","2:12378:28311","2:12380:28312","2:12382:28313","2:12383:28314","2:12384:28315","2:12387:28316","2:12390:2642","2:12393:23368","2:12396:28317","2:12399:28318","2:12402:28319","2:12405:28320","2:12407:20982","2:12408:24497","2:12409:20986","2:12410:20987","2:12411:20988","2:12412:28321","2:12414:2763","2:12415:28322"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12323:23366":{"id":"2:12323:23366","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12310:23348":{"id":"2:12310:23348","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12311:23349"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12313:26362":{"id":"2:12313:26362","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12033:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43701:8440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:28315":{"id":"2:12384:28315","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12014:8429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12317:23009":{"id":"2:12317:23009","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43979:2947","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:20986":{"id":"2:12409:20986","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12393:23368":{"id":"2:12393:23368","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:20985":{"id":"5:5529:20985","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12411:20988"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:28979":{"id":"5:5510:28979","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2154","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2154","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:23367":{"id":"2:12326:23367","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2974":{"id":"5:5527:2974","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:28979","5:5511:8767","5:5514:28980","5:5517:28981","5:5525:28982","5:5526:28983","5:5527:2974","5:5528:20984","5:5529:20985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12402:28319":{"id":"2:12402:28319","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12314:20377":{"id":"2:12314:20377","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43711:2950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12289:2182":{"id":"2:12289:2182","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12311:23349":{"id":"2:12311:23349","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12310:23348"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:28301":{"id":"2:12309:28301","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12039:1444","crate::ops::IndexMut":"2:3066:2839","str::slice_unchecked":"2:12308:28300"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:28322":{"id":"2:12415:28322","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:28322"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44042:8446","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12298:320":{"id":"2:12298:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12299:319","`u8`":"1:12050:1547"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1822":{"id":"0:0:1822","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[257,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.48\")]","#![allow(clippy :: module_name_repetitions, clippy :: needless_lifetimes,\nclippy :: return_self_not_must_use, clippy :: wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:1817"],"is_stripped":false}}},"2:12320:23365":{"id":"2:12320:23365","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12318:28302":{"id":"2:12318:28302","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43989:8448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:28980":{"id":"5:5514:28980","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12306:23326":{"id":"2:12306:23326","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12364:2064":{"id":"2:12364:2064","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11989:8434","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12033:428","str::rmatches":"2:12367:28307"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43929:8451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12412:28321":{"id":"2:12412:28321","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:28321"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44024:8445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:20984":{"id":"5:5528:20984","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12410:20987"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12370:28308":{"id":"2:12370:28308","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11989:8434","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12033:428","str::rmatch_indices":"2:12373:28309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43875:8449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:28305":{"id":"2:12358:28305","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12291:28297":{"id":"2:12291:28297","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12304:23325":{"id":"2:12304:23325","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12329:2224":{"id":"2:12329:2224","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41765:181","prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:23363":{"id":"2:12355:23363","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12033:428","str::splitn":"2:12352:23361","self::pattern":"2:11989:8434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43847:8421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:20982":{"id":"2:12407:20982","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12346:28303":{"id":"2:12346:28303","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11989:8434","str::split":"2:12337:23008","prim@char":"1:12033:428","`DoubleEndedIterator`":"2:7438:121","str::rsplit_terminator":"2:12349:28304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43775:8454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12319:26310":{"id":"2:12319:26310","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44017:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:28317":{"id":"2:12396:28317","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:28299":{"id":"2:12297:28299","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12337:23008":{"id":"2:12337:23008","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11989:8434","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12033:428","str::split_whitespace":"2:12315:26319","str::rsplit":"2:12343:23359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43725:2951","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12299:319":{"id":"2:12299:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12050:1547"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:28310":{"id":"2:12376:28310","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12378:28311":{"id":"2:12378:28311","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:28312":{"id":"2:12380:28312","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12387:28316":{"id":"2:12387:28316","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:28309":{"id":"2:12373:28309","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11989:8434","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12033:428","str::match_indices":"2:12370:28308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43893:8450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12408:24497":{"id":"2:12408:24497","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39797:23304","Self::is_ascii":"2:12407:20982"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39797:23304","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12316:26315":{"id":"2:12316:26315","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12315:26319"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44008:8436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:28983":{"id":"5:5526:28983","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2154","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2154","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12308:28300":{"id":"2:12308:28300","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12039:1444","str::slice_mut_unchecked":"2:12309:28301","crate::ops::Index":"2:3062:2838"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12382:28313":{"id":"2:12382:28313","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:26309":{"id":"2:12312:26309","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12033:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43695:8441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:28304":{"id":"2:12349:28304","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11989:8434","str::split":"2:12337:23008","prim@char":"1:12033:428","str::split_terminator":"2:12346:28303"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43793:8453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12352:23361":{"id":"2:12352:23361","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12033:428","self::pattern":"2:11989:8434","str::rsplitn":"2:12355:23363"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43829:8423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:2181":{"id":"2:12333:2181","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41765:181","prim@char":"1:12033:428","self::pattern":"2:11989:8434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12302:23324":{"id":"2:12302:23324","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41765:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:2979:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:14434:20295":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5661:15894":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:4434:8533":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:48063:8337":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:5395:3079":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:41848:2104":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10468:16210":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:587:9555":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6944:31026":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:9057:20488":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:14083:20271":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:39383:8370":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11244:16091":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:7859:8724":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40287:2764":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4374:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:644:31862":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1520:10439":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:8241:2994":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:42040:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:4862:15624":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4723:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:8926:16064":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:10083:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11547:16088":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:11535:8889":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"9:237:2131":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:22157:26531":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:47940:3210":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:12827:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:2810:14984":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14001:20263":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:41701:2999":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:46212:3242":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:766:20331":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44476:8925":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5798:15901":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9762:31690":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13723:20243":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12750:19490":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11171:20581":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:2131:2738":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4704:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5793:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12576:19479":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4824:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:2012:16159":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46660:3225":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:6612:3121":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13981:20261":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:41959:2787":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:21212:1941":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:11115:8406":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:2885:20900":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:42001:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:952:2799":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:4788:28052":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:6172:8731":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:20971:1941":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:2526:14972":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:12585:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:1257:2800":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4929:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:12057:1160":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:1576:2807":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:793:2792":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:42529:2118":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11314:3094":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9972:16117":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:8524:2106":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46030:3207":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7513:15960":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11341:20578":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2920:8790":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:39610:8503":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:6744:14144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:7621:15968":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:40408:2882":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:21:699":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:6955:29503":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:48034:8334":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4748:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:7558:13237":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13758:20228":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10738:16269":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9035:25548":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10771:16245":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8235:2995":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4742:3025":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:1776:2791":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:782:2810":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:3049:14992":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:46382:3257":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:276:2154":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11383:22695":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:7250:9502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13567:20235":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:40394:2880":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:7409:2153":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6261:15915":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5080:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11358:16322":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:21274:3169":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:4259:8522":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:7852:2916":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:13778:16122":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1733:10459":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:9445:16073":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5849:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:10430:3087":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:5593:8729":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6583:15935":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:311:30673":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:531:2742":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:7613:15967":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:1075:16120":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:8851:3090":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:10325:3082":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:6077:13731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1558:2187":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:21021:27105":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:9435:2116":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7651:15969":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"14:165:14888":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2618:14976":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:9485:2917":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:2918:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:14536:20303":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:7290:2187":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10788:16270":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:2176:8808":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:4157:3038":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:45781:3228":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:6788:8499":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:0:1958":{"crate_id":17,"path":["object"],"kind":"module"},"16:3797:15015":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6560:31102":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9912:16108":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14090:20272":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8008:25536":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:39445:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:41031:8717":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2406:1965":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:3032:14991":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:653:9603":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:2166:602":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10227:16156":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:5088:15682":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:10847:20526":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11389:20925":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:21156:8808":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:30520:8770":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:5633:3123":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13024:19507":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10646:16264":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11316:16309":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:22885:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:2180:30670":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:3007:2149":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10366:16165":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:7517:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:44289:8471":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:7575:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:9933:16127":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5979:13722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:43847:8421":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:1492:2793":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:46814:3243":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10456:16179":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:41814:2186":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:2243:29317":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42079:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12123:18976":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4917:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:44109:8464":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10112:16141":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9490:20911":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:41737:2991":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:7730:2773":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5696:15896":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43829:8423":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2744:14981":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11490:16085":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9921:16133":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:14324:20288":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10616:16216":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12765:19491":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:41900:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11621:14920":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12685:19485":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:681:20334":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6844:15942":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2279:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:6711:14141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:798:2795":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:805:2796":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:44520:3162":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:44008:8436":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:43521:8411":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:42795:27088":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:22240:27504":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8118:2919":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:41749:2992":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:11356:20527":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:2223:29327":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:42522:2110":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4895:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:6901:15944":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13890:20253":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1649:10451":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5760:15900":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10672:16266":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"18:521:20339":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:3462:2921":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40243:8557":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:6456:15927":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:40471:8398":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10661:16265":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:2060:2802":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40366:2881":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7128:15952":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4872:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:11159:3089":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2524:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:5749:3108":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12062:18971":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4992:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5082:25523":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43591:8399":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:1027:14876":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:1837:2862":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:6439:2790":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11454:20915":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2487:1941":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2540:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:4040:8364":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:123:9226":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:5562:3084":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:21142:3177":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:2844:8778":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8283:2990":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8502:2133":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:6688:10563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8361:3024":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:2533:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7599:14710":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6017:15909":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:46580:26529":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11473:16084":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2321:14963":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41763:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11710:16094":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:894:2790":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:44480:8943":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:9682:8577":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14173:20281":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:40683:8747":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10478:16205":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7391:15954":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46358:3208":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4754:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7722:15973":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:7564:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40279:8446":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:26142:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:9790:31686":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45960:3189":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2782:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40328:8556":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1595:10447":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:9423:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2332:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:7547:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11971:18966":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12945:19501":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:4774:15608":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:9277:16071":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3013:2151":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:48089:8339":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:10578:2746":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:46190:3236":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:285:30664":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:22522:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:643:2769":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:4417:15491":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:3510:21066":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:491:31868":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2339:14964":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1696:10456":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:1103:14878":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:4557:15535":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:7892:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4469:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6130:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:21228:3167":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:13876:20252":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:5565:3086":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13685:20241":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:7511:13230":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:9896:26635":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:47894:3259":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2659:1944":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:43793:8453":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5068:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7054:31116":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3300:2967":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:0:1959":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:7115:2976":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:3388:2977":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10561:16177":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12830:19495":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7090:31076":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:7552:13236":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:12607:27190":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:619:2089":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10494:16183":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:31084:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:474:9541":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:946:2798":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:41087:8723":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6671:10565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:9119:27234":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40531:8735":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:5816:31044":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:4109:8536":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3112:2979":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:42536:2119":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:652:31862":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:699:20336":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2696:14979":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:2461:28206":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:5756:3109":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:1011:29484":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1545:10442":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11539:2998":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:1852:2808":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8560:2136":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7741:2805":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46738:3231":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:624:31889":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6171:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:9137:2928":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4543:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13487:20232":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5419:15888":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9531:31689":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:5362:8391":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44757:27515":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10726:16268":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12983:19504":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:42515:2109":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:40621:8730":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11687:16093":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:2595:2952":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:582:16056":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11951:18965":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8859:2135":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:21109:3182":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"11:1501:14879":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10947:2866":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13113:19513":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6893:31084":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7523:15961":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:22753:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:12009:8431":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:7191:2187":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:3250:8516":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:40451:2895":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1673:10453":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8339:3076":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:2488:8570":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11934:18964":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:5017:15659":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9981:22710":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:1121:2803":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13244:19522":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:4407:2750":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6569:15934":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5588:15890":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:21843:3170":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"13:226:30682":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8146:2976":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:3185:22968":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:6044:30189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:6898:25769":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:3519:2923":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:5612:15891":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12043:18970":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:41658:27089":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:9634:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6028:13728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13286:19524":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12645:19482":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:573:9553":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:10764:23150":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4685:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:6015:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:21373:1941":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:6798:8500":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:7400:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11023:16232":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"9:52:14775":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10532:2969":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:22013:27080":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12778:19492":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12305:18989":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13914:20256":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:7736:2804":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:32315:27482":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:4165:3039":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:5025:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:11291:25771":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:10370:16152":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4854:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:5783:3110":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11872:16331":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:9455:31428":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6268:31164":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4887:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:1041:2800":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12621:19481":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44448:8926":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:43604:8415":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:12043:658":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:671:20333":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:45889:3229":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:2903:8786":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2391:2912":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:9137:16043":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:40321:8555":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:41908:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:14420:20294":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:609:31895":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:2822:2147":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:14355:20291":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:48168:8344":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3066:2839":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:22211:26506":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3741:2996":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:506:9546":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12846:19496":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:5743:15899":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:2536:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:9433:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:40541:8736":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:22174:26390":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7582:15966":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4496:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:4641:15547":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:12215:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10714:16267":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:2832:14985":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:749:2790":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5308:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:2365:2644":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:40823:2949":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:3223:8796":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40551:8737":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5863:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12997:19505":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:41678:26556":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10316:16160":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11226:16315":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44499:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:7295:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:3800:2791":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7102:15951":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"9:330:14812":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8571:2137":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:5712:15897":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8309:2995":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:1826:2790":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40302:8553":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:10255:2787":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5939:15905":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:5727:15898":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:32304:25233":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:2670:14978":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:6149:3305":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11999:25729":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11162:16278":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:45990:3195":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6226:15913":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:44715:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:47978:3244":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11389:16081":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:21406:3172":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:43613:8418":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:6796:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11215:16281":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:2379:2906":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:4798:3027":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14126:20276":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5634:15892":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11639:16092":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:595:9556":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3994:3011":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:5839:2790":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43503:8408":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:1757:27095":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4821:3021":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:11074:8414":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:42157:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:7598:25784":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:12659:8574":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4380:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:43669:8447":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:21960:27079":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:2574:14974":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44659:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:399:30675":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:0:1436":{"crate_id":1,"path":["std"],"kind":"module"},"1:8003:25559":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46012:3201":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14269:20283":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4535:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11507:16086":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:9431:2119":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6279:15916":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:1068:14877":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4518:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:14068:20269":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:21378:3168":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:6073:25788":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6499:15930":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:21397:1941":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:488:9543":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:9114:26770":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:8659:16037":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:40215:8558":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:7278:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4973:1063":{"crate_id":1,"path":["std","path"],"kind":"module"},"15:288:14911":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:14469:20298":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:878:2812":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10951:22736":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:3444:2922":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11201:16279":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11216:20482":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:39603:8797":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12056:1603":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10628:16217":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:4527:15529":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:2472:14970":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:4889:15627":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:4985:2936":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6513:15931":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:5954:3106":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8335:3074":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13906:20255":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1513:10438":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:48016:3265":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:41976:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"15:0:1956":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:39624:8512":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12086:18973":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:44225:8469":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:929:2796":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:4608:8546":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11351:16321":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:586:2762":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1569:10444":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:755:20338":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:11989:8434":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11137:16282":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:46306:3196":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5431:3081":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6960:15947":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10819:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:7015:15950":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3238:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:3261:2971":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:43633:8417":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4842:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:12014:8429":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6318:15917":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4770:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:2049:2801":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:46260:3190":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4818:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7544:15963":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:7687:2746":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12055:809":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5890:13717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:532:9548":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:8805:3087":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:48191:8345":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:547:9549":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8013:2963":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:22819:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:7349:2786":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10292:16077":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4787:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12572:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:844:2799":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:6775:2195":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7342:31165":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:43036:8578":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:44146:8466":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11788:16328":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11586:16090":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14478:20299":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:12911:19499":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2992:2821":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6041:15910":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6600:15936":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6376:15922":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:2907:14988":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:43578:8398":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12496:19474":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4569:3064":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9985:16116":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7396:26539":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12225:18983":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:22720:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:1778:2846":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:2033:2800":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14033:20266":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7412:2877":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12658:19483":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8993:2741":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43512:8407":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:919:2794":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:4344:15442":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9886:16106":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12074:18972":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:365:30660":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:4921:15635":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:40653:8745":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:3217:29359":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:0:1953":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:8765:16059":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1554:2135":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:41038:27525":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:7660:15970":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2363:2902":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:9156:3157":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6607:14138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:12015:20524":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:2504:14971":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11086:16312":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10340:16158":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10685:16224":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5074:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:6565:9591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11235:3132":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:5920:13719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:30480:2820":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:40522:8728":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"11:403:30676":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:1565:2791":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:39571:2780":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:5500:3083":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:39344:8515":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12711:19487":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43701:8440":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:7523:13232":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:9864:28015":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5737:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:2834:3158":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:2618:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:8205:15990":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:46557:26547":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:7425:2878":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:12039:1444":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:4613:15543":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:1184:16128":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:21023:8808":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:40378:26539":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4315:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:1831:2829":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:6300:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22261:3002":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:400:16054":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10916:16229":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"14:215:14896":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13922:20257":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:582:8566":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:45759:3223":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6425:15926":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:12034:1563":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:22687:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:12024:18969":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11817:24653":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9103:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:10231:2135":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:6542:3116":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:2150:16194":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:3178:2807":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6930:29486":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:47770:3204":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:10400:8426":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6850:14151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:0:1957":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41967:2187":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"11:1818:2135":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7438:8386":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:149:14939":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:44252:8470":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46160:3230":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:43623:8416":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:47084:3258":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3315:8368":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6805:14147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4764:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:6646:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:5535:8739":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:22621:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:7925:2961":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14221:20282":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10547:16212":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43929:8451":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:1858:2809":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:4186:3041":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:1911:10622":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:3062:2838":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:8794:16060":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:1442:2187":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:7579:25777":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11111:16284":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6598:14137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:8115:15984":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:7661:2747":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:9478:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:45929:3241":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:4017:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:14522:20302":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:47440:3226":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12934:19500":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:5974:3122":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:4606:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6022:13727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:1761:625":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:736:20330":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:635:2767":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2359:14965":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3929:2936":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10929:16230":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:11041:8413":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:10535:2971":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:2141:29311":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:11145:3088":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:35:2841":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:6573:10395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8209:2949":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10240:16123":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7694:15971":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:9418:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2869:3161":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14346:20290":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11098:16285":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7211:2790":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11272:16317":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:43541:8410":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"9:0:1951":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7282:2187":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:12060:8458":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:7382:2879":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:46067:3262":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:12046:761":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:4835:15621":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"18:574:31862":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7540:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:2220:2899":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:44444:8923":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:10960:3083":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:4237:3042":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:3232:16228":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:3581:2135":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:1561:2790":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:44303:8472":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2969:14990":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:719:20329":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40314:8554":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:10534:16182":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:3278:8367":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2787:2751":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10104:20910":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12208:18982":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8485:2132":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12293:18988":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:43067:26191":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8290:3044":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9207:16069":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6467:15928":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:3461:14996":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:44641:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:7221:2814":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10139:16143":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:10538:2967":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:5987:13723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8317:3046":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13838:20249":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:4140:8537":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:3233:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9102:16042":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:40833:8748":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:7933:2825":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10383:16151":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2216:2898":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9172:16068":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:44460:8931":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:8867:3131":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:46479:26385":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:7792:15977":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:12052:1545":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:44456:8927":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:13554:20234":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:1102:28277":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46784:3237":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13451:20231":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:2772:1947":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12172:18979":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43989:8448":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2369:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:14013:20264":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:1928:8371":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:2548:14973":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:7909:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:2428:14968":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11062:16310":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"11:1831:2791":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11761:16097":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13546:20233":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:822:2811":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4908:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8295:3045":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:43279:8401":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:9642:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:0:1817":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:10556:8422":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10440:16209":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:7337:2138":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:1776:2845":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:43075:26190":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:40361:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:13040:19508":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4664:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:564:20345":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:40583:8740":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4234:2135":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:10323:8425":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:44314:8473":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:6983:25181":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:923:2795":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:11994:8430":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:8951:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:42315:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:4767:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:2496:2959":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:9945:16123":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:7438:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1672:29484":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:5366:8392":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4395:12840":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4729:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13085:19511":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:1892:2087":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:4182:8387":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:4363:29515":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:14335:20289":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4489:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:555:2744":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10972:20512":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:10838:20504":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:10774:2914":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:11407:16082":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:40644:8744":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6648:10580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12465:16273":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:8050:15981":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:6545:3117":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:41595:2987":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5967:13721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8216:2950":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"11:1538:14881":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:9030:25511":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:3676:2993":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:8134:15985":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13973:20260":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:11770:8936":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:22149:27090":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:5381:3078":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:5240:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:1638:10450":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10603:16215":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:12051:1544":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:1845:2807":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:9881:25781":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:6868:14152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:40347:8552":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:48100:8340":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:44017:8435":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:43725:2951":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:5866:15903":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8811:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:62:9171":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:21294:3172":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4587:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:10528:8421":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:11731:8937":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:40500:2948":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44744:8356":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13575:20236":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:837:2135":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2898:8785":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:4323:8529":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3936:3008":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:5619:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6792:15940":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:9043:15952":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:494:9544":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:46896:3191":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"14:202:8475":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:4719:15601":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:5612:8498":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"11:2174:27792":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:12790:3305":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2527:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:12634:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10073:1941":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11614:14920":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6721:15938":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:2201:2138":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:636:31881":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13693:20229":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:10164:23170":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:1681:10454":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11910:18963":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:39430:8795":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6726:14143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:629:29309":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4585:15539":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"9:507:14759":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3738:2997":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10186:16145":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:7245:2187":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:0:1949":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:3508:2790":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:881:2789":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:44024:8445":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10520:16211":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:356:2759":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:9677:8576":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:1138:28275":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8246:2986":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10698:16246":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12484:16272":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5829:13713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:3441:16233":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:9195:25294":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:1590:10446":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10637:16218":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:1500:10436":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5049:15667":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:8848:16062":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:11595:8352":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:868:2788":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10829:2920":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:14076:20270":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"13:110:30729":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10750:16225":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4810:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1709:10457":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:8522:1939":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:940:2797":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11518:2996":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8913:3129":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3416:2936":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14156:20279":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"1:4915:3072":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14401:20293":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4483:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43045:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:39549:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5574:15889":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:14145:20278":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:7503:15959":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9393:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:22134:26508":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:7463:8476":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:590:27526":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11719:16095":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3302:2968":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40227:26568":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12473:16271":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:7857:2917":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2284:14934":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11281:16308":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2777:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:7359:8726":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:22273:3004":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4328:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:40267:8560":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10473:25794":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:12779:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"11:1822:2187":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:332:30658":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:3843:2998":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11074:16311":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7862:15979":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:7067:30831":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7782:15976":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5673:15895":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:22082:27244":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11124:16283":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:2775:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:9437:2117":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12237:18984":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:7597:30976":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:46428:3264":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:14316:20287":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4678:3006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12959:19502":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8239:15991":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:4056:3016":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11991:18967":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10990:3090":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"14:0:1955":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"18:614:31878":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5994:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:10473:8420":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"7:79:14734":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3501:2090":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2257:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12737:19489":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:2573:25781":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12698:19486":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7474:8477":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11179:8943":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8554:2135":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8222:2951":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:6813:3163":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4053:15175":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:41045:3112":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11235:16316":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:638:2768":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:707:8432":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:6183:27522":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:6079:2936":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:48074:8338":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43452:27678":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:4387:8532":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:8825:16061":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5008:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:47020:3203":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9752:16079":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:2877:8781":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:3594:2787":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:12037:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:5775:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1426:2787":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46336:3202":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7474:15957":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4378:8531":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:12049:759":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:44337:8455":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43552:8400":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10980:16077":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6687:15937":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46049:3256":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:3399:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13148:19515":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:41951:2135":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:4626:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4317:3043":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43260:8916":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:2213:2897":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:43999:8437":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:14308:20286":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:6912:26765":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4944:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:11694:8935":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:45805:3188":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9607:16076":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"14:160:14887":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:4074:2787":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7768:15975":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7284:2104":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7492:15958":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8301:3036":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:538:20344":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5955:13720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:46404:3263":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13632:20238":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11367:16286":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:47582:3198":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:44732:8358":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4368:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:5975:9145":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:12054:1543":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:2893:8784":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:9429:2118":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:6720:14142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13897:20254":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13101:19512":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3993:26739":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"14:221:14897":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1690:10455":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:7363:8725":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:40693:8732":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:3238:2809":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:6769:8498":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:2864:14986":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:43893:8450":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:1288:2801":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:43531:8409":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:7231:29328":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:12045:764":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11535:16087":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:7491:2152":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13676:20240":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13215:19520":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:4635:23163":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:13298:19525":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:554:9550":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4740:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:10280:2951":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:2644:14977":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8982:25518":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:526:9547":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:8929:3127":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:9867:16105":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:507:31862":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:11805:8425":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:7642:2761":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:41839:2187":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4428:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"9:393:14757":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2825:8365":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:895:2135":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:42783:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"14:187:14895":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:12031:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:5830:15902":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:2773:8366":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:8166:2920":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:3232:14994":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:434:14936":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:723:2788":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:9959:16118":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:6306:3307":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"8:0:1950":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13228:19521":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:207:8374":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4695:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12184:18980":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3942:3007":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:9998:16115":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:4164:2936":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6346:15919":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14378:20292":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8968:3111":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7715:2772":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:7896:26771":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6820:14148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5051:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"14:7:14887":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:12724:19488":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:8281:15992":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13710:20242":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"15:394:14923":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13274:16094":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11295:16318":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:1603:10448":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:44532:8944":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6485:15929":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:4949:15639":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4389:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:43947:8452":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2937:8794":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2766:14982":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13010:19506":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:5990:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:80:20316":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5799:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10447:16180":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6156:15911":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6352:15920":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4879:1023":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:22786:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4716:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:10809:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:630:2135":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:5995:15908":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:41079:8721":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:2960:29531":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4955:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7041:31070":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:2381:2907":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:1575:10445":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:5475:2936":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:2928:8792":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9051:16038":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:6618:14139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:2924:8791":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:7879:2915":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:42393:3107":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10097:16113":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:8154:15986":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:44468:8930":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:7609:14711":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:7539:25191":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:5905:15904":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:44131:8465":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13202:19519":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:22247:3003":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"14:31:14887":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5882:13716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41572:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10265:16155":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13792:20245":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:5403:15887":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"9:357:14772":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:4745:15603":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4616:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7586:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7828:15978":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14448:20296":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"11:644:2787":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7748:2865":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"11:1838:2806":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4401:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:1055:2801":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:4806:15616":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11151:16313":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:8097:15983":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"14:40:18964":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:3182:20828":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:20835:26595":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6415:15925":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10126:16142":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:20805:26194":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:4497:3048":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:3565:16251":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:42274:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6742:14905":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:39485:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4794:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:22852:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:21731:26199":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11000:16234":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14460:20297":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8881:3128":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3221:2969":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:9372:16072":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10342:20905":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:44033:2764":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6067:13730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13816:20247":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:850:2787":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3642:2187":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12267:18986":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7736:15974":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:12437:19472":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:44324:8474":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:4:1036":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:45859:3224":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2363:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:6705:14140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40612:8742":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:119:9225":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:42838:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:5805:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:47692:3232":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:40634:8743":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4304:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:1503:2794":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:6558:2187":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:12036:1074":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5767:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9023:25560":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4475:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12280:18987":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:40592:8741":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4637:23165":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:6589:9426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6243:15914":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:0:838":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12543:19477":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:2839:3160":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:727:20337":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3244:8517":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10397:16206":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2914:8789":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:1012:2802":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:1677:1112":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:9564:16075":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12513:19475":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6696:14906":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:7505:13229":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:10542:8424":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:9113:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:536:30810":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:2722:14980":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:12048:763":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11037:25775":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:2168:30667":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6401:15924":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10012:16077":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:40295:8445":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7862:2914":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:4556:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9328:2950":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:32322:8530":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:14514:20301":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:5994:8751":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6929:15946":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10575:16213":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:44160:8467":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1631:10449":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:3888:15058":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3669:29484":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10254:3093":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"9:177:14861":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10106:25547":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:6433:3113":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:12032:958":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6545:15933":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:4002:2790":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6834:14149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:12047:762":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:1273:2802":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:1921:2088":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:5415:3080":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10745:3075":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13611:20237":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4938:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:41612:2988":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11173:16314":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:48153:8343":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:9108:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11845:16330":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:21404:3178":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:5446:3082":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12111:18975":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13667:20239":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7462:15956":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:11519:8887":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:5435:31077":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12790:19493":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9650:16077":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11191:16092":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:261:31562":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7884:15980":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:4000:3012":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:4250:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5818:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22195:26526":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11607:25556":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:9383:2090":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:9070:15887":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4973:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5121:15691":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43057:2131":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:2596:14975":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:10085:2856":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:2530:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14056:20268":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14110:20274":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13868:20251":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"10:44:14866":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:22066:26527":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:40513:8727":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10507:16181":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12098:18974":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:30550:26408":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:22122:3001":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1587:2809":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10278:16154":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13055:19509":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13174:19517":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:42860:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4963:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:5982:15907":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:39527:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:22588:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:43875:8449":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2776:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:21195:3173":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:2209:16178":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10903:16231":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5963:15906":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:3263:26293":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4413:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:22654:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13422:20230":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"19:0:1054":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:3065:14993":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6753:15939":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3315:14995":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:11949:2140":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:1663:10452":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12007:18968":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:6136:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10410:16172":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:4475:3047":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:32268:3091":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:1482:2792":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:736:2789":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:8946:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:21065:3181":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:7528:16056":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9003:16067":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:6083:14933":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:12050:1547":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11573:16089":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3188:22967":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:3345:2956":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8900:3126":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:44651:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:7025:21299":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:48230:8346":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:7529:2791":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:9078:20532":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:13135:19514":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:2959:2247":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10962:16227":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12598:19480":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6204:15912":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12810:19494":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:2178:16153":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:6252:3122":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:4333:8530":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44472:8924":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:39797:23304":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6189:31131":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:40601:8750":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9242:16070":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:45827:3194":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:3223:2970":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:10799:2918":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:13188:19518":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:10362:8412":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13966:20259":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:42118:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2635:2962":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1928:671":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40491:2836":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8837:3089":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:568:9552":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:7199:2813":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:7855:2818":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:8181:15988":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:817:2797":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2305:14962":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"12:0:1954":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:48043:8335":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:10769:25286":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6036:13729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:4005:26670":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:40669:8746":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:657:2187":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4291:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:44702:3304":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:42354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:2194:30668":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:2690:28203":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"0:0:1822":{"crate_id":0,"path":["thiserror"],"kind":"module"},"1:7869:2918":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:20973:3174":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:41891:8873":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6332:15918":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:14042:20267":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:1048:30681":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1473:2789":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:836:2798":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:42755:27091":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:6818:15941":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:4393:2936":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9086:15888":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4700:3073":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4625:3012":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:8987:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:8195:15989":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:3010:2150":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1570:2806":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4703:3047":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:9488:31560":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:20837:26598":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:531:20343":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:3171:2135":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:40441:2896":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:8394:2100":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6775:14145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13071:19510":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:2186:30672":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:1640:601":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7708:15972":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:5626:3122":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9285:2862":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:48138:8342":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:1839:2863":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:6960:8715":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:6165:25786":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:12040:1528":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:7768:25233":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4781:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4506:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2607:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:7529:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11982:20490":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:43979:2947":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:2765:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:362:2760":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:2788:14983":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1527:10440":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"13:0:1948":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:3183:29365":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:43020:8579":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12154:18978":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:8713:16058":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:44357:8456":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"11:97:30662":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:20790:26194":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7534:15962":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:4814:815":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5836:13714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4524:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4456:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:2830:8757":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:2932:8793":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:43711:2950":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:4639:23167":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12554:19478":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:4833:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5015:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1411:2135":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:6598:3120":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:40847:8749":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8199:2948":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:7545:8495":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14024:20265":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11327:16319":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12373:19470":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:32308:15991":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:4964:2096":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:8953:16065":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:45911:3235":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:5318:29484":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:41069:8720":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:41881:2105":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:12003:8432":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:6469:3119":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:1495:10435":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:11054:25793":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:2380:14966":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:7272:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1717:10458":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2327:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:9711:31668":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:3764:15006":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:30714:26457":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:2849:8777":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14282:20284":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40200:2764":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11371:20593":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12888:19498":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:44452:8928":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:3915:15061":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:2865:3159":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:12882:2815":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:7175:3101":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:113:20318":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7269:31161":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9118:3132":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4638:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12004:2774":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:2970:29534":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:5051:25523":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:21841:1941":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:12038:1414":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:7764:2866":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:3600:14997":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9780:16080":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:43743:8419":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:42811:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:5128:3106":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:4194:2936":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:3263:2972":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:2966:29532":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2827:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:21009:3176":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:9205:25300":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:9425:2110":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:3655:14998":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:904:2791":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:11048:25774":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12053:1546":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12970:19503":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:46114:3166":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11261:16307":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13162:19516":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8945:3130":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6915:15945":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:1743:8820":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:6637:29484":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10949:16226":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46526:26550":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:3330:2791":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:2178:8809":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:11198:2928":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4389:3037":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2861:8779":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:32329:8845":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"9:426:14758":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:30288:3000":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9896:16107":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:8412:2130":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:6197:25534":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:7546:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:4740:3022":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8875:2187":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:1766:8819":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:39505:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:96:20317":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:5828:2775":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10059:16119":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:9660:31651":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:481:25779":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2933:14989":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:599:31867":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4650:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4044:3014":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:1557:10443":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:8686:16057":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:8523:2107":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:39461:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"9:486:14755":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:5384:15886":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12531:19476":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"7:0:1593":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:20777:8566":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4436:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11048:16298":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:910:2792":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3160:2840":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:9701:16078":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:6485:29484":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:13989:20262":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9574:31463":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:11477:2997":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6386:15923":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:30608:26520":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:13739:20244":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:6008:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11306:16094":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:20820:26593":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"15:306:14912":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:7377:25744":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8823:3088":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7318:15953":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4550:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14163:20280":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4984:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:14118:20275":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7554:15964":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:2406:14967":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7436:15955":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5363:15885":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:40560:8738":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:4906:3071":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:579:9554":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:3044:8369":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:47832:3238":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12196:18981":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:2049:2826":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"10:36:30653":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:8978:16066":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:21622:3175":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11617:16091":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13802:20246":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:21272:1941":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11742:16096":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9521:16074":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:2170:29324":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:2855:8780":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:261:29484":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:3830:15024":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:41060:2977":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11815:16329":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12252:18985":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:21719:3164":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10214:16157":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46974:3197":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:500:9545":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:30514:8494":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6841:14150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44464:8929":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:22098:26509":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:8594:16040":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4744:3026":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5877:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2908:8788":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:4048:3015":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:4497:15523":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:3720:2825":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11448:16083":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:8544:2134":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8155:2978":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:3212:2806":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12136:18977":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:7182:2822":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4862:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5044:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43275:26769":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:45715:3222":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:3003:2148":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:31112:8566":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7568:15965":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:40569:26583":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:7641:1941":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14296:20285":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1506:10437":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:1536:10441":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21280:3171":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:6429:3112":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:1464:2788":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6879:15943":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:42196:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:20818:26597":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"15:327:14916":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:4032:29484":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:47234:3192":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:4135:22690":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4462:15512":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5058:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:562:9551":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43775:8454":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:11754:8934":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14499:20300":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10036:16121":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:515:20342":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:48115:8341":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:695:2794":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10430:16208":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5900:13718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:2881:14987":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"11:1517:14880":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:6156:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:6864:8734":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2886:8787":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:14:2067":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:119:30663":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42820:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:690:20335":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11886:18962":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:22555:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10084:16114":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4446:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:5387:2936":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7261:28191":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:660:20332":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40257:8559":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14134:20277":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8229:2947":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"9:450:14756":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14100:20273":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:915:2793":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:30536:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:8167:15987":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:10435:8419":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12452:19473":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:42765:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9823:16103":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:2962:29318":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44042:8446":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:41629:2989":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:43695:8441":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:4426:29515":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:2450:14969":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:48054:8336":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12876:19497":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:9798:8900":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:256:31383":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2260:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:9000:20501":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:7133:22686":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:4800:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:12044:660":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:11549:8438":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:9350:16039":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:12058:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:2873:8782":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13826:20248":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10023:16078":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:502:2738":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:4254:8521":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:482:9542":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:6178:27528":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2881:8783":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:1302:2803":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10420:16207":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43028:27242":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9852:16104":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12671:19484":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3735:2826":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4173:3040":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:12033:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:45735:3187":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11661:16041":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:6531:15932":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1702:3033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:23332:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:8631:8430":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:10514:8423":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:3204:2808":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:9173:25545":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:41054:8719":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:50036:3185":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:13851:20250":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:1064:2802":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:3526:2945":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:541:2475":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:47050:3209":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:9427:2109":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"18:481:20340":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8178:2924":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7006:15949":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12422:19471":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:8895:16063":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4420:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:1523:2824":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:5128:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:6360:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:1118:28235":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:667:2793":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:7852:2139":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:40206:8519":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10197:16171":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11381:16323":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:1611:30654":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6625:3076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:8072:15982":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:1073:2803":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:4034:3013":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:2559:2960":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:4986:15652":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4848:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1814:2856":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:44177:8468":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43683:8444":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:760:2791":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4568:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:42235:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4463:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7360:31149":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:504:16055":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8462:2131":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:7396:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:986:2801":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5648:15893":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:9617:31518":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"10:0:1952":{"crate_id":10,"path":["adler"],"kind":"module"},"2:1554:2936":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:2035:2825":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:10787:20534":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:11308:25282":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:41831:2787":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6361:15921":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:3972:3009":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11337:16320":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4949:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:3986:3010":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:41823:2135":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:7463:14682":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10588:16214":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:6968:15948":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:860:2187":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:10165:16144":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:13949:20258":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1582:2808":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:968:2800":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:7917:22956":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:7666:2749":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44694:3303":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:32:14727":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:1647:8705":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:41714:2990":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5322:15868":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13259:19523":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:21627:3183":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4341:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:32416:8758":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}