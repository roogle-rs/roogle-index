{"root":"0:0:2521","crate_version":"1.0.63","includes_private":false,"index":{"2:13742":{"id":"2:13742","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13743:1024","2:13744:2901","2:13745:30619","2:13746:30620","2:13748:30621","2:13751:24526","2:13752:30622","2:13753:350","2:13754:24636","2:13755:24632","2:13757:24633","2:13759:24634","2:13761:24635","2:13763:30623","2:13764:30624","2:13765:24658","2:13766:24659","2:13767:24662","2:13768:24663","2:13770:29543","2:13771:29723","2:13772:23735","2:13773:29537","2:13774:29541","2:13775:27613","2:13776:30625","2:13777:29544","2:13778:24676","2:13781:24677","2:13784:24678","2:13787:2943","2:13791:2900","2:13795:24664","2:13798:24666","2:13801:24668","2:13804:30626","2:13807:30627","2:13810:24670","2:13813:24672","2:13816:24674","2:13819:24675","2:13822:2767","2:13825:30628","2:13828:30629","2:13831:30630","2:13834:30631","2:13836:30632","2:13838:30633","2:13840:30634","2:13841:30635","2:13842:30636","2:13845:30637","2:13848:3538","2:13851:24679","2:13854:30638","2:13857:30639","2:13860:30640","2:13863:30641","2:13865:24565","2:13866:24566","2:13867:24568","2:13868:24569","2:13869:24570","2:13870:24572","2:13871:24573","2:13872:24574","2:13873:30642","2:13875:3671","2:13876:30643"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13757:24633":{"id":"2:13757:24633","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702:31336":{"id":"5:5702:31336","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2874","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2874","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5701":{"id":"5:5701","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5702:31336","5:5703:9715","5:5706:31337","5:5709:31338","5:5717:31339","5:5718:31340","5:5719:3894","5:5720:25834","5:5721:25835"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13743:1024":{"id":"2:13743:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12492:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13851:24679":{"id":"2:13851:24679","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:2516":{"id":"0:74-20:0:2516","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[278,0],"end":[278,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:2516","glob":true}}},"2:13770:29543":{"id":"2:13770:29543","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44542:9386","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13772:23735":{"id":"2:13772:23735","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44558:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:30619":{"id":"2:13745:30619","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13840:30634":{"id":"2:13840:30634","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13755:24632":{"id":"2:13755:24632","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42582:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13857:30639":{"id":"2:13857:30639","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13752:30622":{"id":"2:13752:30622","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13831:30630":{"id":"2:13831:30630","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13437:9379","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::match_indices":"2:13828:30629"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44740:9395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13869:24570":{"id":"2:13869:24570","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13746:30620":{"id":"2:13746:30620","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13791:2900":{"id":"2:13791:2900","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13867:24568":{"id":"2:13867:24568","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13798:24666":{"id":"2:13798:24666","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13227:9370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720:25834":{"id":"5:5720:25834","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13868:24569"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13784:24678":{"id":"2:13784:24678","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13764:30624":{"id":"2:13764:30624","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12498:1765","crate::ops::IndexMut":"2:3621:3751","str::slice_unchecked":"2:13763:30623"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13870:24572":{"id":"2:13870:24572","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37302"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13775:27613":{"id":"2:13775:27613","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44826:3866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13863:30641":{"id":"2:13863:30641","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13398:148","`FromStr`":"2:13397:2861"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42845:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13397:2861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13397:2861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13763:30623":{"id":"2:13763:30623","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12498:1765","str::slice_mut_unchecked":"2:13764:30624","crate::ops::Index":"2:40131:3750"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13801:24668":{"id":"2:13801:24668","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13437:9379","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split":"2:13795:24664"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44590:9364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13751:24526":{"id":"2:13751:24526","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12960:9383"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13774:29541":{"id":"2:13774:29541","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13773:29537"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44855:9381","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13753:350":{"id":"2:13753:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13754:24636","`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13773:29537":{"id":"2:13773:29537","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13774:29541"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44846:9382","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:31339":{"id":"5:5717:31339","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:25835":{"id":"5:5721:25835","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13869:24570"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13781:24677":{"id":"2:13781:24677","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13776:30625":{"id":"2:13776:30625","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44836:9393","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13838:30633":{"id":"2:13838:30633","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5706:31337":{"id":"5:5706:31337","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:31338":{"id":"5:5709:31338","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13754:24636":{"id":"2:13754:24636","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12511:1896"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13876:30643":{"id":"2:13876:30643","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5057:30643"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44889:9391","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:2901":{"id":"2:13744:2901","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13819:24675":{"id":"2:13819:24675","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13748:30621":{"id":"2:13748:30621","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13746:30620"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13787:2943":{"id":"2:13787:2943","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42582:202","prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13761:24635":{"id":"2:13761:24635","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2521":{"id":"0:0:2521","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[290,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use core::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant that contains a `#[from]`\n  attribute.\n\n  The variant using `#[from]` must not contain any other fields beyond the\n  source error (and possibly a backtrace &mdash; see below). Usually\n  `#[from]` fields are unnamed, but `#[from]` is allowed on a named field\n  too.\n\n  ```rust\n  # use core::fmt::{self, Display};\n  # use std::io;\n  # use thiserror::Error;\n  #\n  # mod globset {\n  #     #[derive(thiserror::Error, Debug)]\n  #     #[error(\"...\")]\n  #     pub struct Error;\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io(#[from] io::Error),\n      Glob(#[from] globset::Error),\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use core::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`. Using `Backtrace` in errors requires a\n  nightly compiler with Rust version 1.73 or newer.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace. The `#[backtrace]`\n  attribute requires a nightly compiler with Rust version 1.73 or newer.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- For variants that use `#[from]` and also contain a `Backtrace` field, a\n  backtrace is captured from within the `From` impl.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.63\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:2516"],"is_stripped":false}}},"2:13860:30640":{"id":"2:13860:30640","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13807:30627":{"id":"2:13807:30627","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13437:9379","str::split":"2:13795:24664","prim@char":"1:12492:490","str::split_terminator":"2:13804:30626"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44640:9398","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13813:24672":{"id":"2:13813:24672","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12492:490","str::splitn":"2:13810:24670","self::pattern":"2:13437:9379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44694:9366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13816:24674":{"id":"2:13816:24674","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:31340":{"id":"5:5718:31340","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2874","`String`":"5:7759:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2874","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13766:24659":{"id":"2:13766:24659","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13765:24658","str::split_at_mut_checked":"2:13768:24663"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13765:24658":{"id":"2:13765:24658","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13767:24662","str::split_at_mut":"2:13766:24659"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:9715":{"id":"5:5703:9715","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13875:3671":{"id":"2:13875:3671","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5060:3671"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44880:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13804:30626":{"id":"2:13804:30626","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13437:9379","str::split":"2:13795:24664","prim@char":"1:12492:490","`DoubleEndedIterator`":"2:8393:133","str::rsplit_terminator":"2:13807:30627"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44622:9399","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13759:24634":{"id":"2:13759:24634","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11566:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13771:29723":{"id":"2:13771:29723","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12492:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44548:9385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13828:30629":{"id":"2:13828:30629","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13437:9379","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatch_indices":"2:13831:30630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44722:9394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13866:24566":{"id":"2:13866:24566","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40484:9513","Self::is_ascii":"2:13865:24565"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40484:9513","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13868:24569":{"id":"2:13868:24569","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13777:29544":{"id":"2:13777:29544","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44864:9380","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13848:3538":{"id":"2:13848:3538","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13841:30635":{"id":"2:13841:30635","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13872:24574":{"id":"2:13872:24574","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37302"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13873:30642":{"id":"2:13873:30642","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5059:30642"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44871:9390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13825:30628":{"id":"2:13825:30628","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13437:9379","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::matches":"2:13822:2767"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44794:9397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13768:24663":{"id":"2:13768:24663","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13767:24662"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13834:30631":{"id":"2:13834:30631","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13854:30638":{"id":"2:13854:30638","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13458:9376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13836:30632":{"id":"2:13836:30632","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13822:2767":{"id":"2:13822:2767","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13437:9379","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::rmatches":"2:13825:30628"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44776:9396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13778:24676":{"id":"2:13778:24676","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13871:24573":{"id":"2:13871:24573","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1151:37302"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13767:24662":{"id":"2:13767:24662","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13768:24663"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42580:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13845:30637":{"id":"2:13845:30637","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:3894":{"id":"5:5719:3894","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13810:24670":{"id":"2:13810:24670","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379","str::rsplitn":"2:13813:24672"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44676:9368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13865:24565":{"id":"2:13865:24565","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13795:24664":{"id":"2:13795:24664","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13437:9379","`DoubleEndedIterator`":"2:8393:133","prim@char":"1:12492:490","str::split_whitespace":"2:13773:29537","str::rsplit":"2:13801:24668"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44572:3870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13842:30636":{"id":"2:13842:30636","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12492:490","self::pattern":"2:13437:9379"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13443:9375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13463:9374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:14380:4246":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:3502:3874":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:45312:9860":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:40300:2977":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12686:17865":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"9:380:16282":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:8666:17526":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3580:2870":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4792:14444":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10715:23972":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:7492:33402":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:6158:10080":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10802:3869":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11834:23788":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:6428:15219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11064:17617":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11732:17696":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:2323:3714":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:40932:9496":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:4182:3944":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:44518:9392":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6300:17433":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:42508:3919":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:5196:17154":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5025:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:686:3705":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7786:33490":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:832:3709":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:321:33082":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15770:21894":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:40311:9454":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:2504:16494":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:40293:9745":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5640:14534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:4692:2829":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13094:17889":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:34245:9729":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6792:15250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:3957:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2805:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3775:9744":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5375:14504":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:7424:15657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:7990:16038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5088:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:558:3668":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:1990:2810":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:3673:28197":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:1531:3699":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:4557:30526":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11280:17621":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:9474:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:2413:16461":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:12037:9366":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7946:17494":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:2157:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10217:17594":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:8278:14703":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4896:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:706:9377":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:41159:3869":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:5640:4020":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:45304:9865":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:46597:4158":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:7512:3723":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8371:3883":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5550:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:31605:9508":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:12512:1878":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:9753:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:24147:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4990:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12259:17819":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"13:0:2650":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:45090:9415":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14546:21122":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:2152:3737":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5222:17157":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:586:10496":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6749:15248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"5:6734:30501":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:9244:4069":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:0:2660":{"crate_id":17,"path":["object"],"kind":"module"},"6:7407:11508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:14345:17827":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3867:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6981:17465":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5165:14480":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:13463:9374":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6756:15249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:15556:21867":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:427:33089":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:6602:15230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8243:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:47146:4120":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3352:3719":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:7772:9421":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:23124:4235":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:15548:21879":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11456:17656":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"2:44846:9382":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5604:14529":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6500:16460":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14844:21141":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:5817:4026":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13634:17922":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8034:3653":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2528:16495":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:2573:30493":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:23479:29992":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5568:14526":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5611:14530":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:16001:21916":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5707:17416":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:8730:4014":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:9601:9375":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:41579:9699":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1638:3703":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:41793:4050":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:10669:2818":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8492:3896":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11879:22322":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10441:17602":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:14572:21124":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:5119:4000":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"11:1866:3702":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1494:11381":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:47676:4188":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11290:33862":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6645:15235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11420:17653":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15990:21915":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5186:14481":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8510:3831":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:6319:23947":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:9451:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11113:17618":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:16077:21920":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2618:16499":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:32877:9708":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12334:17822":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:14126:20621":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:8609:17523":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:13957:20609":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:47747:4194":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5553:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:4465:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:43411:2817":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12134:17763":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11804:17709":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:9367:17487":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:2231:2980":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:44590:9364":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:43927:29744":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:45486:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13081:17620":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"16:7835:17489":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:8206:17510":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6679:15239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:5387:14506":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6422:15218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11705:17694":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:12499:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:6546:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:39:3752":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:973:3706":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1378:3714":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12582:17780":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:9193:2857":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:2818:16508":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:15120:21160":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:8809:3729":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:45500:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:2354:2857":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:6157:17427":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:9319:3647":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:15417:21872":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:8230:17512":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:46903:4186":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:45284:9861":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6769:32752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:9451:2806":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:16172:21925":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"11:1878:3716":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:46952:29046":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14974:21150":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6747:17449":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8562:3870":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:10116:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:8118:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:5551:9335":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:5660:4021":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:10296:24031":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:6075:3682":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:16763:22110":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13005:17878":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6806:17452":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4805:14445":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6513:15225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:12459:27816":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:2246:3642":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:23393:28987":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:15932:21908":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:13173:9869":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14083:20618":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:47034:4154":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:41363:9693":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1711:11403":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4829:14447":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2794:16507":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:14071:20617":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:14691:21132":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15857:21901":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:10795:3891":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:479:10483":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:32795:29717":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:2548:16496":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13870:20603":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:1634:3702":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:969:3705":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5007:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:41779:29708":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:5370:3899":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:41217:3830":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:44408:9356":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15939:21909":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12868:17634":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:40263:3690":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:8099:3680":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14946:21148":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44418:9357":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:1006:3711":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5521:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:44172:29338":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:22988:4243":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:10393:17600":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:4230:3947":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:7741:9502":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:6306:9683":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:1703:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15869:21902":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5069:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:8237:14697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:2519:33075":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:8334:2872":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:3058:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12735:17839":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:8393:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:10580:27088":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:7735:3790":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:6498:4062":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:34178:9730":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6610:15231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:47528:4127":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:45573:4245":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:491:10485":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11168:23963":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16716:22106":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:12930:9827":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:8543:17519":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:12023:9368":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"11:2440:3703":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:1877:3756":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5019:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4785:3998":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13384:17631":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5617:14531":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:316:33549":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3564:3732":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:2909:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:7185:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:41319:29176":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:31205:9646":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:1136:3715":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:15:2770":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:16661:22102":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:8361:26966":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:9215:4068":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11927:23722":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:5125:3850":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:698:22142":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:15956:21911":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:784:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"11:808:3704":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:45063:9414":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14042:20615":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"11:2126:3714":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:42320:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:38838:9740":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:23082:2644":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:3319:24222":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:34976:9736":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2225:3814":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:33348:9726":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:6411:23955":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:3533:9314":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:5951:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:12279:17820":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:3887:16527":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4150:16545":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:11950:3917":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44429:9344":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9274:4070":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6617:15232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41808:3897":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3256:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11071:4023":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:6710:15243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:6858:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:623:34362":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4154:3941":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9354:26961":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5630:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:8804:2853":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:14639:21129":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:2801:3882":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11360:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:22673:30281":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3358:3890":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:538:22150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:10886:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:16534:22097":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:41015:9491":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15438:21874":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:44472:9360":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:5319:14497":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:80:22123":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4929:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1539:11387":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12505:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:42342:3907":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:7782:9422":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11103:4029":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:570:10494":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8909:2859":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:7679:3785":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13168:17917":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:23678:29040":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"11:344:33077":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:5205:14483":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:45152:9418":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:9295:4048":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:754:22144":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11447:17655":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:15495:21876":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:5111:17138":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:6744:15247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:44836:9393":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:3693:16525":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:3419:9312":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:5280:4044":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:4574:3970":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10548:17418":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:7751:27819":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13837:20601":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8214:3826":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:47764:9277":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:46871:4131":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15845:21900":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:47618:4133":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2872:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:9595:3771":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:12498:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:16799:20607":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"12:0:2656":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:282:30501":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11901:17712":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11447:3807":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:533:3642":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:765:22137":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13156:17881":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:7804:33563":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:23002:9757":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:3680:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6419:17438":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:8276:9680":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8739:4013":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1514:11384":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5139:14478":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:12503:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8519:3835":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:2988:16516":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"15:288:16439":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11308:17622":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:9326:23795":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:7562:15667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:43082:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:7576:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:851:3710":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:1530:11386":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12055:17761":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:4480:30526":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10489:4032":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:23486:3923":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:2722:16504":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:7544:3739":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:12496:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:40943:29032":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:43966:28919":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"15:0:2658":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:45599:9301":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10140:17592":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6590:15229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13013:17893":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:7292:11336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:23568:29153":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:7534:3724":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:7740:9501":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"11:2394:2906":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:4194:3699":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:7390:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15753:21892":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:10307:30092":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:2298:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:23645:29135":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:5755:33384":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:5626:4019":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:3142:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:41116:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:43721:2827":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7708:9803":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10976:27407":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:23452:28990":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:40163:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:2224:9768":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"4:0:2651":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:2099:3712":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:12514:1890":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:1696:3966":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6186:17429":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2502:3818":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:44740:9395":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13944:20608":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8842:2855":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:7551:17486":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:521:22145":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:13227:9370":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:44380:9355":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5058:17131":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12233:17817":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:43644:29148":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11357:17650":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:5211:1333":{"crate_id":1,"path":["std","path"],"kind":"module"},"17:14506:21119":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:14018:20613":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:894:33525":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:31167:3731":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:763:3701":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11719:17695":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:14996:21151":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:4544:3850":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:44501:9362":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"18:635:34355":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:39472:9742":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:12797:17869":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:12110:23980":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:41372:9684":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:3837:3736":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13204:17623":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14000:20612":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6893:15280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11162:17619":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:4762:9464":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:23053:9757":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:6719:15244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:22121:9508":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"7:31:16253":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12248:17818":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:3012:16517":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:2120:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:8314:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8898:2858":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11526:17680":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:3852:3737":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:6995:9685":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"6:6523:15226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15023:21153":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:1885:3717":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9142:4027":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:14219:21106":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:42804:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"9:0:2653":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:14066:9519":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:14611:21127":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:6729:17448":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:40051:9457":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12358:17824":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"9:435:16281":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:44794:9397":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5366:14503":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:11080:30059":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"14:201:9420":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:44855:9381":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:7966:17496":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:12443:23805":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6901:17460":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"7:0:1948":{"crate_id":7,"path":["unwind"],"kind":"module"},"10:36:33061":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:47898:9287":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14139:20622":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:10679:2822":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:9488:2807":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:42486:29466":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"14:40:20598":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:3080:32054":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:532:3346":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:4238:3948":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:45610:9299":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3194:2647":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:13054:17676":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:45193:9401":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:42712:9817":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:13150:9872":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:5051:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:44640:9398":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:5304:17894":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:2251:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:7383:17481":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:1922:9625":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:8294:14705":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:11351:30060":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"2:43738:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13040:17883":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:2334:3809":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:40185:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:3802:9458":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13553:17646":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:3070:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7723:3789":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:10331:17598":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12930:17638":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6040:17420":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4997:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:7430:15658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:13509:9403":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:16019:21918":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:1242:30449":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6702:15242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:8102:17505":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:6030:4015":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14626:21128":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:787:3703":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:22193:4111":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:517:10487":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:46576:4153":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5462:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14737:21134":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5230:14486":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:7584:30455":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:23623:28985":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:2838:16509":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:26547:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13691:17924":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:8827:2854":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:40243:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:40484:9513":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:16341:21938":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:4163:2906":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"9:49:16300":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:3830:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5249:14488":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8586:3906":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10665:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41132:9803":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9456:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:4902:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:40135:9743":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:914:2906":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12007:17758":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6659:15237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:2666:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:102:33087":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:3356:3889":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22246:4106":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:42599:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:2568:16497":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:2285:32011":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:10660:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9428:4049":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:12513:1884":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:41333:9691":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8105:3774":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5224:14485":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:2377:17745":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:16230:21930":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:10926:3842":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7189:17473":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4957:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:15350:21870":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5151:14479":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:34044:4098":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:16619:22099":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5658:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:13348:17629":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"11:776:3702":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:7209:16433":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:5117:14476":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:23612:29048":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:5740:17418":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7495:3733":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:5057:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14532:21121":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3084:32053":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:4831:9472":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:23689:28986":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:11275:4004":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:4316:23737":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14437:21116":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12162:17764":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:481:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:923:3721":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43683:29062":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11538:17676":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6452:15221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:44676:9368":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8671:4003":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:16249:21931":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:3326:3716":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10927:17615":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:10402:3765":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:1881:3703":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:34630:9733":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:12497:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:4981:17077":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:14417:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:10792:3889":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:10838:3652":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:43193:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3625:3832":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46512:4152":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7439:15659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3585:16524":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:8268:3697":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:42402:28974":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:5814:9442":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11629:17674":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:922:3700":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10842:17614":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3318:3718":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:16262:21932":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7156:17472":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:6802:15251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:7367:11525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:4481:29447":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6864:17457":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7334:17478":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:8148:17507":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:2338:32043":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10423:26994":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:10166:17593":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1578:3701":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:1589:11392":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4914:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:16809:20609":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:9308:26969":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12549:17783":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:726:22143":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:4402:16705":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:9782:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:41291:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:2115:3713":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:23330:29987":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12698:17866":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:8011:17500":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:47830:9283":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:13668:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11231:17658":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:15822:21897":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:5506:30501":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:22635:2644":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6121:17425":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:15159:21162":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:2702:16503":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:1083:16404":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:6116:3850":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:23096:4234":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12775:17868":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:8708:17527":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:16364:21940":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:47921:9288":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:689:22141":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:14795:21137":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1479:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13221:17624":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15474:21875":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12086:16448":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:43045:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:14154:29966":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:47374:4121":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10783:33670":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:4346:3974":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11429:27008":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:12523:17784":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:473:10482":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:5676:4022":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"11:389:33066":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1500:11382":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:6555:4252":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"15:306:16440":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:7006:30016":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:47705:4139":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:750:3700":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:44450:9342":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:8085:3679":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:7916:17492":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:96:22124":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:8562:17520":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:5200:4009":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:16290:21934":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4764:17021":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11652:17672":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:47784:9279":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:22640:4113":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6687:15240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5420:14509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:47845:9284":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:6395:4249":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"9:412:16283":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:12518:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:2504:3819":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:15732:21890":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:16012:21917":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11025:33634":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:38783:9739":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10937:34064":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:15076:21157":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:10302:30141":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:977:3707":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:4314:3850":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:16486:20597":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:1206:30451":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46806:4171":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:3311:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:15652:21883":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:948:3702":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:378:3666":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5471:14514":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:8480:17516":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8627:3979":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6459:15222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10114:17591":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:904:3699":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2903:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8652:3972":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:9765:23968":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:15049:21155":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:34457:9732":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:1649:3717":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6678:17445":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:8632:3980":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8176:17509":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:2206:16399":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:45006:9412":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:46821:4119":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45562:29727":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:22777:4109":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5512:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:5044:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:15409:21871":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:9380:23801":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:8284:3881":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:46888:4137":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:16320:21937":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:41147:3787":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15762:21893":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:3592:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7713:33524":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:45127:9416":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:10447:2841":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:7580:15668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:1587:3704":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5241:14487":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6500:15223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:45316:9882":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:4644:3658":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10515:17604":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:23315:29022":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:47573:4161":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7421:17483":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:5133:4001":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:1027:3714":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:935:3701":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4964:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10629:17607":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"11:2275:3712":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:5351:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8581:3914":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:5882:4062":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:22163:30283":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:481:22146":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:7284:10533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:1118:3714":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:16191:21927":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:983:3708":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:3076:31923":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:34312:9731":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:8120:3775":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:1643:3716":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:11789:3870":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:679:2812":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:8446:2871":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:16738:22108":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12839:17836":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:7554:31906":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:15638:17675":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4970:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46696:4136":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:15105:21159":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:663:3699":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:43713:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:14472:3725":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2527:3825":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"9:168:16386":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15982:21914":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:8633:17525":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:2726:3880":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:14871:21143":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4265:16591":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:6221:4062":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"10:0:2654":{"crate_id":10,"path":["adler"],"kind":"module"},"11:1001:3713":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11758:2853":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"16:4954:17073":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:3394:4099":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6606:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12203:17767":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:10695:17609":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:3306:16522":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:544:33240":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:0:2661":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:46739:4105":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"11:676:2906":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:1000:3710":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11997:17724":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:3108:16519":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4976:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15620:21866":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:8276:24230":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:47279:29170":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:46614:4164":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:8263:3698":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12569:17779":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12850:17870":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:9148:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14482:21118":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:12507:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11848:23857":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:16180:21926":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:471:17586":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:3575:3850":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2044:3850":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:6967:17464":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:7505:33553":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:1627:2857":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:4842:17053":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:5412:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8806:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11001:3829":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:718:22135":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:12491:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:3073:2967":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:12067:9295":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:9347:26965":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8501:3898":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:12859:17871":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:31578:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:2341:3811":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:11578:17669":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1597:11393":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:7317:15654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:41593:9700":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4118:3940":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:979:3722":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8575:3915":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:2138:3736":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:3786:30501":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:47108:4166":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:8231:14696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:8853:30140":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:14298:21109":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"2:22360:2644":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44992:9411":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:46710:4185":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:16138:21922":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2680:9757":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:9172:4028":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:6688:3702":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:6021:3702":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11863:17706":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12017:17759":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:3416:9311":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:2658:16501":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12506:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:14404:21114":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:485:10484":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:7664:3696":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"11:1579:16408":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:297:2874":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43671:29130":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:42893:3699":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:4511:3850":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:14181:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10608:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:7857:9439":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2740:9844":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:22139:30289":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:1936:3771":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:16152:21923":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:6960:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:3309:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12292:17777":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:3589:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1777:30501":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:2433:16490":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:1862:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:15682:21886":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:1938:3772":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5623:14532":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:41169:3805":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"16:6142:17426":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:9400:23755":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3357:9707":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6873:17458":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2486:3814":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2222:9767":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44572:3870":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5428:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:43425:2820":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42971:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:43404:2818":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:2682:9758":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:6887:17459":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:3796:9459":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:41241:3748":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:23368:3921":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:32742:4030":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47191:4126":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:46497:4116":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:2488:3540":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:10878:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:43699:29150":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:43654:2827":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:41263:9681":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"7:78:16260":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:43232:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:16311:21936":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:11871:9359":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:504:23952":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:16691:22104":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:578:10495":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12536:17782":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:8134:17506":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46529:4157":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:42633:2804":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5447:17221":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41301:9688":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7369:17480":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:32819:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:9185:4029":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:2127:9656":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:13437:9379":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11957:17704":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:7233:30535":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:42542:3911":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:44776:9396":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15724:21889":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:7342:27160":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"17:15135:17638":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:465:10481":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:42885:2857":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:15778:21895":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:16125:21921":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:3706:3699":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7347:33398":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:3693:2857":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4830:27421":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:42752:9819":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:7635:2914":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:680:22140":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:22252:4110":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:6237:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"14:7:16415":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:8221:3829":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:5875:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:22912:4239":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:4493:29396":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7575:17487":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:292:33083":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:703:3677":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6578:15228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:41008:9390":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:2804:30491":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:45490:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:5316:17182":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:23262:29200":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5357:14502":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:12493:1918":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:1489:11380":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:3046:16518":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11086:23815":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:8326:16237":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:23499:3922":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5539:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:45296:9866":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5377:17197":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:41224:9342":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2588:16498":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:2465:16492":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:41342:9692":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7256:17475":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:10675:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"11:1862:2906":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:14885:21144":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:44542:9386":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:14089:9691":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:12919:17873":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:45622:29739":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:4182:16554":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:4758:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:12568:9353":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5107:14475":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:11553:2644":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:14820:21139":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10596:17606":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11514:17686":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:8280:9679":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:42704:3659":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:42910:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:34803:9734":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:3985:16528":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:10417:17601":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"13:110:33102":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:8304:14706":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5575:14527":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4881:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13144:17882":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:41817:9674":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14707:21133":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5311:14496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:32788:17526":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"18:735:22136":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:11215:30055":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:11740:2857":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:16356:21939":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5494:14518":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:4919:2833":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:7759:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11787:17723":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:8175:16200":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46768:4159":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4168:3942":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:4832:27423":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:41827:9675":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2867:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42358:3908":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:591:3648":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:4124:3939":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12885:17862":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7539:33251":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:12475:23860":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"13:229:33103":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:47960:9289":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11385:17651":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:22152:30292":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6441:15220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:437:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:43759:2828":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10728:17610":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10822:17613":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1407:3715":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:859:3711":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:12011:3918":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10798:3887":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:3321:2835":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7987:17498":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11862:23767":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:16752:22109":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:1584:11391":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:12944:9829":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"18:608:34349":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:1657:11397":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8204:2979":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:7997:17499":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:46643:4118":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6438:17439":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7398:33360":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14932:21147":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12346:17823":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:23401:29050":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:3551:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40223:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8209:3828":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:1655:3718":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:5477:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:23209:29209":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:14916:21146":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:6891:4060":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:14671:21131":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1625:11394":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:10563:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:1095:3712":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11873:23734":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:34111:4100":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:7553:15666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:4947:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:16499:22096":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:1608:3706":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12034:16399":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6586:17442":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"16:7013:17467":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:14806:21138":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:7494:15662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:9436:3850":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:3856:3913":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12027:17760":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:42616:3699":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:45483:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6638:17443":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:666:17588":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:10672:4027":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15572:21880":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:6193:9690":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:16611:22098":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:16302:21935":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14459:21117":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:2340:16409":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:8317:17515":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:670:22139":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"11:1042:16403":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11970:17703":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:8055:17502":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:15694:21887":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11984:17757":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:13189:9871":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:47079:4160":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5346:17189":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"14:159:16415":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:1338:17681":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:3124:16520":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:16633:22100":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:212:9318":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:16727:22107":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:13908:20605":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4937:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12951:17874":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6737:15246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:41179:3804":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"6:8272:14702":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2779:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:15089:21158":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:5996:4046":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13718:17925":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:643:34333":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:42845:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:43156:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4419:3977":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3424:9313":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:1660:3719":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:23129:4233":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5325:14498":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14415:21115":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:14772:21136":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5652:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:42934:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:41420:9697":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:41395:9695":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8556:3869":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:16473:20596":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:1127:3715":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:12961:17875":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:6609:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:7084:9443":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:11063:3775":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:8325:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6694:17446":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:45549:4248":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:7308:10363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5255:14489":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14651:21130":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:45141:9417":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:44558:3869":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6820:17453":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5664:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:46789:4165":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12748:17838":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:3919:3703":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:5555:9336":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12604:17619":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7524:3702":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:47258:4187":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11591:17668":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:1219:17673":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4907:3981":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22150:30286":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:42695:9815":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:5692:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:32784:2976":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8257:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:3297:31916":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6505:15224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:14337:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:14311:21110":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:6254:33404":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:3586:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:8225:14695":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:909:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:41103:9490":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:7568:2906":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5179:3965":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:14334:17826":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:994:3709":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:15539:21878":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:44871:9390":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:16678:22103":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:4981:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:23437:29029":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8525:17518":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:8249:14699":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:7833:27077":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:11756:17697":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:10533:17417":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:44491:9361":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:15285:21868":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:32906:9310":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5036:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1727:11404":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6203:17430":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"9:490:16284":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:906:33548":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:7612:2906":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:12960:9383":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:41569:3868":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:582:17587":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"18:573:34333":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8539:3867":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:12515:1872":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13536:17638":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6390:15215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:3331:31922":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11431:17654":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:2436:17730":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:0:2655":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11047:23803":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:45300:9864":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47241:4138":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4875:14450":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:4869:14449":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:1871:3703":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:16164:21924":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3607:3833":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6623:33534":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:1858:2857":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:41404:9696":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:22129:30289":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:41802:9673":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:15601:21882":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:44722:9394":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5687:17415":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15912:21906":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4842:14448":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:2654:3879":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:6443:26947":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4927:17069":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6543:15227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"8:0:2652":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:7539:15665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:7188:4102":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7459:17484":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6695:15241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:8756:2852":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:15585:21881":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:47819:9282":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7220:17474":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:9209:2906":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13609:17642":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7355:17479":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:1501:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:5405:9330":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:14326:17828":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:1569:3700":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:5083:17133":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14283:21108":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:45508:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"18:515:22148":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2089:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3048:23944":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11325:3838":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:12519:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40981:9498":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:38893:9741":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5405:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:2948:16514":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"14:219:16425":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11616:17620":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:31199:9340":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:45478:29133":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:3411:3892":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10295:17597":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:8040:33320":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8638:3969":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6460:17440":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"14:186:16423":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:646:3670":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:6502:10088":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"16:8595:17522":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:1521:11385":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2964:16515":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13920:20606":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11390:26998":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6727:15245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:44481:9363":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:41434:9698":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:16789:22112":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:7653:2860":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:14962:21149":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6779:17450":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:13397:2861":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:23634:28977":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"14:31:16415":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6026:17419":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12896:17872":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:16592:20600":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:11011:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:5341:14500":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:11822:26987":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:15966:21912":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4216:3945":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:45175:9400":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:44329:29726":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3316:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5127:14477":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11565:17670":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:2540:2860":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:22264:4107":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:11147:23976":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9201:4071":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13208:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45162:9419":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:22868:4238":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:7337:15656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:13305:17627":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5529:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6082:17422":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:2019:2811":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:12065:9367":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15805:21896":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:4354:2857":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:4239:16588":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3621:3751":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:6755:4059":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:10609:2813":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:6003:4047":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11342:23769":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:23656:29049":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:10860:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:12535:9352":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:9259:4067":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7728:2804":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:7904:17588":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12318:17799":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:1667:11398":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"11:2533:33070":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:15707:21888":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43008:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10486:17603":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:45369:9883":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:3351:9705":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:2878:16511":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:46664:4124":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12490:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46561:4123":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:8295:17514":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:6905:4061":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:6416:15217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:13443:9375":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3712:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:883:3720":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10367:17599":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11677:17667":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6841:17455":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11474:17658":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:4707:3982":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3832:16526":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5557:14525":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3918:3917":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:10667:2817":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:15430:21873":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:12492:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:3454:3888":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:9159:4004":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2782:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12624:17787":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5334:14499":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:2762:3871":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:47324:29154":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:6792:17451":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:4226:3946":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:41250:3867":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43269:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:12502:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:10792:17612":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:46935:4193":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:8582:17521":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:5130:9484":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46544:4117":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:43119:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15829:21898":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:2163:3738":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:4904:4002":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:3316:24218":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:15147:21161":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:44461:9343":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:11944:9364":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1222:31938":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:44880:3672":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:16775:22111":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:7880:17490":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:5746:4023":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:5271:14491":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3064:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:8264:17513":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:12051:9369":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4921:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:47883:9286":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:47451:4155":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:5585:14528":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:31231:29128":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:9510:4096":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:8623:17524":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:2918:16513":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:7841:3703":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:7060:9442":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13470:17635":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:5415:17212":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:4841:2830":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:15924:21907":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:47647:4167":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15063:21156":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14113:20620":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:32809:9795":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22950:4240":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:1563:11389":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:41310:9689":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:15889:21904":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:996:2857":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:44889:9391":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6096:17423":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:13756:20597":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10563:17605":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:9760:3828":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:3785:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11221:17620":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:4820:3944":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:45358:4101":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5488:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:1879:3757":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:6852:15278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:23510:3937":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:23590:29134":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:13265:17625":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:5130:17888":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:3083:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:41281:9687":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:879:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:2858:16510":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6472:15181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:44694:9366":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43956:2853":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"9:345:16297":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"11:1118:16405":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1643:11396":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13397:17632":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:8266:14701":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:42560:3912":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13069:17619":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"20:0:2516":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"1:8620:3910":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8039:3654":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15314:21869":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:10952:4005":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:14360:4249":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:7762:17488":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12215:17768":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"14:213:16424":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:7962:10441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:42673:2641":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:964:3704":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11990:3916":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6835:17454":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:3139:16521":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13514:17637":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:2419:9316":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"15:327:16444":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:5321:26963":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11162:23954":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12148:17729":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:9359:26958":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4176:3943":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3081:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5282:14492":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13450:17634":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11400:17652":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6638:15234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:44956:9409":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11030:3831":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:1516:2857":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12391:17798":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:23667:29137":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"11:2374:3699":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:5196:14482":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:47002:29034":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:12495:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:5725:17417":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15946:21910":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:47804:9281":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:3439:16523":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:47353:29063":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:45583:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7604:2906":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40131:3750":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:1547:2906":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:46920:4192":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:3853:17804":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5450:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:659:22138":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:44826:3866":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:1628:3735":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:384:3667":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:7857:9669":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:8720:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40148:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5295:14494":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:44622:9399":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:8243:14698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7445:15660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3692:3861":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:1117:30501":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:14206:9517":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:581:9508":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:12510:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:15660:21884":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:3409:3891":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:649:2857":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:2092:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:47793:9280":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:695:3675":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13982:20611":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:44159:29138":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"16:8025:17501":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:9492:3838":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:1551:11388":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7302:17477":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:46629:4170":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:6878:15279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13780:20598":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6171:17428":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:12508:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"15:394:16451":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:4284:3850":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2770:16506":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:8882:2856":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8057:3652":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6267:17432":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12043:17731":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10971:27028":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:1597:3705":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7027:17468":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11318:33752":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:563:22151":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:2414:3702":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:13732:20596":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:1569:11390":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12982:17877":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12224:17769":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:7747:9331":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:505:16463":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:357:33068":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4816:14446":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2682:16502":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"9:318:16337":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:32908:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:11925:17710":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:43974:28918":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:6715:4050":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:2746:16505":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:14151:20623":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12094:17732":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:3815:29577":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:2513:29548":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:45280:9858":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:42624:2906":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:46725:4191":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13118:17887":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"11:2525:33074":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12079:26974":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:7847:27075":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"6:523:10488":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:1690:11401":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:4946:3957":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15035:21154":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6062:17421":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13546:17639":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:41095:9494":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"16:2638:16500":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:33772:9728":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:22165:30291":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:1684:11400":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4834:27425":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:6651:15236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14519:21120":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8549:3868":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:2514:3824":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:6263:3850":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3442:3703":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:5170:17151":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13969:20610":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:1542:16406":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13180:17886":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:14049:29714":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:11299:23780":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:14030:20614":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13027:17884":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:9461:4057":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:8029:3896":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:23601:29146":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:7094:9444":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:12511:1896":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12815:17635":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5482:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:538:10489":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42901:2906":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:23531:2644":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:8646:3915":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:46681:4130":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:4944:3954":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:3292:3717":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:8284:14704":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10777:17611":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"17:14901:21145":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:613:34359":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:12093:16448":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:23417:29132":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:22662:4103":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:2507:33076":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11074:34286":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:6387:17436":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:3790:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1507:11383":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:3067:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:3545:3897":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11055:4003":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2:41786:9671":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12121:17733":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:12278:23946":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2484:16493":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:22175:30293":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:14374:21112":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7279:17476":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:40902:9462":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:16645:22101":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"14:164:16416":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:13289:17626":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:4950:2832":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:13452:9377":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:10992:23764":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:4118:16536":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"5:6813:2906":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:906:3924":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:12305:17821":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"9:226:2853":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:44548:9385":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:14054:20616":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12786:17833":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:774:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"14:0:2657":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:22974:2644":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:1652:33063":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:14585:21125":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:43919:3841":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8018:2644":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11602:23959":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:3037:2644":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"0:0:2521":{"crate_id":0,"path":["thiserror"],"kind":"module"},"5:2256:31917":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11776:17698":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:32820:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:10677:2821":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:8089:4040":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:31220:2827":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:10121:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13360:17630":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6109:17424":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:1109:3713":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:47773:9278":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:16378:21941":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:12606:9350":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:10671:2819":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:44977:9410":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:8093:17504":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:22244:2644":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:7515:15663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:6711:17447":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:564:10493":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:3404:9727":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13591:17641":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:598:34343":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:41199:3791":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:43935:3843":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:7809:27076":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"16:8162:17508":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:41272:9682":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:4119:3702":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7072:17471":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:12504:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:7984:16037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10273:17596":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:4948:3958":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8231:3827":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22191:2644":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:13661:17923":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:5280:17169":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:901:33549":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:41088:9493":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8019:3669":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2898:16512":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:2026:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:1675:11399":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8892:2857":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7468:17485":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15880:21903":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:14858:21142":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10096:17590":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:44389:9354":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:10627:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4984:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12065:17756":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11828:4033":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13321:17628":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:7806:30233":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:6719:4051":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14598:21126":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4685:3981":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:12516:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:7518:33462":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5301:14495":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4338:3973":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:23039:4244":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:4367:3976":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5217:14484":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:41121:3786":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:23379:29452":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:7405:23966":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:113:22125":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43306:4045":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:44531:9389":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:13192:17885":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:40992:9391":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:7344:4007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:42664:2805":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:1558:16407":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:1898:3719":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:5318:30228":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"16:6237:17431":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12370:17778":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:22370:4108":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11172:33624":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:6806:9702":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:45334:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5349:14501":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:891:2857":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:5290:26963":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3061:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8697:3956":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:6833:4054":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:2297:3713":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5381:14505":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:559:10492":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:16705:22105":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:12464:3681":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:46482:4151":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9313:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:8366:26967":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7165:16434":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11951:17717":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1393:3713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:507:34333":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12175:17765":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:958:3703":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:40958:9495":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:9232:4066":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:11830:17676":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:5814:4024":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:11464:17657":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:3569:9302":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:15674:21885":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12975:17876":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:5367:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:43418:2819":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:44864:9380":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:7413:17482":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:1362:3712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:13458:9376":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:42825:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"17:11552:17671":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15898:21905":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13853:20602":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11015:17616":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:14559:21123":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9466:4058":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:8675:4007":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:12509:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:40971:9497":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:4405:3850":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7055:17470":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12905:17863":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6670:15238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:5025:3953":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:40087:9315":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:12672:17853":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:32802:2830":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"9:470:16280":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:45308:9859":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:23579:28988":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:5503:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:16574:20599":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6335:17434":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:3664:2813":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6360:15153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:15746:21891":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:11566:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:5647:17398":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:3038:9512":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:2829:9503":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"16:6406:17437":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:7504:2906":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2332:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:6137:4044":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:14098:20619":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4808:17042":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6398:15216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:6536:4251":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:545:10490":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6571:17441":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13932:20607":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:4528:9308":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:8815:9678":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:42608:2857":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:12190:17766":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:4897:2831":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:497:10486":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:820:3708":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:45288:9863":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:10976:33838":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6939:17462":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7041:17469":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13817:20600":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:16211:21929":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:7914:26952":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:6836:4055":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47220:4132":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:11909:9371":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:44398:9358":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:42780:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"2:33560:9725":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:8220:17511":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15530:21877":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:8501:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:47868:9285":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12722:17840":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12710:17867":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:41444:9686":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:553:10491":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:7463:15661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:30937:3920":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:1892:3718":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7956:17495":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:22372:4107":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:8500:17517":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:5142:17146":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:9423:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:42674:2808":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:4505:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:2448:16491":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13797:20599":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:32818:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47726:4173":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12408:17825":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:7326:15655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:22775:2644":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:47129:4172":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:7436:23978":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:5002:3959":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:813:3707":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:3074:32182":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:47019:29171":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:16029:21919":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4547:9461":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:10921:3840":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11513:3806":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:2358:32052":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:41000:3672":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:3389:4097":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13426:17633":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:38728:9738":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3682:3834":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:1619:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:3313:27821":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13490:17636":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8569:3866":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:45292:9862":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:14392:21113":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:15974:21913":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:6911:17461":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:321:33548":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:44176:9345":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5288:14493":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14357:21111":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:5110:3999":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:4900:17065":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1703:11402":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5253:17165":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:41351:9701":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:41385:9694":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:4767:9465":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12991:17841":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:983:3712":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:11208:30058":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:11850:17707":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:3502:17781":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3921:3916":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:14831:21140":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:423:33093":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:40896:3672":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12761:17837":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10245:17595":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:11307:9882":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:36852:9737":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5395:14507":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7935:17493":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:11764:3699":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12081:17734":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:15009:21152":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:14268:21107":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:2226:17711":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"1:7503:23741":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:589:29742":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13569:17640":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11605:17619":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6486:15182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:42580:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:2815:9309":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:4063:3702":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:4692:16972":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:6902:30501":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1632:11395":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6950:17463":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:8007:16039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:7524:15664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:0:2659":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8292:3736":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4023:3918":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11039:23776":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:5889:4063":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:11018:26968":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:7904:17491":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:615:3650":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10662:17608":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11123:34265":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13889:20604":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:4149:30501":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1631:2906":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:720:30618":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:3452:3887":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:23345:28979":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"10:44:16391":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:5441:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:3719:17786":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:8260:14700":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46981:29136":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:32876:2873":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:42770:9818":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:16202:21928":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6736:33532":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:123:33065":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6995:17466":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6850:17456":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46850:4125":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:4613:9475":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:5483:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:45541:4247":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:10673:2820":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:15837:21899":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:43944:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:783:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:4500:3978":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12107:17762":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:1913:3765":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:8316:16236":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12940:17864":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42520:3910":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:651:34333":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:12517:1958":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:11982:9365":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:41054:9492":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3474:9735":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:698:3676":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:491:34356":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11877:17619":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6366:17435":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:531:22149":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11690:17666":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11288:4028":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:1063:33085":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10421:23738":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:2337:3810":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:7258:30539":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:7001:29997":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:11832:9370":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:3074:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4871:17059":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10981:3826":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:13113:9870":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:718:3706":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10030:17589":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:42374:3909":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:40203:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:4888:9473":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:2405:17705":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:4354:3975":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12825:17834":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:6631:15233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:3285:2857":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:16276:21933":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7977:17497":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2560:2667":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5265:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:41835:9677":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:155:16466":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:8063:17503":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:7959:23969":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6656:17444":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:45019:9413":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4890:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:14749:21135":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7695:3788":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11502:17659":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"17:12647:17785":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:23000:29674":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:11817:17708":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:7821:27078":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}