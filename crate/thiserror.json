{"root":"0:0:2474","crate_version":"1.0.61","includes_private":false,"index":{"2:13614:23080":{"id":"2:13614:23080","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40291:9449","Self::is_ascii":"2:13613:22302"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40291:9449","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13593:30737":{"id":"2:13593:30737","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:31438":{"id":"5:5719:31438","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13496:30721":{"id":"2:13496:30721","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13494:30720"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13505:23264":{"id":"2:13505:23264","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13491:1008":{"id":"2:13491:1008","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12388:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13617:22308":{"id":"2:13617:22308","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13624:30743":{"id":"2:13624:30743","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5021:30743"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44576:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:3829":{"id":"5:5729:3829","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13589:30735":{"id":"2:13589:30735","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5728:31440":{"id":"5:5728:31440","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2826","`String`":"5:7771:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2826","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13529:23309":{"id":"2:13529:23309","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:22304":{"id":"5:5730:22304","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13616:22307"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13584:30732":{"id":"2:13584:30732","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13546:23298":{"id":"2:13546:23298","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12995:9307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13573:30728":{"id":"2:13573:30728","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13180:9316","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::matches":"2:13570:2720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44481:9334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:2469":{"id":"0:74-20:0:2469","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[248,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:2469","glob":true}}},"5:5716:31437":{"id":"5:5716:31437","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13567:23307":{"id":"2:13567:23307","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13608:30740":{"id":"2:13608:30740","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:31436","5:5713:9651","5:5716:31437","5:5719:31438","5:5727:31439","5:5728:31440","5:5729:3829","5:5730:22304","5:5731:22305"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13521:28374":{"id":"2:13521:28374","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13522:28608"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44533:9319","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13588:30734":{"id":"2:13588:30734","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13535:2894":{"id":"2:13535:2894","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42392:191","prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:30742":{"id":"2:13621:30742","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5023:30742"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44558:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13582:30731":{"id":"2:13582:30731","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13616:22307":{"id":"2:13616:22307","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13539:2852":{"id":"2:13539:2852","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42392:191","prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13516:23295":{"id":"2:13516:23295","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13515:23294"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13492:2853":{"id":"2:13492:2853","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13543:23296":{"id":"2:13543:23296","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13180:9316","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::split_whitespace":"2:13521:28374","str::rsplit":"2:13549:23300"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44259:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13523:25122":{"id":"2:13523:25122","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44513:3801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:9651":{"id":"5:5713:9651","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13552:30726":{"id":"2:13552:30726","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13180:9316","str::split":"2:13543:23296","prim@char":"1:12388:476","`DoubleEndedIterator`":"2:8342:130","str::rsplit_terminator":"2:13555:30727"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44309:9336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13532:23310":{"id":"2:13532:23310","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13599:23311":{"id":"2:13599:23311","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13493:30719":{"id":"2:13493:30719","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13570:2720":{"id":"2:13570:2720","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13180:9316","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::rmatches":"2:13573:30728"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44463:9333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13611:30741":{"id":"2:13611:30741","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13141:137","`FromStr`":"2:13140:2813"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42522:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13140:2813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13140:2813","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13590:30736":{"id":"2:13590:30736","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13206:9311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13619:23084":{"id":"2:13619:23084","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37191"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13623:3605":{"id":"2:13623:3605","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5024:3605"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44567:3606","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13586:30733":{"id":"2:13586:30733","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13512:30724":{"id":"2:13512:30724","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12394:1739","crate::ops::IndexMut":"2:3490:3685","str::slice_unchecked":"2:13511:30723"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13515:23294":{"id":"2:13515:23294","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13516:23295"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13561:23304":{"id":"2:13561:23304","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12388:476","str::splitn":"2:13558:23302","self::pattern":"2:13180:9316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44381:9303","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13500:30722":{"id":"2:13500:30722","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2474":{"id":"0:0:2474","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;‚ü∂&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;‚ü∂&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use core::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use core::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.61\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:2469"],"is_stripped":false}}},"2:13524:30725":{"id":"2:13524:30725","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44523:9330","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13499:22807":{"id":"2:13499:22807","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12727:9320"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13596:3475":{"id":"2:13596:3475","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13564:23306":{"id":"2:13564:23306","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13514:23291":{"id":"2:13514:23291","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13513:23290","str::split_at_mut_checked":"2:13516:23295"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13501:336":{"id":"2:13501:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13502:23267","`u8`":"1:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13518:28480":{"id":"2:13518:28480","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44229:9323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13494:30720":{"id":"2:13494:30720","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13555:30727":{"id":"2:13555:30727","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13180:9316","str::split":"2:13543:23296","prim@char":"1:12388:476","str::split_terminator":"2:13552:30726"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44327:9335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13502:23267":{"id":"2:13502:23267","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12407:1869"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13549:23300":{"id":"2:13549:23300","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13180:9316","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::split":"2:13543:23296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44277:9301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13602:30738":{"id":"2:13602:30738","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:31436":{"id":"5:5712:31436","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2826","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2826","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13520:22139":{"id":"2:13520:22139","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44245:3804","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13525:28481":{"id":"2:13525:28481","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44551:9317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13620:23085":{"id":"2:13620:23085","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37191"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:31439":{"id":"5:5727:31439","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7771:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5731:22305":{"id":"5:5731:22305","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13617:22308"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7771:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13558:23302":{"id":"2:13558:23302","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316","str::rsplitn":"2:13561:23304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44363:9305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13513:23290":{"id":"2:13513:23290","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13515:23294","str::split_at_mut":"2:13514:23291"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13576:30729":{"id":"2:13576:30729","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13180:9316","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::rmatch_indices":"2:13579:30730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44409:9331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13613:22302":{"id":"2:13613:22302","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13509:23266":{"id":"2:13509:23266","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13507:23265":{"id":"2:13507:23265","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13503:23263":{"id":"2:13503:23263","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42392:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42390:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11313:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13511:30723":{"id":"2:13511:30723","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12394:1739","str::slice_mut_unchecked":"2:13512:30724","crate::ops::Index":"2:39936:3684"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13522:28608":{"id":"2:13522:28608","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13521:28374"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44542:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13526:23308":{"id":"2:13526:23308","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13579:30730":{"id":"2:13579:30730","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13180:9316","`DoubleEndedIterator`":"2:8342:130","prim@char":"1:12388:476","str::match_indices":"2:13576:30729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44427:9332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13201:9313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13519:28536":{"id":"2:13519:28536","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12388:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44235:9322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13490":{"id":"2:13490","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13491:1008","2:13492:2853","2:13493:30719","2:13494:30720","2:13496:30721","2:13499:22807","2:13500:30722","2:13501:336","2:13502:23267","2:13503:23263","2:13505:23264","2:13507:23265","2:13509:23266","2:13511:30723","2:13512:30724","2:13513:23290","2:13514:23291","2:13515:23294","2:13516:23295","2:13518:28480","2:13519:28536","2:13520:22139","2:13521:28374","2:13522:28608","2:13523:25122","2:13524:30725","2:13525:28481","2:13526:23308","2:13529:23309","2:13532:23310","2:13535:2894","2:13539:2852","2:13543:23296","2:13546:23298","2:13549:23300","2:13552:30726","2:13555:30727","2:13558:23302","2:13561:23304","2:13564:23306","2:13567:23307","2:13570:2720","2:13573:30728","2:13576:30729","2:13579:30730","2:13582:30731","2:13584:30732","2:13586:30733","2:13588:30734","2:13589:30735","2:13590:30736","2:13593:30737","2:13596:3475","2:13599:23311","2:13602:30738","2:13605:30739","2:13608:30740","2:13611:30741","2:13613:22302","2:13614:23080","2:13615:22306","2:13616:22307","2:13617:22308","2:13618:23083","2:13619:23084","2:13620:23085","2:13621:30742","2:13623:3605","2:13624:30743"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13605:30739":{"id":"2:13605:30739","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12388:476","self::pattern":"2:13180:9316"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13186:9312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13615:22306":{"id":"2:13615:22306","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13618:23083":{"id":"2:13618:23083","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1066:37191"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:10418:17535":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13361:17564":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12816:17569":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:10418:2769":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5375:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:36657:9673":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:10746:3822":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:23155:28621":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12293:17711":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:5305:17828":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:11527:17614":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:44463:9333":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:41612:9609":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41254:9622":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44074:9295":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:10424:2772":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:6082:3785":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6173:17362":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10564:17539":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:7582:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12776:17802":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:7586:15600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:994:3656":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7919:17426":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:2748:16439":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:3684:28639":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:6672:15169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13398:17566":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:11702:9302":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:7550:3673":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:13592:17575":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:3273:9663":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12280:17754":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:44558:9327":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3093:2598":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:10803:3804":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:5726:3956":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:11785:9304":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6822:17387":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:7448:15590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11232:17592":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:80:22057":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:45292:9235":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:42409:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:10203:2793":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:13854:20536":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:22797:4177":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:12410:1863":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:47542:9218":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11878:17553":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11805:17643":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:680:3610":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:15731:21823":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:8585:17455":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4890:14385":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11065:17551":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:15931:21841":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3665:22756":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:39940:9679":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5672:114":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12401:742":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:7168:16368":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41120:9625":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10167:17527":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:45255:29716":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"11:873:3644":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10977:34210":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5603:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:46465:4093":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1259:31585":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4816:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:45005:9792":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:47565:9219":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:3716:2809":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7969:17430":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15905:21839":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:40939:9740":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9305:116":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12798:17803":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:5311:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:1563:11322":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14375:21046":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:2766:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:16668:22035":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:13140:2813":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:11690:2805":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"11:2148:3648":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5676:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:8626:17458":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7946:27335":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:2704:16437":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:8244:128":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2715:3815":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1690:11334":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4914:14387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:3490:3685":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:8343:16169":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:14358:21045":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11851:17641":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"14:0:2609":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"18:531:22083":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:299:32960":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:3308:16456":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12906:17797":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:8804:28796":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7044:17403":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:45303:9233":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12749:17772":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1597:11326":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:8319:14638":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:10786:3587":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:47618:9222":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:15973:21846":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:32546:3964":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5420:14442":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:4184:16488":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:32613:9731":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:12306:17755":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"17:11998:17658":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14672:21065":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14299:21043":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:3695:16459":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42648:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:7372:17414":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:3656:2765":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:12394:1739":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:15621:21800":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:3503:17715":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4677:3916":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8363:3818":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:44783:9352":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5742:17352":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:16399:21875":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:32588:2955":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:15106:21093":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:8546:17453":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:46226:4091":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13349:17563":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:11707:3967":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:22585:4043":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:3402:9249":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:44845:9355":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:7325:22821":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10218:17528":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:16750:22041":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:23247:28560":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11886:3851":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:30971:3665":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10928:17549":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7414:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6823:15184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:16323:21869":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14055:20550":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:10959:29467":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"9:236:2805":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2332:3746":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:6758:15179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:3306:2809":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:23296:3858":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:11309:17556":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:11291:34209":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11592:17602":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:3349:3825":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3343:9671":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:902:2857":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:4861:2783":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43642:28406":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:16084:21854":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:3307:27821":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:14859:21076":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:47225:4061":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:3288:9246":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:13515:17571":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13662:17857":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:5266:438":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:41403:9636":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:10740:3824":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:8014:15971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5198:17088":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13385:17565":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4208:3880":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12149:17663":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12409:17759":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:5986:3785":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:10944:22273":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:12249:17752":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5060:17065":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:47490:9214":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15602:21816":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:41589:28557":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:936:3636":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15689:21820":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12570:17713":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:4507:9398":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"8:0:2604":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:15286:21802":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:8066:17437":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:46600:4120":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16036:21853":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:7853:3637":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:4914:2784":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:12408:1851":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2343:9252":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:42418:2809":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:2530:16429":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:5287:29722":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:351:32969":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"18:718:22069":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:7610:2857":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:22721:4173":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15136:17572":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:43081:2770":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:41073:9617":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"7:79:16193":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:33577:9664":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:16812:22046":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:15844:21833":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:623:34243":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:46209:4086":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:8151:17441":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:2495:3754":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:5094:9421":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:9734:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:7738:22860":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:38643:9676":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:44166:9300":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:12411:1845":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:5825:9379":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6652:15166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:40799:9328":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:41244:9634":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6876:17392":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:41627:9610":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:2550:16430":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:42514:3594":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:12403:902":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:5274:22513":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"15:327:16378":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:6392:27307":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6551:4186":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:12371:22150":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10729:17544":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13909:20539":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:15641:17609":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6111:17358":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:3014:16451":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:45276:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6449:15152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5562:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:46273:4087":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:41182:9620":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:9741:3763":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:659:22072":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:16656:22034":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:11123:27306":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13635:17856":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:8298:17448":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11788:17657":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:4172:31603":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:13471:17569":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5255:14422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:7716:33420":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9455:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:22046:4041":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:22583:2595":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:6493:15114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:16159:21857":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46361:4058":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:5855:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6790:32797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1852:703":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:21973:2595":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:42330:3845":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:1930:3708":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2081:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:21887:9444":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"14:160:16349":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11401:17586":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:45201:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2840:16443":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3041:124":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:43331:2779":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:11907:3853":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3699:9248":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:2880:16445":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:6817:3989":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:15836:21832":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4932:3893":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:6811:2857":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:12711:9761":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:41143:9627":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:8293:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:7691:3593":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9763:128":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8554:3805":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46393:4070":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12962:17809":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:15573:21814":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:8014:17434":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:9401:2758":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:7786:28702":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:23389:28401":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:43088:2769":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44176:9298":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6900:31603":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7796:22276":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:4795:9409":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2018:794":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:32606:2782":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:2082:1373":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:2479:3477":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:42426:3633":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12723:17774":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:10979:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:1584:11324":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:21955:30210":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:4338:3909":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:42570:3633":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:2406:17639":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:698:22076":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:821:3859":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:6904:17394":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:7075:17405":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:11026:3711":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:12860:17805":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"13:229:32988":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:15475:21809":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"14:202:9357":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:532:3578":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13451:17568":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:16684:22036":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:1158:3649":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2860:16444":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:13416:120":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:10966:29471":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"11:2366:16342":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:6256:33331":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:44551:9317":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4411:3912":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:47344:4101":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"11:2349:3648":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:13937:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:896:33442":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:23262:28548":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:0:2611":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:4822:22120":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:44427:9332":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:12400:763":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13290:17560":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3217:2787":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12393:1705":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"9:355:16230":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:1650:3653":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:7308:10466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46422:4125":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:16642:22033":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:5561:9271":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8250:3632":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:2435:16424":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"18:635:34236":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11034:3956":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:3875:3671":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:15418:21806":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:47021:28477":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:10416:129":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:2594:30379":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12391:1329":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44977:9793":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:7986:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:754:22078":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12008:17692":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:33916:4034":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:8267:17447":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6424:22595":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6098:17357":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11281:17555":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:923:3635":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:505:27348":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:538:22084":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:5094:3934":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:46805:4100":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6843:17389":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:12006:27304":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"2:2732:113":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:1645:3652":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:42909:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:39892:9250":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:7676:3630":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:8528:17452":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:10420:2770":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:13186:9312":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:23400:28376":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:6917:15213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15714:21822":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6337:17368":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:22848:4178":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:7361:15589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:3347:3650":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10249:22401":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:10920:3939":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:6462:17374":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:44985:9794":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:11771:9306":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12028:17694":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2772:16440":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:4337:3785":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:15050:21089":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:40028:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:7469:15593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:785:3635":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11864:17640":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:4652:2781":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:47481:9213":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:12360:3615":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:1893:3637":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"18:643:34238":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1625:11327":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7259:17409":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3848:3848":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1614:3639":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:16283:21866":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:903:33418":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"16:6781:17384":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:47444:4128":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8218:3762":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"18:521:22079":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44205:9329":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:5565:9272":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:33849:4032":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:46955:4121":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:46568:4065":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:42870:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:6389:17370":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46649:28518":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47071:4055":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:15036:21088":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12413:1931":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:16008:21850":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11015:25858":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4492:3913":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:291:31603":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:40:3686":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11553:17605":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3455:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:16171:21858":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:41129:28295":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"9:176:16319":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:3671:9395":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"9:500:16217":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10960:22161":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:1489:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:45315:28258":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8044:3587":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:11982:16382":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:6876:15211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:677:3609":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1395:3648":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1703:11335":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6507:15115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:40902:9431":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:12404:908":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5334:14432":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:12386:420":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:16377:21873":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6411:15148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12976:17810":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:46776:4094":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:46407:4119":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:3834:16460":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:16218:21863":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22142:2595":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1869:3691":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:4694:16906":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:879:2809":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8624:3915":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:14902:21079":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7490:27240":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:15701:21821":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:396:32965":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7358:17413":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:15852:21834":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:3599:3768":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8748:2804":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:22677:4172":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:4842:14381":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:3587:16458":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:46917:4066":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3400:3826":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:7883:17424":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47595:9221":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"3:0:510":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:14963:21083":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:11743:9305":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8005:2595":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6731:15176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:5862:3996":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:15439:21808":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:10063:30223":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:6814:3988":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:573:34238":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:2137:3647":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12359:17758":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:42484:2760":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:4604:3592":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5127:14410":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:2242:129":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:5541:14455":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12941:17798":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10778:17545":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"16:6269:17366":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:7560:30413":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:15946:21843":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:5640:3954":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4937:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12044:17665":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:43620:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:8619:3914":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:2171:3671":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:12409:1857":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:11313:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9300:22585":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:538:10422":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:6885:3995":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:322:33457":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:14533:21055":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:12414:1435":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:910:3634":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:8006:3603":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11254:9814":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:2713:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1521:11318":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4956:17007":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:44481:9334":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:13910:30090":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:9140:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:7463:15592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:4777:3933":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:7454:15591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:44218:9326":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:8290:14634":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:15785:21829":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7058:17404":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:586:10429":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:4217:3633":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6084:17356":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:3433:3666":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:14947:21082":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:8223:17445":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:47270:4095":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:3665:9396":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6765:15180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:4957:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2467:16426":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11289:22249":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:13041:17817":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:2227:17645":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:3247:9641":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4964:14393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13838:20535":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:42562:2809":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4891:3916":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:628:3604":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:4068:2857":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15679:21819":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:3126:16454":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7789:33448":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4990:14397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:10058:28792":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10246:17529":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:41389:9635":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:14346:17761":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2610:9693":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:6691:15171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:14140:20556":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:11958:17638":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:7759:9267":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:32622:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45193:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13427:17567":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:2960:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:44989:9798":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13095:17823":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:553:10424":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5520:14453":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:47580:9220":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5288:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13692:17858":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:22430:4047":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:14043:20549":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6731:17382":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:14093:116":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:2790:3817":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:14586:21059":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10442:17536":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43397:2779":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4896:14217":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5488:14450":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:8092:3710":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"13:0:2602":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1621:2857":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:14738:21068":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:14612:21061":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9224:4000":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:16739:22040":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"6:6882:14292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:16520:22030":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:15769:21827":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7907:17425":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13890:20538":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:44677:9348":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:946:3637":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6064:17355":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46326:4104":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:15963:21845":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10637:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5412:1258":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:44708:9350":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:6782:9638":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5230:14419":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:7938:17427":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:8330:14639":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:9177:3963":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:16822:20541":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:667:17522":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:15981:21847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:8256:9616":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:41091:9623":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:9551:9312":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:45266:4179":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"11:2551:32983":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14438:21050":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13205:17557":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7521:33354":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5670:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5482:14449":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:2437:17664":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:546:33036":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13322:17562":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:5351:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11989:16382":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10274:17530":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:16209:21862":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11421:17587":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:2825:31514":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:8121:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:8137:17440":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"11:1880:2809":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:11303:2595":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:42983:3979":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41214:9632":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12035:16332":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:16832:20543":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:7980:17431":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:10358:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"11:2539:29595":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11706:17628":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:5144:17080":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10377:22576":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:1489:11313":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12135:17697":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7350:33298":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12335:17756":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11457:17590":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:14327:17762":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6794:17385":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:4902:16999":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:3441:16457":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:40928:3721":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:10428:2773":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6813:15183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2084:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:47516:9216":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:14520:21054":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6748:15178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:12402:920":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:6273:9619":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13082:17554":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4110:3875":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:15939:21842":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7401:33147":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:5117:3936":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:3674:3769":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:11337:22221":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:46311:4098":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:5869:3997":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5586:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13491:17570":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:5107:14408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:16341:21871":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5265:14423":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:40739:9433":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:33365:9661":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:43360:28508":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:6217:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:47657:9223":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:44065:9291":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14708:21067":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7807:33456":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:4230:3883":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11566:17604":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2590:16432":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:4810:16976":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39953:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:506:16397":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:5648:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12347:17757":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8196:3763":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7765:17422":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:7837:9605":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:4722:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:1867:3690":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10141:17526":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22026:2595":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:7530:3636":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:1643:11329":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40966:3804":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:1604:3638":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3313:3651":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:23477:28598":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:2751:3806":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:2146:9703":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12851:17804":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:4983:17011":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:38698:9677":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:8028:17435":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7424:17417":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15090:21092":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5172:17085":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:5570:14458":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:6419:15149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:43376:28500":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"11:2323:3647":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:42296:28614":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:23071:28552":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12687:17799":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:7574:2857":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:2486:16427":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:12176:17699":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:4844:16987":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14692:21066":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:7510:2857":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4888:3937":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2415:16395":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:40068:3624":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12216:17702":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:4267:16525":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:3443:3822":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11386:17585":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:45242:4182":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5088:14407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12762:17771":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5757:33066":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:12388:476":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5271:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:15:2723":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:40815:9327":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:14001:20546":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:46585:4071":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:44084:9293":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:41060:3802":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6740:15177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:43102:2772":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7720:9740":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15655:21817":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:23289:28515":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:2380:2809":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:8302:14636":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:44005:28699":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6028:17353":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"7:32:16186":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:6159:9626":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:41051:3682":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4984:14396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:8598:17456":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"11:809:3637":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:15989:21848":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"10:36:32955":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"5:1645:3669":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13222:17558":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5165:14413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6534:15158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:22809:28760":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:564:10426":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7554:17420":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13610:17576":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6408:17371":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:881:3645":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:994:3645":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"14:214:16358":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1223:31587":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:1711:11336":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:32599:29711":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:14750:21069":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1379:3646":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:7487:15594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:9346:22549":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"15:306:16374":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:46888:4060":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:4824:22122":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:14116:4183":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:5113:17072":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:10669:27343":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:6042:17354":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:41031:9278":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:3052:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5606:3952":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13306:17561":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8230:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:3285:9245":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:22783:2595":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"16:7416:17416":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:39990:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"9:422:16216":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:3913:3851":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:15549:21813":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:23466:28407":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:2710:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:4883:2785":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:44245:3804":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15753:21825":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:8308:14637":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8541:3803":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:7059:9379":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10115:17525":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:3097:30352":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:1920:3653":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:1982:2762":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:1884:2857":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:12727:9320":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:2275:30410":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4116:3874":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:7350:15588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45176:151":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:10394:17534":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:16728:22039":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:16026:21852":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:40954:3722":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6866:17391":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:6684:3636":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4930:3892":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:1838:9561":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"11:1900:3650":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:8107:3711":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:12339:22526":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:13181:17820":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:3074:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:30741:3855":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14832:21074":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:2323:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:685:3611":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:6205:17364":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:45062:9815":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:5962:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:4:1271":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:14405:21048":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:44229:9323":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11246:25861":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:491:10418":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:2357:32076":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40861:9429":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:5325:3834":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:12995:9307":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:1507:11316":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9872:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:41161:9637":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15351:21804":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:41205:9631":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:42833:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10097:17524":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:8105:17439":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2937:9448":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11163:17553":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:3304:25631":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:563:22085":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1569:11323":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:10986:22240":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:10516:17538":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:10696:17543":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:42352:3846":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:16786:22044":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:8209:17444":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:317:33418":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:3420:125":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6188:17363":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3617:3767":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:44542:9318":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:7341:15587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5318:17116":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8796:2805":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12886:17796":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2045:678":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:2957:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6716:15174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:10549:17352":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:5516:31603":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:4142:3636":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:6736:3993":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:44886:9338":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5387:14439":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44259:3805":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"14:7:16349":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:123:32963":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:44834:9354":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11678:17601":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:44997:9797":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:9420:3983":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"9:445:16214":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:2450:16425":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:589:28530":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12108:17696":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7604:15601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:8884:2809":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:15148:21095":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:3935:3636":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"14:187:16357":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42184:3844":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6381:15086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40788:9435":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13119:17821":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:2612:9694":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:22028:4040":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:8279:3670":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12897:17806":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:6696:3984":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12395:1829":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"18:613:34250":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:44277:9301":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:15887:21837":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:23411:28478":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:11757:17631":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:2969:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10663:17542":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:1564:2857":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1539:11320":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8493:3833":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:14393:21047":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9193:4005":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:2121:3646":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2493:3753":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:3644:9680":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:378:3601":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:2400:3633":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:11066:3963":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"11:1049:3648":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:8358:22590":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8201:3761":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:11484:3633":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5325:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11727:22164":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7578:17421":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8578:3841":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:0:568":{"crate_id":2,"path":["core"],"kind":"module"},"16:6239:17365":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1657:11330":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7232:31626":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:44691:9349":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:16187:21860":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11075:34212":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:6032:3636":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:545:10423":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6368:17369":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15010:21086":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:2966:16449":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15557:21801":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:9236:4003":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7030:17402":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:971:3642":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"15:288:16373":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:9437:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:982:3643":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:31009:9582":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46699:28479":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:12303:9290":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:1115:3649":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:40976:3726":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:7083:9380":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2724:16438":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:16775:22043":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"9:480:16213":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:23139:28602":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:726:22077":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:5117:14409":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:31035:28472":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:42168:3843":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:16179:21859":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:23227:28387":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11007:25855":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:1617:2809":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9428:3785":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:961:3640":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:12881:9802":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:12957:9803":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:46938:4072":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:1548:3633":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"9:328:16270":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:42796:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:44662:9347":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5357:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:14220:21040":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8731:3946":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"11:835:3641":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:14228:3659":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:16385:21874":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12736:17773":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11432:17588":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"14:165:16350":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:1595:3635":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:952:3638":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:473:10415":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:384:3602":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11975:22538":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:8565:17454":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:10629:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4731:9402":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:23488:28512":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:10743:3826":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:2645:3814":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:5727:17351":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12066:17690":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7542:33393":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:7707:3723":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6625:33381":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:5533:129":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:938:3655":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11733:17630":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:7415:24585":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:11664:9301":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:11752:22138":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11818:17642":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5249:14421":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:42434:2857":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:507:34238":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5349:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:13537:17572":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11926:17644":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6588:17376":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:8667:3940":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:113:22059":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40703:3606":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:47402:4073":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:21975:4045":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14152:20557":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:578:10428":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5179:3900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:8548:3804":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5477:14448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:7159:17406":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:3039:22413":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:7016:17401":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1514:11317":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:44855:9356":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:2684:16436":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7834:22278":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:8313:2824":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:45171:28368":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:45234:4181":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8890:2810":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"7:0:1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:472:17520":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:9746:22412":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:7949:17428":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:3141:16455":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4168:3878":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:4152:16479":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:11713:22252":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2222:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13006:17812":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5395:14440":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2155:2959":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:2771:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5417:17146":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6902:15212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5635:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:44144:9279":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:5103:3935":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:6808:17386":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:41637:9611":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12319:17733":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:32624:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"14:220:16359":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:23203:28563":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:4218:3881":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:32713:115":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:44157:9297":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:46194:4050":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:22152:4042":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"11:1564:16339":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:583:17521":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11016:17550":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7282:17410":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:3339:3652":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:4852:9410":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6708:15173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:16613:20534":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:13254:9340":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:45051:4035":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:11831:17610":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:21897:30202":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:5507:14452":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:34262:9668":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:41379:3803":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:34781:9672":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:8058:17436":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6852:17390":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:3889:16461":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"20:0:2469":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"17:16494:20530":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:42212:28562":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15160:21096":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:4404:16639":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10430:2774":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:8711:17461":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:46976:28529":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:10626:3960":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:8260:9615":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:47148:4089":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:9491:4030":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12082:17668":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:6730:31603":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:661:2764":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4222:3882":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:7838:17423":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13070:17553":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:6770:15181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:8757:150":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:22154:4041":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:23444:28531":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:8208:3764":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:40048:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:957:3639":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:8249:14628":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3445:3823":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:46179:4085":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:6970:17398":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10939:22271":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:1601:16341":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13209:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6473:15154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5641:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:10998:3766":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:6573:17375":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10296:17531":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6623:15163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:42722:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:8304:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:8760:3663":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:16798:22045":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:6502:16394":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:34608:9670":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:44381:9303":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1928:3707":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:11307:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:2011:2763":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:46518:4053":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6437:15150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14573:21058":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:12225:17703":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:42946:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:8450:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:4506:31612":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:1005:3646":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:5348:17123":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:479:10416":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:14019:20547":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5195:1315":{"crate_id":1,"path":["std","path"],"kind":"module"},"16:5649:17332":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:8395:2823":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6544:15159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:10677:3777":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4976:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:11536:27350":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:1625:3640":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2505:3759":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:3987:16462":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:14335:17760":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"12:0:2608":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:43603:28619":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:670:22073":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:22425:2595":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:3581:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:1085:32974":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:23341:2595":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:6749:17383":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:1105:16337":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:42685:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:2920:16447":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11653:17606":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6777:15182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:6700:15172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:13805:29713":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:14773:21070":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2966:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:2325:3744":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6666:15168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:4241:16522":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:44820:9353":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5428:14443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:22759:4174":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:1632:11328":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11129:27347":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16632:22032":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:41645:9613":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:0:2612":{"crate_id":17,"path":["object"],"kind":"module"},"2:3449:2822":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8531:3802":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:46503:4105":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:5224:17091":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12095:17666":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:1624:3636":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8630:3904":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15064:21090":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:7615:2865":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10375:22411":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:2936:2595":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9351:22532":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:7891:17522":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:2596:679":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:44533:9319":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:11446:3741":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:4308:27239":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:9207:4002":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:16198:21861":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:306:2826":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"11:2440:3636":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:8663:3938":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:22811:9693":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:9372:22157":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:10969:3764":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:7548:15597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:6700:3985":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22933:4169":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:8233:17446":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:14872:21077":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15531:21811":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:13822:9455":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:11222:17554":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11124:34222":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:40709:9399":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3072:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"15:0:2610":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10784:34224":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"16:6738:33432":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:14599:21060":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14114:20554":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:2566:2812":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:3254:9643":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:6526:15157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46617:4126":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8901:2811":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:9311:3582":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2052:9592":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:8031:15972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:8296:14635":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5224:14418":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:3684:3796":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14072:20551":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7223:17408":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:2506:16428":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5689:17349":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:7869:9376":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:23951:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:44756:9351":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:16241:21864":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6443:15151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3438:9236":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:3940:3637":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:4488:9242":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15876:21836":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:14807:21072":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:965:3641":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"15:394:16385":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:13195:9314":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12163:17698":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:14886:21078":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9339:22561":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:3258:4031":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"18:706:9314":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13921:20540":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9201:2857":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:7794:9359":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:22452:4037":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:6201:3996":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:14652:21064":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:2950:16448":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:9432:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:651:34238":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:44309:9336":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:12174:23022":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40098:9681":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:42130:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12983:17811":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12398:744":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:5441:14444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4146:3876":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13554:17580":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:3566:3785":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:491:34247":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:40923:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:11591:9296":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15760:21826":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44327:9335":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:32592:17460":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44105:9280":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:7471:17419":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:44094:9294":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12387:1188":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:13201:9313":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:1914:3652":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:7720:9438":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"11:708:3639":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:7721:9439":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:4120:16470":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3826:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12625:17721":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:16595:20533":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:8267:14631":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11606:17553":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15431:21807":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11319:34217":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:45183:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6631:15164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8722:3947":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"11:842:3642":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3310:27822":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:23378:28484":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:15586:21815":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12412:977":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:597:3585":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11114:17552":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5976:3980":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8353:22584":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4875:14383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5057:14405":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:21909:30202":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5471:14447":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:515:22082":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:44056:9292":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:6527:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:45027:131":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:8766:9614":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:23124:28291":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:15864:21835":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:34117:9667":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:7518:15595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12524:17718":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:42505:9751":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:14845:21075":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:47315:4067":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5151:14412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:31409:9444":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:40008:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:3048:16452":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5379:17131":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:15919:21840":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:2420:2857":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:23178:3856":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:43611:3778":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:41230:9633":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:698:2857":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:8669:17460":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:46241:4051":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:4873:16993":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:497:10419":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:38588:9675":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:42370:3847":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6302:17367":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"11:364:32958":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:3352:30419":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"9:53:16233":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10823:17547":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:4805:2782":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5405:14441":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:824:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:41195:9630":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:1628:3637":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:7332:10296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:22034:4044":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5301:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:42611:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:3729:3633":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:7184:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:2990:16450":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:765:22071":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12537:17716":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7305:17411":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:22938:4167":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5658:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:6462:15153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5044:14403":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46716:28363":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2729:9776":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:7618:2857":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:11460:2809":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2148:9704":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:11701:22236":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4566:3905":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13798:20533":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:14173:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12992:17775":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:4453:29703":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:34050:9665":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10368:17533":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:3094:2918":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:22:826":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:26351:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:3854:17738":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12204:17701":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12550:17717":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:1494:11314":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12260:17753":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:4726:9401":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7508:33400":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6611:15162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:6480:15155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:8342:130":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:16761:22042":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:5150:3785":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:41101:134":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:41173:9629":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:44993:9796":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:40291:9449":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:155:16400":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:11691:17600":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:13206:9311":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:46632:4127":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15777:21828":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12605:17553":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:23433:28371":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:7518:3657":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"11:1907:3651":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13028:17818":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:3105:30353":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:3458:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:8503:17451":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2900:16446":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:6638:15165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:2304:30476":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:42578:2857":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46294:4092":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14917:21080":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:6479:3996":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:5620:3953":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:9415:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:43632:2805":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"11:2228:16332":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:11509:3805":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7170:4036":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:22905:4168":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:16132:21855":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:570:10427":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:41024:3765":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:47470:9212":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:46486:4099":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3347:3824":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:102:32967":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:16297:21867":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:11846:3852":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5551:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5295:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:46436:4039":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:39277:9678":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14507:21053":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:685:3633":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:481:22080":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10843:17548":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11777:17632":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14975:21084":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:9266:4004":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:598:34235":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47501:9215":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:42474:2757":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:2559:32984":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5494:14451":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:8261:14630":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:2796:16441":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:12270:9289":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:5309:3978":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:16507:20531":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:13958:20543":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:5797:3959":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5656:3955":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:573:3583":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12920:17807":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:3465:3637":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:9318:22235":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:32711:9243":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:9442:3991":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:4805:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:23189:28475":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:43848:28398":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8191:2958":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:4330:3908":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:5019:14400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6144:17360":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:2265:3578":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:1888:3636":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:485:10417":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13157:17815":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:5305:22513":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44235:9322":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:8000:17433":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:15024:21087":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:16362:21872":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12869:17568":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:23018:28545":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:15121:21094":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8636:17459":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:8284:14633":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:532:3284":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:11103:29468":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:16311:21868":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7563:15598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:1551:11321":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12931:17572":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:8043:33084":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:1633:3650":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:3212:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40994:3740":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5450:14445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:4812:3879":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:5367:988":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:7368:3940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:44868:9337":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:14627:21062":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:9359:17421":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:12941:9801":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:14031:20548":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:15829:21831":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:12415:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:8009:3831":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:5449:17155":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:42483:2592":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1684:11333":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10861:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:2477:3749":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5282:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:7735:3724":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:4346:3910":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:5533:14454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4970:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44363:9305":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8819:2806":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:6590:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:6942:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:7665:2812":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5319:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:3720:17720":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"0:0:2474":{"crate_id":0,"path":["thiserror"],"kind":"module"},"1:6376:4183":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12787:17767":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:21926:30204":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4699:3917":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6696:17380":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10487:17537":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:8723:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:44131:9278":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:3101:30354":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:437:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:2377:30442":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:43650:28292":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:16555:22031":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:9473:3773":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:8008:15970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:559:10425":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7462:17418":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:6723:15175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:41111:9624":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:15665:21818":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41603:3984":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:14640:21063":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11173:34215":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:4928:3889":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:31382:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:10831:29472":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"17:12191:17700":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:4365:3785":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:6532:4185":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8255:3631":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:5794:3957":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:33153:9662":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8021:3588":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:4986:3894":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:39968:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6680:15170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11235:3962":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5007:14399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:14312:21044":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:47373:4122":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4359:3911":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4160:3877":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:8689:3891":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:854:3643":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:39856:9394":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:8483:17450":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:44567:3606":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:581:9444":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13781:20532":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43095:2771":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6713:17381":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11515:17620":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13733:20530":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:7316:11269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44513:3801":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:2466:3637":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:5465:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:42522:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:41596:9607":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:1097:3647":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:16701:22037":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:40822:9428":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:22464:30208":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:31003:9276":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4829:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8511:3770":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:42390:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:13962:9453":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43852:9281":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13266:17559":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:5069:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:10517:114":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:9392:22244":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4902:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:12392:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:7540:3658":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12583:17714":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:680:22074":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:38533:9674":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:44576:9328":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:4929:17003":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:4569:3785":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"1:11963:9229":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:2551:2619":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:14796:21071":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1424:3649":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:40910:9427":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:43414:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:45179:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:988:3644":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7990:17432":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:9151:3961":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:8069:3974":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:328:32973":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:40765:9432":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:6984:17399":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:12407:1869":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:6010:3948":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:1586:3634":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:13180:9316":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3659:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13169:17851":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:8263:22570":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13547:17573":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:44981:9795":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40778:9434":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1696:3901":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:23422:28397":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:11465:17591":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:11757:9303":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4947:14391":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:9287:3982":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2973:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:1530:11319":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:42587:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7384:27309":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5629:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:32681:2825":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:44523:9330":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4174:3879":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:10359:2765":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5217:14417":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:0:2607":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12952:17808":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:10426:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:32623:2601":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:6971:9621":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:1239:30388":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13983:20545":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10949:3761":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"18:689:22075":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:12341:9286":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:6055:3616":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12122:17667":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6953:17397":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:13014:17827":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:47461:9211":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1675:11332":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:10534:22403":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:15540:21812":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2808:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"10:44:16324":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:4441:29712":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12648:17719":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:1083:3646":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:6169:10014":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:735:22070":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12392:17732":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:14547:21056":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:9134:3960":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8072:3613":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:7901:22591":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:47050:28266":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"11:1023:3647":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5282:17103":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42318:3854":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5622:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1410:3647":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:10411:120":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6914:17395":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:1905:3701":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:0:1731":{"crate_id":1,"path":["std"],"kind":"module"},"16:8612:17457":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14099:20553":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:2182:3672":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"4:0:2603":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:40750:28511":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:47527:9217":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5205:14416":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15410:21805":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:14416:21049":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"9:390:16215":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:8320:17449":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:21941:30212":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:41618:3832":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11222:3961":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:3293:9247":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:13570:17574":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:8353:16170":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11617:17554":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11971:17637":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5381:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13757:20531":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13871:20537":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:21943:30198":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12389:1891":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:14997:21085":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7093:9381":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:46258:4057":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14483:21052":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:33983:9666":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46731:4088":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:1220:17607":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:15315:21803":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:16145:21856":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44641:9346":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:830:3638":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:434:32978":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:1011:2809":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4881:14384":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"11:2533:32986":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"14:40:20532":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:4573:9412":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:96:22058":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13970:20544":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:43435:2780":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10356:3701":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15077:21091":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:2301:3646":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:0:1013":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13719:17859":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"9:0:2605":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:23309:3857":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11539:17610":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:3736:9251":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:7771:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:671:2809":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:1140:16338":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8484:3831":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6640:17377":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:14084:20552":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:898:3654":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8638:3850":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:4766:16955":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:43835:28634":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:9164:3962":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6942:17396":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12673:17787":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:4015:3853":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4997:14398":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6421:17372":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:10377:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:39936:3684":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12826:17768":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:4307:3785":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14284:21042":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:8199:16133":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:16714:22038":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:3809:31603":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:14269:21041":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6440:17373":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:7747:3725":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:42152:3842":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:13145:17816":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:5366:14436":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:7501:3667":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5255:17099":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11381:3742":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"11:772:3634":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3536:3832":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13818:20534":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:43348:28402":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:6521:15156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:11552:9307":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:10672:3775":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:41082:9618":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:3461:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:2963:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:8612:3845":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:8644:3907":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:6599:15161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:2620:16433":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:3095:30383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11985:17691":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:40105:2956":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:15896:21838":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:4536:3785":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:5009:3888":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3207:118":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:46547:4059":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12234:17751":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:12405:914":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:22862:9693":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:740:3640":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8502:3766":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:9877:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11049:22258":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8834:2807":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:14136:4180":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:41004:3739":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:8026:3590":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15496:21810":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:7808:22277":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"6:465:10414":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10630:17541":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:1132:31603":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:4826:22124":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:6871:3994":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:42443:2756":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:6837:17388":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:10422:2771":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12371:17712":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4792:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6608:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:523:10421":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:1580:16340":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11026:34214":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10443:3966":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:1727:11337":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:735:30412":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:44409:9331":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:23499:28561":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"6:5186:14414":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15739:21824":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:45009:9814":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7386:17415":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:1639:3651":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:31:16349":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:221:9255":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:4465:110":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11758:22218":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:1339:17615":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5682:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11741:22508":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:8573:3849":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:16264:21865":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:9185:2809":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:6148:3978":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:46340:4052":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43595:3776":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10031:17523":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:12695:9759":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11720:17629":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:430:32977":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3263:4033":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:7784:9358":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:23211:28389":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12699:17800":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8567:3850":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2802:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5462:14446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"19:0:1306":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11823:22290":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5196:14415":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2640:16434":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:34435:9669":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:14821:21073":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5051:14404":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:3110:16453":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:4582:31612":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5139:14411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8271:3816":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6890:17393":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:43389:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7959:17429":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:517:10420":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6680:17379":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:13055:17610":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"10:0:2606":{"crate_id":10,"path":["adler"],"kind":"module"},"2:44186:9299":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11272:3773":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:766:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1794:31603":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:6274:3785":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"13:110:32997":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8561:3801":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:11579:17603":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5025:14401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:608:34253":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:47423:4107":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:8096:17438":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:14460:21051":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7337:17412":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:7192:17407":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:7820:22279":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:7391:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:41152:9628":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:42759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13193:17819":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:4929:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:10534:17351":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6123:17359":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:9251:4001":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5341:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:1533:2809":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:8086:3614":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:7539:15596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:13845:9627":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:10938:34211":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:2820:16442":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12711:17801":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:46378:4064":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:46826:4106":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:3373:3653":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10793:17546":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:1589:11325":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:32682:9644":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13945:20542":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:12355:22842":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:1064:16336":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:23455:28633":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:11902:17646":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46678:28294":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11448:17589":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:12918:9804":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7212:16367":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:7495:33379":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:0:2613":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12399:747":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11630:17608":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:2157:3670":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:3205:9244":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:6300:27338":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:10332:17532":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:2660:16435":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:5983:3981":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14933:21081":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:43321:28375":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:908:33457":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:6564:15160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:8255:14629":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:6982:28394":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11952:17651":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6659:15167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11111:27353":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46843:4054":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11503:17593":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"16:7731:2756":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1500:11315":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:11629:9308":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:40895:9430":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14127:20555":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:9576:3707":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:12056:17695":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:1106:3648":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11358:17584":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:4377:2809":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:3318:30403":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:6977:28599":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5036:14402":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:2570:16431":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5241:14420":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8273:14632":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:6998:17400":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:5184:3942":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:1969:3785":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:5709:17350":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:23320:3872":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13933:20541":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4921:14388":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:5085:17067":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12840:17770":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:5131:17822":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:892:3633":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:9438:2759":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3493:3809":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12406:895":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:40118:9391":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:45001:9791":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:8179:17443":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:9447:3992":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"11:1674:32956":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:798:3636":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10597:17540":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:44973:9790":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:2545:32975":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:3910:3852":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:2328:3745":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12018:17693":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:3860:3670":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:15953:21844":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6159:17361":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1667:11331":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:31024:2779":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:11475:17592":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"5:7590:30356":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:8165:17442":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3402:3827":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:7577:15599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:14560:21057":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7431:11441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5593:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1898:3637":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:16332:21870":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3654:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40807:3606":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:21924:30206":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22891:2595":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:8874:2808":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:6658:17378":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:7257:31630":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:15997:21849":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:2378:17679":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:15812:21830":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:16019:21851":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}