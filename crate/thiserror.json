{"root":"0:0:1709","crate_version":"1.0.37","includes_private":false,"index":{"2:11338:55020":{"id":"2:11338:55020","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:2120":{"id":"2:11361:2120","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11021:2828","prim@char":"1:12350:1851","`None`":"2:48019:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11422:4626":{"id":"2:11422:4626","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:2828","prim@char":"1:12350:1851"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:53177":{"id":"2:11442:53177","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5110:53173":{"id":"5:5110:53173","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11441:53176"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:2079":{"id":"2:11321:2079","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1813":{"id":"0:51:1813","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5567:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1816":{"id":"0:63:1816","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3365:1814","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:55052":{"id":"2:11384:55052","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828","str::rsplitn":"2:11387:55054"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50089:2532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:55019":{"id":"2:11336:55019","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:59041":{"id":"2:11408:59041","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1811":{"id":"0:25:1811","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11372:5282":{"id":"2:11372:5282","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10845:2534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:3:1700","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:7717:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1812"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11446:59052":{"id":"2:11446:59052","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4451:59052"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50302:3097","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11331:55021":{"id":"2:11331:55021","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12367:1865"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:3656":{"id":"2:11349:3656","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50239:2258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1709":{"id":"0:0:1709","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[254,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:68"],"is_stripped":false}},"2:11441:53176":{"id":"2:11441:53176","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:5000":{"id":"2:11351:5000","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50277:3095","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:3293":{"id":"2:11346:3293","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49971:2255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:59046":{"id":"2:11416:59046","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11021:2828","prim@char":"1:12350:1851"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11046:2827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1816":{"id":"0:59:1816","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3365:1814","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:48:1707":{"id":"0:48:1707","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1813"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:50","0:52"]}},"2:11415:59045":{"id":"2:11415:59045","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[245,0],"end":[245,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1703","glob":true}},"2:11328:51752":{"id":"2:11328:51752","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10589:3244"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11381:59035":{"id":"2:11381:59035","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11021:2828","str::split":"2:11369:52486","str::split_terminator":"2:11378:59034","prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50053:3084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11393:59037":{"id":"2:11393:59037","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:59042":{"id":"2:11410:59042","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1706":{"id":"0:43:1706","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1813"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"2:11358:55058":{"id":"2:11358:55058","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21:1812":{"id":"0:21:1812","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,4],"end":[250,39]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::aserror::AsDynError","name":"AsDynError","id":"0:6:1705","glob":false}},"2:11369:52486":{"id":"2:11369:52486","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11021:2828","str::split_whitespace":"2:11347:5283","str::rsplit":"2:11375:55050","`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49985:2257","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1812":{"id":"0:8:1812","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11445:2544":{"id":"2:11445:2544","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4454:2544"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50293:2545","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:55054":{"id":"2:11387:55054","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12350:1851","str::splitn":"2:11384:55052","self::pattern":"2:11021:2828"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50107:2530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:59038":{"id":"2:11399:59038","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11021:2828","str::matches":"2:11396:1937","prim@char":"1:12350:1851","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50207:3091","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1812":{"id":"0:18:1812","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":{"restricted":{"parent":"0:37:1701","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5500:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1813"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11332:55017":{"id":"2:11332:55017","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:5283":{"id":"2:11347:5283","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11348:5281"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50259:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:2988":{"id":"2:11437:2988","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10982:2034","FromStr::Err":"2:10983:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10982:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10982:2034","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:37:1701","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5390:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1813"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11443:59051":{"id":"2:11443:59051","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4453:59051"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50284:3096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:306":{"id":"2:11330:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11331:55021","`u8`":"1:12367:1865"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1708":{"id":"0:58:1708","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:59:1816"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}},"2:11439:3287":{"id":"2:11439:3287","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1705":{"id":"0:6:1705","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:8:1812"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:9","0:13","0:16","0:19","0:22"]}},"2:11428:59048":{"id":"2:11428:59048","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:59684":{"id":"5:5099:59684","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:2859":{"id":"2:11345:2859","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49961:3079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11378:59034":{"id":"2:11378:59034","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11369:52486","`DoubleEndedIterator`":"2:7061:120","self::pattern":"2:11021:2828","str::rsplit_terminator":"2:11381:59035","prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50035:3083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:59032":{"id":"2:11341:59032","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12356:1856","crate::ops::IndexMut":"2:2974:2541","str::slice_unchecked":"2:11340:59031"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11402:59039":{"id":"2:11402:59039","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:12350:1851","`DoubleEndedIterator`":"2:7061:120","str::rmatch_indices":"2:11405:59040","self::pattern":"2:11021:2828"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50135:3087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:37:1701","path":"::display"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8581:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1813"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11348:5281":{"id":"2:11348:5281","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11347:5283"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50268:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5091":{"id":"5:5091","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5002:1344","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5092:59682","5:5093:2259","5:5096:59683","5:5099:59684","5:5107:59685","5:5108:59686","5:5109:2283","5:5110:53173","5:5111:53174"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5096:59683":{"id":"5:5096:59683","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:55059":{"id":"2:11425:55059","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:2828","prim@char":"1:12350:1851"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5093:2259":{"id":"5:5093:2259","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:55057":{"id":"2:11355:55057","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:2828","prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:55040":{"id":"2:11342:55040","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11343:55041"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:55050":{"id":"2:11375:55050","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11369:52486","self::pattern":"2:11021:2828","prim@char":"1:12350:1851","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50003:2528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:55056":{"id":"2:11352:55056","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11021:2828","prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1812":{"id":"0:15:1812","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1811":{"id":"0:65:1811","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11419:59047":{"id":"2:11419:59047","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:55018":{"id":"2:11334:55018","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,29],"end":[251,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::DisplayAsDisplay","name":"DisplayAsDisplay","id":"0:43:1706","glob":false}},"5:5111:53174":{"id":"5:5111:53174","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11442:53177"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:59050":{"id":"2:11434:59050","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320:782":{"id":"2:11320:782","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12350:1851"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11390:59036":{"id":"2:11390:59036","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1813":{"id":"0:53:1813","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5567:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:55041":{"id":"2:11343:55041","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11342:55040"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:3115":{"id":"2:11344:3115","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49955:3078","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5109:2283":{"id":"5:5109:2283","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1813":{"id":"0:47:1813","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24:1812":{"id":"0:24:1812","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":{"restricted":{"parent":"0:54:1702","path":"::provide"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3353:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1708","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:63:1816"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5108:59686":{"id":"5:5108:59686","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2062","`String`":"5:6978:218"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2062","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":{"restricted":{"parent":"0:3:1700","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:12:1812"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:3:1700","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1812"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11329:59030":{"id":"2:11329:59030","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:59040":{"id":"2:11405:59040","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828","`DoubleEndedIterator`":"2:7061:120","str::match_indices":"2:11402:59039"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50153:3088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:59033":{"id":"2:11350:59033","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50249:3092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[251,47],"end":[251,60]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::display::PathAsDisplay","name":"PathAsDisplay","id":"0:48:1707","glob":false}},"2:11325:59029":{"id":"2:11325:59029","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11323:59028"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:2078":{"id":"2:11365:2078","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11021:2828","`None`":"2:48019:174","prim@char":"1:12350:1851"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:2832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11319":{"id":"2:11319","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10584:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11320:782","2:11321:2079","2:11322:5065","2:11323:59028","2:11325:59029","2:11328:51752","2:11329:59030","2:11330:306","2:11331:55021","2:11332:55017","2:11334:55018","2:11336:55019","2:11338:55020","2:11340:59031","2:11341:59032","2:11342:55040","2:11343:55041","2:11344:3115","2:11345:2859","2:11346:3293","2:11347:5283","2:11348:5281","2:11349:3656","2:11350:59033","2:11351:5000","2:11352:55056","2:11355:55057","2:11358:55058","2:11361:2120","2:11365:2078","2:11369:52486","2:11372:5282","2:11375:55050","2:11378:59034","2:11381:59035","2:11384:55052","2:11387:55054","2:11390:59036","2:11393:59037","2:11396:1937","2:11399:59038","2:11402:59039","2:11405:59040","2:11408:59041","2:11410:59042","2:11412:59043","2:11414:59044","2:11415:59045","2:11416:59046","2:11419:59047","2:11422:4626","2:11425:55059","2:11428:59048","2:11431:59049","2:11434:59050","2:11437:2988","2:11439:3287","2:11440:53175","2:11441:53176","2:11442:53177","2:11443:59051","2:11445:2544","2:11446:59052"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:44:1813":{"id":"0:44:1813","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:12:1812":{"id":"0:12:1812","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5107:59685":{"id":"5:5107:59685","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6978:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6978:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:3:1700","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1812"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11440:53175":{"id":"2:11440:53175","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:59049":{"id":"2:11431:59049","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:2828","prim@char":"1:12350:1851"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:1937":{"id":"2:11396:1937","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12350:1851","self::pattern":"2:11021:2828","str::matches":"2:11396:1937","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50189:3090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:2829","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1813":{"id":"0:49:1813","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5567:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[253,4],"end":[253,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(provide_any)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::provide::ThiserrorProvide","name":"ThiserrorProvide","id":"0:58:1708","glob":false}},"2:11323:59028":{"id":"2:11323:59028","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:59043":{"id":"2:11412:59043","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:5065":{"id":"2:11322:5065","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:59031":{"id":"2:11340:59031","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12356:1856","crate::ops::Index":"2:2970:2483","str::slice_mut_unchecked":"2:11341:59032"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:59044":{"id":"2:11414:59044","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":{"restricted":{"parent":"0:3:1700","path":"::aserror"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2561:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1812"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5092:59682":{"id":"5:5092:59682","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2062","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2062","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6723:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:4239:40686":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:491:61516":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12237:50001":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:1605:2084":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:46955:3175":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7072:3344":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4427:40706":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6293:37313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:49544:2509":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:11092:2835":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"9:676:3531":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:2253:2248":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:52971:2943":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10503:54922":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:3599:2084":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:7718:1981":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:3219:2826":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:2473:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4653:40730":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:675:8277":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:48153:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:52735:2963":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11661:49843":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5959:3969":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10062:45173":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:2734:58380":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6506:3797":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9738:4143":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:21888:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:3153:2694":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10682:4181":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"14:165:43232":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:4679:57360":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"12:762:2212":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:7283:54919":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:1550:38326":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:242:61495":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4810:40746":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:46451:3166":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:54066:19021":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12225:50000":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"12:1065:3606":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9362:4100":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:52379:2931":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6248:3710":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11271:45816":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:12354:1854":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:7226:40872":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13148:51083":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6981:42163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13100:51075":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:3393:43313":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:5366:2588":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5567:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:941:2211":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6294:3737":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:44:3596":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:4280:40691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:9434:2535":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6188:3789":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9501:4098":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:1695:38339":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:2981:3296":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:8585:1992":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2291:4015":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:6895:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:5574:3771":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8200:2440":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:7717:1809":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:3017:43310":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:50899:30509":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:46510:3753":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10608:4078":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"18:624:61525":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:1634:2216":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6375:38261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:2976:2213":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46224:2360":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:49014:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:10108:2523":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:3548:58334":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5660:41363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4102:40674":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11876:2708":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:10528:4173":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2310:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:3482:2253":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:1033:58854":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:10185:57281":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:53891:2947":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5605:41361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:574:61514":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12955:50714":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4354:40700":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:531:4244":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:21313:56906":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1935:1960":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:6955:3370":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7832:2626":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:586:37444":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6424:41784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:755:4238":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:50570:2845":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8313:2289":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:8576:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11200:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:49133:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9700:4139":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:636:61522":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3751:58334":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:188:3509":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:554:4463":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46407:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:6869:56588":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:56922:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8847:2021":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2740:3997":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9631:4086":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6670:2494":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:8799:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4726:40738":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12373:1871":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:7408:2033":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:1562:38327":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8425:2258":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:12355:1855":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9293:4194":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:2822:2557":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13536:51201":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:8822:61500":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:7005:2345":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:113:51594":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11739:52815":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2304:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:48756:1992":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6048:3699":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:4432:43861":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5681:3774":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:3125:45175":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5595:41360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10360:4210":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:52508:56959":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:859:2025":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:8561:4136":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"12:1859:2214":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8205:2441":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:49540:3285":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:6006:2737":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:1686:38338":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:8595:2000":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"12:822:2471":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4804:40745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:47113:2585":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11137:45612":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"12:1044:3605":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11161:45648":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:52847:2951":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11893:49916":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"9:0:1822":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:6942:3369":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5226:60854":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:6230:3791":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:3179:43311":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"14:187:43240":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:8981:44981":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:6723:2504":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9456:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12850:50631":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:12332:52059":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:48135:1979":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:6474:58359":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:46742:2545":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10725:54942":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:11652:2460":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:1636:38333":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:52141:2962":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:6225:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12103:49931":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:29606:3164":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:46524:2394":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:49117:2384":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4212:40683":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:5999:2735":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:5856:3781":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8362:2250":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8939:2025":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:5060:2163":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:10670:4180":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:10982:2034":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:49340:57020":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:1505:38320":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:8729:57883":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:21349:3215":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8702:2730":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:1736:3220":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11708:49903":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"9:19:3533":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:47269:2254":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2396:2675":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5733:41371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46889:3268":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:6405:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:1750:57791":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:3557:43322":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"12:1003:2476":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:9292:2451":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:9462:2652":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:20026:58044":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:54142:19025":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:6738:3415":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:12964:51034":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:620:58320":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:2746:2181":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:2726:58379":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6337:3793":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12934:50701":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:3891:2239":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:7948:3722":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:52257:2938":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:21375:3153":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4621:40726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"9:592:3484":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:7788:52242":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:50107:2530":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:999:2474":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11951:49921":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:51880:56955":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:12368:1866":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:1435:3391":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:3472:3385":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7521:3711":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4010:2707":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:7022:3981":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7321:3717":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:8494:43307":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13007:51064":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:11873:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:5113:44182":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:53533:2940":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10075:45171":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:9328:4191":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10930:2276":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:7061:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10924:2278":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:53185:2952":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:7637:3706":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:939:58334":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:2657:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:1595:38330":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:12375:1873":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:7853:2635":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:8346:2285":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"13:220:60574":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:50284:3096":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2805:2223":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:50980:2625":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10625:4080":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:19973:57979":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:8589:2002":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13572:51207":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1511:38321":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6500:41788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:4092:58349":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10823:2449":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6597:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:49866:2524":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1532:38324":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:907:2084":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:1021:4195":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:46757:2906":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:1964:1961":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:1903:45080":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2833:3971":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:595:2173":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:9548:2532":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47519:32193":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:48093:2084":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:50302:3097":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3156:2695":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9722:45091":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4247:40687":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:4258:2394":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11330:45828":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:6156:58334":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8720:2156":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:10233:45284":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:47131:57880":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9328:2025":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6392:38264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11939:49920":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:48212:2464":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:4597:43930":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:12369:1867":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46829:3264":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"9:382:3437":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"12:659:2084":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:20157:2793":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4274:40690":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10445:4177":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8089:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:3590:43331":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:9061:4100":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:1385:2466":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:5808:13673":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:53929:2967":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:50207:3091":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:4653:43938":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:47122:2586":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:2916:4114":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:6489:2365":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:2547:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46908:2911":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5625:41362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:12363:1861":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4629:40727":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6115:3705":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11748:49906":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:56909:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13382:51159":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3475:2231":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9820:4198":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:3302:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"12:815:2470":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:49059:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:46517:57385":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4267:40689":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10708:2448":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:9283:45051":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:9590:2531":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:2885:4006":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:4264:2311":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:2380:2670":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:46922:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:21224:2990":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:3254:43312":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:9597:2201":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:47529:32194":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:11220:52290":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:5720:41369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4258:2310":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:52000:2926":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:50716:3111":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:4581:2726":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:4376:43853":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:9350:2367":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:4429:2771":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9909:45170":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:5974:3783":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6441:3795":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:2725:58857":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:513:37436":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:9118:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:49765:2517":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11557:52070":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:9627:4096":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:1359:2084":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:8701:44978":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8797:2011":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10257:45262":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:50708:3108":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11828:49912":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:12370:1868":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:21342:58036":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4367:40702":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:48777:2002":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6352:38287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:600:37446":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:21184:57641":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4224:40684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11515:49727":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:20245:2798":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:12695:50534":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:46310:2885":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:47485:32190":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11315:45827":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12046:49927":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:8583:1993":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:21690:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:11046:2827":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:6793:3299":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:46785:2909":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:20426:1811":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"9:709:2021":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:10734:3082":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"18:0:1830":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:1601:2025":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:7249:40875":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12972:51035":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"9:977:3445":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8454:2413":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:2724:2143":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:11616:30512":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:966:2469":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"2:2480:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11416:52232":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:2526:3992":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7961:9282":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11174:45649":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:487:44970":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:4501:2717":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:49955:3078":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:4181:3023":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:50593:3183":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:1574:38328":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13340:51121":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"14:0:1826":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6820:60848":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:8536:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2751:2183":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"12:1866:2215":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:1584:58334":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:2647:2270":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6311:41780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"12:2178:60569":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12198:49998":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13580:51209":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:2898:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"18:481:4241":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12980:51062":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:46882:3267":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5083:2158":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:5443:2589":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12356:1856":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:3845:43490":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12371:1869":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10403:4075":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:8441:4178":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:0:1824":{"crate_id":11,"path":["adler"],"kind":"module"},"2:4355:2396":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6646:4023":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7307:3815":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:6775:2744":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:52309:2945":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6926:3174":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51710:2968":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2834:2563":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:6596:2573":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10296:45259":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:6474:3796":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:4762:2351":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:6978:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:48558:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6843:4028":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:10845:2534":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:2622:4005":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7276:3812":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:51840:2957":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11664:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13059:51071":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5554:41323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:49318:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10283:45260":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11734:49905":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:46341:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:7831:1811":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:646:37476":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:564:4246":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4698:40735":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:49814:2508":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:507:61514":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:38089:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:5443:41294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1680:2212":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:8510:43306":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3188:2278":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12033:49926":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:6081:2084":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:9539:4088":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:2198:60570":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"9:920:3441":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46821:3097":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:7868:3724":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3417:58334":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:50755:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4072:3022":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12730:50538":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:153:3697":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:10894:4119":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:49309:2336":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:5592:3963":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:2424:3987":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:410:52240":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:4335:40698":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3373:2239":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:21756:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:46748:29953":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:2767:2191":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12349:50075":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"14:160:43231":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10139:4100":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:4626:43935":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:50545:2843":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2464:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"4:0:1820":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:9021:44982":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:2984:4002":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:1216:2476":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:2184:57873":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11684:49844":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:50189:3090":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:6674:2748":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4635:40728":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6479:41787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12926:50700":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4417:40705":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:4680:43941":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:48220:2084":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5995:3784":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4139:40677":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4506:40712":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12768:50584":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:48368:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8682:2772":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:6317:3350":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:842:3414":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:11755:52240":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:1931:4087":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13557:51202":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11427:52235":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:2080:2477":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5488:3767":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:2800:2222":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:3792:2464":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6164:3709":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:12073:49929":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:8591:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:54051:19020":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5884:2366":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7037:1978":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:11997:3637":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:6867:2032":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5771:3778":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:1120:2478":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:8631:44976":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5194:43307":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:9671:4062":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:897:2464":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:48085:2464":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:6549:3019":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:7220:40871":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:50580:2846":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11149:45647":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1933:2648":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10854:4137":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:50700:3103":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:13071:51072":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4113:2715":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4307:40695":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:8752:2255":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"9:111:3501":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"12:1555:3621":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:12004:3637":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10721:44987":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5877:2365":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11488:2451":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13024:51065":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8374:2251":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6149:3758":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4126:40676":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10385:4153":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6415:41783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1201:2477":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6276:3736":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:19988:57979":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:2741:2176":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:1473:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:8945:2027":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:51778:2936":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:12372:1870":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:3590:2417":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:50992:2623":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8353:2287":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11343:45829":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"12:1852:2213":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:8853:2335":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:51810:2969":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:6288:3348":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:6537:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:2026:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:5174:2618":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:3949:2422":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:8696:2709":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5672:41364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8688:2720":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8054:2663":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:50293:2545":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4096:40673":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:9885:45200":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:21200:56864":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"12:320:3611":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:8746:2160":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:3986:2406":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:2810:2551":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:5500:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:5223:1970":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:1738:38343":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8560:2765":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:20233:1811":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:49793:2518":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:21251:57800":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7287:3813":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11628:52244":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:2775:2195":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:4135:43756":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1887:38479":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:6386:3120":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:2561:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:5793:3779":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4475:40710":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:7945:9275":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:9592:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:3157:2822":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:50736:3194":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:1943:3298":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12748:50540":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:9681:45093":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2911:2056":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:50035:3083":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:50776:2205":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1623:2214":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6354:3794":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:11021:2828":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:50135:3087":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4398:40704":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"19:0:991":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:47053:2579":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12630:50530":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"12:2053:2475":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:6129:52230":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"6:6524:41790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:1771:4091":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46927:3173":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:46385:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11235:45703":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7350:4032":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11351:2453":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"12:853:2473":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:5009:2162":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:20948:1811":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4551:40717":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:8871:44979":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:5344:56584":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:8579:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:10546:44986":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2607:2261":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6302:41779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7297:3814":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:47233:2601":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:11106:45610":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:20274:1811":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10245:45285":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11054:45601":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:39302:2174":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:7207:2703":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:11087:45609":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:3939:2976":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13184:51108":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"9:863:3442":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6633:56588":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:1642:2896":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:8368:4074":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:2788:2546":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12211:49999":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:7404:3734":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:4988:58378":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"18:719:4235":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13168:51106":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:9857:4125":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5536:3770":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9778:4142":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:625:2542":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:12192:52236":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:4974:58354":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"18:671:4231":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2273:3973":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2900:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:2816:2554":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:48634:3178":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:5511:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11259:45813":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:47248:2602":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7907:3819":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11145:52432":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:47103:2584":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46263:2879":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:4659:40731":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:8339:44974":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7850:3725":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:49081:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4257:40688":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7208:40869":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:8587:2001":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:247:61507":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:48161:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:54119:19024":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:10559:3281":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:521:52238":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:6409:41782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:46939:3174":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13031:51066":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:52065:2970":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:7461:3719":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6269:37354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:2456:4014":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:8596:44975":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11288:45823":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:519:37437":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2970:2483":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:660:4230":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:7084:2060":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:681:4232":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:8162:4123":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:8212:4175":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:21954:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:8526:4156":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21855:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:5510:41354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:11041:2832":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:9446:45052":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:9897:45201":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:9382:45050":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:21236:2991":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:678:8279":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9369:2368":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:50239:2258":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10708:4176":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"15:0:1827":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9371:44983":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:9344:2084":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:5175:43309":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:3081:2288":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:9552:52039":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:6416:2092":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:6277:38260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7958:3754":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:8633:2711":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4461:40709":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:52925:2939":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:515:4243":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5876:41403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12816:50588":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:52531:57017":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:8774:4072":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1067:3394":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5582:41358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:49943:2405":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2757:2186":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7879:2637":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:2947:3295":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6682:3729":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:4658:8283":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4379:40703":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:970:2470":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:12364:1862":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5472:41350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:6755:3416":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"14:40:45428":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9339:4192":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6329:11602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6495:3625":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:11689:30513":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:9108:44983":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:7140:52255":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4361:40701":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4706:40736":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11247:45704":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:50402:2836":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2921:3693":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:6554:41793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46852:3265":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:50963:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:8887:2023":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:11528:45205":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:5199:3348":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:10520:45292":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:2722:2328":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:7024:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"12:98:3609":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:21276:56964":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10221:45283":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:2548:3993":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:590:57887":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6820:2084":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:46569:2815":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11617:49836":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:11954:2332":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:5313:56584":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6032:2738":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:1541:38325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:652:61514":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:1671:1047":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:1824:2407":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:3365:1814":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"18:727:4236":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:7214:40870":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:2500:4003":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:48204:2025":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5835:41401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4231:40685":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:48763:1993":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4294:40693":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8049:2355":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:12357:1857":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5424:3763":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13527:51200":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2218:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11800:49910":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:9616:2202":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11644:52825":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:50387:2833":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:276:2062":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11971:52817":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5568:41324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:49840:2506":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13492:51192":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:5358:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:7411:2570":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4683:40734":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2864:2443":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10973:45427":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2573:2268":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:12366:1864":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:2476:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"12:1534:3620":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:52287:2942":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"12:1845:2212":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:47084:2582":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:50728:3104":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9691:4140":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"12:1832:2025":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:3002:2216":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"12:1872:2216":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13047:51070":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:2465:3398":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8488:2415":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4515:40713":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3963:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3150:2693":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:9336:2364":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11300:45824":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:771:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:4248:3029":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2358:3990":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"20:0:1703":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"16:6855:3803":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12362:1860":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:52689:2959":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5692:41366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:50950:3119":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:6983:2593":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:967:45049":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:48077:2025":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:6124:3757":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:1861:9280":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13091:51074":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:1376:2465":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:7475:3714":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:9108:1811":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:51911:2949":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:53721:2944":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10927:2280":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:47163:2590":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10394:4154":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:716:8281":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:2238:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:10455:4212":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:56987:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4797:40744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:1722:38342":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:1394:2467":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"12:669:2468":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:10810:3089":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:20220:2975":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4745:40740":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:0:1829":{"crate_id":17,"path":["object"],"kind":"module"},"5:3721:2211":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6087:3733":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2736:2178":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13158:51105":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11639:49837":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4346:40699":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6538:41791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2311:3692":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:2830:2561":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4761:40741":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:21624:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:53035:2928":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"14:202:3291":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:4242:2308":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11873:49915":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:6759:3728":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4540:40716":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:8813:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:5519:3769":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:20005:58046":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:20854:57982":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8210:2272":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11485:49725":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:20433:2924":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46799:3269":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"9:827:3439":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8573:2379":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12164:49935":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:1102:2476":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:20276:2346":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12550:50476":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:3001:4001":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:9183:44985":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:48068:2083":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:2784:4000":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4437:40707":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9791:45096":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:53643:2960":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10321:4209":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"12:0:1825":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:4778:40743":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:5606:3772":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:1230:2478":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:7266:40877":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:2730:58381":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4665:40732":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13221:51117":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:7033:2061":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:4212:2148":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:38106:2339":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:4519:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:8309:3064":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:3707:43376":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10207:45274":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:800:42603":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:1111:2477":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:47258:2603":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5498:41352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:9474:51828":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2141:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:50153:3088":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:2648:4004":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:2019:58453":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:1338:2025":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:10466:45288":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:6797:57963":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:11761:49907":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11168:52055":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:6987:2592":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"7:79:42453":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:50712:3107":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:3529:2212":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"12:861:2474":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"9:622:3485":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"15:193:3629":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13231:51118":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:9885:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:538:4245":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2859:3972":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7581:3735":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:951:2212":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:11035:2831":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8418:2257":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:4177:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:2244:3399":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4496:40711":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:62:37054":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"5:6814:2084":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13393:51160":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:3460:2271":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:50942:3118":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:10794:3086":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:707:2831":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7615:3723":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11539:2202":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:50268:3094":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:7545:3738":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:47197:2598":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46490:2045":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:10380:2722":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6785:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13039:51067":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13141:51082":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3418:2249":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:9458:4060":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:3448:43314":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1608:38332":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12134:49933":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8106:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12291:50010":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1825:9269":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"9:896:3444":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:6777:2084":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:8848:2219":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:47002:9799":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:10420:4211":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"12:632:2025":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4312:2313":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:7720:44971":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4250:2309":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:49047:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:12674:50533":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10774:4073":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"12:697:2469":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:3898:2025":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:614:61519":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"12:738:2466":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11897:2715":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4581:40721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12739:50539":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9414:2371":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6448:41786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:8295:44973":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:50416:2839":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3343:2286":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9553:4100":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:49293:2337":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:20007:58042":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12176:49949":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9764:45095":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:2510:2267":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:11953:27533":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:562:44971":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:9582:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:12321:8282":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:2394:2674":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:4900:52375":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10476:45289":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4712:43949":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12756:50582":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3466:52867":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:9469:2528":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:4614:2239":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9894:52252":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7227:3808":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:48482:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6308:3792":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7535:3712":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:751:2211":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13327:51120":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:53967:2932":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:6008:58334":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:2205:2032":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:54104:19023":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:5962:2211":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:50433:2840":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9071:61506":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13354:51122":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13279:51119":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10497:45291":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:13134:51081":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:524:3965":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7266:3811":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:49330:2021":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:7245:3809":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:4740:2155":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:46483:2920":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:1701:38340":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:9509:53311":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:582:2339":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:386:44969":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7255:40876":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5772:41373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4191:40681":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:12349:1850":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:7928:2225":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:39311:2326":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"12:810:2467":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:5210:43306":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:766:4239":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:20323:2796":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5005:2159":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:50089:2532":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2252:3974":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11320:9282":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:49803:2519":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12797:50586":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7215:3807":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11706:52084":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:6502:2580":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:9314:2257":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:11842:3120":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11909:49917":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:6449:58350":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:1971:3396":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:1643:38334":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:49029:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:4740:43953":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:8405:2254":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:2974:2541":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5713:41368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:13126:51080":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8724:11602":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11813:49911":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:7719:1980":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12485:50474":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:9265:2025":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"13:0:1819":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6881:3804":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4527:40714":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2250:2666":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9303:4098":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:9155:44984":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:5687:2447":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:20842:2347":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"14:7:43231":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:50508:2842":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:56961:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51666:56887":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:50889:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1500:38319":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10875:4120":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:2431:1811":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11733:52802":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:47510:2286":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:52765:2966":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46809:3270":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:51862:2961":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:5715:3775":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:1918:2408":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:8581:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6545:41792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10484:9280":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:5831:2591":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13459:51168":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:2245:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:7020:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"14:215:43233":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11606:49835":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11356:45842":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:0:787":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4912:44005":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:50559:2844":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13436:51165":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:9562:2530":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:7166:42323":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2918:2058":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:542:2648":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:5402:3762":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10310:45286":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11368:45843":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4673:40733":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1518:38322":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12948:50702":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6572:41794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4404:43857":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4716:40737":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:5365:3708":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13404:51161":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:11210:2250":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12008:49924":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5927:3782":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4575:40720":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9531:52069":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:11247:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:4516:3261":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7825:3818":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2664:2323":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:771:3413":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:4186:3024":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:21297:56863":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:53985:19014":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:3350:2464":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6998:42164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11217:45652":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5587:41359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"12:119:3613":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:54089:19022":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6101:3707":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:2915:2057":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2674:3994":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:487:37432":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:49853:2507":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4288:43837":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:495:37433":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4834:2170":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:47492:2494":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2470:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:8395:2220":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12617:50478":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:690:4233":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:7822:2829":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:3353:1815":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:9437:2743":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:9698:5808":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11576:49735":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12322:50012":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:6702:2492":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:5390:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:10639:2458":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10108:4117":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:51732:2956":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4904:52379":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:11832:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:12316:53323":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"12:274:60561":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9250:45033":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3226:2280":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:20435:2796":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11841:49913":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:4735:3304":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12860:50632":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:58283:57803":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:21168:2995":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:7907:8275":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:4200:40682":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:2826:2559":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8870:2022":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2402:4009":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:581:37443":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:976:2471":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7055:2212":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11186:45650":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:1629:2215":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2779:2197":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8517:52810":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6322:41781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4968:2155":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:7000:3289":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2839:2566":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4605:40724":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7803:3817":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:10575:3283":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:3130:3168":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:52211:2950":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:6307:3349":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9475:4050":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:1962:4138":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"12:60:60564":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8412:2255":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:21822:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:7237:40873":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11536:45203":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:2659:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:599:61513":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:135:37121":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:3951:2977":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:20402:1811":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9274:2449":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:49875:2527":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12884:50696":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:22386:2870":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:4536:43917":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"0:0:1709":{"crate_id":0,"path":["thiserror"],"kind":"module"},"16:0:1828":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:5758:3777":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:48144:36684":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:8137:44972":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4489:2729":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:9451:53325":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"12:393:60566":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6721:3801":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2332:4008":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"12:725:2465":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:49985:2257":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:12351:1852":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6545:3727":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:3094:2212":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:11836:2707":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:928:2466":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:5610:57788":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:10949:45426":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:4303:3030":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13114:51077":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3457:1963":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:7098:53559":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:47012:9798":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:54181:19026":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2696:3995":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:11603:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13176:51107":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:5450:3765":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7071:3805":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12781:50585":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:6834:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:545:37439":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:4208:43805":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4013:2708":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:5701:2448":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:1707:2721":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2596:4045":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12896:50698":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:4:976":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:12353:1853":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:3680:43373":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:49971:2255":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:4965:2157":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:7922:8278":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:5816:2454":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5541:41357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8929:2024":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:11637:57345":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:21789:2656":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:12278:50004":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10182:45174":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:5534:41356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10845:4177":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8537:2764":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:6209:2365":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12060:49928":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:3400:2247":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:51963:2941":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2652:1818":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5841:40588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6012:3785":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:987:2472":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12374:1872":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11034:45541":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:52111:2958":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7522:53318":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:51941:2937":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11190:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4565:40719":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:9317:4190":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:5639:2444":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:5165:2376":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"7:0:1483":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4534:40715":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7256:3810":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:9576:2533":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7992:3753":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8596:2420":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:49895:2526":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:3249:4126":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:4565:43922":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:50732:3105":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5007:2161":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:215:3367":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11520:3194":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:6989:3288":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:11134:2165":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:12350:1851":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:609:61530":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6597:3799":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:1551:2239":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:2795:2221":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6262:3720":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6713:3731":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:1085:3607":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12874:50634":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9497:56589":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13192:51109":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:4888:58334":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12337:4177":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:7938:2479":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13374:51158":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9751:4141":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:608:37447":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4437:2773":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:47145:2587":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:4902:52377":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:2718:3996":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:571:2653":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5727:41370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12361:50078":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11974:49922":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:36:60558":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:592:37445":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:50704:3106":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:54005:19016":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:4932:2499":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11997:49923":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:3265:2276":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:2816:3999":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9165:61509":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:48406:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:7243:40874":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:50724:3110":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10921:45418":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"18:521:4240":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5739:3776":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:4890:2311":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3267:2277":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"9:586:3482":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"18:644:61514":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:8779:1971":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9658:45092":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:6308:52230":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"12:300:3612":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:13214:51116":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:8991:61503":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:54025:19018":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11512:52294":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:25196:2903":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:2921:2059":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:658:1962":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"12:1840:2211":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"5:1185:2475":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:7447:3718":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:50249:3092":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:8146:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:4705:767":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:48520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:48292:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:46365:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:29512:2899":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:54040:19019":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:2023:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7769:52264":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:5472:3766":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:8628:2710":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:4936:2497":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8114:2687":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:52018:56967":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:5894:58350":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:4298:2307":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:11996:2340":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"6:4179:40679":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:50481:2841":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"9:505:3432":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:9507:2529":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:58262:57793":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:8122:2269":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:507:37435":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:49783:2520":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10583:4077":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:48996:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9526:4089":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4317:40696":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:20407:13461":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:1580:38329":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:2039:3395":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:2273:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:3067:3167":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6450:3626":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4737:40739":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11436:49724":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:49348:57019":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:6972:58445":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:8941:44980":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46868:3096":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7366:3732":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:1404:2468":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5523:41355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:353:3610":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4308:2312":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:56552:3125":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:5684:41365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11559:49732":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:539:37438":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"10:0:1823":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:52355:2930":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"8:0:1821":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:8796:4079":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1600:38331":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2763:2189":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4653:2727":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:6747:2211":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:3182:2825":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:5653:2445":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11070:45602":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13518:51199":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:9306:2452":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:2645:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:50277:3095":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:56948:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4777:43966":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9844:4201":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13413:51164":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:5547:3305":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:53845:2929":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:1714:38341":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:48770:2001":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10434:45287":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:36:3343":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4329:40697":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:39298:3402":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:51981:56960":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7335:3730":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4559:40718":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:131:37120":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:6912:3368":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:5673:2446":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9947:45202":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:2478:3991":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:46875:3266":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:53783:2964":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:8034:3690":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:21921:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:884:2025":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1678:38337":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:10589:3244":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:80:51592":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:8956:2028":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:4348:43849":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:736:4237":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11155:2320":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:2942:2214":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:50259:3093":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10997:45428":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6139:3787":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:8076:2321":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6768:3802":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4644:40729":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:19960:2339":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:2653:2322":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7920:3820":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:8475:4054":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5232:1000":{"crate_id":1,"path":["std","path"],"kind":"module"},"17:8110:44965":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:5870:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7113:3985":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:9382:2369":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:11180:2665":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1049:3393":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6668:3716":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11125:45611":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9031:61501":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:8951:61508":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:8304:3063":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46846:2545":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:11721:52048":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9422:45047":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:96:51593":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:4450:2774":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12909:50699":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:49301:57619":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:11899:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:48444:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:46325:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:21259:57001":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8059:2320":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:47174:2596":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5782:41374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5379:3761":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:48596:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:6434:53296":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:9289:2464":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:3337:2025":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:575:37442":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6037:3989":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4286:40692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:47093:2583":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:8055:4071":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:29506:2493":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7189:3700":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:54014:19017":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10747:2450":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:52611:2971":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:7221:2704":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:11691:52041":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1415:2469":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10159:45176":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11594:49779":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6178:3788":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:53001:2946":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4611:40725":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:11150:52822":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"15:175:3628":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12148:49934":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12609:50477":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:7858:2651":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:8666:44977":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:3167:2919":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2378:2669":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:52333:2927":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:20690:13479":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:29312:3210":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:7415:2572":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12836:50629":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:21041:3135":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:20028:58047":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2583:52258":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:6749:2285":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:3140:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:8677:2769":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10642:4183":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:9504:53321":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4185:40680":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"12:2190:60573":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4421:2770":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9320:2453":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10332:4217":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7934:3721":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11433:52251":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:9398:2370":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6430:41785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2952:2878":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:2771:2193":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2762:3998":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11199:45651":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:646:2464":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8471:2414":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:11324:2151":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:3310:2264":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:10771:3085":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1608:2211":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11014:45540":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13203:51110":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:8241:4179":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12638:50532":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:4808:43973":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9488:4053":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9401:45048":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:52163:2965":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:12360:1858":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:51686:57014":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:10969:2637":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:1348:2464":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:21094:3137":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9587:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5480:41351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5741:41372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:957:2467":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"15:214:3633":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6975:42162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"14:31:43231":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11721:49904":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"12:1518:3619":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:5531:3304":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:6732:2084":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:52430:57009":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:20194:2921":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8066:2665":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:8272:4182":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:8593:1999":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:50720:3109":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2570:4044":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4816:40747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:7965:3402":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:11813:2424":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:699:4234":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:1668:38336":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:9223:45032":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:454:2631":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:47062:2220":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:993:2473":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:21723:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:1635:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"9:956:3440":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:9357:2534":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6323:3713":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:0:1336":{"crate_id":1,"path":["std"],"kind":"module"},"12:834:2472":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:2935:2025":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46769:2907":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4768:40742":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:4690:966":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7095:3984":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:56974:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:29472:2898":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5817:3780":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:8418:4122":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12265:50003":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:1029:2477":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8130:2271":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12022:49925":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9644:4085":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:4059:2239":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12118:49932":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12361:1859":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:21657:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:11333:52046":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:50788:3196":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:29548:3163":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:4206:2150":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:501:37434":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5154:3975":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"9:649:3486":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9577:4092":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:50053:3084":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:9635:2203":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:2656:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13506:51198":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10350:4073":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6654:3715":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12514:50475":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:4332:2331":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:48330:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"12:985:2475":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10506:45263":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:5756:2450":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6219:3790":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:5438:3764":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:1884:5808":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:5749:60107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:4042:3021":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11500:49726":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"9:33:3534":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:9831:4200":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:7289:42352":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9805:4197":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:47284:2604":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4598:40723":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10270:45261":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:52477:56966":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"13:108:60618":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:12365:1863":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12087:49930":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4449:40708":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:20282:2348":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6763:58446":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:2406:2680":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:49774:2516":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12307:50011":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:53391:2972":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:8881:61505":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:9873:45199":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:9892:2663":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:10866:52249":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:2709:2055":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"12:777:3604":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"12:387:60565":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:47299:2594":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:915:2465":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"12:2069:2476":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"12:1628:60559":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:6778:2433":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9274:45035":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10374:4152":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"7:32:42446":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:5819:2456":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1525:38323":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:50365:2830":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:7279:42351":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:49929:3179":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7374:3816":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8622:2709":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2215:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:21363:3154":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:560:37440":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:51756:2948":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:1823:9268":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:4312:2395":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:39262:2357":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:29712:3165":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"5:6879:2482":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13082:51073":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7489:3689":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:7843:52814":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:11787:49909":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:5422:2211":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:420:3677":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:9350:4193":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11576:2201":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:9396:2521":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:21987:3140":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:50613:3184":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:49714:3077":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2380:3986":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:49020:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:20685:2799":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10796:4174":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:50003:2528":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11774:49908":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:1617:2213":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8431:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:4320:2315":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:5619:2239":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3190:2279":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12251:50002":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:6953:37391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:4840:43981":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:14:1940":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:50907:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4206:40528":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6697:4021":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:46429:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12367:1865":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:9433:45046":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:4879:43996":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:6509:41789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:48017:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:2655:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:2268:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:6809:2495":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:8393:4059":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:9517:3804":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4152:40678":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:7413:3750":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:8911:61504":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:1612:2212":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:5699:41367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:3623:43340":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"14:221:43239":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:1886:9287":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:56935:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13594:51243":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9930:45186":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9193:61493":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:4510:43915":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:3151:2577":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:1759:3219":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48254:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9263:45034":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9280:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:11741:57346":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:8608:2421":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:49961:3079":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:47183:2597":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:8526:1963":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6632:3800":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2900:2260":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5503:3768":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:21147:57015":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:5642:3773":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:4253:43826":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:47075:2581":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6807:4026":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:2247:2664":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"12:1836:2084":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:48102:1978":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:47501:32192":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2783:2199":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:2467:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"12:1138:2478":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9601:4090":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:7138:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:4014:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8670:2379":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:53994:19015":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10490:45290":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:7144:3806":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1654:38335":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:48229:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:2968:2215":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:4112:2393":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:47154:2595":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:47540:32196":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:9712:45094":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6030:3786":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5861:41402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4592:40722":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:962:2468":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:7731:53566":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:7887:3726":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:10553:2411":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4115:40675":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6402:52257":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6571:3798":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4300:40694":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10121:4118":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:4318:43843":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:47216:2600":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4399:2768":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10088:45172":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:47207:2599":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10752:4075":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:47032:2506":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3228:2281":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:2432:2358":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:567:37441":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9118:61499":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11853:49914":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:10075:2522":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6794:4025":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:1088:2475":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12348:1849":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5504:41353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:683:8280":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"12:1120:3608":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13478:51174":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13366:51157":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10822:44988":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8141:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:6068:2747":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:11026:2829":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11500:2452":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:20950:2797":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:29534:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:4029:58349":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11547:45204":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:49885:2525":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:448:2630":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"}},"external_crates":{"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"thiserror_impl","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}