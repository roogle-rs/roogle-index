{"root":"0:0:1917","crate_version":"1.0.56","includes_private":false,"index":{"2:12815:21778":{"id":"2:12815:21778","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:23030":{"id":"5:5554:23030","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12867:21491"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12809:21774":{"id":"2:12809:21774","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663","str::rsplitn":"2:12812:21776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44033:8652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12776:26831":{"id":"2:12776:26831","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44221:8664","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:21737":{"id":"2:12756:21737","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:21495":{"id":"2:12870:21495","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33491"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:29081":{"id":"2:12824:29081","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12441:8663","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::matches":"2:12821:2157"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44151:8681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:21734":{"id":"2:12759:21734","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42031:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12794:21768":{"id":"2:12794:21768","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12441:8663","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::split_whitespace":"2:12772:26836","str::rsplit":"2:12800:21772"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43929:3178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:29085":{"id":"2:12835:29085","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:21492":{"id":"2:12868:21492","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:29769":{"id":"5:5543:29769","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:2157":{"id":"2:12821:2157","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12441:8663","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::rmatches":"2:12824:29081"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44133:8680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12797:21770":{"id":"2:12797:21770","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12257:8654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:21735":{"id":"2:12761:21735","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:29087":{"id":"2:12839:29087","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:29092":{"id":"2:12856:29092","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:21733":{"id":"2:12757:21733","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42031:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:29072":{"id":"2:12747:29072","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12800:21772":{"id":"2:12800:21772","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12441:8663","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::split":"2:12794:21768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43947:8648","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12862:29094":{"id":"2:12862:29094","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12402:133","`FromStr`":"2:12401:2238"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12401:2238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12401:2238","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:29767","5:5537:9006","5:5540:29768","5:5543:29769","5:5551:29770","5:5552:29771","5:5553:3201","5:5554:23030","5:5555:23031"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12748:29073":{"id":"2:12748:29073","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:29767":{"id":"5:5536:29767","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2249","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2249","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12767:21760":{"id":"2:12767:21760","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12768:21761"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:21736":{"id":"2:12763:21736","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:29080":{"id":"2:12806:29080","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12441:8663","str::split":"2:12794:21768","prim@char":"1:12032:451","str::split_terminator":"2:12803:29079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43997:8682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:29077":{"id":"2:12766:29077","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1536","crate::ops::IndexMut":"2:3162:3060","str::slice_unchecked":"2:12765:29076"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12780:21147":{"id":"2:12780:21147","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:2983":{"id":"2:12874:2983","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4672:2983"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44237:2984","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12770:27277":{"id":"2:12770:27277","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43905:8669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12750:29074":{"id":"2:12750:29074","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12748:29073"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:26830":{"id":"2:12769:26830","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43899:8670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12803:29079":{"id":"2:12803:29079","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12441:8663","str::split":"2:12794:21768","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7827:127","str::rsplit_terminator":"2:12806:29080"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43979:8683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12827:29082":{"id":"2:12827:29082","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12441:8663","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12830:29083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44079:8678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:29084":{"id":"2:12833:29084","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:29083":{"id":"2:12830:29083","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12441:8663","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::match_indices":"2:12827:29082"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44097:8679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-20:0:1912":{"id":"0:74-20:0:1912","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[248,0],"end":[248,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1912","glob":true}}},"2:12866:21490":{"id":"2:12866:21490","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:21487":{"id":"2:12864:21487","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:29093":{"id":"2:12859:29093","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:29088":{"id":"2:12840:29088","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:29075":{"id":"2:12754:29075","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:20898":{"id":"2:12771:20898","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43915:3177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:873":{"id":"2:12745:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:21149":{"id":"2:12783:21149","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1917":{"id":"0:0:1917","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.56\")]","#![allow(clippy::module_name_repetitions, clippy::needless_lifetimes,\nclippy::return_self_not_must_use, clippy::wildcard_imports)]","#![feature(error_generic_member_access)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:74-20:0:1912"],"is_stripped":false}}},"2:12865:21488":{"id":"2:12865:21488","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39976:21626","Self::is_ascii":"2:12864:21487"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39976:21626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:29771":{"id":"5:5552:29771","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2249","`String`":"5:7535:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2249","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:21761":{"id":"2:12768:21761","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12767:21760"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:29089":{"id":"2:12841:29089","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12466:8658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:29086":{"id":"2:12837:29086","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744":{"id":"2:12744","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12745:873","2:12746:2276","2:12747:29072","2:12748:29073","2:12750:29074","2:12753:21715","2:12754:29075","2:12755:339","2:12756:21737","2:12757:21733","2:12759:21734","2:12761:21735","2:12763:21736","2:12765:29076","2:12766:29077","2:12767:21760","2:12768:21761","2:12769:26830","2:12770:27277","2:12771:20898","2:12772:26836","2:12773:26821","2:12774:25021","2:12775:29078","2:12776:26831","2:12777:21780","2:12780:21147","2:12783:21149","2:12786:2317","2:12790:2275","2:12794:21768","2:12797:21770","2:12800:21772","2:12803:29079","2:12806:29080","2:12809:21774","2:12812:21776","2:12815:21778","2:12818:21779","2:12821:2157","2:12824:29081","2:12827:29082","2:12830:29083","2:12833:29084","2:12835:29085","2:12837:29086","2:12839:29087","2:12840:29088","2:12841:29089","2:12844:29090","2:12847:2858","2:12850:21781","2:12853:29091","2:12856:29092","2:12859:29093","2:12862:29094","2:12864:21487","2:12865:21488","2:12866:21490","2:12867:21491","2:12868:21492","2:12869:21494","2:12870:21495","2:12871:21496","2:12872:29095","2:12874:2983","2:12875:29096"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12774:25021":{"id":"2:12774:25021","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44183:3174","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:29095":{"id":"2:12872:29095","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4671:29095"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44228:8674","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:21496":{"id":"2:12871:21496","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33491"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:3201":{"id":"5:5553:3201","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:21779":{"id":"2:12818:21779","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:339":{"id":"2:12755:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12756:21737","`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:21494":{"id":"2:12869:21494","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:33491"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:2275":{"id":"2:12790:2275","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42031:197","prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:9006":{"id":"5:5537:9006","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:2317":{"id":"2:12786:2317","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42031:197","prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12773:26821":{"id":"2:12773:26821","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12772:26836"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44212:8665","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:2858":{"id":"2:12847:2858","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12753:21715":{"id":"2:12753:21715","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11996:8667"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:29770":{"id":"5:5551:29770","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:23031":{"id":"5:5555:23031","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12868:21492"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746:2276":{"id":"2:12746:2276","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:29091":{"id":"2:12853:29091","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:29096":{"id":"2:12875:29096","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4669:29096"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44246:8675","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:29768":{"id":"5:5540:29768","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844:29090":{"id":"2:12844:29090","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:21780":{"id":"2:12777:21780","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:21776":{"id":"2:12812:21776","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12809:21774","self::pattern":"2:12441:8663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44051:8650","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:21781":{"id":"2:12850:21781","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:8663"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:8659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:8660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12765:29076":{"id":"2:12765:29076","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1536","str::slice_mut_unchecked":"2:12766:29077","crate::ops::Index":"2:39607:3059"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:29078":{"id":"2:12775:29078","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44193:8677","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:21491":{"id":"2:12867:21491","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:26836":{"id":"2:12772:26836","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12773:26821"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44203:8666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:39706:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:7616:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:44858:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:14359:19879":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:13724:19839":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:15546:20653":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"15:0:2049":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3966:3237":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13976:19855":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:3830:15349":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:10766:8654":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4628:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:8050:16306":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1691:10695":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4676:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:2696:15304":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:7644:2981":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12366:16644":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:3217:3029":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:21464:3394":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:41257:8959":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:42147:2200":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2810:15309":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10422:16405":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7651:13538":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:10941:16434":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:1902:2183":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:6484:3013":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12972:16375":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3735:3223":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4585:15864":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7436:16280":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:15184:20624":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:1819:3082":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:15507:20649":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:574:9793":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13334:19340":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:1891:3013":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11215:16471":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:909:3015":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:1789:3014":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:1550:3027":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"20:0:1912":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"6:4922:13347":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:8308:3274":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10097:23918":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:46787:27198":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5816:31505":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:40778:8980":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:9536:28082":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:351:31370":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:11158:3316":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:7277:2280":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:7754:3086":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:10674:2233":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:43899:8670":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6741:10820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:46611:3479":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6819:14465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8814:3315":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12264:16640":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15125:20620":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6764:10805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46167:3405":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2334:9045":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:44051:8650":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43811:8628":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43853:8646":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:9891:16370":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:5877:3013":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:15101:20617":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:40587:3102":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:10246:9140":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:43979:8683":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:2658:2034":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:16123:20825":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"16:4949:15964":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:42347:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11215:21107":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"11:123:31352":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:357:2979":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:40820:8982":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:4050:3244":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:23095:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:43929:3178":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4523:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2209:3119":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:15432:20646":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:14455:19886":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:11966:9128":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:39624:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:102:31357":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:1546:10682":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:42114:2199":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:10957:8652":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:538:20868":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7342:31858":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:5121:16016":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:6194:23947":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:7482:27346":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:7702:15033":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:33320:9019":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:47899:3448":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12273:16420":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:7285:3034":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:14312:19876":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:40737:8976":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:4:1113":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:23126:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:40755:26824":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6700:14460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:2518:3186":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2421:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:42622:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"14:202:8704":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1576:10685":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"14:221:15222":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4906:3299":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:4386:8750":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:7610:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:4252:2233":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6059:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"11:2554:31354":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4637:20919":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:7339:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:507:9786":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11767:16593":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11604:16537":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:12701:16374":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:4958:3206":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11657:16541":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:3280:3195":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:1477:3011":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:5905:16229":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:8247:3040":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5152:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:5825:2995":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:9032:8659":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:1873:2182":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:1917:3029":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:1025:3024":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:7792:16302":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:14251:19872":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:542:2684":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:5746:3335":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:48223:3481":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:2197:16478":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9968:16399":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:32411:2484":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:3764:15331":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13787:19843":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:3315:15320":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:1115:30470":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"11:787:3012":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11516:3223":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"14:187:15220":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:8157:3139":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:564:20869":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11194:16470":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11382:24533":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:3065:15318":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42386:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4480:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:3687:29881":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13491:19351":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:621:2184":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:12035:1150":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:1424:2233":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7694:16296":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:7843:3136":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44652:9168":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"14:160:15212":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:4745:15928":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14021:19858":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:13042:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11065:16447":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:3049:15317":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:16134:20826":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:4841:13336":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:511:16390":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:12872:16367":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:7798:2247":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:2569:2236":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:8253:8963":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46237:3423":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:43873:8676":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:47257:3425":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:42227:3010":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10618:32641":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4914:13346":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2324:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:14470:19887":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:5798:16226":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6901:16269":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13383:19343":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:40377:2984":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:42780:2217":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6012:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:6605:2280":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1703:3261":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12029:16558":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6318:16242":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:15493:20648":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3510:3169":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:38198:9029":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:22003:3396":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6332:16243":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11816:23044":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:1796:3076":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7006:16274":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:43280:3152":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:596:9796":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:36322:9028":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:4899:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:1913:10863":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:14843:20602":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10520:32633":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:21180:8797":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:41783:3214":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:6226:16238":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:483:9782":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6159:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:40746:8977":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4401:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:16098:20823":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:46543:3418":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:44939:8587":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:10329:23271":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:8403:2228":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:15903:20813":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:859:2280":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:40699:8966":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:6811:3389":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:2093:8600":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7651:16294":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41242:8958":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:44524:8703":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10471:32630":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9918:16398":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:41989:3218":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13162:19329":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14439:19885":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:3032:15316":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11051:23327":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:4460:8758":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:44228:8674":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12474:16409":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:914:3016":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6222:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5395:3307":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:7660:16295":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11388:24544":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11269:16449":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:14170:19866":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:1650:10691":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:1815:1187":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:12183:9177":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8006:23971":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:11290:23310":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:5344:29881":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13182:19330":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4939:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6893:31819":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4543:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43519:26888":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:883:3022":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:41760:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:856:3020":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:1685:29881":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46589:3473":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:2472:15295":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4506:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15855:19327":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:7679:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:15087:20616":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:4964:2191":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:44922:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:44672:9164":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4908:13345":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44503:8701":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:21234:27807":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:33613:3387":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:7855:3137":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:33731:9020":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10293:3177":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:475:9781":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:3191:3028":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6351:3536":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6742:15230":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:2911:23302":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4488:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:3594:2233":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:4020:3013":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:7598:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10051:16213":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47647:3442":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13273:19335":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:3343:3014":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:10999:8651":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:590:27185":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:4821:3249":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:7564:3328":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:22326:3521":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"10:44:15188":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:40540:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:6300:8990":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:47291:3474":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:536:31458":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:11484:8642":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:11996:8667":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:41009:3176":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6513:16256":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:4383:3265":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:507:32653":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4789:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:15301:20636":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:7708:16297":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:11517:8643":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:22089:3525":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:4639:20921":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:43772:8629":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13707:19838":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:893:3013":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:5830:16227":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"10:0:2045":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11459:16532":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:10968:21043":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:9479:23270":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:32447:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:43741:8640":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4440:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:31219:8797":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:40869:8986":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:9559:16366":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13663:19837":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4860:13339":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6753:16264":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:16004:20816":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:40839:8984":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13989:19856":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:1063:3025":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:40879:8971":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:42425:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12335:16379":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:40830:8983":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:7128:16277":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:1596:10687":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:32527:2248":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4776:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6261:16240":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13235:19333":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:42759:2208":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7534:16287":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:1923:3030":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"11:1007:3023":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1024:29881":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2622:3179":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8493:2231":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:9790:16395":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:6862:8728":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:8476:2230":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:7931:3047":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12560:16686":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:1516:3017":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7360:31880":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8872:3355":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:21879:3390":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:15671:20661":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11340:20942":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:1051:3025":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41226:8956":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13584:19834":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:14509:19889":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:4042:3243":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:7474:16282":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:48250:8564":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:4641:15872":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6243:16239":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:7451:2970":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:10940:3086":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:7529:16391":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:2972:2341":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1072:3026":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:4744:3254":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6696:15231":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7462:16281":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:44964:27275":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40500:8783":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14181:19867":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:41233:3339":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12356:16643":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:12446:8659":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5648:16218":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:1528:10680":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47021:3459":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:1142:15202":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5068:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4625:3240":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:5384:16211":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5044:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5123:13368":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8292:3264":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:10172:16401":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7503:16284":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:790:3031":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:16146:20827":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:5049:15992":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:42157:2032":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13407:19345":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:40557:27346":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9681:2206":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:32429:8758":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"14:165:15213":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:15253:20631":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:7639:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5052:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4870:13340":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13948:19853":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10822:3139":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:12038:1536":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:9894:2214":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:690:20859":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12784:16418":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44845:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:43997:8682":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:22440:27168":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:14413:19883":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:12455:8661":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:0:2050":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:7619:3014":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:2944:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4698:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:47441:3408":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:660:20856":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:4921:15960":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6279:16241":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:10723:3178":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1301:3024":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:14485:16379":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4830:13335":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:624:32656":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6189:31810":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:10878:8648":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:7668:2968":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4535:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:48345:8571":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13922:19851":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:21854:3400":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15108:20618":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:1760:3066":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4884:13342":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:12051:1639":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:654:9843":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:14208:19869":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:2474:30402":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8385:2195":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:48261:8565":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7613:16292":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9196:21033":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:48322:8570":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:40807:8969":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:9852:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:6467:16253":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:45988:3444":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:10312:28120":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:6837:14466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11369:16483":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2618:15301":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:4417:15816":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7884:16305":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12202:16638":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:645:2989":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11523:16507":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43523:8630":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:430:31376":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:2151:3025":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:8137:3203":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:38308:9031":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:563:9791":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:22741:3229":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9624:16363":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:9888:2216":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12396:16610":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:6117:3159":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:32948:9017":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:46136:3457":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:4159:3267":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:14235:19871":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:15980:20814":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:6204:16237":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10095:23908":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12191:16602":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:2428:15293":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5435:31824":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:6610:3348":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:1087:31373":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:4344:15767":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:10881:16430":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:43039:27354":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:6682:9665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:8239:16316":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:12056:1246":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:2942:8595":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:43824:8644":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11170:24269":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:40493:8782":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:9474:3136":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:4150:8593":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:10530:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13218:19332":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12290:16631":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:11449:16531":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:644:32653":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:21236:27805":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:363:2980":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6718:3304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10803:16412":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:14497:19888":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"14:0:2048":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4434:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:5995:16233":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:7549:8705":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:44360:8696":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5969:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:39560:8598":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:4854:13338":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7906:3008":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:12718:16415":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4740:3250":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8828:3316":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:7026:23046":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6889:14468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:8181:16313":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:21891:27794":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:40406:27298":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12850:16421":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"13:110:31428":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4491:3276":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:2031:16484":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:4986:15977":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10569:32631":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:2169:16518":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4311:3271":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11536:16505":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:2403:3010":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:123:9465":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2662:3189":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:22001:2034":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:9834:2185":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:43264:3150":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5780:3337":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:5992:3333":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:22562:27201":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1455:2280":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:32528:8996":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:3123:2245":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:40383:8747":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:1094:16446":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10775:16411":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:15589:20656":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:7317:30013":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:9892:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:3196:30011":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7597:31666":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:13064:27375":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15527:20651":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13478:19350":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9147:3383":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3323:3183":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12049:1641":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:7343:9742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8842:3317":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9651:16392":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:3127:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:533:9788":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:6960:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:6781:10803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:22654:27122":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:44489:8700":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1821:3083":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:3600:15322":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:12672:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:12031:1033":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12103:16635":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12758:16417":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4616:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:4505:8759":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4724:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:40630:3115":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:4915:3300":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:2907:15313":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14950:20608":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:30657:27274":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6156:16236":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:0:1528":{"crate_id":1,"path":["std"],"kind":"module"},"6:6114:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:40686:3175":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:43064:2205":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:44514:8702":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:3373:8596":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:0:2042":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8190:3175":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:41817:3216":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:15519:20650":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:4469:3275":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11497:16534":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:766:20855":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46274:3478":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:15177:20623":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:21849:2034":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:2993:8995":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:1778:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:11141:16467":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:48281:8567":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:4169:8746":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:2369:15206":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:3738:3047":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:8134:16310":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10207:16402":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:8291:28080":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:12441:8663":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11052:16410":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:2703:30374":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:13765:19842":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46733:27112":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:903:2233":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2492:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:844:3019":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10950:16459":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:10338:24847":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:48360:8572":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:11982:9130":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:44425:8698":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:40677:3057":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2339:15289":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5033:13359":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:22355:3522":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:12146:9175":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11041:16409":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1514:10678":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:44237:2984":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46991:3453":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:6968:16273":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14099:19862":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4764:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15224:20628":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:14001:19857":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:40573:3100":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15235:20629":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:23250:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:7544:16288":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:15133:20621":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:39521:8742":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:634:30001":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4835:15946":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6545:16258":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:44656:9167":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:1505:3016":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44097:8679":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:22134:3526":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:6047:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:22197:2034":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11476:15196":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2406:15292":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:43055:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:8072:16307":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:40394:8786":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:1151:30471":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:2701:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9877:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43082:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:32560:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:10925:16433":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12310:16632":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:880:3012":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:46321:3392":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:10520:2034":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4584:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:22224:26983":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:5023:13358":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6792:16265":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:16049:20819":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:7785:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14698:20596":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:2596:15300":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7054:31791":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13097:19326":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:7752:8964":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:7368:2280":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10962:16453":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:15079:20615":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2933:15314":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:15710:20664":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:4549:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:7540:23905":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6915:16270":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:1160:3026":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:6868:14467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5117:13367":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13684:16595":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6961:14474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14346:19878":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:10916:8649":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3425:3141":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:43311:27355":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:32436:9081":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5982:16232":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:44557:8685":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7391:16279":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:9884:2209":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"5:2983:29852":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11045:23275":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11399:16477":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6376:16247":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5574:16214":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:14122:19863":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:4115:27471":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11632:16539":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:1286:3025":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:3607:3010":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:39750:3001":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13935:19852":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:6426:3339":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12014:21048":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:5982:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4516:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11779:16549":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:11307:23902":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:1203:16454":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:40474:8674":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"11:1107:15201":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6929:16271":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6666:10635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44033:8652":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11998:24215":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12380:16645":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:7582:16291":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:23343:3231":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:6530:29881":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:364:31368":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6386:16248":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:15943:19329":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:39640:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:652:32653":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:501:9785":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2526:15297":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:4798:3255":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4428:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:2370:3127":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7067:31529":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1066:15200":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:2304:3023":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:43104:2207":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6913:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:42542:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:9890:2217":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:40481:8781":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5661:16219":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:42105:2280":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:2722:15305":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:10430:3314":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:435:15261":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13285:19336":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:6983:25186":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:7732:2993":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7523:16286":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:22602:3228":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:9896:2215":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5743:16224":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:7663:2966":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13633:19835":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:41930:27341":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4647:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:3461:15321":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:2380:3132":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8326:3302":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12930:16423":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:5753:3336":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:7492:16283":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:531:20867":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:681:20858":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12053:1637":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:40798:8981":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:2979:29853":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:13309:19338":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:42097:3010":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:6013:9384":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:8352:3252":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:15535:20652":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:3251:16552":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2284:15259":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"14:40:19328":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1541:3013":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15384:20645":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:16062:20820":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:3818:3014":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:9186:21124":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"18:719:20853":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12614:16414":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:5392:8621":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:22212:3530":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"16:4613:15868":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:4309:8616":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:15557:20654":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:3732:3224":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3837:3225":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:4050:29881":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:527:9787":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:22546:27197":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14324:19877":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:10971:8650":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:4920:28115":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:4738:8774":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8011:3190":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:261:32635":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:23064:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10896:16431":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:15:2160":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11439:16497":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:42308:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:10136:3149":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10716:16410":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11743:16591":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6499:16255":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:1486:3012":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11426:16530":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:39611:9034":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:44699:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40620:3116":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:3251:3030":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3936:3235":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:22691:27283":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:43915:3177":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8858:3358":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:40422:8785":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:2704:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4461:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:569:9792":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:6711:14461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:7334:8954":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:7827:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3163:23791":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:39607:3059":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:7218:8973":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:30360:3227":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:4381:8749":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:10805:8641":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:7365:14843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5891:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:32558:8594":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1632:10689":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:2969:15315":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:1040:3023":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"6:6658:9831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:7643:2034":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:12052:16556":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:7580:23328":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5829:13964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40526:8780":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9813:16396":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:7657:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:3339:8744":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11197:3147":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11978:16550":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46867:3441":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47977:3420":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:39789:2485":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:2423:2280":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:6560:31861":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:13244:3534":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4968:13351":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:299:31359":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13463:19349":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:7560:8706":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:10101:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5015:13357":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13121:19327":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:40507:8784":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:21451:3397":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:8213:3178":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:11558:8635":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:9860:16397":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:30715:27165":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:3022:9026":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:4527:15854":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"14:7:15212":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:555:9790":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12596:16413":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11991:16551":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11485:16504":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:15356:20642":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12091:16634":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:21392:3398":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:7604:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:40708:8967":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2949:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:875:3021":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6879:16268":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:2659:8801":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13365:19342":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11027:16441":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4783:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:39782:9036":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6041:16235":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:830:3032":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10657:16409":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:11958:16554":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:9021:23965":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:42773:2216":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:2352:3122":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:1570:10684":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:4557:15860":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:12039:1622":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:48270:8566":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13395:19344":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2707:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6128:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:39728:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8453:2229":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:2670:15303":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14878:20603":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41275:8962":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3255:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:595:16391":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6017:16234":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:32375:3318":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:34273:9025":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:5388:8620":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44664:9169":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:22727:3230":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:1785:8942":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13347:19341":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:2744:15306":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11593:8581":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44203:8666":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:774:3011":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8226:3222":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:7331:2280":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:10985:8653":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:1567:3030":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6798:14462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:40855:8985":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:4377:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4755:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7635:8724":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:588:9795":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:3988:3239":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5897:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10813:32626":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:46118:3451":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:928:3019":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"11:1582:15204":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14786:20600":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:44452:8699":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:3318:9035":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:113:20842":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:15003:20609":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:4266:8765":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:22266:3531":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:42219:2233":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:9026:23919":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10559:16407":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:48101:3475":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6425:16251":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21443:2034":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11256:16481":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:13233:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:6596:3347":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:849:3010":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:1603:15205":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:640:2988":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:256:32621":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:10698:3010":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:886:3033":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"9:0:2044":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:7689:2965":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:3994:3240":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12536:16651":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:5082:23968":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12033:1657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"7:78:15056":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:31191:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:2548:15298":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8169:3143":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:43319:27278":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:3012:9018":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5363:16210":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:5419:16213":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:21571:3395":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:903:3014":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:40446:8788":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:40:3061":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:1534:2233":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:7880:2246":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10315:16365":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15329:20639":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:2973:30445":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8281:3272":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:1758:3065":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14057:19860":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22720:27206":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:3797:15340":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:40458:8675":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:3099:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7862:16304":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12548:16650":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:6484:8970":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:1439:3010":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10137:16400":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:6896:23306":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:3162:3060":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:8850:2233":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:38363:9032":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:671:20857":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8207:3177":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:266:29881":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4700:3301":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:15062:20614":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6120:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:12055:1696":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:15117:20619":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4847:13337":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8545:2233":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"11:1903:3027":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:6943:14473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6934:14472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12180:16637":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11563:16506":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11549:16535":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13754:19841":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:21248:27796":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:43732:8636":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11727:16570":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2336:9046":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:15367:20643":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:515:20866":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:32472:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:44246:8675":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12166:16606":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:837:3018":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:13091:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12445:16652":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"11:2536:31362":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:15267:20632":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:2830:2037":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:1495:3015":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:30623:8723":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:42999:27281":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6086:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46219:3417":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:533:2961":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:6583:16260":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:7738:3085":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:10473:23315":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:7376:2280":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:14266:19873":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:9128:3147":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:7633:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:15027:20611":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:742:3017":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:33790:9022":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:15659:20660":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:48185:3460":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:22753:3232":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43289:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4808:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:7347:29856":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:43027:27110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:15645:20659":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:14221:19870":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:22578:27286":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:32446:2040":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:44668:9170":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:867:3011":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12921:16379":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:48437:8575":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:14296:19875":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:1697:10696":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13202:19331":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12324:16642":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:42168:2971":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"11:1910:3028":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:22360:3520":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15279:20633":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2778:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:21217:27803":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:2443:3013":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:9678:16378":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12220:16421":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:5415:3308":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:15013:20610":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3133:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4375:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:3328:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6569:16259":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15192:20625":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:2154:30002":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:7936:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11345:16485":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:2140:3024":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4578:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15374:20644":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4686:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11168:16469":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:9048:21119":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:38942:9033":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5910:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7915:23789":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12037:1503":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:14399:19882":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12115:16636":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:42269:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:46397:3452":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:14896:20605":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5612:16216":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3670:3220":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:2881:15312":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11155:16468":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:8167:16312":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2418:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:48147:3426":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46513:3412":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5963:16231":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:11800:16569":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:5764:8978":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:7435:3007":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:481:20864":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:2469:3014":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5992:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:8535:2232":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:15244:20630":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12999:16691":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5104:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11321:16409":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11981:23951":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:4889:15952":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1664:10692":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:42244:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:45966:3439":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3201:3197":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:41019:8987":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:44848:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6228:13204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6960:16272":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:2698:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:44676:9165":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13056:16693":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4364:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1538:2280":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11507:16529":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:5075:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8001:23901":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:3160:26699":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:4127:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9759:16394":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4800:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:7535:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:2832:15310":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11307:16479":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:2644:15302":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13322:19339":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:14887:20604":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9164:23948":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:6456:16252":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:482:23304":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:4167:3268":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2380:15291":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:1674:10693":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:11645:16540":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11469:16533":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13648:19836":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3166:23785":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:2440:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:614:32659":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8796:3314":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"11:700:2280":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:4973:1139":{"crate_id":1,"path":["std","path"],"kind":"module"},"1:7923:3188":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:6495:27189":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"7:31:15049":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3394:3159":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10840:24266":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"10:36:31350":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12684:16373":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:4561:8761":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10247:3320":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:14282:19874":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11755:16592":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:4028:3241":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14426:19884":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:3081:8597":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:5088:16007":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42029:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11690:16589":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"11:1676:31381":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:46764:27292":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3603:3013":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7284:2199":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:16016:20817":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:15680:20662":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10852:16429":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:22675:27334":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:8220:3174":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:3184:2233":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:609:32675":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:6818:16266":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2548:31365":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:5760:16225":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:7668:13540":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:33927:9023":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:15842:19326":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:3241:3199":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:14757:20597":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:7838:2380":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5928:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44221:8664":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:43272:27132":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:8281:16317":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:10076:3076":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:7004:29925":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:727:20861":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2368:3126":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6721:16263":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:39803:8739":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:922:3018":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:62:9410":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13882:19848":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:7692:15032":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:5632:3349":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:8891:3353":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"9:486:15077":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:10155:20903":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4932:13348":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:2574:15299":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44183:3174":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:22629:27111":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:9882:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:46686:27335":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15287:20634":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:4235:8764":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5130:13369":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:48307:8569":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:3443:3140":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10953:3310":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:15311:20637":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13676:16597":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:4534:2969":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:7307:3035":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12828:16420":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:1131:30443":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1604:10688":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:8154:16311":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11476:3224":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10432:32639":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1545:3014":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:2711:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5111:13366":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:119:9464":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2487:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:918:3017":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44680:9183":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:8959:3338":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12797:16419":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12050:1638":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:48296:8568":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7736:16299":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:0:2051":{"crate_id":17,"path":["object"],"kind":"module"},"16:5866:16228":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:23188:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13742:19840":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:5009:13356":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:2383:2233":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:11178:9183":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:42464:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11617:16538":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:4444:29902":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4774:15933":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:41033:8988":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4666:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4947:13349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:12222:9176":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11576:16536":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43301:2229":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:939:3020":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:6490:27131":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2695:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:40717:8974":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:8097:16308":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10532:3196":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:5639:3350":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4566:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:48241:8563":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1710:10697":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43504:9156":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15345:20641":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2600:23271":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:44660:9171":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46945:3447":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4635:20917":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:21562:2034":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:736:20854":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:800:3013":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:2144:2957":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:1718:10698":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13083:16694":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12244:16605":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:4381:29902":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:21219:27809":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6927:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:30629:9009":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4449:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6600:16261":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1054:3024":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8920:3354":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5921:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:44151:8681":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:14087:19861":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5322:16193":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4556:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:4411:3159":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:7511:3098":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4902:13344":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3002:3386":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10337:16404":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:4180:3269":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"14:31:15212":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:6872:8729":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"9:237:2229":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:4212:3159":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1896:3014":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:5939:16230":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12432:16653":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:14041:19859":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:5004:3159":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:15321:20638":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13856:19846":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9014:23944":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:12401:2238":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9034:16277":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:2236:30379":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:836:2233":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:9354:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22173:3527":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:4031:3159":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:5568:3311":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:1536:3046":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:10344:27588":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"8:0:2043":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6136:31165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:12466:8658":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:491:32678":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5004:13355":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12009:16409":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7423:2236":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:5650:8727":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:14921:20606":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:15049:20613":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14373:19880":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5140:13370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:14156:19865":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10944:20899":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:42176:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:33134:9016":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6691:14459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5867:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:5712:16222":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"13:226:31429":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:7717:2992":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"14:215:15221":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:2523:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:30589:3042":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43672:26791":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15294:20635":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11243:16482":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15212:20627":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5673:16220":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:4928:16663":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:4806:15941":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6079:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:15689:20663":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:47789:3414":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14765:20598":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:14989:16448":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:1906:2381":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:1501:10676":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:4151:3266":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:44079:8678":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:23219:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:10792:3137":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:5877:8968":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:2450:15294":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:5696:16221":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:30821:27265":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:3482:2185":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:34100:9024":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:5571:3313":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:7621:16293":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11126:16439":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:40650:3138":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14969:20592":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13436:19347":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4745:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:4103:27472":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3410:8599":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12510:16656":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:4092:3010":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:21390:2034":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:10785:32640":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10974:16449":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12953:16376":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6346:16244":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:46635:3480":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11395:16490":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6898:14469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4129:26524":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6687:16262":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4053:15500":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:7622:13534":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:3130:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:22311:2034":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:11034:23317":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:47227:3419":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:7748:8965":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6083:15258":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:2183:30049":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"0:0:1917":{"crate_id":0,"path":["thiserror"],"kind":"module"},"17:11088:16445":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13832:19845":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:3980:3238":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:1883:9055":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6100:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:14934:20607":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4742:3253":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"15:288:15236":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:32415:16316":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:7029:29931":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:1897:27224":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:1521:10679":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4462:15837":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"9:177:15183":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:39976:21626":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8200:3176":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:588:2982":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:10535:3198":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6352:16245":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12746:16416":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"15:327:15241":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:7504:3203":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:34446:9027":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6146:3534":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8330:3304":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:2975:29854":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:46096:3445":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12255:16639":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6804:14463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:43723:8637":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8146:3205":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:13516:19353":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:40545:3101":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4719:15926":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:4450:8757":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:6466:3346":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:7599:23319":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:22637:27218":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8300:3222":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:16160:20828":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:44901:3532":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:4182:3159":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10510:16406":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3366:3204":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6944:31672":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:1270:3023":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13448:19348":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11113:16440":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:15337:20640":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:9541:28611":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4738:3234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11932:16555":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10035:16212":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15200:20626":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12486:16658":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"9:52:15097":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:1591:10686":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6415:16250":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:26190:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:521:20863":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:3500:3142":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:687:3010":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:16180:19339":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:5146:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:7371:14844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6813:14464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12418:16662":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7722:16298":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:548:9789":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:43761:8639":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:7524:8615":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:43009:2205":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:10831:24263":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:23033:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:22614:27295":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:2426:2058":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46256:3472":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:48039:3454":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:12512:8687":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:582:8797":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:15566:20655":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8551:2234":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:7645:13537":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6268:31840":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4038:3242":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:43798:8627":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:41800:3215":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2586:3187":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:4862:15949":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13145:19328":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:710:3016":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:42766:2209":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44212:8665":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:44133:8680":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:6263:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14662:20595":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:41248:3204":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41953:3226":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:10767:3134":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:10843:8655":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:12461:8660":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:3888:15383":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:12206:9174":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"15:394:15248":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:2354:2860":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:21573:3394":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:15160:20622":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13961:19854":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:7848:3134":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:42089:2233":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4351:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4610:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6169:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11313:3321":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:44537:8684":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:12257:8654":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40787:8989":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1734:10699":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8991:21013":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:7269:31842":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:44331:8694":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:6070:23322":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:7388:14845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11701:16590":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:47103:3407":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:281:2249":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11612:15245":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:5688:3159":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"12:0:2047":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10608:16408":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:15747:20667":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"9:450:15078":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:8244:2237":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:5431:3309":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3930:3236":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13419:19346":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10016:16364":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:1883:2233":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4455:13137":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10780:20896":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:40727:8975":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44309:8693":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:401:16389":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:10762:24534":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"15:306:15237":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5634:16217":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:13282:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6401:16249":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13896:19849":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:7901:3009":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12153:16607":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:3491:24322":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:23002:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:41219:26795":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:9349:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11453:21029":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:5403:16212":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"13:0:2041":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:44377:8697":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12459:16449":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:4388:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14145:19864":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13695:16596":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:23788:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:3737:2280":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:15725:20665":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:8921:2201":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6248:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:13337:3036":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:5381:3306":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:7318:16278":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:10067:16368":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:3655:15323":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:2205:3118":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:46012:3404":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:6162:23308":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10915:16432":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:495:9784":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10102:16369":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12659:16371":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:47181:3413":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:44644:9163":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12410:16647":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:15868:20812":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"16:5588:16215":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:39664:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:2788:15308":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:3232:15319":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:45942:3403":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7568:16290":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:2048:3047":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:7554:16289":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7828:16303":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:8237:3213":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:21190:27800":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:38253:9030":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12003:2994":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8286:3273":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:44648:9166":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:580:9794":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:22493:27187":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46066:3440":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:9730:16393":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:3584:16575":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:5051:23968":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:10986:3317":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:7268:3044":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:6249:3349":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:10578:2965":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:637:2987":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:3333:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:80:20840":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:3460:16557":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:13116:8805":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11817:16594":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5941:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"18:0:2052":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:7282:26834":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:599:32666":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:2504:15296":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42159:9113":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6361:16246":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13026:16692":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:707:8661":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:3345:8743":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:1562:3029":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7782:16301":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:4773:16657":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:12572:16655":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:7297:3013":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:8866:2280":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8904:3356":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11014:16442":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:6687:29881":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7513:16285":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:42158:2202":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6540:3343":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13504:19352":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:1556:3028":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:14904:20593":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:11619:15245":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11294:16480":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:3358:27598":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:1639:10690":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6485:16254":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:2542:27364":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:2326:3024":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:12898:16422":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11226:16496":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:44866:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3230:30000":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:22280:9045":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:14778:20599":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:30645:2205":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5974:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4710:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1558:10683":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:945:3021":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4496:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:8205:16315":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12301:16641":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:4473:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4497:15848":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:811:3014":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:5593:3159":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4231:3270":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:96:20841":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:42503:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:43833:8647":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:5727:16223":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:0:2046":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:4893:13343":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:22226:9045":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:42583:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13297:19337":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12140:16608":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:16076:20821":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:5859:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:9886:2208":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:15961:19330":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:12584:16654":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:2359:15290":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:393:15079":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:44346:8695":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:46034:3410":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:10141:3151":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12077:16622":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11675:16588":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11714:16548":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:9069:21105":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4998:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:1315:3026":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13809:19844":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:1682:10694":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:951:3022":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:44193:8677":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:5154:3333":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:16170:19337":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:434:31377":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:1692:3159":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:5885:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:4703:3275":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:44951:8585":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:48375:8573":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:673:2233":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15612:20657":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8562:2235":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:3112:3043":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7090:31778":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:21445:3393":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11537:3225":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14385:19881":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:8115:16309":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15733:20666":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11666:16542":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:149:15264":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:2789:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"18:636:32668":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:5017:15984":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12230:16603":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:7556:15004":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12345:16633":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:4999:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4989:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4814:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:16087:20822":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:14822:20601":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13909:19850":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46467:3406":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40466:2984":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:48398:8574":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:23281:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7768:16300":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:2954:2385":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15037:20612":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:9274:3082":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"11:2352:3025":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:8195:16314":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:46565:3424":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2864:15311":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10988:16444":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:7380:24207":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7102:16276":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46197:3411":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10726:32634":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:10738:3303":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:3915:15386":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:23312:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:832:3015":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3199:3196":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:2562:31355":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7041:31807":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:42235:2280":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:42661:3334":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:10538:3194":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5971:3349":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11945:16553":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4514:8760":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"9:330:15134":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:2231:15196":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:489:9783":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44909:3533":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13869:19847":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:2228:16503":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:3225:3027":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:1507:10677":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12387:16646":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:1537:10681":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1496:10675":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15990:20815":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:6071:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12127:16609":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:15480:20647":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:44736:9184":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:46419:3458":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2529:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:6843:8727":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:11355:20940":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5085:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:40657:8627":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3239:3198":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:32445:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:43843:8645":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14633:20594":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8936:3357":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:41267:8960":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:212:8603":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11001:16443":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:15631:20658":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:43887:8673":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:6844:16267":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:33672:9021":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:2256:30019":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:7112:2288":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"9:507:15081":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:21202:27800":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:7789:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:8274:3217":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11412:16476":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:699:20860":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:2202:3117":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:9971:20902":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10242:16403":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:396:31366":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:10757:20904":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"9:426:15080":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:1887:2280":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:2766:15307":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:3753:3048":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:328:31363":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:10093:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:16109:20824":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:8973:23956":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:14194:19868":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11605:23963":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:3278:3194":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11370:20897":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:755:20862":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:6107:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:6543:3344":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4569:3292":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1566:15203":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:33554:3385":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:43947:8648":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:504:2957":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4603:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11590:16502":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:42008:3219":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:39684:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3494:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:7136:26525":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:44724:3388":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"11:2124:3023":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:2321:15288":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4529:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:6430:3340":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:9943:16377":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:4878:13341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8232:3221":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8984:2960":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:16032:20818":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:32422:28132":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"9:357:15094":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:46367:3446":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10667:32638":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:40436:8787":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:40769:8979":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4824:13334":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2997:3384":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:7468:3099":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:43905:8669":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11144:3315":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:41966:3217":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13254:19334":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:1973:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:43751:8638":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:41846:27331":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4595:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5955:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7498:3097":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6531:16257":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:5500:3310":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4977:13352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:7865:3135":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:2062:3048":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2305:15287":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42080:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:23157:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7015:16275":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:557:2963":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:574:32653":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4955:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:45922:3438":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}