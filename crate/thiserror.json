{"root":"0:0:1746","crate_version":"1.0.40","includes_private":false,"index":{"0:43:1743":{"id":"0:43:1743","crate_id":0,"name":"DisplayAsDisplay","span":{"filename":"src/display.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:44:1853"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:45"]}},"0:15:1852":{"id":"0:15:1852","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[17,4],"end":[19,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:3719":{"id":"2:11975:3719","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4514:3719"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42958:3720","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1746":{"id":"0:0:1746","crate_id":0,"name":"thiserror","span":{"filename":"src/lib.rs","begin":[1,0],"end":[255,1]},"visibility":"public","docs":"[![github]](https://github.com/dtolnay/thiserror)&ensp;[![crates-io]](https://crates.io/crates/thiserror)&ensp;[![docs-rs]](https://docs.rs/thiserror)\n\n[github]: https://img.shields.io/badge/github-8da0cb?style=for-the-badge&labelColor=555555&logo=github\n[crates-io]: https://img.shields.io/badge/crates.io-fc8d62?style=for-the-badge&labelColor=555555&logo=rust\n[docs-rs]: https://img.shields.io/badge/docs.rs-66c2a5?style=for-the-badge&labelColor=555555&logo=docs.rs\n\n<br>\n\nThis library provides a convenient derive macro for the standard library's\n[`std::error::Error`] trait.\n\n[`std::error::Error`]: https://doc.rust-lang.org/std/error/trait.Error.html\n\n<br>\n\n# Example\n\n```rust\n# use std::io;\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum DataStoreError {\n    #[error(\"data store disconnected\")]\n    Disconnect(#[from] io::Error),\n    #[error(\"the data for key `{0}` is not available\")]\n    Redaction(String),\n    #[error(\"invalid header (expected {expected:?}, found {found:?})\")]\n    InvalidHeader {\n        expected: String,\n        found: String,\n    },\n    #[error(\"unknown data store error\")]\n    Unknown,\n}\n```\n\n<br>\n\n# Details\n\n- Thiserror deliberately does not appear in your public API. You get the\n  same thing as if you had written an implementation of `std::error::Error`\n  by hand, and switching from handwritten impls to thiserror or vice versa\n  is not a breaking change.\n\n- Errors may be enums, structs with named fields, tuple structs, or unit\n  structs.\n\n- A `Display` impl is generated for your error if you provide\n  `#[error(\"...\")]` messages on the struct or each variant of your enum, as\n  shown above in the example.\n\n  The messages support a shorthand for interpolating fields from the error.\n\n    - `#[error(\"{var}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.var)`\n    - `#[error(\"{0}\")]`&ensp;⟶&ensp;`write!(\"{}\", self.0)`\n    - `#[error(\"{var:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.var)`\n    - `#[error(\"{0:?}\")]`&ensp;⟶&ensp;`write!(\"{:?}\", self.0)`\n\n  These shorthands can be used together with any additional format args,\n  which may be arbitrary expressions. For example:\n\n  ```rust\n  # use std::i32;\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"invalid rdo_lookahead_frames {0} (expected < {})\", i32::MAX)]\n      InvalidLookahead(u32),\n  }\n  ```\n\n  If one of the additional expression arguments needs to refer to a field of\n  the struct or enum, then refer to named fields as `.var` and tuple fields\n  as `.0`.\n\n  ```rust\n  # use thiserror::Error;\n  #\n  # fn first_char(s: &String) -> char {\n  #     s.chars().next().unwrap()\n  # }\n  #\n  # #[derive(Debug)]\n  # struct Limits {\n  #     lo: usize,\n  #     hi: usize,\n  # }\n  #\n  #[derive(Error, Debug)]\n  pub enum Error {\n      #[error(\"first letter must be lowercase but was {:?}\", first_char(.0))]\n      WrongCase(String),\n      #[error(\"invalid index {idx}, expected at least {} and at most {}\", .limits.lo, .limits.hi)]\n      OutOfBounds { idx: usize, limits: Limits },\n  }\n  ```\n\n- A `From` impl is generated for each variant containing a `#[from]`\n  attribute.\n\n  Note that the variant must not contain any other fields beyond the source\n  error and possibly a backtrace. A backtrace is captured from within the\n  `From` impl if there is a field for it.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[from]\n          source: io::Error,\n          backtrace: Backtrace,\n      },\n  }\n  # };\n  ```\n\n- The Error trait's `source()` method is implemented to return whichever\n  field has a `#[source]` attribute or is named `source`, if any. This is\n  for identifying the underlying lower level error that caused your error.\n\n  The `#[from]` attribute always implies that the same field is `#[source]`,\n  so you don't ever need to specify both attributes.\n\n  Any error type that implements `std::error::Error` or dereferences to `dyn\n  std::error::Error` will work as a source.\n\n  ```rust\n  # use std::fmt::{self, Display};\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      #[source]  // optional if field name is `source`\n      source: anyhow::Error,\n  }\n  #\n  # impl Display for MyError {\n  #     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n  #         unimplemented!()\n  #     }\n  # }\n  ```\n\n- The Error trait's `provide()` method is implemented to provide whichever\n  field has a type named `Backtrace`, if any, as a\n  `std::backtrace::Backtrace`.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  use std::backtrace::Backtrace;\n\n  #[derive(Error, Debug)]\n  pub struct MyError {\n      msg: String,\n      backtrace: Backtrace,  // automatically detected\n  }\n  # };\n  ```\n\n- If a field is both a source (named `source`, or has `#[source]` or\n  `#[from]` attribute) *and* is marked `#[backtrace]`, then the Error\n  trait's `provide()` method is forwarded to the source's `provide` so that\n  both layers of the error share the same backtrace.\n\n  ```rust\n  # const IGNORE: &str = stringify! {\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      Io {\n          #[backtrace]\n          source: io::Error,\n      },\n  }\n  # };\n  ```\n\n- Errors may use `error(transparent)` to forward the source and Display\n  methods straight through to an underlying error without adding an\n  additional message. This would be appropriate for enums that need an\n  \"anything else\" variant.\n\n  ```\n  # use thiserror::Error;\n  #\n  #[derive(Error, Debug)]\n  pub enum MyError {\n      # /*\n      ...\n      # */\n\n      #[error(transparent)]\n      Other(#[from] anyhow::Error),  // source and Display delegate to anyhow::Error\n  }\n  ```\n\n  Another use case is hiding implementation details of an error\n  representation behind an opaque error type, so that the representation is\n  able to evolve without breaking the crate's public API.\n\n  ```\n  # use thiserror::Error;\n  #\n  // PublicError is public, but opaque and easy to keep compatible.\n  #[derive(Error, Debug)]\n  #[error(transparent)]\n  pub struct PublicError(#[from] ErrorRepr);\n\n  impl PublicError {\n      // Accessors for anything we do want to expose publicly.\n  }\n\n  // Private and free to change across minor version of the crate.\n  #[derive(Error, Debug)]\n  enum ErrorRepr {\n      # /*\n      ...\n      # */\n  }\n  ```\n\n- See also the [`anyhow`] library for a convenient single error type to use\n  in application code.\n\n  [`anyhow`]: https://github.com/dtolnay/anyhow","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/thiserror/1.0.40\")]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nreturn_self_not_must_use, clippy :: wildcard_imports,)]","#![feature(provide_any)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:68-20:0:1740"],"is_stripped":false}},"2:11850:802":{"id":"2:11850:802","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11896:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11861:26406":{"id":"2:11861:26406","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:26426":{"id":"2:11873:26426","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11872:26425"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11899:24412":{"id":"2:11899:24412","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11551:3467","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split_whitespace":"2:11877:3580","str::rsplit":"2:11905:26435"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42650:3905","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1852":{"id":"0:18:1852","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[24,4],"end":[26,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11859:31948":{"id":"2:11859:31948","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:31960":{"id":"2:11940:31960","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:31953":{"id":"2:11911:31953","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11551:3467","str::split":"2:11899:24412","prim@char":"1:11896:412","str::split_terminator":"2:11908:31952"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42718:9349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:31952":{"id":"2:11908:31952","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11551:3467","str::split":"2:11899:24412","prim@char":"1:11896:412","`DoubleEndedIterator`":"2:7173:120","str::rsplit_terminator":"2:11911:31953"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42700:9350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:31966":{"id":"2:11958:31966","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5324:32619":{"id":"5:5324:32619","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2074","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:3796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2074","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:3796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11858:21231":{"id":"2:11858:21231","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11119:9334"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:26018":{"id":"2:11885:26018","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[36,0],"end":[41,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2681:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"UnwindSafe","id":"2:8184:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:24:1852"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5341:3928":{"id":"5:5341:3928","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:9":{"id":"0:9","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[8,0],"end":[13,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:12:1852"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11902:3579":{"id":"2:11902:3579","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11375:9322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11971:22556":{"id":"2:11971:22556","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:26435":{"id":"2:11905:26435","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11551:3467","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::split":"2:11899:24412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42668:9316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:22557":{"id":"2:11972:22557","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11888:26020":{"id":"2:11888:26020","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:31957":{"id":"2:11932:31957","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11551:3467","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::rmatch_indices":"2:11935:31958"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42800:9345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11862:26402":{"id":"2:11862:26402","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1856":{"id":"0:59:1856","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[4,4],"end":[4,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3387:1854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11929:31956":{"id":"2:11929:31956","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11551:3467","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:1977"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42872:9348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58:1745":{"id":"0:58:1745","crate_id":0,"name":"ThiserrorProvide","span":{"filename":"src/provide.rs","begin":[3,0],"end":[5,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:59:1856"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:65:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:61"]}},"2:11876:21239":{"id":"2:11876:21239","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42636:3904","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1853":{"id":"0:53:1853","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5244:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[15,0],"end":[20,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:15:1852"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11855:31947":{"id":"2:11855:31947","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11853:31946"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11852:3348":{"id":"2:11852:3348","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11866:26404":{"id":"2:11866:26404","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11945:31963":{"id":"2:11945:31963","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:2095":{"id":"2:11895:2095","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:26437":{"id":"2:11914:26437","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467","str::rsplitn":"2:11917:26439"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42754:9320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:32621":{"id":"5:5331:32621","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:31964":{"id":"2:11946:31964","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11576:9326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:22551":{"id":"2:11969:22551","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1853":{"id":"0:51:1853","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[19,4],"end":[21,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5244:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11860:312":{"id":"2:11860:312","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11861:26406","`u8`":"1:11913:1477"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1853":{"id":"0:49:1853","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[15,4],"end":[15,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"path::Display","id":"1:5244:119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:5342:22553":{"id":"5:5342:22553","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11971:22556"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[22,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:18:1852"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11864:26403":{"id":"2:11864:26403","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40660:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/provide.rs","begin":[7,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Provider","id":"2:3375:1855","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2674:1858","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ThiserrorProvide","id":"0:58:1745","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:63:1856"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:47:1853":{"id":"0:47:1853","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8:1852":{"id":"0:8:1852","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[5,4],"end":[5,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11853:31946":{"id":"2:11853:31946","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:26439":{"id":"2:11917:26439","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11896:412","str::splitn":"2:11914:26437","self::pattern":"2:11551:3467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42772:9318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:31954":{"id":"2:11920:31954","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:1977":{"id":"2:11926:1977","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11551:3467","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::matches":"2:11926:1977"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42854:9347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68-20:0:1740":{"id":"0:68-20:0:1740","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,0],"end":[246,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"thiserror_impl","name":"thiserror_impl","id":"20:0:1740","glob":true}},"2:11874:29054":{"id":"2:11874:29054","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42620:9337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:31958":{"id":"2:11935:31958","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11551:3467","`DoubleEndedIterator`":"2:7173:120","prim@char":"1:11896:412","str::match_indices":"2:11932:31957"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42818:9346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:31959":{"id":"2:11938:31959","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5325:9656":{"id":"5:5325:9656","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11942:31961":{"id":"2:11942:31961","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11871:31950":{"id":"2:11871:31950","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11902:1380","crate::ops::IndexMut":"2:2992:3793","str::slice_unchecked":"2:11870:31949"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:26441":{"id":"2:11882:26441","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5339:32622":{"id":"5:5339:32622","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11891:2137":{"id":"2:11891:2137","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40660:177","prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5340:32623":{"id":"5:5340:32623","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2074","`String`":"5:7192:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2074","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6939:3796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11875:28804":{"id":"2:11875:28804","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11896:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42626:9336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48:1744":{"id":"0:48:1744","crate_id":0,"name":"PathAsDisplay","span":{"filename":"src/display.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:49:1853"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:52","0:50"]}},"0:24:1852":{"id":"0:24:1852","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[24,0],"end":[28,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PathBuf","id":"1:5064:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1853"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11952:2888":{"id":"2:11952:2888","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:31968":{"id":"2:11964:31968","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11849":{"id":"2:11849","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11850:802","2:11851:2096","2:11852:3348","2:11853:31946","2:11855:31947","2:11858:21231","2:11859:31948","2:11860:312","2:11861:26406","2:11862:26402","2:11864:26403","2:11866:26404","2:11868:26405","2:11870:31949","2:11871:31950","2:11872:26425","2:11873:26426","2:11874:29054","2:11875:28804","2:11876:21239","2:11877:3580","2:11878:3578","2:11879:24413","2:11880:31951","2:11881:3266","2:11882:26441","2:11885:26018","2:11888:26020","2:11891:2137","2:11895:2095","2:11899:24412","2:11902:3579","2:11905:26435","2:11908:31952","2:11911:31953","2:11914:26437","2:11917:26439","2:11920:31954","2:11923:31955","2:11926:1977","2:11929:31956","2:11932:31957","2:11935:31958","2:11938:31959","2:11940:31960","2:11942:31961","2:11944:31962","2:11945:31963","2:11946:31964","2:11949:31965","2:11952:2888","2:11955:26442","2:11958:31966","2:11961:31967","2:11964:31968","2:11967:31969","2:11969:22551","2:11970:22555","2:11971:22556","2:11972:22557","2:11973:31970","2:11975:3719","2:11976:31971"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[8,0],"end":[12,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9052:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DisplayAsDisplay","id":"0:43:1743","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":["0:47:1853"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11851:2096":{"id":"2:11851:2096","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/display.rs","begin":[18,0],"end":[22,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"PathAsDisplay","id":"0:48:1744","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Path","id":"1:5176:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1853"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11949:31965":{"id":"2:11949:31965","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11976:31971":{"id":"2:11976:31971","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4511:31971"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42967:9342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44:1853":{"id":"0:44:1853","crate_id":0,"name":"as_display","span":{"filename":"src/display.rs","begin":[5,4],"end":[5,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:11923:31955":{"id":"2:11923:31955","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:22555":{"id":"2:11970:22555","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:26425":{"id":"2:11872:26425","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11873:26426"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11870:31949":{"id":"2:11870:31949","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11902:1380","str::slice_mut_unchecked":"2:11871:31950","crate::ops::Index":"2:2988:3792"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11868:26405":{"id":"2:11868:26405","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9732:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11878:3578":{"id":"2:11878:3578","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11877:3580"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42933:9332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:31962":{"id":"2:11944:31962","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:26442":{"id":"2:11955:26442","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40658:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11571:9328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11961:31967":{"id":"2:11961:31967","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11896:412","self::pattern":"2:11551:3467"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11877:3580":{"id":"2:11877:3580","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11878:3578"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42924:9333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5328:32620":{"id":"5:5328:32620","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7192:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11556:9327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/aserror.rs","begin":[29,0],"end":[34,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsDynError","id":"0:6:1742","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:2667:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"2:2681:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}},"items":["0:21:1852"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5343:22554":{"id":"5:5343:22554","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11972:22557"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7192:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1856":{"id":"0:63:1856","crate_id":0,"name":"thiserror_provide","span":{"filename":"src/provide.rs","begin":[9,4],"end":[11,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3387:1854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1851":{"id":"0:65:1851","crate_id":0,"name":"Sealed","span":{"filename":"src/provide.rs","begin":[14,0],"end":[14,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:12:1852":{"id":"0:12:1852","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[10,4],"end":[12,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11880:31951":{"id":"2:11880:31951","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42914:9344","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11881:3266":{"id":"2:11881:3266","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42942:9331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6:1742":{"id":"0:6:1742","crate_id":0,"name":"AsDynError","span":{"filename":"src/aserror.rs","begin":[4,0],"end":[6,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:8:1852"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"0:25:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:16","0:13","0:19","0:9","0:22"]}},"0:21:1852":{"id":"0:21:1852","crate_id":0,"name":"as_dyn_error","span":{"filename":"src/aserror.rs","begin":[31,4],"end":[33,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"2:2587:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:24413":{"id":"2:11879:24413","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42904:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5323":{"id":"5:5323","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5324:32619","5:5325:9656","5:5328:32620","5:5331:32621","5:5339:32622","5:5340:32623","5:5341:3928","5:5342:22553","5:5343:22554"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11973:31970":{"id":"2:11973:31970","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4513:31970"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42949:9341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25:1851":{"id":"0:25:1851","crate_id":0,"name":"Sealed","span":{"filename":"src/aserror.rs","begin":[43,0],"end":[43,19]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11967:31969":{"id":"2:11967:31969","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11513:126","`FromStr`":"2:11512:2052"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40802:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11512:2052","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11512:2052","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:39611:9632":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:20411:30989":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11282:19638":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13443:20944":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6132:16708":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11508:15721":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11384:3950":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:3907:3966":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:7144:2073":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11907:634":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4945:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5800:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2744:9264":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:3205:3925":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"10:44:15672":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4952:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:11551:3467":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:2319:15765":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:2206:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:8156:16785":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11013:4046":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9917:16981":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:3142:17001":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44582:4161":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10712:17090":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:5754:4063":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:45059:28401":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:11070:21315":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:5553:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7115:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:7616:3702":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:3585:15799":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:6127:23008":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:21096:4158":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:2296:186":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:21748:3958":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10080:17036":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"11:1866:3763":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7411:16752":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:8479:2046":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:41215:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9378:3871":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"8:0:1861":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:6701:9607":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:9822:16942":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:42456:9306":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:9006:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:5367:15735":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:21260:30962":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:491:34798":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:10158:9320":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:11340:9817":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:21760:3961":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:3931:3890":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11109:16894":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:39267:9452":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:39013:28610":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:5772:14484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12536:20192":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12345:20179":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:6302:2101":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13763:20965":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6990:16747":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4929:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11052:3882":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10936:16887":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6571:11298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:10353:27778":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:6053:14566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:45553:4178":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9853:16982":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:21734:3959":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8052:3873":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:1609:32720":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:645:3724":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:46724:9250":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:8443:16859":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46549:4167":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4637:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13791:20967":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3165:3923":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:646:3742":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8270:4031":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:4757:16408":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:21500:28966":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10989:16889":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:38947:3735":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:1609:11343":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:40553:29002":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5690:4066":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:572:10434":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7711:16771":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:6904:16743":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13667:20959":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:7524:3772":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:11556:9327":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9721:16932":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7463:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6935:16744":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6000:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:9431:9779":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:7947:3917":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:7843:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:46701:9249":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:481:21010":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:1832:2047":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13041:20911":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9443:16903":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6321:16716":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:42529:9312":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:42538:9315":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:39020:9423":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:12894:20902":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:961:3754":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:2211:3853":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:5886:16701":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21356:4132":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2765:4122":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11906:633":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:4720:3729":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:4231:205":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:6290:164":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:43369:9804":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:48977:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22108:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:2215:3854":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13689:20961":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10418:3921":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"11:353:33593":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6521:14945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:780:3765":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11910:734":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:3454:3877":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:3244:3921":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:21585:28421":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10478:17051":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:20839:4136":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4571:13834":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:7595:3704":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:10833:4040":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:11903:1459":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:39257:9451":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:21636:29006":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13879:20974":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:13461:20946":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:12167:30741":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9148:34759":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:12194:190":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:40490:3941":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39640:9622":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:690:21005":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:7578:1851":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:5920:204":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:975:16917":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:7289:9393":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11600:19659":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:1978:16954":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:46576:9240":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:39027:9407":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"10:36:33579":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:7702:2293":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:39380:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:1801:3782":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2571:3906":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:43177:9366":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:6910:4058":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:6532:4077":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:10681:17087":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4451:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:31794:2293":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:41697:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4389:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10026:17034":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"15:180:15712":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:12146:9466":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:7434:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:2830:15787":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:8186:2017":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3057:3933":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:4480:16323":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:40794:191":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10125:17013":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:810:3747":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"11:822:3751":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13651:20957":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3375:1855":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:44723:4197":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:39963:3931":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:8230:4002":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:42904:3901":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:1787:16936":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:11105:9769":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:39957:9611":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12770:20899":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11410:19645":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4489:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:2742:15783":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:40596:3953":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:3611:3947":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:8740:4044":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:8605:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:40853:3742":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:11263:23356":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:11264:9816":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:9826:16929":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10626:17085":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:7135:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:39333:9446":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:3436:2003":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:3063:15795":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11921:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:2130:581":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:561:10432":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"9:234:2043":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10428:17079":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:42924:9333":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:10257:16999":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5071:16482":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:40726:3742":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:2166:31113":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:9513:30676":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:42700:9350":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11993:20156":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:39532:9619":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:1518:15686":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:5920:9642":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:10310:4044":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5944:16703":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11920:1112":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4841:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:1064:3756":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2988:3792":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12522:20191":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3204:9266":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42958:3720":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:2186:31116":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42668:9316":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:9069:4089":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:39579:9629":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:9052:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:6535:33678":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9424:16902":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3246:3922":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:9047:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:43401:9806":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:3273:3746":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:0:1868":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:1050:3755":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:45113:28412":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4476:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:4510:16329":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:40975:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:3653:3778":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:48964:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9098:16871":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13612:20954":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:41965:9471":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:11119:9334":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10416:17078":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:919:3747":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12224:20171":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:12461:20187":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8928:3697":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4583:13835":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:6218:16711":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:2909:31695":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:247:34755":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:80:20986":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2803:9670":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:22807:3954":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:4741:30798":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13376:20937":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:45347:4201":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13821:20970":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2936:2070":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6236:16712":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:4402:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:751:3745":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:3741:32720":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:46607:9243":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:4635:4030":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"11:2198:33582":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44600:28365":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:11301:9818":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1073:3757":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:3871:3965":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:41789:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:44338:4183":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:2208:3852":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:42914:9344":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:493:10425":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:12607:20197":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6336:16718":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:7272:3746":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:10545:16889":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2905:15790":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11770:20145":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7335:34098":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13721:20963":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13564:20953":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10283:16998":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:5724:16696":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:733:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4812:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:8489:2047":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:2850:9680":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:3988:3742":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13639:20956":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46596:9242":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4703:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:473:10422":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3983:3972":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:43381:9808":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"13:226:33652":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:7192:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6376:16721":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:96:20987":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:12576:20195":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:40785:9752":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5967:33082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:39287:9444":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:12307:20176":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13181:20920":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8085:3930":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:678:3725":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"9:352:15580":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2905:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11946:20154":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:7467:16755":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2341:3857":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11355:19642":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8746:184":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:1429:3748":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4877:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13698:20962":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6146:192":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6390:16722":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6543:9398":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:42558:9314":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6431:16724":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11319:19640":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:9054:2021":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:8389:16857":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:11895:926":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4261:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:1363:3742":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10721:17054":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:5496:4041":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8101:3874":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:2616:15778":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"14:7:15694":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:5594:16688":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:39490:9296":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:43056:9361":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5917:14532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:2547:27879":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:39279:9342":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:11512:2052":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4820:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:13453:20945":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:40709:2100":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:22141:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12194:20170":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:45012:28492":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7867:3778":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:46427:4164":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:9115:21396":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:40467:153":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:5367:4038":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:39347:9448":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:10006:9309":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:40776:2016":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11911:735":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:8347:2042":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:507:34776":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9383:23693":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:1596:3764":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:669:3748":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4841:4028":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:20394:30958":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:3167:3924":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4681:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:1618:9598":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4872:16427":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4733:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4988:13878":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:42208:9299":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4422:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11461:9253":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5931:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6649:14951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9628:16910":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:6791:14960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:0:1372":{"crate_id":1,"path":["std"],"kind":"module"},"1:3129:24255":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12259:20173":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11845:21518":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11862:23012":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:4568:16339":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5976:16705":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:6930:23313":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40734:2101":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4882:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:42626:9336":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:38806:9684":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:13240:20925":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:11241:21323":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:4386:3705":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:274:33598":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6003:27773":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:4327:16242":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:5759:4075":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:39631:9633":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:45271:4194":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:38821:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:43389:9810":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:7013:31132":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11166:4051":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:20600:4139":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:1574:3746":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:11089:4089":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:1695:11350":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:614:34780":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13857:20972":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12085:20163":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46763:9251":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:738:3744":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:46225:4195":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4520:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:8953:16869":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:42949:9341":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3976:29061":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5786:14485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:8256:16789":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:4702:16401":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6115:32729":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:14:1980":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:3126:31656":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:1225:3756":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4733:3984":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:20626:4140":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4714:13848":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13053:20912":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5305:16668":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10516:17046":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6061:15736":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2720:15782":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:5770:10026":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"14:40:19638":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:5317:4035":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:39570:9628":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:9058:2029":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7042:33720":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1563:2047":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:44444:4196":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:22372:3960":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11615:19660":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44839:4173":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:41949:9472":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4656:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13033:20910":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:41095:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4805:13860":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:5843:3890":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:8256:16834":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:217:9273":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:42428:9305":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:3988:29030":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:2905:31112":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:22042:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:11025:23223":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13678:20960":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:1514:11332":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:12411:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7675:3760":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:903:3745":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:7173:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:4148:2047":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:5904:4079":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:5990:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:39215:9450":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11163:17097":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:4163:9285":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9322:34753":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9453:16904":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:681:21004":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:2611:3916":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9340:16877":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"7:79:15542":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:9959:16985":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:6544:16731":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:41255:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:10079:9316":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:45973:4206":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1534:11335":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7635:16767":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:9064:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46303:4179":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6530:14946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:4976:4063":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1663:11347":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:531:21013":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11897:1493":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:5630:16690":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:2184:28273":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:1550:11337":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:4023:9263":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:21553:28497":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:3916:3745":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9772:16937":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"15:219:15717":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9107:4119":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3778:3952":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:45317:4198":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11861:20149":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:4277:32699":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1451:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:21609:3957":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:39941:29055":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:10134:4050":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:11229:21525":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43576:209":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4981:13877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:9732:220":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3322:3931":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6793:16738":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:42516:9297":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11069:16892":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:13777:20966":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:10626:4032":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:40935:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:2642:15779":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3379:3876":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:4108:3890":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:5402:15731":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:2053:3755":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:8979:34765":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:12622:16891":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:2846:9679":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6351:16719":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10068:17035":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:861:3754":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:2338:187":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:2668:15780":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11199:21322":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:39602:9631":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:5180:9290":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:300:33591":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:8490:16860":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4313:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"14:202:9371":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:2573:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"4:0:1860":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:2453:1851":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10645:21402":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:4172:3999":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:8184:1849":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:40632:3945":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:3121:3762":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:637:3722":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6488:10473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:20841:4134":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12358:20180":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1410:3744":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:3899:15862":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11821:17039":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3189:28247":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4549:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13082:20914":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:8214:16788":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13015:20908":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6662:16734":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:8360:16856":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9653:16948":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13865:20973":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:39702:9638":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:43150:9365":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:599:34784":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:42594:9343":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:9350:34766":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:932:3750":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10580:17083":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2764:15784":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:3155:3761":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3387:1854":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:7449:16754":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11878:21312":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11879:20150":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:3749:15808":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:20563:4138":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:5648:3745":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:4504:4021":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:38861:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:6643:14950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:42620:9337":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:1897:2000":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:48990:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10718:9311":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:6675:32729":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40644:3946":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:6939:3796":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:20434:30987":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:44268:28386":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:1713:9707":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:9899:3742":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4720:13849":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:9617:16911":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10505:17081":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3969:3970":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9986:16986":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:6958:3768":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:6476:4072":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1785:3801":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:39588:29051":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40870:181":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13332:20933":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1713:3746":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:13426:20942":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:4638:4004":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5064:189":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:11915:1475":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:3126:22848":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:6611:11275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:43627:4209":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1716:3990":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4457:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:35:3797":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:42772:9318":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:21698:28364":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:123:10107":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:7481:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:7196:2072":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:39227:28500":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10104:16993":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:42466:9307":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:9886:16956":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:39982:9613":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"11:0:1864":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:955:3753":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2787:9668":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7016:34028":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:3114:2047":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4439:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4366:9425":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8835:4083":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2229:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:8598:16864":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:3266:17019":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:48925:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8997:21328":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44545:4176":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4673:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:30004:9392":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:42377:29060":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6548:4033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:9064:2027":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4070:25869":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:2864:208":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:2791:4121":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10823:16881":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:20639:1851":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:6728:14955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:8996:2003":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:43239:9369":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13356:20935":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:8963:23338":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:48951:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:25617:3955":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:7173:10383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:6607:9625":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10354:17002":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:7565:30992":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:7516:27869":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:1987:182":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:8195:16836":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:1579:3761":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2967:15792":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5741:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:21682:28411":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5813:14525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:11777:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:44937:4165":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:1611:580":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:2807:9672":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43393:9811":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:7087:2050":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:49003:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4871:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:6095:27877":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:40507:3942":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:1555:15688":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8113:3878":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2679:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:10044:9323":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11299:19639":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:481:10423":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:11914:1474":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:41957:29446":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:960:32720":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10670:17077":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"11:834:3752":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5643:16691":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:45617:4163":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:2190:33581":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:8090:16781":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4539:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7519:16760":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7572:33858":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:7099:3741":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11484:19651":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:7251:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:5132:32720":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4410:4004":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6307:16715":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1652:11346":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1520:11333":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4628:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:4560:3969":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3461:3899":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2918:3775":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6757:14957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:39663:9635":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:3872:15859":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12799:20900":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:564:21015":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:3170:9412":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:6363:3730":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:9138:16872":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:9875:2047":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2992:3793":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:671:21003":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:44523:4172":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:8983:16749":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6981:16746":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:3207:3926":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:20680:1851":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4307:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11247:21399":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:1899:11494":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10015:17033":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:8506:2049":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4781:13857":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5722:14518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:624:34775":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:412:163":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"11:632:2047":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:9722:1851":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2343:2890":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"10:0:1863":{"crate_id":10,"path":["adler"],"kind":"module"},"2:2454:9461":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:515:21012":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"13:110:33651":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2301:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5963:16704":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:44693:4193":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8802:4088":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5418:33984":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12646:20199":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5032:16467":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:6850:3930":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11919:1530":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:2448:15771":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:777:15681":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:12592:20196":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:52:15583":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:10649:17086":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4618:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:20808:1851":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5797:33855":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:4728:16403":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:2929:2068":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:39006:16788":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:1527:3890":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:6514:9396":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2781:9669":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:41986:2043":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11556:19656":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9275:34749":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13292:20929":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4429:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:3149:9685":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:7475:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:1567:2101":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:420:15739":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"9:421:15566":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:20813:4130":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:6403:4076":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:42446:9308":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10743:16878":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1194:3755":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:30098:28361":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:2799:9671":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:7535:27873":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:46587:9241":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11090:16893":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6506:16729":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:4904:16435":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:3504:3745":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:12006:20157":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1585:3762":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:44248:28408":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:7511:15518":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10092:17037":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10334:16874":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:5351:4037":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11832:17040":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:43584:193":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:12466:3795":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:7005:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:2808:15786":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10589:17084":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44360:4171":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13488:20949":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:7803:3872":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7029:34033":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7543:16762":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9178:16873":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12059:20161":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41737:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:5557:16686":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10967:16888":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:41657:29004":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:11405:3952":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6767:16737":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:6518:2109":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4353:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:21727:29444":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1509:11331":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:1571:11339":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:43457:9825":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:8142:16784":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:578:10435":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10491:17050":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2546:15775":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:3815:15826":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:8185:2018":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:10598:16888":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:5567:4080":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:6230:204":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43071:9362":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10840:16882":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:13024:20909":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:3147:3763":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:7665:3759":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8181:3940":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10000:17032":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4890:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:2694:15781":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:659:2101":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:755:21008":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:8129:16783":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"18:766:21001":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:11576:9326":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10555:17047":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:8521:16861":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:6888:22635":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:2879:15789":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:5696:28919":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:7557:16763":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:6367:4069":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8144:3903":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:5878:14528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:697:3749":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13219:20923":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:30026:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4900:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5728:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8420:2044":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:5104:16491":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:8610:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4756:3978":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13121:20915":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:11324:9815":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:6442:16725":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5890:14529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:44891:4180":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10052:17014":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:6381:32720":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:43102:9364":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:43249:9370":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10885:16884":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:4677:3982":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:4540:16335":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6460:16726":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:13101:20898":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:41685:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:4092:3995":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2681:226":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40524:3943":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"9:0:1862":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:4574:21257":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:41431:2029":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:2903:31696":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:3946:32720":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:43373:9807":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:6479:4073":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9038:34752":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3676:3950":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:11909:733":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:2686:2187":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:890:3744":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2834:9677":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:487:10424":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5959:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5616:16689":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9478:16922":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6179:16709":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13399:20939":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13433:20943":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:1978:3778":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:44392:4204":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6201:16710":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:2080:3757":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4328:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:7697:16770":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11917:1473":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:1895:9270":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:4576:9438":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:533:3698":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:30602:9457":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:7428:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:1085:15684":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:29781:3956":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:22273:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:7268:22993":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11320:23690":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:39460:3851":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12923:20905":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:4091:9428":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"14:0:1866":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11520:19653":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43640:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11573:19657":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8864:4084":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:10929:27776":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:41015:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:2913:31698":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:2378:15768":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:11912:731":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9907:16984":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:10186:9321":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:1075:31746":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:4000:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6164:34011":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6719:14954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:9577:16918":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:9946:16957":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11899:1037":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4662:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:2502:15773":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:9545:28548":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:1570:3745":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3991:3973":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2499:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:8573:16863":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7683:16769":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:8858:16868":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12483:20188":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11969:20155":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9734:16931":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:44869:4177":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:2359:3862":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2731:2067":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:8823:16867":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:7478:22638":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:1029:3757":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:42754:9320":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:9200:30455":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"11:1044:15683":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"7:0:1520":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:8917:23015":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:320:33589":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:8975:22998":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:30010:9659":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2674:1858":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13233:20924":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:2829:23381":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:9181:3818":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:1082:3758":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:8909:3904":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:2931:15791":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4379:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:39972:9612":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:42854:9347":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:38979:9686":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7065:33990":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11501:15721":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5805:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2675:9265":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:1840:3745":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:8753:16865":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10735:17091":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:41417:2020":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:44493:4184":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:9108:34761":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11532:19654":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8940:21225":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6474:16727":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:1787:3802":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:39751:9640":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10705:17089":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:42437:9304":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13803:20968":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12033:20159":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9380:16900":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:9056:2020":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:10172:9318":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:9088:3882":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:4400:16291":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:1846:3818":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12331:20178":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:5244:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"11:119:33588":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:8109:16782":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9265:16875":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:2760:4120":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:46511:4202":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:45193:4205":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4862:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:4240:9417":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:39366:9443":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:31807:9649":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3877:3964":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:1348:2047":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12634:20198":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12318:20177":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:40609:3944":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:2633:31126":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:4307:3890":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:10205:4039":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4224:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:1628:33595":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:924:3748":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2404:15769":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:8772:4046":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:8296:3981":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:1034:16921":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11924:20153":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:7098:9617":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:2933:2069":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:3604:32720":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:39326:9341":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:3639:2101":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10923:16886":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10940:27871":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2369:3867":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"9:481:15563":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:6948:9255":{"crate_id":5,"path":["alloc","alloc","AllocErrorPanicPayload"],"kind":"struct"},"1:4850:4029":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11785:20146":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:11571:9328":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:11585:19658":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11136:17096":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:3225:15796":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13066:20913":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4237:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22306:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:10615:17075":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6059:13715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2524:15774":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"9:388:15565":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13516:20952":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1872:3764":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:1239:3758":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:6229:32720":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42189:9797":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:5571:16687":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:1440:3749":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5660:14456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40895:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11258:19637":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1848:3819":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9068:34758":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:8667:15731":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:4100:3996":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7244:34074":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3979:3971":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6520:16730":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13169:20919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6594:11272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41715:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:9997:23689":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:39723:3903":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:12219:9467":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:20688:4133":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7682:3821":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:8157:3905":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:387:33602":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:7195:15329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:42933:9332":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:2113:31150":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:7498:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:4899:2007":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:9228:34764":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5920:16702":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4697:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:5847:16700":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:1770:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:43214:9367":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10691:17088":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:6997:2101":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:1604:11342":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5951:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:6326:23349":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:3030:15793":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:860:3767":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7588:16764":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:2226:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:55:15732":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:6615:23349":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:0:1869":{"crate_id":17,"path":["object"],"kind":"module"},"2:2332:180":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:6967:3745":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:5436:4040":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"9:502:15567":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:10668:21432":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4921:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:62:10052":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:42004:29453":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7478:16756":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6671:15710":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:22174:3706":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:8786:4047":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11800:20147":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11476:21438":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4962:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4416:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:41135:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:1992:3779":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4483:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:7644:3726":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13324:20932":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1710:11352":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6743:14956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2474:3913":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:1210:3757":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:40743:2015":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:11721:20144":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11214:21238":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8816:4085":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:4845:16424":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13194:20921":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:13367:20936":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:38903:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10680:3872":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:7201:15330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:812:3766":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4346:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:2572:15776":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:652:34776":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7467:16853":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10047:22636":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:9967:9322":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"11:762:3746":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:3132:24256":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8970:23009":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:1747:11355":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:12133:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12449:20186":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12019:20158":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"11:2069:3756":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13385:20938":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:4908:1028":{"crate_id":1,"path":["std","path"],"kind":"module"},"17:10857:16883":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:8632:16835":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:4596:16343":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9523:16914":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:1419:3747":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:39620:9641":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11901:1350":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:3537:3742":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:677:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11813:17041":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:40845:2047":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:5759:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:499:10426":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10655:3869":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13469:20947":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:39672:9636":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:39934:9609":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11037:16890":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:39304:3720":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3160:31651":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10820:3822":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"14:215:15703":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:45767:4187":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11696:26002":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:4235:9416":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:38986:2065":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:12354:4210":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3241:9267":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6558:16732":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4757:13854":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4396:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:483:27875":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:3445:22404":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11220:17099":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11502:19652":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12496:20189":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:846:2047":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:7791:3871":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:938:3751":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:949:3752":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:531:10429":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11459:19649":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12236:20172":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13257:20927":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45090:28491":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3159:232":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:2594:15777":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9512:16915":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:9866:16949":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"9:445:15564":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:1401:3743":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:7487:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11653:19663":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:42477:9298":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:8778:30069":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:44961:4166":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"11:60:33601":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11913:1477":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2970:9268":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5693:16694":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:6631:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5698:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:3524:2047":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6293:16714":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9641:16923":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3921:3967":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:3782:15817":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13309:20930":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:7094:9618":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6361:16720":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:4078:3890":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:4252:4000":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:640:3723":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12835:20901":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:1852:3761":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:21569:29467":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:4855:3890":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:44462:28366":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11060:16891":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12046:20160":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:3289:3910":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8880:4087":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13135:20916":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:1559:11338":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:41424:2021":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4408:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:39413:9743":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:11089:9767":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7859:16777":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4932:16439":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12158:20168":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12902:20903":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10303:16994":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:2795:4123":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12403:20183":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13419:20941":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:39385:3836":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8134:3902":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:505:10427":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:3935:3969":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8092:3932":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:46567:9239":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:1435:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:5823:14526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:5176:188":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:1723:11353":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11908:736":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8151:3904":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6696:16735":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:574:34776":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:43085:9363":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:7131:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2812:9676":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11391:19644":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:4675:3979":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:20682:4131":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7669:16768":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:9748:16874":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8903:4068":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9312:16876":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:1039:31745":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"3:229:208":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13265:20928":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:20651:4129":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:11434:19647":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2337:15766":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:44314:4191":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:21354:1851":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:20432:30990":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7803:16775":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7132:3835":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4679:3983":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:43445:4124":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:9028:16870":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:5449:9630":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12563:20194":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4322:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12959:20906":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:46622:9244":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10316:16995":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:41055:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12178:20169":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6698:14953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:3176:9411":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:6975:3769":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:985:3755":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:41667:67":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10270:16997":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:5499:4043":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:40658:179":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"18:719:20999":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10377:17000":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8252:4003":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:39519:3902":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:9062:192":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:586:10436":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:39310:9445":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:1541:11336":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46473:4182":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:8244:3949":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4108:3997":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4559:13833":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:42636:3904":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:39340:9447":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13316:20931":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11372:19643":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:20379:30958":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:660:21002":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2490:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:535:34019":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:636:34786":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6943:16745":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11641:19662":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2384:1876":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:20832:1851":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:7528:9616":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10660:16891":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:9534:16913":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:877:3743":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6400:16723":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9409:16901":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:43669:9256":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:6983:31153":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:8164:3901":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11894:369":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:39470:3850":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5000:13880":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:21248:4126":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:725:3743":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:43385:9812":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:1677:11348":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5000:16459":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:7206:9372":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:39550:9626":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9218:16874":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6819:16739":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:6182:4079":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:1727:28999":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:504:3694":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:39560:9627":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40573:28526":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:3640:15800":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:7698:3822":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10946:27872":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:1859:3762":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:9188:34769":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:11916:1476":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:4969:16452":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:594:10437":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:4789:16416":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:521:21009":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10039:16992":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:8180:16787":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:8931:16837":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:393:33603":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:44745:4200":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:2496:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:3300:15797":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:8310:16855":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:2357:3861":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:354:3714":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:9315:9470":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4994:13879":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7851:23364":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:7859:3915":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:3047:15794":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:154:15742":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:39653:9634":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:119:10106":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:6831:23356":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"18:582:9457":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:3352:3890":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:8683:16839":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:386:16851":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10527:17082":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12980:20907":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12282:20174":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:8283:16854":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"13:0:1859":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:3085:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:853:3753":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:6032:4212":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6717:15709":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2493:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:1534:15687":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3673:3951":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:9796:16935":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:4:1002":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:5655:16692":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:39990:9615":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:39206:9414":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:8548:16862":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:12098:20164":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:630:31100":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:3513:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:39510:3790":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:21621:28415":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11902:20152":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9839:16928":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:6079:14567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:7596:16765":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:9973:16958":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:2902:2160":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2587:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43397:9805":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:11143:27866":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:21644:28402":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:113:20988":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:21447:28965":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5382:4039":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8170:3949":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7317:34072":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9018:21373":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11544:19655":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:5683:4065":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1731:11354":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11471:19650":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13659:20958":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7259:2015":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:653:10485":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:30040:28387":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:10440:17080":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10798:16880":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:8420:16858":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:31798:9725":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:39243:9449":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:10650:21412":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:4340:32699":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6254:16713":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:3086:3794":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11422:19646":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:44647:4128":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:2470:15772":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6575:16733":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13249:20926":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:5526:9621":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10458:3702":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:9275:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7488:16757":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11891:20151":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:8291:9327":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2824:9674":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7786:2182":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:10685:9310":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:5690:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4432:4005":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:7437:16753":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:11902:1380":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:2775:9666":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:9683:16933":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4334:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:620:2002":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:38925:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"14:187:15702":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:21661:28395":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9557:16874":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13842:20971":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:4767:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6022:16707":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11001:4045":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:42800:9345":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:9566:16875":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11896:412":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:11900:310":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:9696:16919":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6728:16736":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12372:20181":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:7217:9373":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13812:20969":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10761:16879":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:3722:3746":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:46115:4175":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:10824:21319":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10142:17038":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:0:1870":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1836:2101":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9498:16919":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:22240:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:8495:2048":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2298:15737":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:38881:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:20413:30985":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:44563:28504":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:9596:16916":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:590:29447":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:11375:9322":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4369:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:7446:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:12419:20184":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13344:20934":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:43657:9258":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:3164:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:869:2101":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:10412:3923":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:43228:9368":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:8651:15733":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13506:20951":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:7826:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45429:4186":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10569:17049":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6634:14949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10402:17066":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:1120:15685":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:7590:3703":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"0:0:1746":{"crate_id":0,"path":["thiserror"],"kind":"module"},"1:8218:3944":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:22339:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12138:20167":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13477:20948":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:242:34760":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:42818:9346":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"14:165:15695":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21091:4135":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:44292:4203":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6890:16742":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:4987:23351":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3181:3764":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:1527:11334":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4121:3998":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:13159:20918":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:42204:28285":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:7040:2101":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:2858:9682":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:42967:9342":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:8788:16866":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:540:2726":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:567:10433":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:487:16852":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7837:16776":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9059:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:444:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:913:3746":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:1379:2101":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:5426:9396":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:44793:4185":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12915:20904":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:6546:4078":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:44915:4162":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11628:19661":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:9545:16912":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:727:21007":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"9:325:15619":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:562:16853":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9876:16983":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:13744:20964":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:41295:4064":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4468:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11446:19648":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:41974:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5938:14534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6496:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:22009:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:9933:16959":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:7103:16749":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:1736:2183":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:5779:16698":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6868:34025":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6488:16728":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4766:13855":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:8773:30991":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:5811:16699":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:7509:16759":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:4121:9429":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9488:16920":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"15:198:15713":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:2756:9648":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:5752:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4910:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:11622:9354":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42872:9348":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"9:174:15667":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:5018:23351":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46671:9247":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4795:13859":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4274:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9670:16934":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:6773:14959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6764:14958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:32:15535":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:11033:9824":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12293:20175":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:609:34805":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:4302:9422":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:7659:3727":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4218:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12510:20190":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:4324:3994":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:4357:9424":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"12:0:1865":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4818:16421":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4775:13856":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:8718:16840":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1984:183":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"14:160:15694":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6876:16741":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:43034:9360":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:7034:2101":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:50299:29001":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"18:707:9329":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7796:3869":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:1947:16930":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:50278:29005":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:10635:17076":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:5716:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:39948:3730":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11193:17098":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:46633:9245":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6094:14568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:1065:33587":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:98:33597":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11343:3951":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:42548:9313":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:38759:9269":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:7452:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:10465:17052":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13211:20922":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6079:4210":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:6628:14948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:22075:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:5741:16697":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:42650:3905":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:8794:2047":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2677:224":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3929:3968":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:43405:9824":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:1704:11351":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6327:16717":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3665:3779":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:5716:4067":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:2426:15770":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:546:10430":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4361:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:43262:9351":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:1589:11341":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:2357:15767":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:2854:9681":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:2939:2071":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:9924:3905":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:553:10431":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:271:32720":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4611:3963":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7440:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:1919:16970":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:538:21014":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:41438:2030":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7366:16751":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:11160:21369":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2819:9673":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:2404:31122":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:8848:4086":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:9267:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:6751:4125":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:10117:9317":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:43566:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7743:16772":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:42718:9349":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:30204:28459":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:7942:22992":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:10710:3874":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:1591:3763":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4248:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:6183:3745":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4649:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:1687:11349":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:4312:9423":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9469:16905":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12433:20185":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:40861:2101":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:4759:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:7529:16761":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4301:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9978:3812":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:10415:3925":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10452:17053":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:1681:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2667:218":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:46648:9246":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:1055:31692":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4751:13853":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:39200:3720":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4787:13858":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:8397:2043":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:6580:215":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5945:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:9310:9469":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8437:2045":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:7146:28517":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6700:32710":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:2084:31124":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:7162:3833":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7498:16758":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:6919:33724":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:9060:2030":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11339:19641":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:45583:4181":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:9874:22208":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:43282:9352":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:9895:16955":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:10200:9319":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8758:4045":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:39541:9620":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:39688:9637":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12343:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:557:3700":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:39427:3837":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:43424:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:5582:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:5176:9289":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:5677:16693":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:2933:16996":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4572:21255":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4597:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13145:20917":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"11:1003:3756":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:39397:28517":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9066:2028":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:40718:2047":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5910:14531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:48938:244":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1926:2001":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:877:2047":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11867:3728":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:1138:3758":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:39737:9639":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:42942:9331":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8274:4033":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13499:20950":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:1648:1075":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:4850:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11844:20148":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"15:0:1867":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:8025:16778":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12072:20162":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:7813:3870":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:4570:21253":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"20:0:1740":{"crate_id":20,"path":["thiserror_impl"],"kind":"module"},"2:2502:236":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:2829:9675":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:7386:15490":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6541:14947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:5998:16706":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1645:11345":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2863:9683":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:12385:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:2074:3694":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13411:20940":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:4262:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:7218:15331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8329:2011":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:644:34776":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:815:3750":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:48568:4207":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:4037:15976":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:4412:9426":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:699:21006":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6667:14952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:42608:9340":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:42503:9296":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:525:10428":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:7038:25870":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:1823:3812":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5843:14527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6854:16740":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:39712:9623":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44422:4192":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:2862:15788":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10845:21409":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:6952:2101":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:859:3742":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:4445:16312":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:6654:28284":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2866:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5902:14530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:2840:9678":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:2786:15785":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7757:16773":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46365:4199":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10863:4047":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:9530:27879":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:7175:3834":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:1460:3777":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8810:2101":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:286:2074":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5346:16685":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:5560:4079":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5708:16695":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12113:20165":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:8047:16779":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2770:9667":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:360:3715":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:587:3718":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43619:4208":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11565:9329":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:3397:3875":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:20729:4134":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5386:15733":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8225:4001":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:928:3749":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4727:13850":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"14:31:15694":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:20366:9457":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6243:34071":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:8170:16786":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7767:16774":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:45507:4174":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4743:13852":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:2178:33584":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:38837:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:2537:3914":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7077:16748":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12550:20193":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10222:23695":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:41773:9761":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4501:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10897:16885":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11011:16838":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11234:19636":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:5734:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:31758:4048":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12388:20182":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8236:3993":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10720:23218":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:7579:3716":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:41175:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:6533:9397":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1583:11340":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:1845:3746":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:7937:23341":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8176:3948":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7652:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6512:10306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:1617:11344":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:38720:9410":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:8072:16780":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"14:221:15704":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46686:9248":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7626:16766":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:3446:15798":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43377:9809":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:5331:4036":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:41996:29454":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:29970:3774":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4624:16347":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:7469:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4828:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:11918:780":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:12126:20166":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13625:20955":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4687:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:9048:165":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:736:21000":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:7521:15519":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:30574:181":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:7521:2051":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:2205:2050":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7293:16750":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:40802:208":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"}},"external_crates":{"20":{"name":"thiserror_impl","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}